"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseEditMode = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BaseEditMode =
/*#__PURE__*/
function () {
  function BaseEditMode() {
    _classCallCheck(this, BaseEditMode);

    _defineProperty(this, "state", void 0);
  }

  _createClass(BaseEditMode, [{
    key: "getState",
    value: function getState() {
      return this.state;
    }
  }, {
    key: "updateState",
    value: function updateState(state) {
      var _this = this;

      var prevState = this.state;
      var changedEvents = [];

      if (!this.state || this.state.data !== state.data) {
        changedEvents.push(this.onDataChanged);
      }

      if (!this.state || this.state.modeConfig !== state.modeConfig) {
        changedEvents.push(this.onModeConfigChanged);
      }

      if (!this.state || this.state.selectedIndexes !== state.selectedIndexes) {
        changedEvents.push(this.onSelectedIndexesChanged);
      }

      if (!this.state || this.state.guides !== state.guides) {
        changedEvents.push(this.onGuidesChanged);
      }

      this.state = state;
      changedEvents.forEach(function (fn) {
        return fn.bind(_this)(prevState);
      });
    } // Overridable user interaction handlers

  }, {
    key: "handleClick",
    value: function handleClick(event) {}
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event) {}
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event) {}
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event) {} // Convenience functions to handle state changes

  }, {
    key: "onDataChanged",
    value: function onDataChanged(prevState) {}
  }, {
    key: "onModeConfigChanged",
    value: function onModeConfigChanged(prevState) {}
  }, {
    key: "onSelectedIndexesChanged",
    value: function onSelectedIndexesChanged(prevState) {}
  }, {
    key: "onGuidesChanged",
    value: function onGuidesChanged(prevState) {} // Convenience functions to access state

  }, {
    key: "getData",
    value: function getData() {
      return this.state.data;
    }
  }, {
    key: "getModeConfig",
    value: function getModeConfig() {
      return this.state.modeConfig;
    }
  }, {
    key: "getSelectedIndexes",
    value: function getSelectedIndexes() {
      return this.state.selectedIndexes;
    }
  }, {
    key: "getGuides",
    value: function getGuides() {
      return this.state && this.state.guides;
    }
  }, {
    key: "getCursor",
    value: function getCursor() {
      return this.state && this.state.cursor;
    }
  }, {
    key: "onEdit",
    value: function onEdit(editAction) {
      this.state.onEdit(editAction);
    }
  }, {
    key: "onUpdateGuides",
    value: function onUpdateGuides(guides) {
      this.state.onUpdateGuides(guides);
    }
  }, {
    key: "onUpdateCursor",
    value: function onUpdateCursor(cursor) {
      this.state.onUpdateCursor(cursor);
    }
  }]);

  return BaseEditMode;
}();

exports.BaseEditMode = BaseEditMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZWRpdC1tb2RlLmpzIl0sIm5hbWVzIjpbIkJhc2VFZGl0TW9kZSIsInN0YXRlIiwicHJldlN0YXRlIiwiY2hhbmdlZEV2ZW50cyIsImRhdGEiLCJwdXNoIiwib25EYXRhQ2hhbmdlZCIsIm1vZGVDb25maWciLCJvbk1vZGVDb25maWdDaGFuZ2VkIiwic2VsZWN0ZWRJbmRleGVzIiwib25TZWxlY3RlZEluZGV4ZXNDaGFuZ2VkIiwiZ3VpZGVzIiwib25HdWlkZXNDaGFuZ2VkIiwiZm9yRWFjaCIsImZuIiwiYmluZCIsImV2ZW50IiwiY3Vyc29yIiwiZWRpdEFjdGlvbiIsIm9uRWRpdCIsIm9uVXBkYXRlR3VpZGVzIiwib25VcGRhdGVDdXJzb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztJQXFEYUEsWTs7Ozs7Ozs7Ozs7K0JBRzJCO0FBQ3BDLGFBQU8sS0FBS0MsS0FBWjtBQUNEOzs7Z0NBRVdBLEssRUFBa0M7QUFBQTs7QUFDNUMsVUFBTUMsU0FBUyxHQUFHLEtBQUtELEtBQXZCO0FBQ0EsVUFBTUUsYUFBaUUsR0FBRyxFQUExRTs7QUFDQSxVQUFJLENBQUMsS0FBS0YsS0FBTixJQUFlLEtBQUtBLEtBQUwsQ0FBV0csSUFBWCxLQUFvQkgsS0FBSyxDQUFDRyxJQUE3QyxFQUFtRDtBQUNqREQsUUFBQUEsYUFBYSxDQUFDRSxJQUFkLENBQW1CLEtBQUtDLGFBQXhCO0FBQ0Q7O0FBQ0QsVUFBSSxDQUFDLEtBQUtMLEtBQU4sSUFBZSxLQUFLQSxLQUFMLENBQVdNLFVBQVgsS0FBMEJOLEtBQUssQ0FBQ00sVUFBbkQsRUFBK0Q7QUFDN0RKLFFBQUFBLGFBQWEsQ0FBQ0UsSUFBZCxDQUFtQixLQUFLRyxtQkFBeEI7QUFDRDs7QUFDRCxVQUFJLENBQUMsS0FBS1AsS0FBTixJQUFlLEtBQUtBLEtBQUwsQ0FBV1EsZUFBWCxLQUErQlIsS0FBSyxDQUFDUSxlQUF4RCxFQUF5RTtBQUN2RU4sUUFBQUEsYUFBYSxDQUFDRSxJQUFkLENBQW1CLEtBQUtLLHdCQUF4QjtBQUNEOztBQUNELFVBQUksQ0FBQyxLQUFLVCxLQUFOLElBQWUsS0FBS0EsS0FBTCxDQUFXVSxNQUFYLEtBQXNCVixLQUFLLENBQUNVLE1BQS9DLEVBQXVEO0FBQ3JEUixRQUFBQSxhQUFhLENBQUNFLElBQWQsQ0FBbUIsS0FBS08sZUFBeEI7QUFDRDs7QUFDRCxXQUFLWCxLQUFMLEdBQWFBLEtBQWI7QUFFQUUsTUFBQUEsYUFBYSxDQUFDVSxPQUFkLENBQXNCLFVBQUFDLEVBQUU7QUFBQSxlQUFJQSxFQUFFLENBQUNDLElBQUgsQ0FBUSxLQUFSLEVBQWNiLFNBQWQsQ0FBSjtBQUFBLE9BQXhCO0FBQ0QsSyxDQUVEOzs7O2dDQUNZYyxLLEVBQXlCLENBQUU7OztzQ0FDckJBLEssRUFBK0IsQ0FBRTs7O3dDQUMvQkEsSyxFQUFpQyxDQUFFOzs7dUNBQ3BDQSxLLEVBQWdDLENBQUUsQyxDQUVyRDs7OztrQ0FDY2QsUyxFQUE0QyxDQUFFOzs7d0NBQ3hDQSxTLEVBQTRDLENBQUU7Ozs2Q0FDekNBLFMsRUFBNEMsQ0FBRTs7O29DQUN2REEsUyxFQUE0QyxDQUFFLEMsQ0FFOUQ7Ozs7OEJBQ2lCO0FBQ2YsYUFBTyxLQUFLRCxLQUFMLENBQVdHLElBQWxCO0FBQ0Q7OztvQ0FDb0I7QUFDbkIsYUFBTyxLQUFLSCxLQUFMLENBQVdNLFVBQWxCO0FBQ0Q7Ozt5Q0FDOEI7QUFDN0IsYUFBTyxLQUFLTixLQUFMLENBQVdRLGVBQWxCO0FBQ0Q7OztnQ0FDcUI7QUFDcEIsYUFBTyxLQUFLUixLQUFMLElBQWMsS0FBS0EsS0FBTCxDQUFXVSxNQUFoQztBQUNEOzs7Z0NBQ21CO0FBQ2xCLGFBQU8sS0FBS1YsS0FBTCxJQUFjLEtBQUtBLEtBQUwsQ0FBV2dCLE1BQWhDO0FBQ0Q7OzsyQkFDTUMsVSxFQUFxQztBQUMxQyxXQUFLakIsS0FBTCxDQUFXa0IsTUFBWCxDQUFrQkQsVUFBbEI7QUFDRDs7O21DQUNjUCxNLEVBQXdCO0FBQ3JDLFdBQUtWLEtBQUwsQ0FBV21CLGNBQVgsQ0FBMEJULE1BQTFCO0FBQ0Q7OzttQ0FDY00sTSxFQUFzQjtBQUNuQyxXQUFLaEIsS0FBTCxDQUFXb0IsY0FBWCxDQUEwQkosTUFBMUI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtcbiAgRWRpdEFjdGlvbixcbiAgQ2xpY2tFdmVudCxcbiAgUG9pbnRlck1vdmVFdmVudCxcbiAgU3RhcnREcmFnZ2luZ0V2ZW50LFxuICBTdG9wRHJhZ2dpbmdFdmVudFxufSBmcm9tICcuLi90eXBlcy5qcyc7XG5cbmV4cG9ydCB0eXBlIE1vZGVTdGF0ZTxURGF0YSwgVEd1aWRlcz4gPSB7XG4gIC8vIFRoZSBkYXRhIGJlaW5nIGVkaXRlZCwgdGhpcyBjYW4gYmUgYW4gYXJyYXkgb3IgYW4gb2JqZWN0XG4gIGRhdGE6IFREYXRhLFxuXG4gIC8vIEFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBmb3IgdGhpcyBtb2RlXG4gIG1vZGVDb25maWc6IGFueSxcblxuICAvLyBUaGUgaW5kZXhlcyBvZiB0aGUgc2VsZWN0ZWQgZmVhdHVyZXNcbiAgc2VsZWN0ZWRJbmRleGVzOiBudW1iZXJbXSxcblxuICAvLyBGZWF0dXJlcyB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgZ3VpZGUgZm9yIGVkaXRpbmcgdGhlIGRhdGFcbiAgZ3VpZGVzOiA/VEd1aWRlcyxcblxuICAvLyBUaGUgY3Vyc29yIHR5cGUsIGFzIGEgW0NTUyBDdXJzb3JdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jdXJzb3IpXG4gIGN1cnNvcjogc3RyaW5nLFxuXG4gIC8vIENhbGxiYWNrIHVzZWQgdG8gbm90aWZ5IGFwcGxpY2F0aW9ucyBvZiBhbiBlZGl0IGFjdGlvblxuICBvbkVkaXQ6IChlZGl0QWN0aW9uOiBFZGl0QWN0aW9uPFREYXRhPikgPT4gdm9pZCxcblxuICAvLyBDYWxsYmFjayB1c2VkIHRvIHVwZGF0ZSBndWlkZXNcbiAgb25VcGRhdGVHdWlkZXM6IChndWlkZXM6ID9UR3VpZGVzKSA9PiB2b2lkLFxuXG4gIC8vIENhbGxiYWNrIHVzZWQgdG8gdXBkYXRlIGN1cnNvclxuICBvblVwZGF0ZUN1cnNvcjogKGN1cnNvcjogc3RyaW5nKSA9PiB2b2lkXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEVkaXRNb2RlPFREYXRhLCBUR3VpZGVzPiB7XG4gIC8vIENhbGxlZCBldmVyeSB0aW1lIHNvbWV0aGluZyBpbiBgc3RhdGVgIGNoYW5nZXNcbiAgdXBkYXRlU3RhdGUoc3RhdGU6IE1vZGVTdGF0ZTxURGF0YSwgVEd1aWRlcz4pOiB2b2lkO1xuXG4gIC8vIENhbGxlZCB3aGVuIHRoZSBwb2ludGVyIHdlbnQgZG93biBhbmQgdXAgd2l0aG91dCBkcmFnZ2luZyByZWdhcmRsZXNzIG9mIHdoZXRoZXIgc29tZXRoaW5nIHdhcyBwaWNrZWRcbiAgaGFuZGxlQ2xpY2soZXZlbnQ6IENsaWNrRXZlbnQpOiB2b2lkO1xuXG4gIC8vIENhbGxlZCB3aGVuIHRoZSBwb2ludGVyIG1vdmVkLCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIHBvaW50ZXIgaXMgZG93biwgdXAsIGFuZCB3aGV0aGVyIHNvbWV0aGluZyB3YXMgcGlja2VkXG4gIGhhbmRsZVBvaW50ZXJNb3ZlKGV2ZW50OiBQb2ludGVyTW92ZUV2ZW50KTogdm9pZDtcblxuICAvLyBDYWxsZWQgd2hlbiB0aGUgcG9pbnRlciB3ZW50IGRvd24gb24gc29tZXRoaW5nIHJlbmRlcmVkIGJ5IHRoaXMgbGF5ZXIgYW5kIHRoZSBwb2ludGVyIHN0YXJ0ZWQgdG8gbW92ZVxuICBoYW5kbGVTdGFydERyYWdnaW5nKGV2ZW50OiBTdGFydERyYWdnaW5nRXZlbnQpOiB2b2lkO1xuXG4gIC8vIENhbGxlZCB3aGVuIHRoZSBwb2ludGVyIHdlbnQgZG93biBvbiBzb21ldGhpbmcgcmVuZGVyZWQgYnkgdGhpcyBsYXllciwgdGhlIHBvaW50ZXIgbW92ZWQsIGFuZCBub3cgdGhlIHBvaW50ZXIgaXMgdXBcbiAgaGFuZGxlU3RvcERyYWdnaW5nKGV2ZW50OiBTdG9wRHJhZ2dpbmdFdmVudCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBCYXNlRWRpdE1vZGU8VERhdGEsIFRHdWlkZXM+IGltcGxlbWVudHMgRWRpdE1vZGU8VERhdGEsIFRHdWlkZXM+IHtcbiAgc3RhdGU6IE1vZGVTdGF0ZTxURGF0YSwgVEd1aWRlcz47XG5cbiAgZ2V0U3RhdGUoKTogTW9kZVN0YXRlPFREYXRhLCBUR3VpZGVzPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGU7XG4gIH1cblxuICB1cGRhdGVTdGF0ZShzdGF0ZTogTW9kZVN0YXRlPFREYXRhLCBUR3VpZGVzPikge1xuICAgIGNvbnN0IHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgY2hhbmdlZEV2ZW50czogKChwcmV2U3RhdGU6IE1vZGVTdGF0ZTxURGF0YSwgVEd1aWRlcz4pID0+IHZvaWQpW10gPSBbXTtcbiAgICBpZiAoIXRoaXMuc3RhdGUgfHwgdGhpcy5zdGF0ZS5kYXRhICE9PSBzdGF0ZS5kYXRhKSB7XG4gICAgICBjaGFuZ2VkRXZlbnRzLnB1c2godGhpcy5vbkRhdGFDaGFuZ2VkKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnN0YXRlIHx8IHRoaXMuc3RhdGUubW9kZUNvbmZpZyAhPT0gc3RhdGUubW9kZUNvbmZpZykge1xuICAgICAgY2hhbmdlZEV2ZW50cy5wdXNoKHRoaXMub25Nb2RlQ29uZmlnQ2hhbmdlZCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5zdGF0ZSB8fCB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXhlcyAhPT0gc3RhdGUuc2VsZWN0ZWRJbmRleGVzKSB7XG4gICAgICBjaGFuZ2VkRXZlbnRzLnB1c2godGhpcy5vblNlbGVjdGVkSW5kZXhlc0NoYW5nZWQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc3RhdGUgfHwgdGhpcy5zdGF0ZS5ndWlkZXMgIT09IHN0YXRlLmd1aWRlcykge1xuICAgICAgY2hhbmdlZEV2ZW50cy5wdXNoKHRoaXMub25HdWlkZXNDaGFuZ2VkKTtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuXG4gICAgY2hhbmdlZEV2ZW50cy5mb3JFYWNoKGZuID0+IGZuLmJpbmQodGhpcykocHJldlN0YXRlKSk7XG4gIH1cblxuICAvLyBPdmVycmlkYWJsZSB1c2VyIGludGVyYWN0aW9uIGhhbmRsZXJzXG4gIGhhbmRsZUNsaWNrKGV2ZW50OiBDbGlja0V2ZW50KTogdm9pZCB7fVxuICBoYW5kbGVQb2ludGVyTW92ZShldmVudDogUG9pbnRlck1vdmVFdmVudCk6IHZvaWQge31cbiAgaGFuZGxlU3RhcnREcmFnZ2luZyhldmVudDogU3RhcnREcmFnZ2luZ0V2ZW50KTogdm9pZCB7fVxuICBoYW5kbGVTdG9wRHJhZ2dpbmcoZXZlbnQ6IFN0b3BEcmFnZ2luZ0V2ZW50KTogdm9pZCB7fVxuXG4gIC8vIENvbnZlbmllbmNlIGZ1bmN0aW9ucyB0byBoYW5kbGUgc3RhdGUgY2hhbmdlc1xuICBvbkRhdGFDaGFuZ2VkKHByZXZTdGF0ZTogTW9kZVN0YXRlPFREYXRhLCBUR3VpZGVzPik6IHZvaWQge31cbiAgb25Nb2RlQ29uZmlnQ2hhbmdlZChwcmV2U3RhdGU6IE1vZGVTdGF0ZTxURGF0YSwgVEd1aWRlcz4pOiB2b2lkIHt9XG4gIG9uU2VsZWN0ZWRJbmRleGVzQ2hhbmdlZChwcmV2U3RhdGU6IE1vZGVTdGF0ZTxURGF0YSwgVEd1aWRlcz4pOiB2b2lkIHt9XG4gIG9uR3VpZGVzQ2hhbmdlZChwcmV2U3RhdGU6IE1vZGVTdGF0ZTxURGF0YSwgVEd1aWRlcz4pOiB2b2lkIHt9XG5cbiAgLy8gQ29udmVuaWVuY2UgZnVuY3Rpb25zIHRvIGFjY2VzcyBzdGF0ZVxuICBnZXREYXRhKCk6IFREYXRhIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5kYXRhO1xuICB9XG4gIGdldE1vZGVDb25maWcoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5tb2RlQ29uZmlnO1xuICB9XG4gIGdldFNlbGVjdGVkSW5kZXhlcygpOiBudW1iZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleGVzO1xuICB9XG4gIGdldEd1aWRlcygpOiA/VEd1aWRlcyB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUgJiYgdGhpcy5zdGF0ZS5ndWlkZXM7XG4gIH1cbiAgZ2V0Q3Vyc29yKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUgJiYgdGhpcy5zdGF0ZS5jdXJzb3I7XG4gIH1cbiAgb25FZGl0KGVkaXRBY3Rpb246IEVkaXRBY3Rpb248VERhdGE+KTogdm9pZCB7XG4gICAgdGhpcy5zdGF0ZS5vbkVkaXQoZWRpdEFjdGlvbik7XG4gIH1cbiAgb25VcGRhdGVHdWlkZXMoZ3VpZGVzOiA/VEd1aWRlcyk6IHZvaWQge1xuICAgIHRoaXMuc3RhdGUub25VcGRhdGVHdWlkZXMoZ3VpZGVzKTtcbiAgfVxuICBvblVwZGF0ZUN1cnNvcihjdXJzb3I6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc3RhdGUub25VcGRhdGVDdXJzb3IoY3Vyc29yKTtcbiAgfVxufVxuIl19