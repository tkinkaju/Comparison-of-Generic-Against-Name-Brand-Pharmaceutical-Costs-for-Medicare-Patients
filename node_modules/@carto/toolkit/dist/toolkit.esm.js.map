{"version":3,"file":"toolkit.esm.js","sources":["../src/App.ts","../src/OAuthApp.ts"],"sourcesContent":["import { Credentials } from '@carto/toolkit-core';\nimport { CustomStorage, PublicStorageReader } from '@carto/toolkit-custom-storage';\nimport { Constants, SQL } from '@carto/toolkit-sql';\n\nconst DEFAULT_NAMESPACE = 'toolkit';\n\nexport interface AppOptions {\n  namespace: string;\n  serverUrlTemplate: string;\n  maxApiRequestsRetries: number;\n}\n\nexport const DEFAULT_OPTIONS = {\n  namespace: DEFAULT_NAMESPACE,\n  serverUrlTemplate: Credentials.DEFAULT_SERVER_URL_TEMPLATE,\n  maxApiRequestsRetries: Constants.DEFAULT_MAX_API_REQUESTS_RETRIES\n};\n\nexport interface AuthRequiredProps {\n  SQL: SQL;\n  CustomStorage: CustomStorage;\n}\n\nclass App {\n  protected _customStorage: CustomStorage | null = null;\n  protected _sql: SQL | null = null;\n  private _serverUrlTemplate: string = Credentials.DEFAULT_SERVER_URL_TEMPLATE;\n  private _namespace: string;\n  private _apiKey: string | null = null;\n  private _username: string | null = null;\n  private _maxApiRequestsRetries: number = Constants.DEFAULT_MAX_API_REQUESTS_RETRIES;\n  private _publicStorageReader: PublicStorageReader;\n  private _initPromise: Promise<AuthRequiredProps> | null = null;\n\n  constructor(options: AppOptions = DEFAULT_OPTIONS) {\n    const completeOptions = {\n      ...DEFAULT_OPTIONS,\n      ...options\n    };\n\n    const { namespace, serverUrlTemplate, maxApiRequestsRetries } = completeOptions;\n\n    this._namespace = namespace;\n    this._serverUrlTemplate = serverUrlTemplate;\n    this._maxApiRequestsRetries = maxApiRequestsRetries;\n\n    this._publicStorageReader = new PublicStorageReader(namespace, serverUrlTemplate);\n  }\n\n  /**\n   * Async function that sets the credentials and creates the internal parts.\n   *\n   * @param apiKey The apiKey for your user\n   * @param username The username for your API key\n   */\n  public async setCredentials(apiKey: string, username: string) {\n    if (this._customStorage && this._sql) {\n      return {\n        SQL: this._sql,\n        CustomStorage: this._customStorage\n      };\n    }\n\n    this._apiKey = apiKey;\n    this._username = username;\n\n    const credentials = new Credentials(this._username, this._apiKey, this._serverUrlTemplate);\n    this._customStorage = new CustomStorage(\n      this._namespace,\n      credentials,\n      { maxApiRequestsRetries: this._maxApiRequestsRetries }\n    );\n    this._sql = this._customStorage.getSQLClient();\n\n    this._initPromise = this._customStorage.init()\n      .then(() => {\n        if (this._sql === null || this._customStorage === null) {\n          throw new Error('Something went wrong setting the credentials');\n        }\n\n        return {\n          SQL: this._sql,\n          CustomStorage: this._customStorage\n        };\n      })\n      .catch(() => {\n        throw new Error('Something went wrong initializing custom storage');\n      });\n\n    return this._initPromise;\n  }\n\n  public getCustomStorage(): Promise<CustomStorage> {\n    if (this._initPromise === null) {\n      throw new Error('No auth has been set yet');\n    }\n\n    return this._initPromise.then(({ CustomStorage: cs }) => cs);\n  }\n\n  public getSQL(): Promise<SQL> {\n    if (this._initPromise === null) {\n      throw new Error('No auth has been set yet');\n    }\n\n    return this._initPromise.then(({ SQL: sql }) => sql);\n  }\n\n  protected setApiKey(apiKey: string) {\n    if (this._sql === null || this._customStorage === null) {\n      throw new Error('Cannot update api key if auth not set yet.');\n    }\n\n    this._apiKey = apiKey;\n    this._sql.setApiKey(apiKey);\n    this._customStorage.setApiKey(apiKey);\n\n    return this._initPromise;\n  }\n\n  public get PublicStorageReader(): PublicStorageReader {\n    return this._publicStorageReader;\n  }\n\n  public get username(): string | null {\n    return this._username;\n  }\n\n  public get serverUrlTemplate(): string {\n    return this._serverUrlTemplate;\n  }\n\n  public get namespace(): string {\n    return this._namespace;\n  }\n\n  public get apiKey(): string | null {\n    return this._apiKey;\n  }\n\n}\n\nexport default App;\n","import { OAuth } from '@carto/toolkit-auth';\nimport { AuthParameters } from '@carto/toolkit-auth/dist/types/AuthParameters';\nimport App, { AppOptions, AuthRequiredProps, DEFAULT_OPTIONS } from './App';\n\nexport default class OAuthApp extends App {\n  private _oauth: OAuth | null = null;\n  private _oauthOptions: AuthParameters;\n\n  constructor(oauthOptions: AuthParameters, options: AppOptions = DEFAULT_OPTIONS) {\n    super(options);\n    this._oauthOptions = oauthOptions;\n\n    if (oauthOptions.clientID) {\n      this.initOauth(oauthOptions);\n    }\n  }\n\n  /**\n   * This function will start the OAuth flow, and will inherently call setCredentials.\n   */\n  public async login() {\n    const oauth = this.oauth;\n\n    let token = oauth.token;\n\n    if (oauth.expired) {\n      try {\n        await oauth.login();\n      } catch (e) {\n        throw new Error(`Failed to login (${e.error}): ${e.message}`);\n      }\n\n      token = oauth.token;\n    }\n\n    if (token === null) {\n      throw new Error(`Failed to login, token is null`);\n    }\n\n    return new Promise((resolve, reject) => {\n      this.postLogin(oauth, token!)\n        .then((credentialsPromise) => {resolve(credentialsPromise); })\n        .catch((error) => {reject(error); });\n    });\n  }\n\n  public get oauth(): OAuth {\n    if (this._oauth === null) {\n      throw new Error('No client ID has been specified');\n    }\n\n    return this._oauth;\n  }\n\n  public setClientID(clientID: string) {\n    if (this._oauth) {\n      throw new Error('Cannot set the client ID more than once');\n    }\n\n    if (clientID === undefined) {\n      return;\n    }\n\n    this.initOauth({\n      clientID,\n      ...this._oauthOptions\n    });\n  }\n\n  private initOauth(params: AuthParameters) {\n    this._oauth = new OAuth(params);\n  }\n\n  private async postLogin(oauth: OAuth, token: string): Promise<AuthRequiredProps> {\n    const userInfo = oauth.userInfo;\n\n    if (userInfo === null) {\n      throw new Error(`Failed to get user info`);\n    }\n    let username = null;\n    try {\n      const info = await userInfo.info;\n      username = info.username;\n      this.setupEvents(oauth);\n    } catch (error) {\n      throw new Error(`Failed to get user info: ${error.message}`);\n    }\n\n    return this.setCredentials(token, username);\n  }\n\n  private setupEvents(oauth: OAuth) {\n    oauth.on('tokenUpdated', () => {\n      if (oauth.token === null) {\n        throw new Error('Got a null token after refreshing it');\n      }\n\n      this.setApiKey(oauth.token);\n    });\n  }\n}\n"],"names":["DEFAULT_OPTIONS","namespace","serverUrlTemplate","Credentials","DEFAULT_SERVER_URL_TEMPLATE","maxApiRequestsRetries","Constants","DEFAULT_MAX_API_REQUESTS_RETRIES","options","this","completeOptions","_namespace","_serverUrlTemplate","_maxApiRequestsRetries","_publicStorageReader","PublicStorageReader","App","apiKey","username","_customStorage","_sql","SQL","CustomStorage","_apiKey","_username","credentials","getSQLClient","_initPromise","init","then","_this","Error","catch","_a","setApiKey","Object","oauthOptions","_super","_oauthOptions","clientID","initOauth","__extends","OAuthApp","oauth","token","expired","login","e_1","error","message","Promise","resolve","reject","postLogin","credentialsPromise","_oauth","undefined","params","OAuth","userInfo","info","setupEvents","error_1","setCredentials","on"],"mappings":"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"}