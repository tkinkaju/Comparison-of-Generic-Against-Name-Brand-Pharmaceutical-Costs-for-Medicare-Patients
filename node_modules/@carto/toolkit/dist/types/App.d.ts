import { CustomStorage, PublicStorageReader } from '@carto/toolkit-custom-storage';
import { SQL } from '@carto/toolkit-sql';
export interface AppOptions {
    namespace: string;
    serverUrlTemplate: string;
    maxApiRequestsRetries: number;
}
export declare const DEFAULT_OPTIONS: {
    namespace: string;
    serverUrlTemplate: string;
    maxApiRequestsRetries: number;
};
export interface AuthRequiredProps {
    SQL: SQL;
    CustomStorage: CustomStorage;
}
declare class App {
    protected _customStorage: CustomStorage | null;
    protected _sql: SQL | null;
    private _serverUrlTemplate;
    private _namespace;
    private _apiKey;
    private _username;
    private _maxApiRequestsRetries;
    private _publicStorageReader;
    private _initPromise;
    constructor(options?: AppOptions);
    /**
     * Async function that sets the credentials and creates the internal parts.
     *
     * @param apiKey The apiKey for your user
     * @param username The username for your API key
     */
    setCredentials(apiKey: string, username: string): Promise<AuthRequiredProps>;
    getCustomStorage(): Promise<CustomStorage>;
    getSQL(): Promise<SQL>;
    protected setApiKey(apiKey: string): Promise<AuthRequiredProps> | null;
    get PublicStorageReader(): PublicStorageReader;
    get username(): string | null;
    get serverUrlTemplate(): string;
    get namespace(): string;
    get apiKey(): string | null;
}
export default App;
//# sourceMappingURL=App.d.ts.map