{"version":3,"file":"core.cjs.js","sources":["../src/Credentials.ts","../src/MetricsEvent.ts","../src/utils.ts"],"sourcesContent":["const DEFAULT_USER_NAME = 'username';\nconst DEFAULT_PUBLIC_API_KEY = 'default_public';\nconst DEFAULT_SERVER_URL_TEMPLATE = 'https://{user}.carto.com';\nconst DEFAULT_USER_COMPONENT_IN_URL = '{user}';\n\n/**\n * Build a generic instance of credentials, eg to interact with APIs such as Windshaft or SQL\n * @param username\n * @param apiKey\n * @param serverURL A url pattern with {user}, like default 'https://{user}.carto.com'\n *\n */\nexport class Credentials {\n  private _username: string;\n  private _apiKey: string;\n  private _serverUrlTemplate: string;\n\n  constructor(username: string, apiKey: string, serverUrlTemplate: string = DEFAULT_SERVER_URL_TEMPLATE) {\n    if (!username) {\n      throw new Error('Username is required');\n    }\n\n    if (!apiKey) {\n      throw new Error('Api key is required');\n    }\n\n    this._username = username;\n    this._apiKey = apiKey;\n    this._serverUrlTemplate = serverUrlTemplate;\n  }\n\n  public static get DEFAULT_SERVER_URL_TEMPLATE() {\n    return DEFAULT_SERVER_URL_TEMPLATE;\n  }\n\n  public static get DEFAULT_PUBLIC_API_KEY() {\n    return DEFAULT_PUBLIC_API_KEY;\n  }\n\n  public get username(): string {\n    return this._username;\n  }\n\n  public set username(value: string) {\n    this._username = value;\n  }\n\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  public set apiKey(value: string) {\n    this._apiKey = value;\n  }\n\n  public get serverUrlTemplate(): string {\n    return this._serverUrlTemplate;\n  }\n\n  public set serverUrlTemplate(value: string) {\n    this._serverUrlTemplate = value;\n  }\n\n  public get serverURL(): string {\n    let url = this._serverUrlTemplate.replace(DEFAULT_USER_COMPONENT_IN_URL, this._username);\n    if (!url.endsWith('/')) {\n      url += '/';\n    }\n    return  url;\n  }\n}\n\nexport const defaultCredentials = new Credentials(DEFAULT_USER_NAME, DEFAULT_PUBLIC_API_KEY);\n\nexport function setDefaultCredentials(credentials: { username: string, apiKey: string, serverUrlTemplate: string }) {\n  defaultCredentials.username = credentials.username;\n  defaultCredentials.apiKey = credentials.apiKey || DEFAULT_PUBLIC_API_KEY;\n  defaultCredentials.serverUrlTemplate = credentials.serverUrlTemplate || DEFAULT_SERVER_URL_TEMPLATE;\n}\n","\nimport { uuidv4 } from './utils';\n\n// Custom CARTO headers, for metrics at API level\n// Double check they are valid for the API (eg. allowed for CORS requests)\nconst CUSTOM_HEADER_EVENT_SOURCE = 'Carto-Event-Source';\nconst CUSTOM_HEADER_EVENT = 'Carto-Event';\nconst CUSTOM_HEADER_EVENT_GROUP_ID = 'Carto-Event-Group-Id';\n\n/**\n * Class to represent a relevant event, identifying several relevant properties\n * of it: source, name and group-id\n */\nclass MetricsEvent {\n  public source: string;\n  public name: string;\n  public groupId: string;\n\n  constructor(source: string, name: string, groupId: string = uuidv4()) {\n    this.source = source;\n    this.name = name;\n    this.groupId = groupId;\n  }\n\n  public getHeaders() {\n    return [\n      [CUSTOM_HEADER_EVENT_SOURCE, this.source],\n      [CUSTOM_HEADER_EVENT, this.name],\n      [CUSTOM_HEADER_EVENT_GROUP_ID, this.groupId],\n    ];\n  }\n}\n\nexport default MetricsEvent;\n","/**\n * Unique Identifier v4\n * Adapted from https://stackoverflow.com/a/2117523/251834\n */\nexport function uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    // tslint:disable-next-line: no-bitwise\n    const r = Math.random() * 16 | 0;\n    // tslint:disable-next-line: no-bitwise\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n"],"names":["Credentials","[object Object]","username","apiKey","serverUrlTemplate","Error","this","_username","_apiKey","_serverUrlTemplate","DEFAULT_SERVER_URL_TEMPLATE","DEFAULT_PUBLIC_API_KEY","value","serverURL","url","replace","endsWith","defaultCredentials","source","name","groupId","c","r","Math","random","toString","credentials"],"mappings":"0EAYaA,EAKXC,YAAYC,EAAkBC,EAAgBC,EAfZ,4BAgBhC,IAAKF,EACH,MAAM,IAAIG,MAAM,wBAGlB,IAAKF,EACH,MAAM,IAAIE,MAAM,uBAGlBC,KAAKC,UAAYL,EACjBI,KAAKE,QAAUL,EACfG,KAAKG,mBAAqBL,EAGrBM,yCACL,MA9BgC,2BAiC3BC,oCACL,MAnC2B,iBAsC7BT,eACE,OAAOI,KAAKC,UAGdL,aAAoBU,GAClBN,KAAKC,UAAYK,EAGnBT,aACE,OAAOG,KAAKE,QAGdL,WAAkBS,GAChBN,KAAKE,QAAUI,EAGjBR,wBACE,OAAOE,KAAKG,mBAGdL,sBAA6BQ,GAC3BN,KAAKG,mBAAqBG,EAG5BC,gBACE,IAAIC,EAAMR,KAAKG,mBAAmBM,QA7DA,SA6DuCT,KAAKC,WAI9E,OAHKO,EAAIE,SAAS,OAChBF,GAAO,KAEDA,SAICG,EAAqB,IAAIjB,EAxEZ,WACK,6DCY/B,MAKEC,YAAYiB,EAAgBC,EAAcC,ECbnC,uCAAuCL,QAAQ,QAAUM,IAE9D,MAAMC,EAAoB,GAAhBC,KAAKC,SAAgB,EAG/B,OADgB,MAANH,EAAYC,EAAS,EAAJA,EAAU,GAC5BG,SAAS,ODSlBnB,KAAKY,OAASA,EACdZ,KAAKa,KAAOA,EACZb,KAAKc,QAAUA,EAGVnB,aACL,MAAO,CACL,CArB6B,qBAqBAK,KAAKY,QAClC,CArBsB,cAqBAZ,KAAKa,MAC3B,CArB+B,uBAqBAb,KAAKc,gFD8CJM,GACpCT,EAAmBf,SAAWwB,EAAYxB,SAC1Ce,EAAmBd,OAASuB,EAAYvB,QA3EX,iBA4E7Bc,EAAmBb,kBAAoBsB,EAAYtB,mBA3EjB"}