import { Credentials, MetricsEvent } from '@carto/toolkit-core';
import DDL, { ColumConfig, CreateConfig, DropOptions } from './DDL';
import { Pair } from './QueryManager';
export declare class SQL {
    private _copyToManager;
    private _queryManager;
    private _copyFromManager;
    private _publicQueryManager;
    private _publicRole?;
    private _credentials;
    constructor(credentials: Credentials, { maxApiRequestsRetries }?: {
        maxApiRequestsRetries?: number;
    });
    static get DDL(): typeof DDL;
    copyFrom(csv: string, tableName: string, fields: string[], options?: {
        event?: MetricsEvent;
    }): Promise<unknown>;
    exportURL(q: string): string;
    query(q: string, options?: {
        extraParams?: Array<Pair<string>>;
        event?: MetricsEvent;
    }): Promise<unknown>;
    truncate(tableName: string): Promise<unknown>;
    create(name: string, colConfig: Array<ColumConfig | string>, options?: {
        createOptions?: CreateConfig;
        event?: MetricsEvent;
    }): Promise<unknown>;
    drop(name: string, options?: {
        dropOptions?: DropOptions;
        event?: MetricsEvent;
    }): Promise<unknown>;
    grantPublicRead(tableName: string, options?: {
        event?: MetricsEvent;
    }): Promise<unknown>;
    grantReadToRole(tableName: string, role?: string, options?: {
        event?: MetricsEvent;
    }): Promise<unknown>;
    transaction(queries: string[]): Promise<unknown>;
    setApiKey(apiKey: string): void;
    private getRole;
}
//# sourceMappingURL=Client.d.ts.map