{"version":3,"file":"sql.umd.js","sources":["../../core/dist/core.esm.js","../src/constants.ts","../src/RequestManager.ts","../src/CopyFromManager.ts","../src/CopyToManager.ts","../src/DDL.ts","../src/QueryManager.ts","../src/Client.ts"],"sourcesContent":["class e{constructor(e,r,t=\"https://{user}.carto.com\"){if(!e)throw new Error(\"Username is required\");if(!r)throw new Error(\"Api key is required\");this._username=e,this._apiKey=r,this._serverUrlTemplate=t}static get DEFAULT_SERVER_URL_TEMPLATE(){return\"https://{user}.carto.com\"}static get DEFAULT_PUBLIC_API_KEY(){return\"default_public\"}get username(){return this._username}set username(e){this._username=e}get apiKey(){return this._apiKey}set apiKey(e){this._apiKey=e}get serverUrlTemplate(){return this._serverUrlTemplate}set serverUrlTemplate(e){this._serverUrlTemplate=e}get serverURL(){let e=this._serverUrlTemplate.replace(\"{user}\",this._username);return e.endsWith(\"/\")||(e+=\"/\"),e}}const r=new e(\"username\",\"default_public\");function t(e){r.username=e.username,r.apiKey=e.apiKey||\"default_public\",r.serverUrlTemplate=e.serverUrlTemplate||\"https://{user}.carto.com\"}class s{constructor(e,r,t=\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g,e=>{const r=16*Math.random()|0;return(\"x\"===e?r:3&r|8).toString(16)})){this.source=e,this.name=r,this.groupId=t}getHeaders(){return[[\"Carto-Event-Source\",this.source],[\"Carto-Event\",this.name],[\"Carto-Event-Group-Id\",this.groupId]]}}export{e as Credentials,s as MetricsEvent,r as defaultCredentials,t as setDefaultCredentials};\n//# sourceMappingURL=core.esm.js.map\n","export const QUERY_LIMIT = 1024;\nexport const DEFAULT_MAX_API_REQUESTS_RETRIES = 0;\n\nexport const HTTP_ERRORS = {\n  TOO_MANY_REQUESTS: 429,\n  SERVICE_UNAVAILABLE: 503\n};\n","import { Credentials } from '@carto/toolkit-core';\nimport { DEFAULT_MAX_API_REQUESTS_RETRIES, HTTP_ERRORS } from './constants';\n\ntype PromiseCb<T> = (value?: T) => void;\n\ninterface FetchArgs {\n  requestInfo: RequestInfo;\n  requestInit: RequestInit | undefined;\n  retries_count: number;\n  resolve: PromiseCb<any>;\n  reject: PromiseCb<Error | string>;\n}\n\nconst UNKNOWN = -1;\nconst NO_RETRY = -1;\nconst RETRY_MIN_WAIT = 0.5;\n\nexport class RequestManager {\n  private _credentials: Credentials;\n  private _endpointServerURL: string;\n\n  private _queue: FetchArgs[];\n  private _callsLeft: number = UNKNOWN;\n  private _retryAfter: number = UNKNOWN;\n  private _retryTimeoutId: number = UNKNOWN;\n  private _fetching: boolean = false;\n  private _scheduleDebounce: number = UNKNOWN;\n  private _maxApiRequestsRetries: number = DEFAULT_MAX_API_REQUESTS_RETRIES;\n\n  constructor(\n    credentials: Credentials,\n    endpointServerURL: string,\n    { maxApiRequestsRetries }: { maxApiRequestsRetries?: number } = {}) {\n\n    this._credentials = credentials;\n    this._endpointServerURL = endpointServerURL;\n\n    this._queue = [];\n\n    if (Number.isFinite(maxApiRequestsRetries!) && maxApiRequestsRetries! >= 0) {\n      this._maxApiRequestsRetries = maxApiRequestsRetries!;\n    }\n  }\n\n  public get apiKey() {\n    return this._credentials.apiKey;\n  }\n\n  public set apiKey(value: string) {\n    this._credentials.apiKey = value;\n  }\n\n  protected get endpointServerURL() {\n    return this._endpointServerURL;\n  }\n\n  protected set callsLeft(value: number) {\n    this._callsLeft = value;\n  }\n\n  protected get callsLeft() {\n    return this._callsLeft;\n  }\n\n  protected set maxApiRequestsRetries(value: number) {\n    this._maxApiRequestsRetries = value;\n  }\n\n  protected _scheduleRequest(\n    resolve: PromiseCb<any>,\n    reject: PromiseCb<any>,\n    requestInfo: RequestInfo,\n    requestInit?: RequestInit) {\n\n    this._queue.push({ resolve, reject, requestInfo, requestInit, retries_count: NO_RETRY });\n\n    clearTimeout(this._scheduleDebounce);\n    this._scheduleDebounce = window.setTimeout(() => {\n      this._scheduler();\n    }, 0);\n  }\n\n  protected addHeadersTo(requestInit: any, headers: string[][] = []) {\n    if (requestInit === undefined) {\n      return;\n    }\n\n    if (!requestInit.headers) {\n      requestInit.headers = new Headers();\n    }\n\n    if (headers.length > 0) {\n      headers.forEach((header) => {\n        requestInit.headers.append(header[0], header[1]);\n      });\n    }\n  }\n\n  private _scheduler() {\n    if (this._queue.length === 0) {\n      return;\n    }\n\n    if (this._retryTimeoutId !== UNKNOWN || this._fetching) {\n      return;\n    }\n\n    if (this._retryAfter !== UNKNOWN) {\n      // This timeout waits for the minimum time to\n      // call scheduler and reset previous retry values\n      // It adds 1 to calls left because as we've waited for the\n      // limit to expire there should be one call available at least\n      // without taking into account other possible sources of requests\n      this._retryTimeoutId = window.setTimeout(() => {\n        this._retryTimeoutId = UNKNOWN;\n        this._retryAfter = UNKNOWN;\n        // Technically? But this is risky.\n        this._callsLeft += 1;\n        this._scheduler();\n      }, this._retryAfter * 1000);\n\n      return;\n    }\n\n    // Gets minimum number of requests left before reaching limits\n    // It should be whether the queue size, or _callsLeft variable\n    // which is set by Carto-Rate-Limit-Remaining header value\n    const nRequests = this._callsLeft !== -1\n      ? Math.min(Math.max(1, this._callsLeft), this._queue.length)\n      : 1;\n    const promises = [];\n\n    for (let i = 0; i < nRequests; i++) {\n      this._fetching = true;\n\n      promises.push(\n        this._fetch(this._queue[i], i)\n      );\n    }\n\n    Promise.all(promises).then((finishedPromises) => {\n      // Filter out the promises that have finished properly\n      this._queue = this._queue.filter((_e, i) => finishedPromises.indexOf(i) === -1);\n      this._fetching = false;\n\n      if (this._queue.length > 0) {\n        this._scheduler();\n      }\n    });\n  }\n\n  private _fetch(requestDefinition: FetchArgs, index: number): Promise<number | undefined> {\n    const {resolve, reject, requestInfo, requestInit, retries_count} = requestDefinition;\n\n    return fetch(requestInfo, requestInit)\n      .then(async (response) => {\n\n        this._retryAfter = this._getRateLimitHeader(response.headers, 'Retry-After', this._retryAfter);\n        this._callsLeft = this._getRateLimitHeader(response.headers, 'Carto-Rate-Limit-Remaining', this._callsLeft);\n\n        const responseBody = await getResponseBody(response);\n\n        const isTimeoutError = response.status === HTTP_ERRORS.TOO_MANY_REQUESTS &&\n          (responseBody.detail === 'datasource' || responseBody.detail === 'rate-limit');\n\n        if (response.status === HTTP_ERRORS.SERVICE_UNAVAILABLE || isTimeoutError) {\n          requestDefinition.retries_count = retries_count !== NO_RETRY\n            ? retries_count - 1\n            : this._maxApiRequestsRetries;\n\n          const timeToWait = (this._maxApiRequestsRetries - requestDefinition.retries_count)\n            * RETRY_MIN_WAIT + RETRY_MIN_WAIT;\n          this._retryAfter = Math.max(this._retryAfter, timeToWait);\n        }\n\n        if (requestDefinition.retries_count === 0) {\n          throw new Error('Too many retries');\n        }\n\n        if (\n          response.status === HTTP_ERRORS.TOO_MANY_REQUESTS ||\n          response.status === HTTP_ERRORS.SERVICE_UNAVAILABLE\n        ) {\n          // Reschedule\n          this._scheduler();\n          return null;\n        }\n\n        return responseBody;\n      })\n      .then((data) => {\n        if (data === null) {\n          return;\n        }\n\n        if (!data.error) {\n          resolve(data);\n        } else {\n          const message = data?.error?.length ? data.error[0] : 'Unknown error';\n          reject(new Error(message));\n        }\n\n        return index;\n      })\n      .catch((e) => {\n        reject(e);\n\n        // Return the index because this is likely an uncontrollable error\n        return index;\n      });\n  }\n\n  private _getRateLimitHeader(headers: Headers, name: string, defaultValue: number): number {\n    const value = headers.get(name);\n\n    if (value !== null) {\n      return parseInt(value, 10);\n    }\n\n    return defaultValue;\n  }\n\n  //#region Getters and setters\n\n  public get queued(): number {\n    return this._queue.length;\n  }\n\n  //#endregion\n}\n\nexport default RequestManager;\n\nasync function getResponseBody(response: Response) {\n  const contentType = response.headers.get('content-type') || '';\n\n  return contentType.includes('application/json')\n    ? await response.json()\n    : await response.text();\n}\n","import { Credentials, MetricsEvent } from '@carto/toolkit-core';\nimport RequestManager from './RequestManager';\n\nexport class CopyFromManager extends RequestManager {\n\n  constructor(credentials: Credentials, options: { maxApiRequestsRetries?: number } = {}) {\n    const endpointServerURL = credentials.serverURL + 'api/v2/sql/copyfrom';\n    super(credentials, endpointServerURL, options);\n  }\n\n  public copy(csv: string, tableName: string, fields: string[], options: { event?: MetricsEvent } = {}) {\n    const query = `COPY ${tableName} (${fields}) FROM STDIN WITH (FORMAT csv, HEADER true);`;\n    const url = `${this.endpointServerURL}?api_key=${this.apiKey}&q=${query}`;\n    const file = new Blob([csv]);\n\n    const requestInit = {\n      method: 'POST',\n      body: file,\n    };\n\n    const customHeaders = options.event ? options.event.getHeaders() : [];\n    this.addHeadersTo(requestInit, customHeaders);\n\n    return new Promise((resolve, reject) => {\n      this._scheduleRequest(resolve, reject, url, requestInit);\n    });\n  }\n}\n","import { Credentials } from '@carto/toolkit-core';\nimport RequestManager from './RequestManager';\n\nconst DEFAULT_FILENAME = 'carto_copyto.csv';\nconst DEFAULT_OPTIONS = 'FORMAT csv, HEADER true';\n\nexport class CopyToManager extends RequestManager {\n\n  constructor(credentials: Credentials, options: { maxApiRequestsRetries?: number } = {}) {\n    const endpointServerURL = credentials.serverURL + 'api/v2/sql/copyto';\n    super(credentials, endpointServerURL, options);\n  }\n\n  public copyUrl(q: string, filename: string = DEFAULT_FILENAME, options: string = DEFAULT_OPTIONS) {\n    const query = `COPY (${q}) TO stdout WITH(${options})`;\n    const url = `${this.endpointServerURL}?api_key=${this.apiKey}&q=${query}&filename=${filename}`;\n    return url;\n  }\n\n  /**\n   * Copy a query or a table to stdout\n   *\n   * @param {string} q\n   * @memberof CopyToManager\n   */\n  public copy(q: string, filename: string, options: string) {\n    const url = this.copyUrl(q, filename, options);\n\n    return new Promise((resolve, reject) => {\n      this._scheduleRequest(resolve, reject, url);\n    });\n  }\n}\n","// Some common aliases\nconst TYPE_MAP = {\n  string: 'text',\n  integer: 'numeric',\n  geojson: 'json'\n} as {\n  [key: string]: string\n};\n\nexport interface ColumConfig {\n  /**\n   * Name of the column\n   */\n  name: string;\n\n  /**\n   * PostgreSQL column's type\n   */\n  type: string;\n\n  /**\n   * Extra information to append in column creation\n   */\n  extra?: string;\n\n  /**\n   * Avoid adding property when inserting a new row in the table\n   */\n  omitOnInsert?: boolean;\n\n  /**\n   * Formatting for column value before being appended to SQL sentence\n   */\n  format?: (value: any) => boolean | string | null;\n}\n\nexport interface DropOptions {\n  ifExists?: boolean;\n}\n\nexport interface CreateConfig {\n  ifNotExists?: boolean;\n}\n\nexport class DDL {\n  public static drop(tableName: string, options?: any) {\n    if (options && options.ifExists) {\n      return `DROP TABLE IF EXISTS ${tableName};`;\n    }\n\n    return `DROP TABLE ${tableName};`;\n  }\n\n  public static create(tableName: string, rows: Array<ColumConfig | string>, options?: any) {\n    let template = `CREATE TABLE ${tableName} ({rows});`;\n\n    if (options && options.ifNotExists) {\n      template = `CREATE TABLE IF NOT EXISTS ${tableName} ({rows});`;\n    }\n\n    const sqlRows = rows.map((row) => {\n      if (typeof row === 'string') {\n        return row;\n      }\n\n      row.type = parseRowType(row.type);\n\n      const rowStr = `\"${row.name}\" ${row.type}`;\n\n      return row.extra ? `${rowStr} ${row.extra}` : rowStr;\n    }).join(', ');\n\n    return template.replace(/{rows}/, sqlRows);\n  }\n}\n\nfunction parseRowType(value: string): string {\n  return TYPE_MAP[value] || value;\n}\n\nexport default DDL;\n","import { Credentials, MetricsEvent } from '@carto/toolkit-core';\nimport { QUERY_LIMIT } from './constants';\nimport RequestManager from './RequestManager';\n\nexport type Pair<T> = [T, T];\nexport class QueryManager extends RequestManager {\n\n  constructor(credentials: Credentials, options: { maxApiRequestsRetries?: number } = {}) {\n    const endpointServerURL = credentials.serverURL + 'api/v2/sql';\n    super(credentials, endpointServerURL, options);\n  }\n\n  public query(\n    q: string,\n    options: {\n      extraParams?: Array<Pair<string>>,\n      event?: MetricsEvent\n    } = {}\n   ) {\n\n    const urlParams = [\n      ['api_key', this.apiKey],\n      ['q', q]\n    ];\n    if (options.extraParams) {\n      urlParams.push(...options.extraParams);\n    }\n\n    const customHeaders = options.event ? options.event.getHeaders() : [];\n\n    if (q.length < QUERY_LIMIT) {\n      return this.prepareGetRequest(urlParams, customHeaders);\n    } else {\n      return this.preparePostRequest(urlParams, customHeaders);\n    }\n  }\n\n  private prepareGetRequest(urlParams: string[][], customHeaders: string[][] = []) {\n    const stringParams = encodeURI(urlParams.map(\n      (param) => `${param[0]}=${param[1]}`\n    ).join('&'));\n\n    const requestInit = {\n      method: 'GET'\n    };\n    this.addHeadersTo(requestInit, customHeaders);\n\n    return new Promise((resolve, reject) => {\n      this._scheduleRequest(\n        resolve,\n        reject,\n        `${this.endpointServerURL}?${stringParams}`,\n        requestInit\n      );\n    });\n  }\n\n  private preparePostRequest(urlParams: string[][], customHeaders: string[][] = []) {\n    const formData = new FormData();\n\n    urlParams.forEach((value) => formData.set(value[0], value[1]));\n\n    const requestInit = {\n      method: 'POST',\n      body: formData\n    };\n    this.addHeadersTo(requestInit, customHeaders);\n\n    return new Promise((resolve, reject) => {\n      this._scheduleRequest(\n        resolve,\n        reject,\n        `${this.endpointServerURL}`,\n        requestInit\n      );\n    });\n  }\n}\n","import { Credentials, MetricsEvent } from '@carto/toolkit-core';\nimport { CopyFromManager } from './CopyFromManager';\nimport { CopyToManager } from './CopyToManager';\nimport DDL, { ColumConfig, CreateConfig, DropOptions } from './DDL';\nimport { Pair, QueryManager } from './QueryManager';\n\nconst PUBLIC_USER = 'publicuser';\n\nexport class SQL {\n  private _copyToManager: CopyToManager;\n  private _queryManager: QueryManager;\n  private _copyFromManager: CopyFromManager;\n  private _publicQueryManager: QueryManager;\n\n  private _publicRole?: string;\n  private _credentials: Credentials;\n\n  constructor(\n    credentials: Credentials,\n    { maxApiRequestsRetries }: { maxApiRequestsRetries?: number } = {}\n  ) {\n    this._credentials = credentials;\n\n    this._copyToManager = new CopyToManager(this._credentials, { maxApiRequestsRetries });\n    this._queryManager = new QueryManager(this._credentials, { maxApiRequestsRetries });\n    this._copyFromManager = new CopyFromManager(this._credentials, { maxApiRequestsRetries });\n\n    const publicCredentials = new Credentials(\n      credentials.username,\n      Credentials.DEFAULT_PUBLIC_API_KEY,\n      credentials.serverUrlTemplate\n    );\n    this._publicQueryManager = new QueryManager(publicCredentials, { maxApiRequestsRetries });\n  }\n\n  public static get DDL() {\n    return DDL;\n  }\n\n  public copyFrom(csv: string, tableName: string, fields: string[], options: { event?: MetricsEvent } = {}) {\n    return this._copyFromManager.copy(csv, tableName, fields, options);\n  }\n\n  public exportURL(q: string) {\n    return this._copyToManager.copyUrl(q);\n  }\n\n  public query(\n    q: string,\n    options: {\n       extraParams?: Array<Pair<string>>,\n       event?: MetricsEvent\n      } = {} ) {\n\n    const cleanQuery = q.replace(/\\s+/g, ' ').trim();\n    return this._queryManager.query(cleanQuery, options);\n  }\n\n  public truncate(tableName: string) {\n    return this._queryManager.query(`TRUNCATE ${tableName};`);\n  }\n\n  public create(\n    name: string,\n    colConfig: Array<ColumConfig | string>,\n    options: {\n      createOptions?: CreateConfig,\n      event?: MetricsEvent\n    } = {}) {\n\n    const query = DDL.create(name, colConfig, options.createOptions);\n    return this._queryManager.query(query, { event: options.event });\n  }\n\n  public drop(\n    name: string,\n    options: {\n      dropOptions?: DropOptions,\n      event?: MetricsEvent\n    } = {}\n    ) {\n\n    const query = DDL.drop(name, options.dropOptions);\n    return this._queryManager.query(query, { event: options.event });\n  }\n\n  public async grantPublicRead(tableName: string, options: { event?: MetricsEvent } = {}) {\n    const role = this._publicRole || await this.getRole(options);\n\n    return this.grantReadToRole(tableName, role, options);\n  }\n\n  public grantReadToRole(tableName: string, role: string = PUBLIC_USER,  options: { event?: MetricsEvent } = {}) {\n    const query = `GRANT SELECT on ${tableName} TO \"${role}\"`;\n\n    return this.query(query, options);\n  }\n\n  public transaction(queries: string[]) {\n    const query = `\n      BEGIN;\n        ${queries.join('\\n')}\n      COMMIT;\n    `;\n\n    return this._queryManager.query(query);\n  }\n\n  public setApiKey(apiKey: string) {\n    this._credentials.apiKey = apiKey;\n\n    this._queryManager.apiKey = apiKey;\n    this._copyToManager.apiKey = apiKey;\n    this._copyFromManager.apiKey = apiKey;\n  }\n\n  private getRole(options: { event?: MetricsEvent } = {}): Promise<string> {\n    return this._publicQueryManager\n      .query(`SELECT current_user as rolename`, options)\n      .then((data: any) => {\n        if (data.error) {\n          throw new Error(data.error);\n        }\n\n        if (data.rows.length === 0) {\n          throw new Error('Cannot grant: got no current_user data');\n        }\n\n        const { rolename } = data.rows[0];\n\n        this._publicRole = rolename;\n\n        return rolename;\n      });\n  }\n}\n"],"names":["e","[object Object]","r","t","Error","this","_username","_apiKey","_serverUrlTemplate","DEFAULT_SERVER_URL_TEMPLATE","DEFAULT_PUBLIC_API_KEY","username","apiKey","serverUrlTemplate","serverURL","replace","endsWith","HTTP_ERRORS","TOO_MANY_REQUESTS","SERVICE_UNAVAILABLE","credentials","endpointServerURL","_a","maxApiRequestsRetries","_credentials","_endpointServerURL","_queue","Number","isFinite","_maxApiRequestsRetries","Object","RequestManager","value","_callsLeft","resolve","reject","requestInfo","requestInit","push","retries_count","clearTimeout","_scheduleDebounce","window","setTimeout","_this","_scheduler","headers","undefined","Headers","length","forEach","header","append","_retryTimeoutId","_fetching","_retryAfter","nRequests","Math","min","max","promises","i","_fetch","Promise","all","then","finishedPromises","filter","_e","indexOf","requestDefinition","index","fetch","response","_getRateLimitHeader","getResponseBody","responseBody","isTimeoutError","status","detail","timeToWait","data","error","message","catch","name","defaultValue","get","parseInt","includes","json","_b","text","options","_super","__extends","CopyFromManager","csv","tableName","fields","query","url","method","body","Blob","customHeaders","event","getHeaders","addHeadersTo","_scheduleRequest","CopyToManager","q","filename","copyUrl","TYPE_MAP","string","integer","geojson","DDL","ifExists","rows","template","ifNotExists","sqlRows","map","row","type","rowStr","extra","join","QueryManager","urlParams","extraParams","prepareGetRequest","preparePostRequest","stringParams","encodeURI","param","formData","FormData","set","_copyToManager","_queryManager","_copyFromManager","publicCredentials","Credentials","_publicQueryManager","SQL","copy","cleanQuery","trim","colConfig","create","createOptions","drop","dropOptions","_publicRole","getRole","role","grantReadToRole","queries","rolename"],"mappings":"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"}