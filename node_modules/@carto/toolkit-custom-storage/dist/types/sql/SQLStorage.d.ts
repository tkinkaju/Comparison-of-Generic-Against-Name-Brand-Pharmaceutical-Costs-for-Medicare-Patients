import { MetricsEvent } from '@carto/toolkit-core';
import { SQL } from '@carto/toolkit-sql';
import { CompleteVisualization, Dataset, StoredDataset, StoredVisualization, Visualization } from '../StorageRepository';
export declare class SQLStorage {
    protected _tableName: string;
    protected _datasetsTableName: string;
    protected _datasetsVisTableName: string;
    private _sql;
    private _isPublic;
    private _isReady;
    private _namespace;
    private VIS_FIELDS;
    private DATASET_COLUMNS;
    private DATASET_VIS_COLUMNS;
    private FIELD_NAMES;
    private FIELD_NAMES_INSERT;
    constructor(tableName: string, sqlClient: SQL, version: number, isPublic: boolean);
    /**
     * Ensures custom storage tables are ready
     */
    init(options?: {
        event?: MetricsEvent;
    }): Promise<unknown>;
    /**
     * Checks if storage tables are created
     */
    isInitialized(): Promise<boolean>;
    getVisualizations(options?: {
        event?: MetricsEvent;
    }): Promise<StoredVisualization[]>;
    getVisualization(id: string, options?: {
        event?: MetricsEvent;
    }): Promise<CompleteVisualization | null>;
    getDatasetData(name: string, tablename: string): Promise<Dataset>;
    getDataset(name: string, options?: {
        event?: MetricsEvent;
    }): Promise<StoredDataset | null>;
    getDatasets(): Promise<StoredDataset[]>;
    getVisForDataset(datasetId: string): Promise<StoredVisualization[]>;
    deleteVisualization(id: string, options?: {
        event?: MetricsEvent;
    }): Promise<void>;
    deleteDataset(): Promise<void>;
    createVisualization(vis: Visualization, datasets: Array<Dataset | string>, options?: {
        overwriteDatasets?: boolean;
        event?: MetricsEvent;
    }): Promise<StoredVisualization | null>;
    uploadDataset(dataset: Dataset, options?: {
        overwrite: boolean;
        event?: MetricsEvent;
    }): Promise<StoredDataset>;
    shareDataset(tableName: string, options?: {
        event?: MetricsEvent;
    }): Promise<unknown>;
    updateVisualization(vis: StoredVisualization, datasets: Dataset[], options?: {
        event?: MetricsEvent;
    }): Promise<any>;
    get isReady(): boolean;
    setApiKey(apiKey: string): void;
    destroy(): Promise<unknown>;
    private checkIfDatasetExists;
    private preventAccidentalDatasetsOverwrite;
    private deleteOrphanDatasets;
    private insertVisTable;
    private updateVisTable;
    private uploadAndLinkDatasetsTo;
    private checkExistingDataset;
    private escapeOrNull;
    private cleanVisAndDatasetLinks;
    private linkVisAndDataset;
    /**
     * Checks if all the tables for SQLStorage exist
     */
    private _checkMissingTables;
    /**
     * Creates missing required tables for custom storage
     */
    private _initTables;
}
//# sourceMappingURL=SQLStorage.d.ts.map