import { MetricsEvent } from '@carto/toolkit-core';
import { SQL } from '@carto/toolkit-sql';
import { CompleteVisualization, Dataset, StoredDataset, StoredVisualization } from '../StorageRepository';
export interface TableNames {
    vis: string;
    datasets: string;
    visToDatasets: string;
}
export declare function rowToVisualization(row: any): StoredVisualization;
/**
 * Get dataset file as CSV from SQL API
 *
 * TODO. Consider the use of copyTo API
 */
export declare function getDatasetData(name: string, tablename: string, client: SQL, options?: {
    event?: MetricsEvent;
}): Promise<Dataset>;
export declare function getDatasetsForVis(tableNames: TableNames, visId: string, client: SQL, options?: {
    event?: MetricsEvent;
}): Promise<StoredDataset[]>;
export declare function getVisualization(tableNames: TableNames, id: string, client: SQL, options?: {
    event?: MetricsEvent;
}): Promise<CompleteVisualization | null>;
export declare function generateVisTableName(namespace: string, isPublic: boolean, version: number): string;
export declare function generateDatasetTableName(tableName: string): string;
/**
 * This generates the table name for the N <-> M relationship between vis and datasets
 * @param tableName The base table name
 */
export declare function generateDatasetVisTableName(tableName: string): string;
//# sourceMappingURL=utils.d.ts.map