import { Credentials } from '@carto/toolkit-core';
import { SQL } from '@carto/toolkit-sql';
import { CompleteVisualization, Dataset, StorageRepository, StoredDataset, StoredVisualization, Visualization } from './StorageRepository';
export declare class CustomStorage implements StorageRepository {
    static version: number;
    client: string;
    private _publicSQLStorage;
    private _privateSQLStorage;
    private _sqlClient;
    private _namespace;
    constructor(namespace: string, credentials: Credentials, options?: {
        client?: string;
        maxApiRequestsRetries?: number;
    });
    init(): Promise<unknown>;
    getVisualizations(): Promise<StoredVisualization[]>;
    getPublicVisualizations(): Promise<StoredVisualization[]>;
    getPrivateVisualizations(): Promise<StoredVisualization[]>;
    getVisualization(id: string): Promise<CompleteVisualization | null>;
    deleteVisualization(id: string): Promise<boolean>;
    createVisualization(vis: Visualization, datasets: Array<Dataset | string>, overwriteDatasets: boolean): Promise<StoredVisualization | null>;
    updateVisualization(vis: StoredVisualization, datasets: Dataset[]): Promise<StoredVisualization | null>;
    getDatasets(): Promise<StoredDataset[]>;
    getVisForDataset(datasetName: string): Promise<StoredVisualization[]>;
    uploadPublicDataset(dataset: Dataset, overwrite?: boolean): Promise<StoredDataset>;
    uploadPrivateDataset(dataset: Dataset, overwrite?: boolean): Promise<StoredDataset>;
    getVersion(): number;
    migrate(): Promise<void>;
    getSQLClient(): SQL;
    setApiKey(apiKey: string): void;
    destroy(): Promise<void>;
    isInitialized(): Promise<boolean>;
    /**
     * Check namespace, as it will be used internally to create database-related elements
     *
     * @private
     * @param {string} namespace
     * @memberof CustomStorage
     */
    private _checkNamespace;
    private _checkReady;
    private _uploadDataset;
}
//# sourceMappingURL=CustomStorage.d.ts.map