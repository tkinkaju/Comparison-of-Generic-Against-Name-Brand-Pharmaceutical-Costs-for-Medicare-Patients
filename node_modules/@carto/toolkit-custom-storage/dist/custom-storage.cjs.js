"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("@carto/toolkit-core"),e=require("@carto/toolkit-sql");
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function i(t,e,i,s){return new(i||(i=Promise))((function(a,n){function r(t){try{l(s.next(t))}catch(t){n(t)}}function o(t){try{l(s.throw(t))}catch(t){n(t)}}function l(t){t.done?a(t.value):new i((function(e){e(t.value)})).then(r,o)}l((s=s.apply(t,e||[])).next())}))}class s extends class{constructor(t,e){this.errorCode=t,this.message=e}}{constructor(t){super("DUPLICATED_DATASETS","Some datasets are duplicated"),this.datasets=t}}function a(t){return{id:t.id,name:t.name,description:t.description,thumbnail:t.thumbnail,isprivate:t.isprivate,config:t.config,lastmodified:t.lastmodified}}function n(t,e,s,a={}){return i(this,void 0,void 0,(function*(){const i={extraParams:[["format","csv"]],event:a.event},n=yield s.query(`SELECT * FROM ${e}`,i);if("string"!=typeof n)throw new Error(n.error);return{name:t,file:n}}))}function r(t,e,s,r={}){return i(this,void 0,void 0,(function*(){const o=yield s.query(`SELECT * FROM ${t.vis} WHERE id = '${e}'`,r);if(o.error)throw new Error(o.error);if(0===o.rows.length)return null;const l=a(o.rows[0]),d=yield function(t,e,s,a={}){return i(this,void 0,void 0,(function*(){const i=yield s.query(`\n    WITH datasets AS (SELECT dataset FROM ${t.visToDatasets} WHERE vis = '${e}')\n    SELECT t.id, t.name, t.tablename FROM ${t.datasets} t, datasets u\n    WHERE t.id = u.dataset\n  `,a);if(i.error)throw new Error(i.error);return i.rows}))}(t,e,s,r);return 0===d.length?{vis:l,datasets:[]}:{vis:l,datasets:yield Promise.all(d.map(t=>n(t.name,t.tablename,s,r)))}}))}function o(t,e,i){return`${t}_${e?"public":"private"}_v${i}`}function l(t){return`${t}_datasets`}function d(t){return`${t}_datasets_vis`}class u{constructor(t,e,i,s){this._isReady=!1,this._namespace=t,this._tableName=o(t,s,i),this._datasetsTableName=l(this._tableName),this._datasetsVisTableName=d(this._tableName),this._isPublic=s,this.VIS_FIELDS={id:{name:"id",type:"uuid",extra:`PRIMARY KEY DEFAULT ${this._namespace}_create_uuid()`,omitOnInsert:!0},name:{name:"name",type:"text",extra:"NOT NULL",format:this.escapeOrNull},description:{name:"description",type:"text",format:this.escapeOrNull},thumbnail:{name:"thumbnail",type:"text",format:this.escapeOrNull},isprivate:{name:"isprivate",type:"boolean",format:t=>void 0!==t&&t},config:{name:"config",type:"json",format:this.escapeOrNull},lastmodified:{name:"lastmodified",type:"timestamp",extra:"NOT NULL DEFAULT now()",omitOnInsert:!0}},this.DATASET_COLUMNS=[`"id" uuid PRIMARY KEY DEFAULT ${this._namespace}_create_uuid()`,'"tablename" text UNIQUE NOT NULL','"name" text UNIQUE NOT NULL'],this.DATASET_VIS_COLUMNS=['"vis" uuid NOT NULL','"dataset" uuid NOT NULL'],this.FIELD_NAMES=Object.values(this.VIS_FIELDS).map(t=>t.name),this.FIELD_NAMES_INSERT=Object.values(this.VIS_FIELDS).filter(t=>!t.omitOnInsert).map(t=>t.name),this._sql=e}init(t={}){return i(this,void 0,void 0,(function*(){const e=yield this._checkMissingTables();return e&&(yield this._initTables({event:t.event})),this._isReady=!0,e}))}isInitialized(){return i(this,void 0,void 0,(function*(){const t=yield this._checkMissingTables();return this._isReady=!t,this._isReady}))}getVisualizations(t={}){return this._sql.query(`\n      SELECT ${this.FIELD_NAMES.filter(t=>"config"!==t).map(t=>`"${t}"`).join(", ")}\n      FROM ${this._tableName}\n      `,t).then(t=>{if(t.error)throw new Error(t.error);return 0===t.rows.length?[]:t.rows.map(a)})}getVisualization(t,e={}){return i(this,void 0,void 0,(function*(){return r({vis:this._tableName,datasets:this._datasetsTableName,visToDatasets:this._datasetsVisTableName},t,this._sql,e)}))}getDatasetData(t,e){return i(this,void 0,void 0,(function*(){return n(t,e,this._sql)}))}getDataset(t,e={}){return i(this,void 0,void 0,(function*(){const i=yield this._sql.query(`\n      SELECT * FROM ${this._datasetsTableName} WHERE "name"='${t}'\n    `,e);if(i.error)throw new Error(`Failed to get dataset ${t}`);return i.rows[0]||null}))}getDatasets(){return i(this,void 0,void 0,(function*(){const t=yield this._sql.query(`\n      SELECT * FROM ${this._datasetsTableName}\n    `);if(t.error)throw new Error("Failed to read datasets");return t.rows}))}getVisForDataset(t){return i(this,void 0,void 0,(function*(){const e=yield this._sql.query(`\n      WITH dataset_vis as (SELECT * FROM ${this._datasetsVisTableName} WHERE "dataset" = '${t}')\n\n      SELECT t."name", t."id", t."thumbnail", t."isprivate"\n      FROM ${this._tableName} t, dataset_vis u WHERE t."id" = u."vis"\n    `);if(e.error)throw new Error("Failed to read visualizations");return e.rows.map(a)}))}deleteVisualization(t,e={}){return i(this,void 0,void 0,(function*(){yield this._sql.query(`DELETE FROM ${this._datasetsVisTableName} WHERE "vis"='${t}'`,e),yield this._sql.query(`DELETE FROM ${this._tableName} WHERE "id"='${t}'`,e),yield this.deleteOrphanDatasets(e)}))}deleteDataset(){return i(this,void 0,void 0,(function*(){throw new Error("deleteDataset Not implemented yet")}))}createVisualization(t,e,s={}){return i(this,void 0,void 0,(function*(){yield this.preventAccidentalDatasetsOverwrite(s.overwriteDatasets,e);const i=yield this.insertVisTable(t,{event:s.event});return null===i?null:(yield this.uploadAndLinkDatasetsTo(i.id,e,t.isprivate,s),Object.assign(Object.assign({},i),t))}))}uploadDataset(t,e={overwrite:!1}){return i(this,void 0,void 0,(function*(){const i=`${this._tableName}_${t.name}`;if(!t.columns)throw new Error("Need dataset column information");const s=yield this.getDataset(t.name,{event:e.event});e.overwrite&&null!==s&&(yield this._sql.query(`DROP TABLE IF EXISTS ${i}`,{event:e.event}));const a={createOptions:{ifNotExists:!1},event:e.event},n=yield this._sql.create(i,t.columns,a);if(n.error)throw new Error(`Failed to create table for dataset ${t.name}: ${n.error}`);let r;try{const s=t.columns.map(t=>"string"==typeof t?`"${t}"`:`"${t.name}"`);r=yield this._sql.copyFrom(t.file,i,s,{event:e.event})}catch(t){throw new Error(`Failed to copy to ${i}: ${t.message}`)}if(r.error)throw new Error(`Failed to copy to ${i}: ${r.error}`);if(null===s){const s=yield this._sql.query(`\n        INSERT INTO ${this._datasetsTableName} ("id", "name", "tablename")\n        VALUES (${this._namespace}_create_uuid(), '${t.name}', '${i}')\n        RETURNING *\n      `,{event:e.event});if(s.error)throw new Error(`Failed to register dataset ${i} ${s.error}`);return s.rows[0]}return s}))}shareDataset(t,e={}){return this._sql.grantPublicRead(t,e)}updateVisualization(t,e,s={}){return i(this,void 0,void 0,(function*(){const i=yield this.updateVisTable(t,s);return null===i?null:(yield this.cleanVisAndDatasetLinks(i.id,s),yield this.uploadAndLinkDatasetsTo(i.id,e,t.isprivate,{overwriteDatasets:!0,event:s.event}),yield this.deleteOrphanDatasets(s),Object.assign(Object.assign({},t),i))}))}get isReady(){return this._isReady}setApiKey(t){this._sql.setApiKey(t)}destroy(){return i(this,void 0,void 0,(function*(){const t=(yield this.getDatasets()).map(t=>t.name);return this._sql.query(`\n      BEGIN;\n        ${t.map(t=>`DROP TABLE IF EXISTS ${t};`).join("\n")}\n        DROP TABLE IF EXISTS ${this._tableName} CASCADE;\n        DROP TABLE IF EXISTS ${this._datasetsTableName} CASCADE;\n        DROP TABLE IF EXISTS ${this._datasetsVisTableName} CASCADE;\n      COMMIT;\n    `)}))}checkIfDatasetExists(t){return i(this,void 0,void 0,(function*(){const e="string"==typeof t?t:t.name,i=yield this._sql.query(`SELECT * FROM ${this._datasetsTableName} WHERE "name" = '${e}'`);if(i.error)throw new Error(i.error);return 0===i.rows.length?null:i.rows[0]}))}preventAccidentalDatasetsOverwrite(t=!1,e){return i(this,void 0,void 0,(function*(){const i=e.filter(t=>"string"!=typeof t),a=yield this.checkExistingDataset(i);if(!t&&a.length>0)throw new s(a.map(t=>t.name))}))}deleteOrphanDatasets(t={}){return i(this,void 0,void 0,(function*(){const e=yield this._sql.query(`\n      SELECT * FROM ${this._datasetsTableName} WHERE "id" NOT IN (SELECT distinct("dataset") FROM ${this._datasetsVisTableName})\n    `,t),i={dropOptions:{ifExists:!0},event:t.event},s=e.rows.map(t=>{this._sql.drop(t.tablename,i)});yield Promise.all(s),yield this._sql.query(`DELETE FROM ${this._datasetsTableName} WHERE "id" NOT IN (SELECT distinct("dataset") FROM ${this._datasetsVisTableName})`,t)}))}insertVisTable(t,e={}){return i(this,void 0,void 0,(function*(){const i=`INSERT INTO ${this._tableName}\n     (${this.FIELD_NAMES_INSERT.map(t=>`"${t}"`).join(", ")})\n     VALUES\n     (\n       ${this.FIELD_NAMES_INSERT.map(e=>{const i=this.VIS_FIELDS[e],s=t[e],a=i&&i.format?i.format(s):s;return null===a?"null":a}).join()}\n     )\n     RETURNING "id", "lastmodified"\n   `,s=yield this._sql.query(i,e);if(s.error)throw new Error(s.error);const a=s.rows[0];return{id:a.id,lastmodified:a.lastmodified}}))}updateVisTable(t,e={}){return i(this,void 0,void 0,(function*(){const i=`UPDATE ${this._tableName}\n      SET\n        ${this.FIELD_NAMES_INSERT.map(e=>{const i=this.VIS_FIELDS[e],s=t[e],a=i&&i.format?i.format(s):s;return`"${e}" = ${null===a?"null":a}`}).join()}\n        ,${this.VIS_FIELDS.lastmodified.name}=NOW()\n      WHERE ${this.VIS_FIELDS.id.name} = '${t.id}'\n      RETURNING "${this.VIS_FIELDS.id.name}", "${this.VIS_FIELDS.lastmodified.name}"\n    `,s=yield this._sql.query(i,e);if(s.error)throw new Error(s.error);return{id:t.id,lastmodified:s.rows.length?s.rows[0].lastmodified:t.lastmodified}}))}uploadAndLinkDatasetsTo(t,e,s,a={}){return i(this,void 0,void 0,(function*(){for(const i of e){let e;if("string"==typeof i){const s=yield this.getDataset(i);if(null===s)continue;e=s.tablename,yield this.linkVisAndDataset(t,s.id,{event:a.event})}else{const s=yield this.uploadDataset(i,{overwrite:a.overwriteDatasets||!1,event:a.event});e=s.tablename,yield this.linkVisAndDataset(t,s.id,{event:a.event})}s||(yield this.shareDataset(e,{event:a.event}))}}))}checkExistingDataset(t){return i(this,void 0,void 0,(function*(){return(yield Promise.all(t.map(t=>this.checkIfDatasetExists(t)))).filter(t=>null!==t)}))}escapeOrNull(t){return null===t?null:`E'${t=t.replace(/\'/gi,"\\'")}'`}cleanVisAndDatasetLinks(t,e={}){return i(this,void 0,void 0,(function*(){if((yield this._sql.query(`\n      DELETE FROM ${this._datasetsVisTableName}\n      WHERE vis='${t}'\n    `,e)).error)throw new Error(`Failed to clean vis-dataset links for visualization '${t}'`)}))}linkVisAndDataset(t,e,s={}){return i(this,void 0,void 0,(function*(){const i=`\n      INSERT INTO ${this._datasetsVisTableName} ("vis", "dataset")\n      VALUES ('${t}', '${e}')\n    `;if((yield this._sql.query(i,s)).error)throw new Error("Failed to link dataset id to vis id")}))}_checkMissingTables(){return new Promise((t,e)=>i(this,void 0,void 0,(function*(){try{const e=[this._tableName,this._datasetsTableName,this._datasetsVisTableName].map(t=>this._sql.query(`SELECT to_regclass('${t}')`)),i=(yield Promise.all(e)).some(t=>null===t.rows[0].to_regclass);t(i)}catch(t){e(t)}})))}_initTables(t={}){return i(this,void 0,void 0,(function*(){const e=[...Object.values(this.VIS_FIELDS)],i={createConfig:{ifNotExists:!0},event:t.event};yield this._sql.create(this._tableName,e,i),yield this._sql.create(this._datasetsTableName,this.DATASET_COLUMNS,i),yield this._sql.create(this._datasetsVisTableName,this.DATASET_VIS_COLUMNS,i),this._isPublic&&(yield this._sql.grantPublicRead(this._tableName,t),yield this._sql.grantPublicRead(this._datasetsTableName,t),yield this._sql.grantPublicRead(this._datasetsVisTableName,t))}))}}class h{constructor(t,i,s={}){const a=Object.assign({client:"keplergl",maxApiRequestsRetries:e.Constants.DEFAULT_MAX_API_REQUESTS_RETRIES},s);this.client=a.client,this._sqlClient=new e.SQL(i,{maxApiRequestsRetries:a.maxApiRequestsRetries}),this._checkNamespace(t),this._namespace=t,this._publicSQLStorage=new u(this._namespace,this._sqlClient,this.getVersion(),!0),this._privateSQLStorage=new u(this._namespace,this._sqlClient,this.getVersion(),!1)}init(){return i(this,void 0,void 0,(function*(){if(yield this.isInitialized())return!0;yield this._sqlClient.query(`\n      BEGIN;\n        CREATE OR REPLACE FUNCTION ${this._namespace}_create_uuid()\n        RETURNS UUID AS\n        $$\n        DECLARE\n          _output UUID;\n        BEGIN\n          SELECT uuid_in(md5(random()::text || clock_timestamp()::text)::cstring) INTO _output;\n          RETURN _output;\n        END\n        $$ LANGUAGE plpgsql PARALLEL SAFE;\n      COMMIT;\n    `);const e=new t.MetricsEvent(this.client,"custom_storage_init"),i=yield Promise.all([this._publicSQLStorage.init({event:e}),this._privateSQLStorage.init({event:e})]);return i[0]||i[1]}))}getVisualizations(){this._checkReady();const e=new t.MetricsEvent(this.client,"custom_storage_visualization_list_load");return Promise.all([this._privateSQLStorage.getVisualizations({event:e}),this._publicSQLStorage.getVisualizations({event:e})]).then(t=>[...t[0],...t[1]])}getPublicVisualizations(){this._checkReady();const e=new t.MetricsEvent(this.client,"custom_storage_public_visualizations_load");return this._publicSQLStorage.getVisualizations({event:e})}getPrivateVisualizations(){this._checkReady();const e=new t.MetricsEvent(this.client,"custom_storage_private_visualizations_load");return this._privateSQLStorage.getVisualizations({event:e})}getVisualization(e){this._checkReady();const i=new t.MetricsEvent(this.client,"custom_storage_visualization_load");return Promise.all([this._publicSQLStorage.getVisualization(e,{event:i}),this._privateSQLStorage.getVisualization(e,{event:i})]).then(t=>t[0]||t[1])}deleteVisualization(e){this._checkReady();const i=new t.MetricsEvent(this.client,"custom_storage_visualization_delete");return Promise.all([this._publicSQLStorage.deleteVisualization(e,{event:i}),this._privateSQLStorage.deleteVisualization(e,{event:i})]).then(()=>!0).catch(()=>!1)}createVisualization(e,i,s){this._checkReady();const a=e.isprivate?this._privateSQLStorage:this._publicSQLStorage,n=e.isprivate?"custom_storage_private_visualization_create":"custom_storage_public_visualization_create",r=new t.MetricsEvent(this.client,n);return a.createVisualization(e,i,{overwriteDatasets:s,event:r})}updateVisualization(e,i){this._checkReady();const s=e.isprivate?this._privateSQLStorage:this._publicSQLStorage,a=new t.MetricsEvent(this.client,"custom_storage_visualization_update");return s.updateVisualization(e,i,{event:a})}getDatasets(){return Promise.all([this._publicSQLStorage.getDatasets(),this._privateSQLStorage.getDatasets()]).then(t=>[...t[0],...t[1]])}getVisForDataset(t){return Promise.all([this._publicSQLStorage.getVisForDataset(t),this._privateSQLStorage.getVisForDataset(t)]).then(t=>[...t[0],...t[1]])}uploadPublicDataset(t,e=!1){return this._uploadDataset(t,this._publicSQLStorage,!0,e)}uploadPrivateDataset(t,e=!1){return this._uploadDataset(t,this._privateSQLStorage,!1,e)}getVersion(){return h.version}migrate(){return Promise.resolve()}getSQLClient(){return this._sqlClient}setApiKey(t){this._sqlClient.setApiKey(t),this._privateSQLStorage.setApiKey(t),this._publicSQLStorage.setApiKey(t)}destroy(){return i(this,void 0,void 0,(function*(){yield this._sqlClient.query(`DROP FUNCTION ${this._namespace}_create_uuid CASCADE;`),yield this._privateSQLStorage.destroy(),yield this._publicSQLStorage.destroy()}))}isInitialized(){return i(this,void 0,void 0,(function*(){const t=yield Promise.all([this._publicSQLStorage.isInitialized(),this._privateSQLStorage.isInitialized()]);return t[0]||t[1]}))}_checkNamespace(t){if(t.split(" ").length>1)throw new Error("Namespace for custom-storage must be 1 word")}_checkReady(){if(!this._privateSQLStorage.isReady||!this._publicSQLStorage.isReady)throw new Error(".init has not finished")}_uploadDataset(t,e,s,a){return i(this,void 0,void 0,(function*(){const i=yield e.uploadDataset(t,{overwrite:a});return s&&(yield e.shareDataset(i.tablename)),i}))}}h.version=0;exports.CustomStorage=h,exports.PublicStorageReader=class extends class{constructor(e,i=t.Credentials.DEFAULT_SERVER_URL_TEMPLATE,s={}){this._client=s.client?s.client:"keplergl",this._clientMap={},this._serverUrlTemplate=i,this._tableName=o(e,!0,h.version),this._datasetTableName=l(this._tableName),this._datasetsVisTableName=d(this._tableName)}getVisualization(i,s){if(void 0===this._clientMap[i]){const s=new t.Credentials(i,t.Credentials.DEFAULT_PUBLIC_API_KEY,this._serverUrlTemplate);this._clientMap[i]=new e.SQL(s)}const a={vis:this._tableName,datasets:this._datasetTableName,visToDatasets:this._datasetsVisTableName},n=new t.MetricsEvent(this._client,"public_sql_reader_visualization_load");return r(a,s,this._clientMap[i],{event:n})}}{};
//# sourceMappingURL=custom-storage.cjs.js.map
