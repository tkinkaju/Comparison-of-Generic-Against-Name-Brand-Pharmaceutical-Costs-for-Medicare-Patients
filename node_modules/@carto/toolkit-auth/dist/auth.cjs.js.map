{"version":3,"file":"auth.cjs.js","sources":["../src/constants.ts","../src/CartoProvider.ts","../src/utils.ts","../src/Iframe.ts","../src/UserInfo.ts","../src/OAuth.ts"],"sourcesContent":["export const CARTO_AUTHORIZATION_BASE = 'https://carto.com/oauth2';\nexport const THRESHOLD = 1000 * 5 * 60;\nexport const ALREADY_EXPIRED = -1;\nexport const NO_TIMEOUT = -1;\nexport const REFRESH_STATE_PREFIX = '6574686572766f69642d74726169746f72';\n\nexport const SCOPES: RegExp[] = [\n  /offline/,\n  /dataservices:geocoding/,\n  /dataservices:isolines/,\n  /dataservices:routing/,\n  /dataservices:observatory/,\n  /datasets:r:.+/,\n  /datasets:w:.+/,\n  /datasets:rw:.+/,\n  /schemas:c/,\n  /datasets:metadata/\n];\n","import { OAuth2Provider } from '@salte-auth/salte-auth';\nimport { ALREADY_EXPIRED } from './constants';\n\ninterface CartoValidation extends OAuth2Provider.Validation {\n  user_info_url: string;\n}\n\nexport class CartoProvider extends OAuth2Provider {\n  private _userInfo: string = this.get('user_info');\n\n  get name() {\n    return 'carto';\n  }\n\n  get login() {\n    return `${this.config.url}/authorize`;\n  }\n\n  get logout() {\n    return `${this.config.url}/logout`;\n  }\n\n  get userInfo() {\n    return this._userInfo;\n  }\n\n  public $validate(options: CartoValidation): void {\n    super.$validate(options);\n\n    this._userInfo = decodeURIComponent(options.user_info_url);\n    this.set('user_info', this._userInfo);\n  }\n\n  public sync() {\n    super.sync();\n    this._userInfo = this.get('user_info');\n  }\n\n  public get expired() {\n    return this.accessToken && this.accessToken.expired;\n  }\n\n  /**\n   * Returns Expiration date for current token, or -1 if already expired\n   *\n   * @readonly\n   * @type {number}\n   * @memberof CartoProvider\n   */\n  get expiresIn(): number {\n    if (this.accessToken === undefined) {\n      return ALREADY_EXPIRED;\n    }\n\n    return this.accessToken.expiration;\n  }\n}\n\nexport default CartoProvider;\n","import { SCOPES } from './constants';\n\nexport type Pair<T> = [T, T];\n\nexport function knownScope(scope: string) {\n  return SCOPES.some((S) => S.exec(scope) !== null);\n}\n\nexport function unknownScopes(scopes: string[]) {\n  return scopes.filter(\n    (scope) => !knownScope(scope)\n  );\n}\n\nexport function buildParams(params: Array<Pair<string>>) {\n  return encodeURI(params.map((param) => {\n    return `${param[0]}=${param[1]}`;\n  }).join('&'));\n}\n","import { Utils } from '@salte-auth/salte-auth';\nimport { AuthParameters } from './AuthParameters';\nimport { CARTO_AUTHORIZATION_BASE } from './constants';\nimport { buildParams, Pair } from './utils';\n\nexport class Iframe {\n  private _params: AuthParameters;\n\n  constructor(args: AuthParameters) {\n    this._params = args;\n  }\n\n  public refresh(state: string): Promise<any> {\n    const params = [\n      ['client_id', this._params.clientID],\n      ['response_type', 'token'],\n      ['prompt', 'none'],\n      ['scopes', this._params.scopes],\n      ['state', state]\n    ];\n\n    if (this._params.redirectURI) {\n      params.push(['redirect_uri', this._params.redirectURI]);\n    }\n\n    const url = `${CARTO_AUTHORIZATION_BASE}/authorize?${buildParams(params as Array<Pair<string>>)}`;\n\n    return Utils.Common.iframe({\n      url,\n      redirectUrl: this._params.redirectURI || window.location.href,\n      visible: false\n    });\n  }\n}\n","export class UserInfo {\n  private _apiKey: string;\n  private _url: string;\n\n  constructor(apiKey: string, url: string) {\n    this._apiKey = apiKey;\n    this._url = url;\n  }\n\n  get info() {\n    return fetch(`${this._url}?api_key=${this._apiKey}`)\n      .then((response) => response.json());\n  }\n}\n\nexport default UserInfo;\n","import { Credentials } from '@carto/toolkit-core';\nimport { Popup } from '@salte-auth/popup';\nimport { SalteAuth } from '@salte-auth/salte-auth';\nimport mitt from 'mitt';\nimport { AuthParameters } from './AuthParameters';\nimport CartoProvider from './CartoProvider';\nimport { CARTO_AUTHORIZATION_BASE, NO_TIMEOUT, REFRESH_STATE_PREFIX, THRESHOLD } from './constants';\nimport { Iframe } from './Iframe';\nimport UserInfo from './UserInfo';\nimport { unknownScopes } from './utils';\n\nclass OAuth {\n  private _client: SalteAuth;\n  private _carto: CartoProvider;\n  private _refresher: Iframe;\n  private _refreshTimeout: number = NO_TIMEOUT;\n  private _emitter: mitt.Emitter;\n\n  constructor(args: AuthParameters, refreshUrl?: string) {\n    if (args == null) {\n      throw new Error('Missing OAuth parameters');\n    }\n\n    args.authorization = args.authorization || CARTO_AUTHORIZATION_BASE;\n    args.scopes = args.scopes || '';\n\n    this._emitter = mitt();\n\n    this._client = new SalteAuth({\n      providers: [\n        new CartoProvider({\n          storage: 'local',\n          level: 'trace',\n          url: args.authorization,\n          redirectUrl: args.redirectURI,\n          clientID: args.clientID,\n          responseType: 'token',\n          scope: args.scopes\n        })\n      ],\n\n      handlers: [\n        new Popup({\n          default: true\n        })\n      ]\n    });\n\n    this._refresher = new Iframe({\n      authorization: args.authorization,\n      redirectURI: refreshUrl || args.redirectURI,\n      clientID: args.clientID,\n      scopes: args.scopes\n    });\n\n    // Read the expires_in, setup timer\n    this._carto = this._client.provider('carto') as CartoProvider;\n\n    if (!this._carto.expired) {\n      this._scheduleRefresh();\n    }\n\n    if (args.scopes) {\n      this._checkScopes(args.scopes);\n    }\n  }\n\n  public login() {\n    return new Promise((resolve, reject) => {\n      const cb = (error?: any, token?: SalteAuth.EventWrapper) => {\n\n        if (error) {\n          const parsedError = {\n            error: error.code,\n            message: decodeURIComponent(error.message.replace(/\\+/g, '%20'))\n          };\n\n          reject(parsedError);\n          this._emitter.emit('error', parsedError);\n          return;\n        }\n\n        resolve(token);\n        this._emitter.emit('tokenUpdated', token);\n        this._carto.off('login', cb);\n\n        this._scheduleRefresh();\n      };\n\n      this._client.on('login', cb);\n      this._client.login('carto').catch((err) => {\n        reject(err);\n      });\n    });\n  }\n\n  public get client() {\n    return this._client;\n  }\n\n  public get expired() {\n    return this._carto.accessToken && this._carto.accessToken.expired;\n  }\n\n  public get credentials() {\n    if (!this._carto.accessToken) {\n      return null;\n    }\n\n    return new Credentials(this._carto.userInfo, this._carto.accessToken.raw);\n  }\n\n  public get token() {\n    if (this._carto.accessToken == null) {\n      return null;\n    }\n\n    return this._carto.accessToken.raw;\n  }\n\n  public get userInfo() {\n    if (this.token === null) {\n      return null;\n    }\n\n    return new UserInfo(this.token, this._carto.userInfo);\n  }\n\n  public clear() {\n    this._carto.reset();\n  }\n\n  public on(type: string, handler: mitt.Handler) {\n    this._emitter.on(type, handler);\n  }\n\n  private _scheduleRefresh() {\n    clearTimeout(this._refreshTimeout);\n    this._refreshTimeout = window.setTimeout(() => {\n      this._refresh();\n    }, this._carto.expiresIn - Date.now() - THRESHOLD);\n  }\n\n  private _refresh() {\n    if (this._carto.expired) {\n      return;\n    }\n\n    const time = Date.now();\n    this._carto.set('state', `${REFRESH_STATE_PREFIX}-${time}`);\n    this._refresher.refresh(`${REFRESH_STATE_PREFIX}-${time}`).then((data) => {\n      if (data.error) {\n        this._emitter.emit('error', {\n          error: data.error,\n          message: data.error_description.replace(/\\+/g, ' ')\n        });\n        return;\n      }\n\n      this._carto.validate(data);\n\n      this._emitter.emit('tokenUpdated', data.access_token);\n    }).catch((error) => {\n      this._emitter.emit('error', error);\n    });\n  }\n\n  private _checkScopes(scopes: string) {\n    const warnScopes = new Set<string>();\n    const scopesList = scopes.split(' ');\n\n    if (scopes) {\n      unknownScopes(scopesList || []).forEach((scope) => warnScopes.add(scope));\n    }\n\n    warnScopes.forEach((scope) => {\n      // tslint:disable-next-line: no-console\n      console.warn(`Unknown scope ${scope}`);\n    });\n  }\n}\n\nexport default OAuth;\n"],"names":["SCOPES","CartoProvider","OAuth2Provider","[object Object]","this","get","name","login","config","url","logout","userInfo","_userInfo","options","super","$validate","decodeURIComponent","user_info_url","set","sync","expired","accessToken","expiresIn","undefined","expiration","unknownScopes","scopes","filter","scope","some","S","exec","knownScope","Iframe","args","_params","state","params","clientID","redirectURI","push","encodeURI","map","param","join","buildParams","Utils","Common","iframe","redirectUrl","window","location","href","visible","UserInfo","apiKey","_apiKey","_url","info","fetch","then","response","json","refreshUrl","Error","authorization","_emitter","mitt","_client","SalteAuth","providers","storage","level","responseType","handlers","Popup","default","_refresher","_carto","provider","_scheduleRefresh","_checkScopes","Promise","resolve","reject","cb","error","token","parsedError","code","message","replace","emit","off","on","catch","err","client","credentials","Credentials","raw","reset","type","handler","clearTimeout","_refreshTimeout","setTimeout","_refresh","Date","now","time","refresh","data","error_description","validate","access_token","warnScopes","Set","scopesList","split","forEach","add","console","warn"],"mappings":"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"}