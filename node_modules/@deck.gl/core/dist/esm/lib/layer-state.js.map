{"version":3,"sources":["../../../src/lib/layer-state.ts"],"names":["ComponentState","LayerState","constructor","attributeManager","layer","needsRedraw","needsUpdate","subLayers","usesPickingColorCache","component","_fetch","propName","url","fetch","props","_onResolve","value","onDataLoad","_onError","error","raiseError"],"mappings":";AAAA,OAAOA,cAAP,MAA2B,8BAA3B;AAqBA,eAAe,MAAMC,UAAN,SAA+CD,cAA/C,CAAsE;AA4BnFE,EAAAA,WAAW,CAAC;AACVC,IAAAA,gBADU;AAEVC,IAAAA;AAFU,GAAD,EAMR;AACD,UAAMA,KAAN;;AADC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAED,SAAKD,gBAAL,GAAwBA,gBAAxB;AACA,SAAKE,WAAL,GAAmB,IAAnB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,qBAAL,GAA6B,KAA7B;AACD;;AAEQ,MAALJ,KAAK,GAAkB;AACzB,WAAO,KAAKK,SAAZ;AACD;;AAISC,EAAAA,MAAM,CAACC,QAAD,EAAWC,GAAX,EAAwB;AACtC,UAAMR,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMS,KAAK,GAAGT,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEU,KAAP,CAAaD,KAA3B;;AACA,QAAIA,KAAJ,EAAW;AACT,aAAOA,KAAK,CAACD,GAAD,EAAM;AAACD,QAAAA,QAAD;AAAWP,QAAAA;AAAX,OAAN,CAAZ;AACD;;AACD,WAAO,MAAMM,MAAN,CAAaC,QAAb,EAAuBC,GAAvB,CAAP;AACD;;AAESG,EAAAA,UAAU,CAACJ,QAAD,EAAmBK,KAAnB,EAA+B;AACjD,UAAMZ,KAAK,GAAG,KAAKA,KAAnB;;AACA,QAAIA,KAAJ,EAAW;AACT,YAAMa,UAAU,GAAGb,KAAK,CAACU,KAAN,CAAYG,UAA/B;;AACA,UAAIN,QAAQ,KAAK,MAAb,IAAuBM,UAA3B,EAAuC;AACrCA,QAAAA,UAAU,CAACD,KAAD,EAAQ;AAACL,UAAAA,QAAD;AAAWP,UAAAA;AAAX,SAAR,CAAV;AACD;AACF;AACF;;AAESc,EAAAA,QAAQ,CAACP,QAAD,EAAmBQ,KAAnB,EAAiC;AACjD,UAAMf,KAAK,GAAG,KAAKA,KAAnB;;AACA,QAAIA,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAACgB,UAAN,CAAiBD,KAAjB,oBAAmCR,QAAnC,iBAAkD,KAAKP,KAAvD;AACD;AACF;;AAzEkF","sourcesContent":["import ComponentState from '../lifecycle/component-state';\n\nimport type Layer from './layer';\nimport type AttributeManager from './attribute/attribute-manager';\nimport type Viewport from '../viewports/viewport';\nimport type UniformTransitionManager from './uniform-transition-manager';\n\nexport type ChangeFlags = {\n  // Primary changeFlags, can be strings stating reason for change\n  dataChanged: string | false | {startRow: number; endRow?: number}[];\n  propsChanged: string | false;\n  updateTriggersChanged: Record<string, true> | false;\n  extensionsChanged: boolean;\n  viewportChanged: boolean;\n  stateChanged: boolean;\n\n  // Derived changeFlags\n  propsOrDataChanged: boolean;\n  somethingChanged: boolean;\n};\n\nexport default class LayerState<LayerT extends Layer> extends ComponentState<LayerT> {\n  attributeManager: AttributeManager | null;\n  needsRedraw: boolean;\n  needsUpdate: boolean;\n  /**\n   * Sublayers rendered in a previous cycle\n   */\n  subLayers: Layer[] | null;\n  /**\n   * If the layer is using the shared instancedPickingColors buffer\n   */\n  usesPickingColorCache: boolean;\n  /**\n   * If the layer has picking buffer (pickingColors or instancePickingColors)\n   */\n  hasPickingBuffer?: boolean;\n  /**\n   * Dirty flags of the layer's props and state\n   */\n  changeFlags!: ChangeFlags;\n\n  /** The last viewport rendered by this layer */\n  viewport?: Viewport;\n\n  uniformTransitions!: UniformTransitionManager;\n  /** Populated during uniform transition to replace user-supplied values */\n  propsInTransition?: LayerT['props'];\n\n  constructor({\n    attributeManager,\n    layer\n  }: {\n    attributeManager: AttributeManager | null;\n    layer: LayerT;\n  }) {\n    super(layer);\n    this.attributeManager = attributeManager;\n    this.needsRedraw = true;\n    this.needsUpdate = true;\n    this.subLayers = null;\n    this.usesPickingColorCache = false;\n  }\n\n  get layer(): LayerT | null {\n    return this.component;\n  }\n\n  /* Override base Component methods with Layer-specific handling */\n\n  protected _fetch(propName, url: string) {\n    const layer = this.layer;\n    const fetch = layer?.props.fetch;\n    if (fetch) {\n      return fetch(url, {propName, layer});\n    }\n    return super._fetch(propName, url);\n  }\n\n  protected _onResolve(propName: string, value: any) {\n    const layer = this.layer;\n    if (layer) {\n      const onDataLoad = layer.props.onDataLoad;\n      if (propName === 'data' && onDataLoad) {\n        onDataLoad(value, {propName, layer});\n      }\n    }\n  }\n\n  protected _onError(propName: string, error: Error) {\n    const layer = this.layer;\n    if (layer) {\n      layer.raiseError(error, `loading ${propName} of ${this.layer}`);\n    }\n  }\n}\n"],"file":"layer-state.js"}