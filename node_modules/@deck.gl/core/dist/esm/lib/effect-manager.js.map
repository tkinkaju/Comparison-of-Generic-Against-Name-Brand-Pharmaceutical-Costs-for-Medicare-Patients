{"version":3,"sources":["../../../src/lib/effect-manager.ts"],"names":["deepEqual","LightingEffect","DEFAULT_LIGHTING_EFFECT","compareEffects","e1","e2","o1","order","Infinity","o2","EffectManager","constructor","effects","_needsRedraw","_setEffects","addDefaultEffect","effect","defaultEffects","_defaultEffects","find","e","id","index","findIndex","push","splice","setProps","props","needsRedraw","opts","clearRedrawFlags","redraw","getEffects","_resolvedEffects","oldEffectsMap","nextEffects","oldEffect","cleanup","removedEffectId","concat","some","finalize","length"],"mappings":"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","sourcesContent":["import {deepEqual} from '../utils/deep-equal';\nimport LightingEffect from '../effects/lighting/lighting-effect';\nimport type {Effect} from './effect';\n\nconst DEFAULT_LIGHTING_EFFECT = new LightingEffect();\n\n/** Sort two effects. Returns 0 if equal, negative if e1 < e2, positive if e1 > e2 */\nfunction compareEffects(e1: Effect, e2: Effect): number {\n  const o1 = e1.order ?? Infinity;\n  const o2 = e2.order ?? Infinity;\n  return o1 - o2;\n}\n\nexport default class EffectManager {\n  effects: Effect[];\n  private _resolvedEffects: Effect[] = [];\n  /** Effect instances and order preference pairs, sorted by order */\n  private _defaultEffects: Effect[] = [];\n  private _needsRedraw: false | string;\n\n  constructor() {\n    this.effects = [];\n    this._needsRedraw = 'Initial render';\n    this._setEffects([]);\n  }\n\n  /**\n   * Register a new default effect, i.e. an effect presents regardless of user supplied props.effects\n   */\n  addDefaultEffect(effect: Effect) {\n    const defaultEffects = this._defaultEffects;\n    if (!defaultEffects.find(e => e.id === effect.id)) {\n      const index = defaultEffects.findIndex(e => compareEffects(e, effect) > 0);\n      if (index < 0) {\n        defaultEffects.push(effect);\n      } else {\n        defaultEffects.splice(index, 0, effect);\n      }\n      this._setEffects(this.effects);\n    }\n  }\n\n  setProps(props) {\n    if ('effects' in props) {\n      // Compare effects against each other shallowly\n      if (!deepEqual(props.effects, this.effects, 1)) {\n        this._setEffects(props.effects);\n      }\n    }\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}): false | string {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  getEffects() {\n    return this._resolvedEffects;\n  }\n\n  private _setEffects(effects: Effect[]) {\n    const oldEffectsMap: Record<string, Effect> = {};\n    for (const effect of this.effects) {\n      oldEffectsMap[effect.id] = effect;\n    }\n\n    const nextEffects: Effect[] = [];\n    for (const effect of effects) {\n      const oldEffect = oldEffectsMap[effect.id];\n      if (oldEffect && oldEffect !== effect) {\n        if (oldEffect.setProps) {\n          oldEffect.setProps(effect.props);\n          nextEffects.push(oldEffect);\n        } else {\n          oldEffect.cleanup();\n          nextEffects.push(effect);\n        }\n      } else {\n        nextEffects.push(effect);\n      }\n      delete oldEffectsMap[effect.id];\n    }\n    for (const removedEffectId in oldEffectsMap) {\n      oldEffectsMap[removedEffectId].cleanup();\n    }\n    this.effects = nextEffects;\n\n    this._resolvedEffects = nextEffects.concat(this._defaultEffects);\n    // Special case for lighting: only add default instance if no LightingEffect is specified\n    if (!effects.some(effect => effect instanceof LightingEffect)) {\n      this._resolvedEffects.push(DEFAULT_LIGHTING_EFFECT);\n    }\n    this._needsRedraw = 'effects changed';\n  }\n\n  finalize() {\n    for (const effect of this._resolvedEffects) {\n      effect.cleanup();\n    }\n\n    this.effects.length = 0;\n    this._resolvedEffects.length = 0;\n    this._defaultEffects.length = 0;\n  }\n}\n"],"file":"effect-manager.js"}