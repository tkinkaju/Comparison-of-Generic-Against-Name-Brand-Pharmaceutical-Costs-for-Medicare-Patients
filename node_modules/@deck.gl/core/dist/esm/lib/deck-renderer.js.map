{"version":3,"sources":["../../../src/lib/deck-renderer.ts"],"names":["debug","DrawLayersPass","PickLayersPass","Framebuffer","TRACE_RENDER_LAYERS","DeckRenderer","constructor","gl","layerFilter","drawPickingColors","drawLayersPass","pickLayersPass","renderCount","_needsRedraw","renderBuffers","lastPostProcessEffect","setProps","props","renderLayers","opts","layerPass","renderOpts","isPicking","target","getDefaultFramebuffer","effects","_preRender","outputBuffer","renderStats","render","_postRender","needsRedraw","clearRedrawFlags","redraw","finalize","buffer","delete","length","preRenderStats","effect","id","preRender","postRender","_resizeRenderBuffers","push","resize","params","inputBuffer","swapBuffer"],"mappings":"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","sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nimport type Layer from './layer';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type {Effect} from './effect';\nimport type {LayersPassRenderOptions, FilterContext} from '../passes/layers-pass';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\ntype LayerFilter = ((context: FilterContext) => boolean) | null;\n\nexport default class DeckRenderer {\n  gl: WebGLRenderingContext;\n  layerFilter: LayerFilter;\n  drawPickingColors: boolean;\n  drawLayersPass: DrawLayersPass;\n  pickLayersPass: PickLayersPass;\n\n  private renderCount: number;\n  private _needsRedraw: string | false;\n  private renderBuffers: Framebuffer[];\n  private lastPostProcessEffect: string | null;\n\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props: {layerFilter: LayerFilter; drawPickingColors: boolean}) {\n    if (this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if (this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  renderLayers(opts: {\n    pass: string;\n    layers: Layer[];\n    viewports: Viewport[];\n    views: {[viewId: string]: View};\n    onViewportActive: (viewport: Viewport) => void;\n    effects: Effect[];\n    target?: Framebuffer;\n    layerFilter?: LayerFilter;\n    clearStack?: boolean;\n    clearCanvas?: boolean;\n  }) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    const renderOpts: LayersPassRenderOptions = {\n      layerFilter: this.layerFilter,\n      isPicking: this.drawPickingColors,\n      ...opts,\n      target: opts.target || Framebuffer.getDefaultFramebuffer(this.gl)\n    };\n\n    if (renderOpts.effects) {\n      this._preRender(renderOpts.effects, renderOpts);\n    }\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;\n    const renderStats = layerPass.render({...renderOpts, target: outputBuffer});\n\n    if (renderOpts.effects) {\n      this._postRender(renderOpts.effects, renderOpts);\n    }\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts: {clearRedrawFlags: boolean} = {clearRedrawFlags: false}): string | false {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  private _preRender(effects: Effect[], opts: LayersPassRenderOptions) {\n    this.lastPostProcessEffect = null;\n    opts.preRenderStats = opts.preRenderStats || {};\n\n    for (const effect of effects) {\n      opts.preRenderStats[effect.id] = effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        this.lastPostProcessEffect = effect.id;\n      }\n    }\n\n    if (this.lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n  }\n\n  private _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  private _postRender(effects: Effect[], opts: LayersPassRenderOptions) {\n    const {renderBuffers} = this;\n    const params = {\n      ...opts,\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect.id === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"],"file":"deck-renderer.js"}