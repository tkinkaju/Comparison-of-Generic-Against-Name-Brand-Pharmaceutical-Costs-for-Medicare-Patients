{"version":3,"sources":["../../../src/lifecycle/props.ts"],"names":["PROP_TYPES_SYMBOL","validateProps","props","propTypes","propName","propType","validate","Error","diffProps","oldProps","propsChangedReason","compareProps","newProps","ignoreProps","data","updateTriggers","extensions","transitions","dataChangedReason","diffDataProps","updateTriggersChangedReason","diffUpdateTriggers","dataChanged","propsChanged","updateTriggersChanged","extensionsChanged","diffExtensions","transitionsChanged","diffTransitions","result","changed","key","type","isTransitionable","comparePropValues","triggerName","Object","keys","hasOwnProperty","call","newProp","oldProp","equal","equals","dataComparator","_dataDiff","all","diffReason","diffUpdateTrigger","reason","oldExtensions","length","i","newTriggers","undefined","oldTriggers"],"mappings":"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","sourcesContent":["import {PROP_TYPES_SYMBOL} from './constants';\n\nexport function validateProps(props) {\n  const propTypes = props[PROP_TYPES_SYMBOL];\n\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {validate} = propType;\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(`Invalid prop ${propName}: ${props[propName]}`);\n    }\n  }\n}\n\n// Returns an object with \"change flags\", either false or strings indicating reason for change\nexport function diffProps(\n  props,\n  oldProps\n): {\n  dataChanged: string | false | {startRow: number; endRow?: number}[];\n  propsChanged: string | false;\n  updateTriggersChanged: Record<string, true> | false;\n  extensionsChanged: boolean;\n  transitionsChanged: Record<string, true> | false;\n} {\n  // First check if any props have changed (ignore props that will be examined separately)\n  const propsChangedReason = compareProps({\n    newProps: props,\n    oldProps,\n    propTypes: props[PROP_TYPES_SYMBOL],\n    ignoreProps: {data: null, updateTriggers: null, extensions: null, transitions: null}\n  });\n\n  // Now check if any data related props have changed\n  const dataChangedReason = diffDataProps(props, oldProps);\n\n  // Check update triggers to determine if any attributes need regeneration\n  // Note - if data has changed, all attributes will need regeneration, so skip this step\n  let updateTriggersChangedReason: false | string | Record<string, true> = false;\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason,\n    extensionsChanged: diffExtensions(props, oldProps),\n    transitionsChanged: diffTransitions(props, oldProps)\n  };\n}\n\nfunction diffTransitions(props, oldProps): false | Record<string, true> {\n  if (!props.transitions) {\n    return false;\n  }\n  const result: Record<string, true> = {};\n  const propTypes = props[PROP_TYPES_SYMBOL];\n  let changed = false;\n\n  for (const key in props.transitions) {\n    const propType = propTypes[key];\n    const type = propType && propType.type;\n    const isTransitionable = type === 'number' || type === 'color' || type === 'array';\n    if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {\n      result[key] = true;\n      changed = true;\n    }\n  }\n  return changed ? result : false;\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * @param {Object} opt.oldProps - object with old key/value pairs\n * @param {Object} opt.newProps - object with new key/value pairs\n * @param {Object} opt.ignoreProps={} - object, keys that should not be compared\n * @returns {null|String} - null when values of all keys are strictly equal.\n *   if unequal, returns a string explaining what changed.\n */\n/* eslint-disable max-statements, max-depth, complexity */\n/*\n * Note: for better performance, this function assumes that both oldProps and newProps\n   inherit the same prototype (defaultProps). That is, if neither object contains own\n   property <key>, assume `oldProps.<key>` and `newProps.<key>` are equal.\n */\nexport function compareProps({\n  newProps,\n  oldProps,\n  ignoreProps = {},\n  propTypes = {},\n  triggerName = 'props'\n}): string | false {\n  // shallow equality => deep equality\n  if (oldProps === newProps) {\n    return false;\n  }\n\n  // TODO - do we need these checks? Should never happen...\n  if (typeof newProps !== 'object' || newProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  // Compare explicitly defined new props against old/default values\n  for (const key of Object.keys(newProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return `${triggerName}.${key} added`;\n      }\n      const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n      if (changed) {\n        return `${triggerName}.${key} ${changed}`;\n      }\n    }\n  }\n\n  // Test if any old props have been dropped\n  for (const key of Object.keys(oldProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in newProps)) {\n        return `${triggerName}.${key} dropped`;\n      }\n      if (!Object.hasOwnProperty.call(newProps, key)) {\n        // Compare dropped old prop against default value\n        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n        if (changed) {\n          return `${triggerName}.${key} ${changed}`;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n/* eslint-enable max-statements, max-depth, complexity */\n\n// HELPERS\nfunction comparePropValues(newProp, oldProp, propType) {\n  // If prop type has an equal function, invoke it\n  let equal = propType && propType.equal;\n  if (equal && !equal(newProp, oldProp, propType)) {\n    return 'changed deeply';\n  }\n\n  if (!equal) {\n    // If object has an equals function, invoke it\n    equal = newProp && oldProp && newProp.equals;\n    if (equal && !equal.call(newProp, oldProp)) {\n      return 'changed deeply';\n    }\n  }\n\n  if (!equal && oldProp !== newProp) {\n    return 'changed shallowly';\n  }\n\n  return null;\n}\n\n// The comparison of the data prop requires special handling\n// the dataComparator should be used if supplied\nfunction diffDataProps(props, oldProps): string | false | {startRow: number; endRow?: number}[] {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  let dataChanged: string | false | {startRow: number; endRow?: number}[] = false;\n  // Support optional app defined comparison of data\n  const {dataComparator, _dataDiff} = props;\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      dataChanged = 'Data comparator detected a change';\n    }\n    // Otherwise, do a shallow equal on props\n  } else if (props.data !== oldProps.data) {\n    dataChanged = 'A new data container was supplied';\n  }\n  if (dataChanged && _dataDiff) {\n    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n  }\n\n  return dataChanged;\n}\n\n// Checks if any update triggers have changed\n// also calls callback to invalidate attributes accordingly.\nfunction diffUpdateTriggers(props, oldProps): Record<string, true> | false {\n  if (oldProps === null) {\n    return {all: true};\n  }\n\n  // If the 'all' updateTrigger fires, ignore testing others\n  if ('all' in props.updateTriggers) {\n    const diffReason = diffUpdateTrigger(props, oldProps, 'all');\n    if (diffReason) {\n      return {all: true};\n    }\n  }\n\n  const reason: Record<string, true> = {};\n  let changed = false;\n  // If the 'all' updateTrigger didn't fire, need to check all others\n  for (const triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      const diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n      if (diffReason) {\n        reason[triggerName] = true;\n        changed = true;\n      }\n    }\n  }\n\n  return changed ? reason : false;\n}\n\n// Returns true if any extensions have changed\nfunction diffExtensions(props, oldProps): boolean {\n  if (oldProps === null) {\n    return true;\n  }\n\n  const oldExtensions = oldProps.extensions;\n  const {extensions} = props;\n\n  if (extensions === oldExtensions) {\n    return false;\n  }\n  if (!oldExtensions || !extensions) {\n    return true;\n  }\n  if (extensions.length !== oldExtensions.length) {\n    return true;\n  }\n  for (let i = 0; i < extensions.length; i++) {\n    if (!extensions[i].equals(oldExtensions[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  let newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  let oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  const diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName\n  });\n  return diffReason;\n}\n"],"file":"props.js"}