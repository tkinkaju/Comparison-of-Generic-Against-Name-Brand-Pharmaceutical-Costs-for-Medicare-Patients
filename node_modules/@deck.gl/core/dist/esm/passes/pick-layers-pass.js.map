{"version":3,"sources":["../../../src/passes/pick-layers-pass.ts"],"names":["LayersPass","withParameters","log","PICKING_PARAMETERS","blendFunc","blendEquation","PickLayersPass","render","props","_drawPickingBuffer","layers","layerFilter","views","viewports","onViewportActive","pickingFBO","deviceRect","x","y","width","height","cullRect","effects","pass","pickZ","moduleParameters","gl","colorEncoderState","_resetColorEncoder","renderStatus","scissorTest","scissor","clearColor","depthMask","depthTest","depthRange","colorMask","blend","target","filter","e","useInPicking","isPicking","_colorEncoderState","decodePickingColor","decodeColor","bind","stats","shouldDrawLayer","layer","pickable","operation","includes","getModuleParameters","pickingActive","pickingAttribute","lightSources","getLayerParameters","layerIndex","viewport","pickParameters","parameters","Object","assign","blendColor","encodeColor","byLayer","Map","byAlpha","encoded","a","entry","get","push","size","set","warn","pickedColor","pickedLayer","pickedViewports","pickedObjectIndex"],"mappings":"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","sourcesContent":["import LayersPass, {LayersPassRenderOptions, RenderStats, Rect} from './layers-pass';\nimport {withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport log from '../utils/log';\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport type Viewport from '../viewports/viewport';\nimport type Layer from '../lib/layer';\n\nconst PICKING_PARAMETERS = {\n  blendFunc: [GL.ONE, GL.ZERO, GL.CONSTANT_ALPHA, GL.ZERO],\n  blendEquation: GL.FUNC_ADD\n};\n\ntype PickLayersPassRenderOptions = LayersPassRenderOptions & {\n  pickingFBO: Framebuffer;\n  deviceRect: Rect;\n  pickZ: boolean;\n};\n\ntype EncodedPickingColors = {\n  a: number;\n  layer: Layer;\n  viewports: Viewport[];\n};\n\nexport type PickingColorDecoder = (pickedColor: number[] | Uint8Array) =>\n  | {\n      pickedLayer: Layer;\n      pickedViewports: Viewport[];\n      pickedObjectIndex: number;\n    }\n  | undefined;\n\nexport default class PickLayersPass extends LayersPass {\n  private pickZ?: boolean;\n  private _colorEncoderState: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  } | null = null;\n\n  render(props: LayersPassRenderOptions | PickLayersPassRenderOptions) {\n    if ('pickingFBO' in props) {\n      // When drawing into an off-screen buffer, use the alpha channel to encode layer index\n      return this._drawPickingBuffer(props);\n    }\n    // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible\n    return super.render(props);\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {x, y, width, height},\n    cullRect,\n    effects,\n    pass = 'picking',\n    pickZ,\n    moduleParameters\n  }: PickLayersPassRenderOptions): {\n    decodePickingColor: PickingColorDecoder | null;\n    stats: RenderStats;\n  } {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n    const colorEncoderState = this._resetColorEncoder(pickZ);\n\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    const renderStatus = withParameters(\n      gl,\n      {\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        // When used as Mapbox custom layer, the context state may be dirty\n        // TODO - Remove when mapbox fixes this issue\n        // https://github.com/mapbox/mapbox-gl-js/issues/7801\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true],\n        // Blending\n        ...PICKING_PARAMETERS,\n        blend: !pickZ\n      },\n      () =>\n        super.render({\n          target: pickingFBO,\n          layers,\n          layerFilter,\n          views,\n          viewports,\n          onViewportActive,\n          cullRect,\n          effects: effects?.filter(e => e.useInPicking),\n          pass,\n          isPicking: true,\n          moduleParameters\n        })\n    );\n\n    // Clear the temp field\n    this._colorEncoderState = null;\n    const decodePickingColor = colorEncoderState && decodeColor.bind(null, colorEncoderState);\n    return {decodePickingColor, stats: renderStatus};\n  }\n\n  shouldDrawLayer(layer: Layer): boolean {\n    const {pickable, operation} = layer.props;\n    return (pickable && operation.includes('draw')) || operation.includes('terrain');\n  }\n\n  protected getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      // turn off lighting by adding empty light source object\n      // lights shader module relies on the `lightSources` to turn on/off lighting\n      lightSources: {}\n    };\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    const pickParameters = {...layer.props.parameters};\n    const {pickable, operation} = layer.props;\n\n    if (!this._colorEncoderState) {\n      pickParameters.blend = false;\n    } else if (pickable && operation.includes('draw')) {\n      Object.assign(pickParameters, PICKING_PARAMETERS);\n      pickParameters.blend = true;\n      pickParameters.blendColor = encodeColor(this._colorEncoderState, layer, viewport);\n    }\n    if (operation.includes('terrain')) {\n      pickParameters.blend = false;\n    }\n\n    return pickParameters;\n  }\n\n  protected _resetColorEncoder(pickZ: boolean) {\n    // Track encoded layer indices\n    this._colorEncoderState = pickZ\n      ? null\n      : {\n          byLayer: new Map<Layer, EncodedPickingColors>(),\n          byAlpha: []\n        };\n    // Temporarily store it on the instance so that it can be accessed by this.getLayerParameters\n    return this._colorEncoderState;\n  }\n}\n\n// Assign an unique alpha value for each pickable layer and track the encoding in the cache object\n// Returns normalized blend color\nfunction encodeColor(\n  encoded: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  },\n  layer: Layer,\n  viewport: Viewport\n): number[] {\n  const {byLayer, byAlpha} = encoded;\n  let a;\n\n  // Encode layerIndex in the alpha channel\n  // TODO - combine small layers to better utilize the picking color space\n  let entry = byLayer.get(layer);\n  if (entry) {\n    entry.viewports.push(viewport);\n    a = entry.a;\n  } else {\n    a = byLayer.size + 1;\n    if (a <= 255) {\n      entry = {a, layer, viewports: [viewport]};\n      byLayer.set(layer, entry);\n      byAlpha[a] = entry;\n    } else {\n      log.warn('Too many pickable layers, only picking the first 255')();\n      a = 0;\n    }\n  }\n  return [0, 0, 0, a / 255];\n}\n\n// Given a picked color, retrieve the corresponding layer and viewports from cache\nfunction decodeColor(\n  encoded: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  },\n  pickedColor: number[] | Uint8Array\n):\n  | {\n      pickedLayer: Layer;\n      pickedViewports: Viewport[];\n      pickedObjectIndex: number;\n    }\n  | undefined {\n  const entry = encoded.byAlpha[pickedColor[3]];\n  return (\n    entry && {\n      pickedLayer: entry.layer,\n      pickedViewports: entry.viewports,\n      pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)\n    }\n  );\n}\n"],"file":"pick-layers-pass.js"}