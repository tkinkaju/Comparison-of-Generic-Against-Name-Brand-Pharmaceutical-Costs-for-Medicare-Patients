{"version":3,"sources":["../../../src/viewports/web-mercator-viewport.ts"],"names":["Viewport","pixelsToWorld","getViewMatrix","addMetersToLngLat","unitsPerMeter","getProjectionParameters","altitudeToFovy","fovyToAltitude","fitBounds","getBounds","vec2","Matrix4","clamp","WebMercatorViewport","constructor","opts","latitude","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","projectionMatrix","repeat","worldOffset","position","padding","legacyMeterSizes","width","height","altitude","scale","Math","pow","fovy","projectionParameters","offset","top","bottom","center","viewMatrixUncentered","viewOffset","translate","multiplyLeft","viewMatrix","focalDistance","_subViewports","_pseudoMeters","Object","freeze","subViewports","length","bounds","minOffset","floor","maxOffset","ceil","x","offsetViewport","push","projectPosition","xyz","X","Y","projectFlat","Z","unprojectPosition","unprojectFlat","lngLatZ","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","add","negate","newCenter","options","corners","z","min","max"],"mappings":";AAsBA,OAAOA,QAAP,MAAqB,YAArB;AAEA,SACEC,aADF,EAEEC,aAFF,EAGEC,iBAHF,EAIEC,aAJF,EAKEC,uBALF,EAMEC,cANF,EAOEC,cAPF,EAQEC,SARF,EASEC,SATF,QAUO,uBAVP;AAcA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AACA,SAAQC,OAAR,EAAiBC,KAAjB,QAA6B,eAA7B;AAoDA,eAAe,MAAMC,mBAAN,SAAkCb,QAAlC,CAA2C;AAiBxDc,EAAAA,WAAW,CAACC,IAAgC,GAAG,EAApC,EAAwC;AACjD,UAAM;AACJC,MAAAA,QAAQ,GAAG,CADP;AAEJC,MAAAA,SAAS,GAAG,CAFR;AAGJC,MAAAA,IAAI,GAAG,CAHH;AAIJC,MAAAA,KAAK,GAAG,CAJJ;AAKJC,MAAAA,OAAO,GAAG,CALN;AAMJC,MAAAA,eAAe,GAAG,GANd;AAOJC,MAAAA,cAAc,GAAG,IAPb;AAQJC,MAAAA,YAAY,GAAG,KARX;AASJC,MAAAA,gBATI;AAWJC,MAAAA,MAAM,GAAG,KAXL;AAYJC,MAAAA,WAAW,GAAG,CAZV;AAaJC,MAAAA,QAbI;AAcJC,MAAAA,OAdI;AAkBJC,MAAAA,gBAAgB,GAAG;AAlBf,QAmBFd,IAnBJ;AAqBA,QAAI;AAACe,MAAAA,KAAD;AAAQC,MAAAA,MAAR;AAAgBC,MAAAA,QAAQ,GAAG;AAA3B,QAAkCjB,IAAtC;AACA,UAAMkB,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYjB,IAAZ,CAAd;AAGAY,IAAAA,KAAK,GAAGA,KAAK,IAAI,CAAjB;AACAC,IAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AAEA,QAAIK,IAAJ;AACA,QAAIC,oBAAyB,GAAG,IAAhC;;AACA,QAAIb,gBAAJ,EAAsB;AACpBQ,MAAAA,QAAQ,GAAGR,gBAAgB,CAAC,CAAD,CAAhB,GAAsB,CAAjC;AACAY,MAAAA,IAAI,GAAG9B,cAAc,CAAC0B,QAAD,CAArB;AACD,KAHD,MAGO;AACL,UAAIjB,IAAI,CAACqB,IAAT,EAAe;AACbA,QAAAA,IAAI,GAAGrB,IAAI,CAACqB,IAAZ;AACAJ,QAAAA,QAAQ,GAAGzB,cAAc,CAAC6B,IAAD,CAAzB;AACD,OAHD,MAGO;AACLA,QAAAA,IAAI,GAAG9B,cAAc,CAAC0B,QAAD,CAArB;AACD;;AAED,UAAIM,MAAJ;;AACA,UAAIV,OAAJ,EAAa;AACX,cAAM;AAACW,UAAAA,GAAG,GAAG,CAAP;AAAUC,UAAAA,MAAM,GAAG;AAAnB,YAAwBZ,OAA9B;AACAU,QAAAA,MAAM,GAAG,CAAC,CAAD,EAAI1B,KAAK,CAAC,CAAC2B,GAAG,GAAGR,MAAN,GAAeS,MAAhB,IAA0B,CAA3B,EAA8B,CAA9B,EAAiCT,MAAjC,CAAL,GAAgDA,MAAM,GAAG,CAA7D,CAAT;AACD;;AAEDM,MAAAA,oBAAoB,GAAGhC,uBAAuB,CAAC;AAC7CyB,QAAAA,KAD6C;AAE7CC,QAAAA,MAF6C;AAG7CE,QAAAA,KAH6C;AAI7CQ,QAAAA,MAAM,EAAEd,QAAQ,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAOA,QAAQ,CAAC,CAAD,CAAR,GAAcvB,aAAa,CAACY,QAAD,CAAlC,CAJyB;AAK7CsB,QAAAA,MAL6C;AAM7CnB,QAAAA,KAN6C;AAO7CiB,QAAAA,IAP6C;AAQ7Cf,QAAAA,eAR6C;AAS7CC,QAAAA;AAT6C,OAAD,CAA9C;AAWD;;AAMD,QAAIoB,oBAAoB,GAAGxC,aAAa,CAAC;AACvC6B,MAAAA,MADuC;AAEvCZ,MAAAA,KAFuC;AAGvCC,MAAAA,OAHuC;AAIvCa,MAAAA,KAJuC;AAKvCD,MAAAA;AALuC,KAAD,CAAxC;;AAQA,QAAIN,WAAJ,EAAiB;AACf,YAAMiB,UAAU,GAAG,IAAIhC,OAAJ,GAAciC,SAAd,CAAwB,CAAC,MAAMlB,WAAP,EAAoB,CAApB,EAAuB,CAAvB,CAAxB,CAAnB;AACAgB,MAAAA,oBAAoB,GAAGC,UAAU,CAACE,YAAX,CAAwBH,oBAAxB,CAAvB;AACD;;AAED,UAAM,EACJ,GAAG3B,IADC;AAGJe,MAAAA,KAHI;AAIJC,MAAAA,MAJI;AAOJe,MAAAA,UAAU,EAAEJ,oBAPR;AAQJzB,MAAAA,SARI;AASJD,MAAAA,QATI;AAUJE,MAAAA,IAVI;AAaJ,SAAGmB,oBAbC;AAcJD,MAAAA,IAdI;AAeJW,MAAAA,aAAa,EAAEf;AAfX,KAAN;;AA9EiD;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAiGjD,SAAKhB,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKY,QAAL,GAAgBA,QAAhB;AACA,SAAKI,IAAL,GAAYA,IAAZ;AAEA,SAAKb,YAAL,GAAoBA,YAApB;AAEA,SAAKyB,aAAL,GAAqBvB,MAAM,GAAG,EAAH,GAAQ,IAAnC;AACA,SAAKwB,aAAL,GAAqBpB,gBAArB;AAEAqB,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;AAGe,MAAZC,YAAY,GAAiC;AAC/C,QAAI,KAAKJ,aAAL,IAAsB,CAAC,KAAKA,aAAL,CAAmBK,MAA9C,EAAsD;AAEpD,YAAMC,MAAM,GAAG,KAAK7C,SAAL,EAAf;AAEA,YAAM8C,SAAS,GAAGrB,IAAI,CAACsB,KAAL,CAAW,CAACF,MAAM,CAAC,CAAD,CAAN,GAAY,GAAb,IAAoB,GAA/B,CAAlB;AACA,YAAMG,SAAS,GAAGvB,IAAI,CAACwB,IAAL,CAAU,CAACJ,MAAM,CAAC,CAAD,CAAN,GAAY,GAAb,IAAoB,GAA9B,CAAlB;;AAEA,WAAK,IAAIK,CAAC,GAAGJ,SAAb,EAAwBI,CAAC,IAAIF,SAA7B,EAAwCE,CAAC,EAAzC,EAA6C;AAC3C,cAAMC,cAAc,GAAGD,CAAC,GACpB,IAAI9C,mBAAJ,CAAwB,EACtB,GAAG,IADmB;AAEtBa,UAAAA,WAAW,EAAEiC;AAFS,SAAxB,CADoB,GAKpB,IALJ;;AAMA,aAAKX,aAAL,CAAmBa,IAAnB,CAAwBD,cAAxB;AACD;AACF;;AACD,WAAO,KAAKZ,aAAZ;AACD;;AAEDc,EAAAA,eAAe,CAACC,GAAD,EAA0C;AACvD,QAAI,KAAKd,aAAT,EAAwB;AAEtB,aAAO,MAAMa,eAAN,CAAsBC,GAAtB,CAAP;AACD;;AACD,UAAM,CAACC,CAAD,EAAIC,CAAJ,IAAS,KAAKC,WAAL,CAAiBH,GAAjB,CAAf;AACA,UAAMI,CAAC,GAAG,CAACJ,GAAG,CAAC,CAAD,CAAH,IAAU,CAAX,IAAgB3D,aAAa,CAAC2D,GAAG,CAAC,CAAD,CAAJ,CAAvC;AACA,WAAO,CAACC,CAAD,EAAIC,CAAJ,EAAOE,CAAP,CAAP;AACD;;AAEDC,EAAAA,iBAAiB,CAACL,GAAD,EAA0C;AACzD,QAAI,KAAKd,aAAT,EAAwB;AAEtB,aAAO,MAAMmB,iBAAN,CAAwBL,GAAxB,CAAP;AACD;;AACD,UAAM,CAACC,CAAD,EAAIC,CAAJ,IAAS,KAAKI,aAAL,CAAmBN,GAAnB,CAAf;AACA,UAAMI,CAAC,GAAG,CAACJ,GAAG,CAAC,CAAD,CAAH,IAAU,CAAX,IAAgB3D,aAAa,CAAC6D,CAAD,CAAvC;AACA,WAAO,CAACD,CAAD,EAAIC,CAAJ,EAAOE,CAAP,CAAP;AACD;;AAYDhE,EAAAA,iBAAiB,CAACmE,OAAD,EAAoBP,GAApB,EAA6C;AAC5D,WAAO5D,iBAAiB,CAACmE,OAAD,EAAUP,GAAV,CAAxB;AACD;;AAEDQ,EAAAA,aAAa,CAACC,MAAD,EAAmBC,KAAnB,EAAgE;AAC3E,UAAMC,YAAY,GAAGzE,aAAa,CAACwE,KAAD,EAAQ,KAAKE,uBAAb,CAAlC;AACA,UAAMC,UAAU,GAAG,KAAKV,WAAL,CAAiBM,MAAjB,CAAnB;AAEA,UAAM5B,SAAS,GAAGlC,IAAI,CAACmE,GAAL,CAAS,EAAT,EAAaD,UAAb,EAAyBlE,IAAI,CAACoE,MAAL,CAAY,EAAZ,EAAgBJ,YAAhB,CAAzB,CAAlB;AACA,UAAMK,SAAS,GAAGrE,IAAI,CAACmE,GAAL,CAAS,EAAT,EAAa,KAAKpC,MAAlB,EAA0BG,SAA1B,CAAlB;AAEA,UAAM,CAAC3B,SAAD,EAAYD,QAAZ,IAAwB,KAAKqD,aAAL,CAAmBU,SAAnB,CAA9B;AACA,WAAO;AAAC9D,MAAAA,SAAD;AAAYD,MAAAA;AAAZ,KAAP;AACD;;AAEDP,EAAAA,SAAS,CAACuE,OAAqB,GAAG,EAAzB,EAA+D;AAEtE,UAAMC,OAAO,GAAGxE,SAAS,CAAC,IAAD,EAAOuE,OAAO,CAACE,CAAR,IAAa,CAApB,CAAzB;AAEA,WAAO,CACLhD,IAAI,CAACiD,GAAL,CAASF,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT,EAAwBA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAxB,EAAuCA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAvC,EAAsDA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAtD,CADK,EAEL/C,IAAI,CAACiD,GAAL,CAASF,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT,EAAwBA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAxB,EAAuCA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAvC,EAAsDA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAtD,CAFK,EAGL/C,IAAI,CAACkD,GAAL,CAASH,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT,EAAwBA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAxB,EAAuCA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAvC,EAAsDA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAtD,CAHK,EAIL/C,IAAI,CAACkD,GAAL,CAASH,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAT,EAAwBA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAxB,EAAuCA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAvC,EAAsDA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAtD,CAJK,CAAP;AAMD;;AAMDzE,EAAAA,SAAS,CAEP8C,MAFO,EAGP0B,OAaC,GAAG,EAhBG,EAiBP;AACA,UAAM;AAAClD,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAkB,IAAxB;AACA,UAAM;AAACd,MAAAA,SAAD;AAAYD,MAAAA,QAAZ;AAAsBE,MAAAA;AAAtB,QAA8BV,SAAS,CAAC;AAACsB,MAAAA,KAAD;AAAQC,MAAAA,MAAR;AAAgBuB,MAAAA,MAAhB;AAAwB,SAAG0B;AAA3B,KAAD,CAA7C;AACA,WAAO,IAAInE,mBAAJ,CAAwB;AAACiB,MAAAA,KAAD;AAAQC,MAAAA,MAAR;AAAgBd,MAAAA,SAAhB;AAA2BD,MAAAA,QAA3B;AAAqCE,MAAAA;AAArC,KAAxB,CAAP;AACD;;AA1OuD;;gBAArCL,mB,iBACE,qB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  unitsPerMeter,\n  getProjectionParameters,\n  altitudeToFovy,\n  fovyToAltitude,\n  fitBounds,\n  getBounds\n} from '@math.gl/web-mercator';\nimport {Padding} from './viewport';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\nimport {Matrix4, clamp} from '@math.gl/core';\n\nexport type WebMercatorViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Longitude in degrees */\n  longitude?: number;\n  /** Latitude in degrees */\n  latitude?: number;\n  /** Tilt of the camera in degrees */\n  pitch?: number;\n  /** Heading of the camera in degrees */\n  bearing?: number;\n  /** Camera altitude relative to the viewport height, legacy property used to control the FOV. Default `1.5` */\n  altitude?: number;\n  /** Camera fovy in degrees. If provided, overrides `altitude` */\n  fovy?: number;\n  /** Viewport center in world space. If geospatial, refers to meter offsets from lng, lat */\n  position?: number[];\n  /** Zoom level */\n  zoom?: number;\n  /** Padding around the viewport, in pixels. */\n  padding?: Padding | null;\n  /** Model matrix of viewport center */\n  modelMatrix?: number[] | null;\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** Use orthographic projection */\n  orthographic?: boolean;\n  /** Scaler for the near plane, 1 unit equals to the height of the viewport. Default `0.1` */\n  nearZMultiplier?: number;\n  /** Scaler for the far plane, 1 unit equals to the distance from the camera to the edge of the screen. Default `1.01` */\n  farZMultiplier?: number;\n  /** Render multiple copies of the world */\n  repeat?: boolean;\n  /** Internal use */\n  worldOffset?: number;\n  /** @deprecated Revert to approximated meter size calculation prior to v8.5 */\n  legacyMeterSizes?: boolean;\n};\n\n/**\n * Manages transformations to/from WGS84 coordinates using the Web Mercator Projection.\n */\nexport default class WebMercatorViewport extends Viewport {\n  static displayName = 'WebMercatorViewport';\n\n  longitude: number;\n  latitude: number;\n  pitch: number;\n  bearing: number;\n  altitude: number;\n  fovy: number;\n  orthographic: boolean;\n\n  /** Each sub viewport renders one copy of the world if repeat:true. The list is generated and cached on first request. */\n  private _subViewports: WebMercatorViewport[] | null;\n  /** @deprecated Revert to approximated meter size calculation prior to v8.5 */\n  private _pseudoMeters: boolean;\n\n  /* eslint-disable complexity, max-statements */\n  constructor(opts: WebMercatorViewportOptions = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n      projectionMatrix,\n\n      repeat = false,\n      worldOffset = 0,\n      position,\n      padding,\n\n      // backward compatibility\n      // TODO: remove in v9\n      legacyMeterSizes = false\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    let fovy;\n    let projectionParameters: any = null;\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n\n      let offset: [number, number] | undefined;\n      if (padding) {\n        const {top = 0, bottom = 0} = padding;\n        offset = [0, clamp((top + height - bottom) / 2, 0, height) - height / 2];\n      }\n\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        scale,\n        center: position && [0, 0, position[2] * unitsPerMeter(latitude)],\n        offset,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n    }\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports(): WebMercatorViewport[] | null {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  projectPosition(xyz: number[]): [number, number, number] {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.projectPosition(xyz);\n    }\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz: number[]): [number, number, number] {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.unprojectPosition(xyz);\n    }\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ: number[], xyz: number[]): number[] {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords: number[], pixel: number[]): WebMercatorViewportOptions {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {longitude, latitude};\n  }\n\n  getBounds(options: {z?: number} = {}): [number, number, number, number] {\n    // @ts-ignore\n    const corners = getBounds(this, options.z || 0);\n\n    return [\n      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n    ];\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   */\n  fitBounds(\n    /** [[lon, lat], [lon, lat]] */\n    bounds: [[number, number], [number, number]],\n    options: {\n      /** If not supplied, will use the current width of the viewport (default `1`) */\n      width?: number;\n      /** If not supplied, will use the current height of the viewport (default `1`) */\n      height?: number;\n      /** In degrees, 0.01 would be about 1000 meters */\n      minExtent?: number;\n      /** Max zoom level */\n      maxZoom?: number;\n      /** Extra padding in pixels */\n      padding?: number | Required<Padding>;\n      /** Center shift in pixels */\n      offset?: number[];\n    } = {}\n  ) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds({width, height, bounds, ...options});\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n"],"file":"web-mercator-viewport.js"}