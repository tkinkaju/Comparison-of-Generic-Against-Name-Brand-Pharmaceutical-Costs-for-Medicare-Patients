{"version":3,"sources":["../../../src/lib/deck-renderer.ts"],"names":["TRACE_RENDER_LAYERS","DeckRenderer","gl","layerFilter","drawPickingColors","drawLayersPass","DrawLayersPass","pickLayersPass","PickLayersPass","renderCount","_needsRedraw","renderBuffers","lastPostProcessEffect","props","opts","layerPass","renderOpts","isPicking","target","Framebuffer","getDefaultFramebuffer","effects","_preRender","outputBuffer","renderStats","render","_postRender","clearRedrawFlags","redraw","buffer","delete","length","preRenderStats","effect","id","preRender","postRender","_resizeRenderBuffers","push","resize","params","inputBuffer","swapBuffer"],"mappings":"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","sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nimport type Layer from './layer';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type {Effect} from './effect';\nimport type {LayersPassRenderOptions, FilterContext} from '../passes/layers-pass';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\ntype LayerFilter = ((context: FilterContext) => boolean) | null;\n\nexport default class DeckRenderer {\n  gl: WebGLRenderingContext;\n  layerFilter: LayerFilter;\n  drawPickingColors: boolean;\n  drawLayersPass: DrawLayersPass;\n  pickLayersPass: PickLayersPass;\n\n  private renderCount: number;\n  private _needsRedraw: string | false;\n  private renderBuffers: Framebuffer[];\n  private lastPostProcessEffect: string | null;\n\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props: {layerFilter: LayerFilter; drawPickingColors: boolean}) {\n    if (this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if (this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  renderLayers(opts: {\n    pass: string;\n    layers: Layer[];\n    viewports: Viewport[];\n    views: {[viewId: string]: View};\n    onViewportActive: (viewport: Viewport) => void;\n    effects: Effect[];\n    target?: Framebuffer;\n    layerFilter?: LayerFilter;\n    clearStack?: boolean;\n    clearCanvas?: boolean;\n  }) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    const renderOpts: LayersPassRenderOptions = {\n      layerFilter: this.layerFilter,\n      isPicking: this.drawPickingColors,\n      ...opts,\n      target: opts.target || Framebuffer.getDefaultFramebuffer(this.gl)\n    };\n\n    if (renderOpts.effects) {\n      this._preRender(renderOpts.effects, renderOpts);\n    }\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;\n    const renderStats = layerPass.render({...renderOpts, target: outputBuffer});\n\n    if (renderOpts.effects) {\n      this._postRender(renderOpts.effects, renderOpts);\n    }\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts: {clearRedrawFlags: boolean} = {clearRedrawFlags: false}): string | false {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  private _preRender(effects: Effect[], opts: LayersPassRenderOptions) {\n    this.lastPostProcessEffect = null;\n    opts.preRenderStats = opts.preRenderStats || {};\n\n    for (const effect of effects) {\n      opts.preRenderStats[effect.id] = effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        this.lastPostProcessEffect = effect.id;\n      }\n    }\n\n    if (this.lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n  }\n\n  private _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  private _postRender(effects: Effect[], opts: LayersPassRenderOptions) {\n    const {renderBuffers} = this;\n    const params = {\n      ...opts,\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect.id === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"],"file":"deck-renderer.js"}