{"version":3,"sources":["../../../src/lib/effect-manager.ts"],"names":["DEFAULT_LIGHTING_EFFECT","LightingEffect","compareEffects","e1","e2","o1","order","Infinity","o2","EffectManager","effects","_needsRedraw","_setEffects","effect","defaultEffects","_defaultEffects","find","e","id","index","findIndex","push","splice","props","opts","clearRedrawFlags","redraw","_resolvedEffects","oldEffectsMap","nextEffects","oldEffect","setProps","cleanup","removedEffectId","concat","some","length"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAGA,IAAMA,uBAAuB,GAAG,IAAIC,uBAAJ,EAAhC;;AAGA,SAASC,cAAT,CAAwBC,EAAxB,EAAoCC,EAApC,EAAwD;AAAA;;AACtD,MAAMC,EAAE,gBAAGF,EAAE,CAACG,KAAN,iDAAeC,QAAvB;AACA,MAAMC,EAAE,gBAAGJ,EAAE,CAACE,KAAN,iDAAeC,QAAvB;AACA,SAAOF,EAAE,GAAGG,EAAZ;AACD;;IAEoBC,a;AAOnB,2BAAc;AAAA;AAAA;AAAA,4DALuB,EAKvB;AAAA,2DAHsB,EAGtB;AAAA;AACZ,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,YAAL,GAAoB,gBAApB;;AACA,SAAKC,WAAL,CAAiB,EAAjB;AACD;;;;WAKD,0BAAiBC,MAAjB,EAAiC;AAC/B,UAAMC,cAAc,GAAG,KAAKC,eAA5B;;AACA,UAAI,CAACD,cAAc,CAACE,IAAf,CAAoB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASL,MAAM,CAACK,EAApB;AAAA,OAArB,CAAL,EAAmD;AACjD,YAAMC,KAAK,GAAGL,cAAc,CAACM,SAAf,CAAyB,UAAAH,CAAC;AAAA,iBAAIf,cAAc,CAACe,CAAD,EAAIJ,MAAJ,CAAd,GAA4B,CAAhC;AAAA,SAA1B,CAAd;;AACA,YAAIM,KAAK,GAAG,CAAZ,EAAe;AACbL,UAAAA,cAAc,CAACO,IAAf,CAAoBR,MAApB;AACD,SAFD,MAEO;AACLC,UAAAA,cAAc,CAACQ,MAAf,CAAsBH,KAAtB,EAA6B,CAA7B,EAAgCN,MAAhC;AACD;;AACD,aAAKD,WAAL,CAAiB,KAAKF,OAAtB;AACD;AACF;;;WAED,kBAASa,KAAT,EAAgB;AACd,UAAI,aAAaA,KAAjB,EAAwB;AAEtB,YAAI,CAAC,0BAAUA,KAAK,CAACb,OAAhB,EAAyB,KAAKA,OAA9B,EAAuC,CAAvC,CAAL,EAAgD;AAC9C,eAAKE,WAAL,CAAiBW,KAAK,CAACb,OAAvB;AACD;AACF;AACF;;;WAED,uBAA8D;AAAA,UAAlDc,IAAkD,uEAA3C;AAACC,QAAAA,gBAAgB,EAAE;AAAnB,OAA2C;AAC5D,UAAMC,MAAM,GAAG,KAAKf,YAApB;;AACA,UAAIa,IAAI,CAACC,gBAAT,EAA2B;AACzB,aAAKd,YAAL,GAAoB,KAApB;AACD;;AACD,aAAOe,MAAP;AACD;;;WAED,sBAAa;AACX,aAAO,KAAKC,gBAAZ;AACD;;;WAED,qBAAoBjB,OAApB,EAAuC;AACrC,UAAMkB,aAAqC,GAAG,EAA9C;;AADqC,iDAEhB,KAAKlB,OAFW;AAAA;;AAAA;AAErC,4DAAmC;AAAA,cAAxBG,MAAwB;AACjCe,UAAAA,aAAa,CAACf,MAAM,CAACK,EAAR,CAAb,GAA2BL,MAA3B;AACD;AAJoC;AAAA;AAAA;AAAA;AAAA;;AAMrC,UAAMgB,WAAqB,GAAG,EAA9B;;AANqC,kDAOhBnB,OAPgB;AAAA;;AAAA;AAOrC,+DAA8B;AAAA,cAAnBG,OAAmB;AAC5B,cAAMiB,SAAS,GAAGF,aAAa,CAACf,OAAM,CAACK,EAAR,CAA/B;;AACA,cAAIY,SAAS,IAAIA,SAAS,KAAKjB,OAA/B,EAAuC;AACrC,gBAAIiB,SAAS,CAACC,QAAd,EAAwB;AACtBD,cAAAA,SAAS,CAACC,QAAV,CAAmBlB,OAAM,CAACU,KAA1B;AACAM,cAAAA,WAAW,CAACR,IAAZ,CAAiBS,SAAjB;AACD,aAHD,MAGO;AACLA,cAAAA,SAAS,CAACE,OAAV;AACAH,cAAAA,WAAW,CAACR,IAAZ,CAAiBR,OAAjB;AACD;AACF,WARD,MAQO;AACLgB,YAAAA,WAAW,CAACR,IAAZ,CAAiBR,OAAjB;AACD;;AACD,iBAAOe,aAAa,CAACf,OAAM,CAACK,EAAR,CAApB;AACD;AArBoC;AAAA;AAAA;AAAA;AAAA;;AAsBrC,WAAK,IAAMe,eAAX,IAA8BL,aAA9B,EAA6C;AAC3CA,QAAAA,aAAa,CAACK,eAAD,CAAb,CAA+BD,OAA/B;AACD;;AACD,WAAKtB,OAAL,GAAemB,WAAf;AAEA,WAAKF,gBAAL,GAAwBE,WAAW,CAACK,MAAZ,CAAmB,KAAKnB,eAAxB,CAAxB;;AAEA,UAAI,CAACL,OAAO,CAACyB,IAAR,CAAa,UAAAtB,MAAM;AAAA,eAAIA,MAAM,YAAYZ,uBAAtB;AAAA,OAAnB,CAAL,EAA+D;AAC7D,aAAK0B,gBAAL,CAAsBN,IAAtB,CAA2BrB,uBAA3B;AACD;;AACD,WAAKW,YAAL,GAAoB,iBAApB;AACD;;;WAED,oBAAW;AAAA,kDACY,KAAKgB,gBADjB;AAAA;;AAAA;AACT,+DAA4C;AAAA,cAAjCd,MAAiC;AAC1CA,UAAAA,MAAM,CAACmB,OAAP;AACD;AAHQ;AAAA;AAAA;AAAA;AAAA;;AAKT,WAAKtB,OAAL,CAAa0B,MAAb,GAAsB,CAAtB;AACA,WAAKT,gBAAL,CAAsBS,MAAtB,GAA+B,CAA/B;AACA,WAAKrB,eAAL,CAAqBqB,MAArB,GAA8B,CAA9B;AACD","sourcesContent":["import {deepEqual} from '../utils/deep-equal';\nimport LightingEffect from '../effects/lighting/lighting-effect';\nimport type {Effect} from './effect';\n\nconst DEFAULT_LIGHTING_EFFECT = new LightingEffect();\n\n/** Sort two effects. Returns 0 if equal, negative if e1 < e2, positive if e1 > e2 */\nfunction compareEffects(e1: Effect, e2: Effect): number {\n  const o1 = e1.order ?? Infinity;\n  const o2 = e2.order ?? Infinity;\n  return o1 - o2;\n}\n\nexport default class EffectManager {\n  effects: Effect[];\n  private _resolvedEffects: Effect[] = [];\n  /** Effect instances and order preference pairs, sorted by order */\n  private _defaultEffects: Effect[] = [];\n  private _needsRedraw: false | string;\n\n  constructor() {\n    this.effects = [];\n    this._needsRedraw = 'Initial render';\n    this._setEffects([]);\n  }\n\n  /**\n   * Register a new default effect, i.e. an effect presents regardless of user supplied props.effects\n   */\n  addDefaultEffect(effect: Effect) {\n    const defaultEffects = this._defaultEffects;\n    if (!defaultEffects.find(e => e.id === effect.id)) {\n      const index = defaultEffects.findIndex(e => compareEffects(e, effect) > 0);\n      if (index < 0) {\n        defaultEffects.push(effect);\n      } else {\n        defaultEffects.splice(index, 0, effect);\n      }\n      this._setEffects(this.effects);\n    }\n  }\n\n  setProps(props) {\n    if ('effects' in props) {\n      // Compare effects against each other shallowly\n      if (!deepEqual(props.effects, this.effects, 1)) {\n        this._setEffects(props.effects);\n      }\n    }\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}): false | string {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  getEffects() {\n    return this._resolvedEffects;\n  }\n\n  private _setEffects(effects: Effect[]) {\n    const oldEffectsMap: Record<string, Effect> = {};\n    for (const effect of this.effects) {\n      oldEffectsMap[effect.id] = effect;\n    }\n\n    const nextEffects: Effect[] = [];\n    for (const effect of effects) {\n      const oldEffect = oldEffectsMap[effect.id];\n      if (oldEffect && oldEffect !== effect) {\n        if (oldEffect.setProps) {\n          oldEffect.setProps(effect.props);\n          nextEffects.push(oldEffect);\n        } else {\n          oldEffect.cleanup();\n          nextEffects.push(effect);\n        }\n      } else {\n        nextEffects.push(effect);\n      }\n      delete oldEffectsMap[effect.id];\n    }\n    for (const removedEffectId in oldEffectsMap) {\n      oldEffectsMap[removedEffectId].cleanup();\n    }\n    this.effects = nextEffects;\n\n    this._resolvedEffects = nextEffects.concat(this._defaultEffects);\n    // Special case for lighting: only add default instance if no LightingEffect is specified\n    if (!effects.some(effect => effect instanceof LightingEffect)) {\n      this._resolvedEffects.push(DEFAULT_LIGHTING_EFFECT);\n    }\n    this._needsRedraw = 'effects changed';\n  }\n\n  finalize() {\n    for (const effect of this._resolvedEffects) {\n      effect.cleanup();\n    }\n\n    this.effects.length = 0;\n    this._resolvedEffects.length = 0;\n    this._defaultEffects.length = 0;\n  }\n}\n"],"file":"effect-manager.js"}