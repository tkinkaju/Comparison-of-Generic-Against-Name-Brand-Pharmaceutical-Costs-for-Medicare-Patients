"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _deepEqual = require("../utils/deep-equal");

var LayerExtension = function () {
  function LayerExtension(opts) {
    (0, _classCallCheck2.default)(this, LayerExtension);
    (0, _defineProperty2.default)(this, "opts", void 0);

    if (opts) {
      this.opts = opts;
    }
  }

  (0, _createClass2.default)(LayerExtension, [{
    key: "equals",
    value: function equals(extension) {
      if (this === extension) {
        return true;
      }

      return this.constructor === extension.constructor && (0, _deepEqual.deepEqual)(this.opts, extension.opts, 1);
    }
  }, {
    key: "getShaders",
    value: function getShaders(extension) {
      return null;
    }
  }, {
    key: "getSubLayerProps",
    value: function getSubLayerProps(extension) {
      var _ref = extension.constructor,
          defaultProps = _ref.defaultProps;
      var newProps = {
        updateTriggers: {}
      };

      for (var key in defaultProps) {
        if (key in this.props) {
          var propDef = defaultProps[key];
          var propValue = this.props[key];
          newProps[key] = propValue;

          if (propDef && propDef.type === 'accessor') {
            newProps.updateTriggers[key] = this.props.updateTriggers[key];

            if (typeof propValue === 'function') {
              newProps[key] = this.getSubLayerAccessor(propValue);
            }
          }
        }
      }

      return newProps;
    }
  }, {
    key: "initializeState",
    value: function initializeState(context, extension) {}
  }, {
    key: "updateState",
    value: function updateState(params, extension) {}
  }, {
    key: "onNeedsRedraw",
    value: function onNeedsRedraw(extension) {}
  }, {
    key: "getNeedsPickingBuffer",
    value: function getNeedsPickingBuffer(extension) {
      return false;
    }
  }, {
    key: "draw",
    value: function draw(params, extension) {}
  }, {
    key: "finalizeState",
    value: function finalizeState(context, extension) {}
  }], [{
    key: "componentName",
    get: function get() {
      return Object.prototype.hasOwnProperty.call(this, 'extensionName') ? this.extensionName : '';
    }
  }]);
  return LayerExtension;
}();

exports.default = LayerExtension;
(0, _defineProperty2.default)(LayerExtension, "defaultProps", {});
(0, _defineProperty2.default)(LayerExtension, "extensionName", 'LayerExtension');
//# sourceMappingURL=layer-extension.js.map