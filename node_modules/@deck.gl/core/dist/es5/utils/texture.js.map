{"version":3,"sources":["../../../src/utils/texture.ts"],"names":["DEFAULT_TEXTURE_PARAMETERS","internalTextures","createTexture","gl","image","parameters","Texture2D","constructor","name","data","specialTextureParameters","compressed","length","texture","id","destroyTexture","delete"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;AAGA,IAAMA,0BAAkD,oUAAxD;AAQA,IAAMC,gBAAyC,GAAG,EAAlD;;AAEO,SAASC,aAAT,CACLC,EADK,EAELC,KAFK,EAGLC,UAHK,EAIa;AAKlB,MAAID,KAAK,YAAYE,eAArB,EAAgC;AAC9B,WAAOF,KAAP;AACD,GAFD,MAEO,IAAIA,KAAK,CAACG,WAAN,IAAqBH,KAAK,CAACG,WAAN,CAAkBC,IAAlB,KAA2B,QAApD,EAA8D;AAEnEJ,IAAAA,KAAK,GAAG;AAACK,MAAAA,IAAI,EAAEL;AAAP,KAAR;AACD;;AAED,MAAIM,wBAAuD,GAAG,IAA9D;;AACA,MAAIN,KAAK,CAACO,UAAV,EAAsB;AACpBD,IAAAA,wBAAwB,4CACGN,KAAK,CAACK,IAAN,CAAWG,MAAX,GAAoB,CAApB,cADH,CAAxB;AAGD;;AAED,MAAMC,OAAO,GAAG,IAAIP,eAAJ,CAAcH,EAAd,kCACXC,KADW;AAEdC,IAAAA,UAAU,gDACLL,0BADK,GAELU,wBAFK,GAGLL,UAHK;AAFI,KAAhB;AASAJ,EAAAA,gBAAgB,CAACY,OAAO,CAACC,EAAT,CAAhB,GAA+B,IAA/B;AACA,SAAOD,OAAP;AACD;;AAEM,SAASE,cAAT,CAAwBF,OAAxB,EAA4C;AACjD,MAAI,CAACA,OAAD,IAAY,EAAEA,OAAO,YAAYP,eAArB,CAAhB,EAAiD;AAC/C;AACD;;AACD,MAAIL,gBAAgB,CAACY,OAAO,CAACC,EAAT,CAApB,EAAkC;AAChCD,IAAAA,OAAO,CAACG,MAAR;AACA,WAAOf,gBAAgB,CAACY,OAAO,CAACC,EAAT,CAAvB;AACD;AACF","sourcesContent":["import {Texture2D} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst DEFAULT_TEXTURE_PARAMETERS: Record<number, number> = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\n// Track the textures that are created by us. They need to be released when they are no longer used.\nconst internalTextures: Record<string, boolean> = {};\n\nexport function createTexture(\n  gl: WebGLRenderingContext,\n  image: any,\n  parameters: Record<number, number>\n): Texture2D | null {\n  // image could be one of:\n  //  - Texture2D\n  //  - Browser object: Image, ImageData, ImageData, HTMLCanvasElement, HTMLVideoElement, ImageBitmap\n  //  - Plain object: {width: <number>, height: <number>, data: <Uint8Array>}\n  if (image instanceof Texture2D) {\n    return image;\n  } else if (image.constructor && image.constructor.name !== 'Object') {\n    // Browser object\n    image = {data: image};\n  }\n\n  let specialTextureParameters: Record<number, number> | null = null;\n  if (image.compressed) {\n    specialTextureParameters = {\n      [GL.TEXTURE_MIN_FILTER]: image.data.length > 1 ? GL.LINEAR_MIPMAP_NEAREST : GL.LINEAR\n    };\n  }\n\n  const texture = new Texture2D(gl, {\n    ...image,\n    parameters: {\n      ...DEFAULT_TEXTURE_PARAMETERS,\n      ...specialTextureParameters,\n      ...parameters\n    }\n  });\n  // Track this texture\n  internalTextures[texture.id] = true;\n  return texture;\n}\n\nexport function destroyTexture(texture: Texture2D) {\n  if (!texture || !(texture instanceof Texture2D)) {\n    return;\n  }\n  if (internalTextures[texture.id]) {\n    texture.delete();\n    delete internalTextures[texture.id];\n  }\n}\n"],"file":"texture.js"}