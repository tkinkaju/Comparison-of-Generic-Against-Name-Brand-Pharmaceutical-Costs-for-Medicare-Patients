{"version":3,"sources":["../../../src/effects/post-process-effect.ts"],"names":["PostProcessEffect","module","props","id","name","gl","params","passes","createPasses","target","inputBuffer","outputBuffer","swapBuffer","index","length","render","moduleSettings","switchBuffer","pass","delete","undefined","fs","getFragmentShaderForRenderPass","ScreenPass","map","idn","FILTER_FS_TEMPLATE","func","SAMPLER_FS_TEMPLATE","filter","sampler"],"mappings":"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","sourcesContent":["import ScreenPass from '../passes/screen-pass';\nimport {normalizeShaderModule} from '@luma.gl/core';\n\nimport type {Effect, PostRenderOptions} from '../lib/effect';\nimport type {Framebuffer} from '@luma.gl/webgl';\nimport type {ShaderModule} from '../types/types';\n\nexport default class PostProcessEffect implements Effect {\n  id: string;\n  props: any;\n  module: ShaderModule;\n  passes?: ScreenPass[];\n\n  constructor(module: ShaderModule, props: any = {}) {\n    this.id = `${module.name}-pass`;\n    this.props = props;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  setProps(props: any) {\n    this.props = props;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  preRender(): void {}\n\n  postRender(gl: WebGLRenderingContext, params: PostRenderOptions): Framebuffer {\n    const passes = this.passes || createPasses(gl, this.module, this.id);\n    this.passes = passes;\n\n    const {target} = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n      this.passes[index].render({inputBuffer, outputBuffer, moduleSettings: this.props});\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n\n  cleanup(): void {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = undefined;\n    }\n  }\n}\n\nfunction createPasses(gl: WebGLRenderingContext, module: ShaderModule, id: string): ScreenPass[] {\n  if (!module.passes) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs\n    });\n    return [pass];\n  }\n\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ${func}(gl_FragColor, texSize, texCoord);\n}\n`;\n\nconst SAMPLER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ${func}(texture, texSize, texCoord);\n}\n`;\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  // console.error(`${module.name} no fragment shader generated`);\n  return null;\n}\n"],"file":"post-process-effect.js"}