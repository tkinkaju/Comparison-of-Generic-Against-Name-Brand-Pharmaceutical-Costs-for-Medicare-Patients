{"version":3,"sources":["../../../src/lifecycle/prop-types.ts"],"names":["TYPE_DEFINITIONS","boolean","validate","value","propType","equal","value1","value2","Boolean","number","Number","isFinite","max","min","color","optional","isArray","length","accessor","valueType","getTypeOf","array","compare","depth","isInteger","object","ignore","function","shouldIgnore","data","transform","component","dataTransform","props","image","context","gl","parameters","textureParameters","release","parsePropTypes","propDefs","propTypes","defaultProps","deprecatedProps","Object","entries","propName","propDef","deprecated","deprecatedFor","Array","parsePropType","name","normalizePropDefinition","type","ArrayBuffer","isView"],"mappings":"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","sourcesContent":["import {createTexture, destroyTexture} from '../utils/texture';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type Component from './component';\nimport type {Color, Texture} from '../types/layer-props';\nimport type Layer from '../lib/layer';\n\ntype BasePropType<ValueT> = {\n  value: ValueT;\n  async?: boolean;\n  validate?: (value: any, propType: PropType) => boolean;\n  equal?: (value1: ValueT, value2: ValueT, propType: PropType) => boolean;\n};\n\n/**\n * Normalized prop type definition\n */\nexport type PropType = BasePropType<any> & {\n  type: string;\n  name: string;\n  transform?: (value: any, propType: PropType, component: Component<any>) => any;\n  release?: (value: any, propType: PropType, component: Component<any>) => void;\n};\n\ntype DefaultProp<T> =\n  | T\n  | DeprecatedProp\n  | BooleanPropType\n  | NumberPropType\n  | ColorPropType\n  | ImagePropType\n  | DataPropType<T>\n  | ArrayPropType<T>\n  | ObjectPropType<T>\n  | AccessorPropType<T>\n  | FunctionPropType<T>;\n\nexport type DefaultProps<PropsT extends {} = {}> = {\n  [propName in keyof PropsT]?: DefaultProp<Required<PropsT>[propName]>;\n};\n\ntype BooleanPropType = BasePropType<boolean> & {\n  type: 'boolean';\n};\ntype NumberPropType = BasePropType<number> & {\n  type: 'number';\n  min?: number;\n  max?: number;\n};\ntype ColorPropType = BasePropType<Color | null> & {\n  type: 'color';\n  optional?: boolean;\n};\ntype ArrayPropType<T = any[]> = BasePropType<T> & {\n  type: 'array';\n  optional?: boolean;\n  /** Ignore change in the prop value.\n   * @default false\n   */\n  ignore?: boolean;\n  /** Deep-compare two prop values. Only used if `ignore: false`.\n   * When a number is supplied, used as the depth of deep-comparison. 0 is equivalent to shallow comparison, -1 is infinite depth\n   * When a boolean is supplied, `true` is equivalent to `1` (shallow compare all child fields)\n   * @default false\n   */\n  compare?: boolean | number;\n};\ntype AccessorPropType<T = any> = BasePropType<T> & {\n  type: 'accessor';\n};\ntype FunctionPropType<T = Function> = BasePropType<T> & {\n  type: 'function';\n  optional?: boolean;\n  /** @deprecated use `ignore` instead */\n  compare?: boolean;\n  /** Ignore change in the prop value.\n   * @default true\n   */\n  ignore?: boolean;\n};\ntype DataPropType<T = any> = BasePropType<T> & {\n  type: 'data';\n};\ntype ImagePropType = BasePropType<Texture | null> & {\n  type: 'image';\n  parameters?: Record<number, number>;\n};\ntype ObjectPropType<T = any> = BasePropType<T> & {\n  type: 'object';\n  optional?: boolean;\n  /** Ignore change in the prop value.\n   * @default false\n   */\n  ignore?: boolean;\n  /** Deep-compare two prop values. Only used if `ignore: false`.\n   * When a number is supplied, used as the depth of deep-comparison. 0 is equivalent to shallow comparison, -1 is infinite depth\n   * When a boolean is supplied, `true` is equivalent to `1` (shallow compare all child fields)\n   * @default false\n   */\n  compare?: boolean | number;\n};\ntype DeprecatedProp = {\n  deprecatedFor?: string | string[];\n};\ntype PropTypeDef =\n  | DeprecatedProp\n  | boolean\n  | BooleanPropType\n  | number\n  | NumberPropType\n  | string\n  | DataPropType\n  | number[]\n  | ColorPropType\n  | ArrayPropType\n  | AccessorPropType\n  | FunctionPropType\n  | ImagePropType\n  | ObjectPropType\n  | null;\n\nconst TYPE_DEFINITIONS = {\n  boolean: {\n    validate(value, propType: BooleanPropType) {\n      return true;\n    },\n    equal(value1, value2, propType: BooleanPropType) {\n      return Boolean(value1) === Boolean(value2);\n    }\n  },\n  number: {\n    validate(value, propType: NumberPropType) {\n      return (\n        Number.isFinite(value) &&\n        (!('max' in propType) || value <= propType.max!) &&\n        (!('min' in propType) || value >= propType.min!)\n      );\n    }\n  },\n  color: {\n    validate(value, propType: ColorPropType) {\n      return (\n        (propType.optional && !value) ||\n        (isArray(value) && (value.length === 3 || value.length === 4))\n      );\n    },\n    equal(value1, value2, propType: ColorPropType) {\n      return deepEqual(value1, value2, 1);\n    }\n  },\n  accessor: {\n    validate(value, propType: AccessorPropType) {\n      const valueType = getTypeOf(value);\n      return valueType === 'function' || valueType === getTypeOf(propType.value);\n    },\n    equal(value1, value2, propType: AccessorPropType) {\n      if (typeof value2 === 'function') {\n        return true;\n      }\n      return deepEqual(value1, value2, 1);\n    }\n  },\n  array: {\n    validate(value, propType: ArrayPropType) {\n      return (propType.optional && !value) || isArray(value);\n    },\n    equal(value1, value2, propType: ArrayPropType) {\n      const {compare} = propType;\n      const depth = Number.isInteger(compare as unknown) ? (compare as number) : compare ? 1 : 0;\n      return compare ? deepEqual(value1, value2, depth) : value1 === value2;\n    }\n  },\n  object: {\n    equal(value1, value2, propType: ObjectPropType) {\n      if (propType.ignore) {\n        return true;\n      }\n      const {compare} = propType;\n      const depth = Number.isInteger(compare as unknown) ? (compare as number) : compare ? 1 : 0;\n      return compare ? deepEqual(value1, value2, depth) : value1 === value2;\n    }\n  },\n  function: {\n    validate(value, propType: FunctionPropType) {\n      return (propType.optional && !value) || typeof value === 'function';\n    },\n    equal(value1, value2, propType: FunctionPropType) {\n      // Backward compatibility - {compare: true} and {ignore: false} are equivalent\n      const shouldIgnore = !propType.compare && propType.ignore !== false;\n      return shouldIgnore || value1 === value2;\n    }\n  },\n  data: {\n    transform: (value, propType: DataPropType, component) => {\n      const {dataTransform} = component.props;\n      return dataTransform && value ? dataTransform(value) : value;\n    }\n  },\n  image: {\n    transform: (value, propType: ImagePropType, component) => {\n      const context = (component as Layer).context;\n      if (!context || !context.gl) {\n        return null;\n      }\n      return createTexture(context.gl, value, {\n        ...propType.parameters,\n        ...component.props.textureParameters\n      });\n    },\n    release: value => {\n      destroyTexture(value);\n    }\n  }\n} as const;\n\nexport function parsePropTypes(propDefs: Record<string, PropTypeDef>): {\n  propTypes: Record<string, PropType>;\n  defaultProps: Record<string, any>;\n  deprecatedProps: Record<string, string[]>;\n} {\n  const propTypes = {};\n  const defaultProps = {};\n  const deprecatedProps = {};\n\n  for (const [propName, propDef] of Object.entries(propDefs)) {\n    const deprecated = (propDef as DeprecatedProp)?.deprecatedFor;\n    if (deprecated) {\n      deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [deprecated];\n    } else {\n      const propType = parsePropType(propName, propDef);\n      propTypes[propName] = propType;\n      defaultProps[propName] = propType.value;\n    }\n  }\n  return {propTypes, defaultProps, deprecatedProps};\n}\n\n// Parses one property definition entry. Either contains:\n// * a valid prop type object ({type, ...})\n// * or just a default value, in which case type and name inference is used\nfunction parsePropType(name: string, propDef: PropTypeDef): PropType {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      return normalizePropDefinition(name, propDef);\n\n    case 'array':\n      return normalizePropDefinition(name, {type: 'array', value: propDef, compare: false});\n\n    case 'boolean':\n      return normalizePropDefinition(name, {type: 'boolean', value: propDef});\n\n    case 'number':\n      return normalizePropDefinition(name, {type: 'number', value: propDef});\n\n    case 'function':\n      // return guessFunctionType(name, propDef);\n      return normalizePropDefinition(name, {type: 'function', value: propDef, compare: true});\n\n    default:\n      return {name, type: 'unknown', value: propDef};\n  }\n}\n\nfunction normalizePropDefinition(name, propDef): PropType {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      // If no type and value this object is likely the value\n      return {name, type: 'object', value: propDef};\n    }\n    return {name, type: getTypeOf(propDef.value), ...propDef};\n  }\n  return {name, ...TYPE_DEFINITIONS[propDef.type], ...propDef};\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\n// improved version of javascript typeof that can distinguish arrays and null values\nfunction getTypeOf(value: any): string {\n  if (isArray(value)) {\n    return 'array';\n  }\n  if (value === null) {\n    return 'null';\n  }\n  return typeof value;\n}\n"],"file":"prop-types.js"}