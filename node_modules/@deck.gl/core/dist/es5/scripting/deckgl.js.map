{"version":3,"sources":["../../../src/scripting/deckgl.ts"],"names":["CANVAS_STYLE","position","left","top","width","height","createCanvas","props","container","document","body","getElementById","Error","containerStyle","window","getComputedStyle","style","mapCanvas","createElement","appendChild","Object","assign","deckCanvas","DeckGL","viewState","initialViewState","isMap","Number","isFinite","latitude","map","globalThis","mapboxgl","maplibregl","canvas","Map","_map","Mapbox","getMap","finalize","setStyle","mapStyle","redrawReason","options","viewport","getViewports","setProps","Deck"],"mappings":"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","sourcesContent":["/* global window, document */\n/* eslint-disable max-statements, import/no-extraneous-dependencies */\n\n// react-map-gl is NOT a dependency of this package\n// This class is only supposed to be used via the pre-built bundle\nimport Mapbox from 'react-map-gl/dist/esm/mapbox/mapbox';\n\nimport Deck, {DeckProps} from '../lib/deck';\n\nconst CANVAS_STYLE = {\n  position: 'absolute',\n  left: 0,\n  top: 0,\n  width: '100%',\n  height: '100%'\n};\n\n// Create canvas elements for map and deck\nfunction createCanvas(props) {\n  let {container = document.body} = props;\n\n  if (typeof container === 'string') {\n    container = document.getElementById(container);\n  }\n\n  if (!container) {\n    throw Error('Deck: container not found');\n  }\n\n  // Add DOM elements\n  const containerStyle = window.getComputedStyle(container);\n  if (containerStyle.position === 'static') {\n    container.style.position = 'relative';\n  }\n\n  const mapCanvas = document.createElement('div');\n  container.appendChild(mapCanvas);\n  Object.assign(mapCanvas.style, CANVAS_STYLE);\n\n  const deckCanvas = document.createElement('canvas');\n  container.appendChild(deckCanvas);\n  Object.assign(deckCanvas.style, CANVAS_STYLE);\n\n  return {container, mapCanvas, deckCanvas};\n}\n\ntype DeckGLProps = DeckProps & {\n  /** DOM element to add deck.gl canvas to */\n  container?: Element;\n  /** base map library, mapboxgl or maplibregl */\n  map?: object;\n};\n\n/**\n * This is the scripting interface with additional logic to sync Deck with a mapbox-compatible base map\n * This class is intentionally NOT exported by package root (index.ts) to keep the core module\n * base map provider neutral.\n * Only exposed via the pre-built deck.gl bundle\n */\nexport default class DeckGL extends Deck {\n  /** Base map instance */\n  private _map: any;\n\n  constructor(props: DeckGLProps) {\n    if (typeof document === 'undefined') {\n      // Not browser\n      throw Error('Deck can only be used in the browser');\n    }\n\n    const {mapCanvas, deckCanvas} = createCanvas(props);\n\n    const viewState = props.viewState || props.initialViewState;\n    const isMap = Number.isFinite(viewState && viewState.latitude);\n    const {map = globalThis.mapboxgl || globalThis.maplibregl} = props;\n\n    super({canvas: deckCanvas, ...props});\n\n    // @ts-expect-error map lib is not typed\n    if (map && map.Map) {\n      // Default create mapbox map\n      this._map =\n        isMap &&\n        new Mapbox({\n          ...props,\n          viewState,\n          container: mapCanvas,\n          mapboxgl: map\n        });\n    } else {\n      this._map = map;\n    }\n  }\n\n  getMapboxMap() {\n    return this._map && this._map.getMap();\n  }\n\n  finalize() {\n    if (this._map) {\n      this._map.finalize();\n    }\n\n    super.finalize();\n  }\n\n  setProps(props) {\n    if ('mapStyle' in props && this._map) {\n      this._map._map.setStyle(props.mapStyle);\n    }\n\n    super.setProps(props);\n  }\n\n  _drawLayers(redrawReason: string, options: any) {\n    // Update the base map\n    if (this._map) {\n      const viewport = this.getViewports()[0];\n      this._map.setProps({\n        width: viewport.width,\n        height: viewport.height,\n        viewState: viewport\n      });\n    }\n    super._drawLayers(redrawReason, options);\n  }\n}\n"],"file":"deckgl.js"}