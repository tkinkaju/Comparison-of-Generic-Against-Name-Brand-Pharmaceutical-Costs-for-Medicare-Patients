{"version":3,"sources":["../../../src/passes/pick-layers-pass.ts"],"names":["PICKING_PARAMETERS","blendFunc","blendEquation","PickLayersPass","props","_drawPickingBuffer","layers","layerFilter","views","viewports","onViewportActive","pickingFBO","deviceRect","x","y","width","height","cullRect","effects","pass","pickZ","moduleParameters","gl","colorEncoderState","_resetColorEncoder","renderStatus","scissorTest","scissor","clearColor","depthMask","depthTest","depthRange","colorMask","blend","target","filter","e","useInPicking","isPicking","_colorEncoderState","decodePickingColor","decodeColor","bind","stats","layer","pickable","operation","includes","pickingActive","pickingAttribute","lightSources","layerIndex","viewport","pickParameters","parameters","Object","assign","blendColor","encodeColor","byLayer","Map","byAlpha","LayersPass","encoded","a","entry","get","push","size","set","log","warn","pickedColor","pickedLayer","pickedViewports","pickedObjectIndex"],"mappings":"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","sourcesContent":["import LayersPass, {LayersPassRenderOptions, RenderStats, Rect} from './layers-pass';\nimport {withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport log from '../utils/log';\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport type Viewport from '../viewports/viewport';\nimport type Layer from '../lib/layer';\n\nconst PICKING_PARAMETERS = {\n  blendFunc: [GL.ONE, GL.ZERO, GL.CONSTANT_ALPHA, GL.ZERO],\n  blendEquation: GL.FUNC_ADD\n};\n\ntype PickLayersPassRenderOptions = LayersPassRenderOptions & {\n  pickingFBO: Framebuffer;\n  deviceRect: Rect;\n  pickZ: boolean;\n};\n\ntype EncodedPickingColors = {\n  a: number;\n  layer: Layer;\n  viewports: Viewport[];\n};\n\nexport type PickingColorDecoder = (pickedColor: number[] | Uint8Array) =>\n  | {\n      pickedLayer: Layer;\n      pickedViewports: Viewport[];\n      pickedObjectIndex: number;\n    }\n  | undefined;\n\nexport default class PickLayersPass extends LayersPass {\n  private pickZ?: boolean;\n  private _colorEncoderState: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  } | null = null;\n\n  render(props: LayersPassRenderOptions | PickLayersPassRenderOptions) {\n    if ('pickingFBO' in props) {\n      // When drawing into an off-screen buffer, use the alpha channel to encode layer index\n      return this._drawPickingBuffer(props);\n    }\n    // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible\n    return super.render(props);\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {x, y, width, height},\n    cullRect,\n    effects,\n    pass = 'picking',\n    pickZ,\n    moduleParameters\n  }: PickLayersPassRenderOptions): {\n    decodePickingColor: PickingColorDecoder | null;\n    stats: RenderStats;\n  } {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n    const colorEncoderState = this._resetColorEncoder(pickZ);\n\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    const renderStatus = withParameters(\n      gl,\n      {\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        // When used as Mapbox custom layer, the context state may be dirty\n        // TODO - Remove when mapbox fixes this issue\n        // https://github.com/mapbox/mapbox-gl-js/issues/7801\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true],\n        // Blending\n        ...PICKING_PARAMETERS,\n        blend: !pickZ\n      },\n      () =>\n        super.render({\n          target: pickingFBO,\n          layers,\n          layerFilter,\n          views,\n          viewports,\n          onViewportActive,\n          cullRect,\n          effects: effects?.filter(e => e.useInPicking),\n          pass,\n          isPicking: true,\n          moduleParameters\n        })\n    );\n\n    // Clear the temp field\n    this._colorEncoderState = null;\n    const decodePickingColor = colorEncoderState && decodeColor.bind(null, colorEncoderState);\n    return {decodePickingColor, stats: renderStatus};\n  }\n\n  shouldDrawLayer(layer: Layer): boolean {\n    const {pickable, operation} = layer.props;\n    return (pickable && operation.includes('draw')) || operation.includes('terrain');\n  }\n\n  protected getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      // turn off lighting by adding empty light source object\n      // lights shader module relies on the `lightSources` to turn on/off lighting\n      lightSources: {}\n    };\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    const pickParameters = {...layer.props.parameters};\n    const {pickable, operation} = layer.props;\n\n    if (!this._colorEncoderState) {\n      pickParameters.blend = false;\n    } else if (pickable && operation.includes('draw')) {\n      Object.assign(pickParameters, PICKING_PARAMETERS);\n      pickParameters.blend = true;\n      pickParameters.blendColor = encodeColor(this._colorEncoderState, layer, viewport);\n    }\n    if (operation.includes('terrain')) {\n      pickParameters.blend = false;\n    }\n\n    return pickParameters;\n  }\n\n  protected _resetColorEncoder(pickZ: boolean) {\n    // Track encoded layer indices\n    this._colorEncoderState = pickZ\n      ? null\n      : {\n          byLayer: new Map<Layer, EncodedPickingColors>(),\n          byAlpha: []\n        };\n    // Temporarily store it on the instance so that it can be accessed by this.getLayerParameters\n    return this._colorEncoderState;\n  }\n}\n\n// Assign an unique alpha value for each pickable layer and track the encoding in the cache object\n// Returns normalized blend color\nfunction encodeColor(\n  encoded: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  },\n  layer: Layer,\n  viewport: Viewport\n): number[] {\n  const {byLayer, byAlpha} = encoded;\n  let a;\n\n  // Encode layerIndex in the alpha channel\n  // TODO - combine small layers to better utilize the picking color space\n  let entry = byLayer.get(layer);\n  if (entry) {\n    entry.viewports.push(viewport);\n    a = entry.a;\n  } else {\n    a = byLayer.size + 1;\n    if (a <= 255) {\n      entry = {a, layer, viewports: [viewport]};\n      byLayer.set(layer, entry);\n      byAlpha[a] = entry;\n    } else {\n      log.warn('Too many pickable layers, only picking the first 255')();\n      a = 0;\n    }\n  }\n  return [0, 0, 0, a / 255];\n}\n\n// Given a picked color, retrieve the corresponding layer and viewports from cache\nfunction decodeColor(\n  encoded: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  },\n  pickedColor: number[] | Uint8Array\n):\n  | {\n      pickedLayer: Layer;\n      pickedViewports: Viewport[];\n      pickedObjectIndex: number;\n    }\n  | undefined {\n  const entry = encoded.byAlpha[pickedColor[3]];\n  return (\n    entry && {\n      pickedLayer: entry.layer,\n      pickedViewports: entry.viewports,\n      pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)\n    }\n  );\n}\n"],"file":"pick-layers-pass.js"}