{"version":3,"sources":["../../../src/utils/position-children-under-views.ts"],"names":["positionChildrenUnderViews","children","deck","ContextProvider","viewManager","views","length","defaultViewId","id","child","viewId","viewChildren","type","View","props","viewport","getViewport","viewState","getViewState","padding","x","y","width","height","push","Object","keys","map","style","position","left","top","key","viewElement","createElement","contextValue","container","canvas","offsetParent","eventManager","onViewStateChange","params","_onViewStateChange","value"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {createElement} from 'react';\nimport {View} from '@deck.gl/core';\nimport {inheritsFrom} from './inherits-from';\nimport evaluateChildren, {isComponent} from './evaluate-children';\n\nimport type {Deck, DeckProps, Viewport} from '@deck.gl/core';\nimport type {EventManager} from 'mjolnir.js';\n\nexport type DeckGLContextValue = {\n  viewport: Viewport;\n  container: HTMLElement;\n  eventManager: EventManager;\n  onViewStateChange: DeckProps['onViewStateChange'];\n};\n\n// Iterate over views and reposition children associated with views\n// TODO - Can we supply a similar function for the non-React case?\nexport default function positionChildrenUnderViews({\n  children,\n  deck,\n  ContextProvider\n}: {\n  children: React.ReactNode[];\n  deck?: Deck;\n  ContextProvider?: React.Context<DeckGLContextValue>['Provider'];\n}): React.ReactNode[] {\n  // @ts-expect-error accessing protected property\n  const {viewManager} = deck || {};\n\n  if (!viewManager || !viewManager.views.length) {\n    return [];\n  }\n\n  const views: Record<\n    string,\n    {\n      viewport: Viewport;\n      children: React.ReactNode[];\n    }\n  > = {};\n  const defaultViewId = (viewManager.views[0] as View).id;\n\n  // Sort children by view id\n  for (const child of children) {\n    // Unless child is a View, position / render as part of the default view\n    let viewId = defaultViewId;\n    let viewChildren = child;\n\n    if (isComponent(child) && inheritsFrom(child.type, View)) {\n      viewId = child.props.id || defaultViewId;\n      viewChildren = child.props.children;\n    }\n\n    const viewport = viewManager.getViewport(viewId) as Viewport;\n    const viewState = viewManager.getViewState(viewId);\n\n    // Drop (auto-hide) elements with viewId that are not matched by any current view\n    if (viewport) {\n      viewState.padding = viewport.padding;\n      const {x, y, width, height} = viewport;\n      // Resolve potentially relative dimensions using the deck.gl container size\n      viewChildren = evaluateChildren(viewChildren, {\n        x,\n        y,\n        width,\n        height,\n        viewport,\n        viewState\n      });\n\n      if (!views[viewId]) {\n        views[viewId] = {\n          viewport,\n          children: []\n        };\n      }\n      views[viewId].children.push(viewChildren);\n    }\n  }\n\n  // Render views\n  return Object.keys(views).map(viewId => {\n    const {viewport, children: viewChildren} = views[viewId];\n    const {x, y, width, height} = viewport;\n    const style = {\n      position: 'absolute',\n      left: x,\n      top: y,\n      width,\n      height\n    };\n\n    const key = `view-${viewId}`;\n    // If children is passed as an array, React will throw the \"each element in a list needs\n    // a key\" warning. Sending each child as separate arguments removes this requirement.\n    const viewElement = createElement('div', {key, id: key, style}, ...viewChildren);\n\n    if (ContextProvider) {\n      const contextValue: DeckGLContextValue = {\n        viewport,\n        // @ts-expect-error accessing protected property\n        container: deck.canvas.offsetParent,\n        // @ts-expect-error accessing protected property\n        eventManager: deck.eventManager,\n        onViewStateChange: params => {\n          params.viewId = viewId;\n          // @ts-expect-error accessing protected method\n          deck._onViewStateChange(params);\n        }\n      };\n      return createElement(ContextProvider, {key, value: contextValue}, viewElement);\n    }\n\n    return viewElement;\n  });\n}\n"],"file":"position-children-under-views.js"}