{"version":3,"sources":["../../../src/collision-filter/collision-filter-effect.ts"],"names":["DOWNSCALE","CollisionFilterEffect","gl","allEffects","effects","layers","layerFilter","viewports","onViewportActive","views","isPicking","preRenderStats","dummyCollisionMap","Texture2D","width","height","collisionLayers","filter","props","visible","collisionEnabled","length","channels","collisionFilterPass","CollisionFilterPass","id","e","constructor","MaskEffect","maskEffectRendered","didRender","_groupByCollisionGroup","viewport","viewportChanged","lastViewport","equals","collisionGroup","collisionFBO","collisionFBOs","renderInfo","resize","canvas","_render","oldRenderInfo","needsRender","layerBounds","some","b","i","allLayersLoaded","layer","transitions","renderCollisionMap","pass","moduleParameters","devicePixelRatio","channelMap","channelInfo","push","getBounds","isLoaded","Object","keys","createFBO","destroyFBO","delete","undefined","collisionMap","parameters","depthBuffer","Renderbuffer","format","Framebuffer","attachments","fbo","values","attachment"],"mappings":"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","sourcesContent":["import {Framebuffer, Renderbuffer, Texture2D, cssToDeviceRatio} from '@luma.gl/core';\nimport {equals} from '@math.gl/core';\nimport {_deepEqual as deepEqual} from '@deck.gl/core';\nimport type {Effect, Layer, PreRenderOptions, Viewport} from '@deck.gl/core';\nimport CollisionFilterPass from './collision-filter-pass';\nimport MaskEffect, {MaskPreRenderStats} from '../mask/mask-effect';\n// import {debugFBO} from '../utils/debug';\n\ntype CollisionFilterExtensionProps = {\n  collisionTestProps?: {};\n  collisionGroup: string;\n};\n\n// Factor by which to downscale Collision FBO relative to canvas\nconst DOWNSCALE = 2;\n\ntype RenderInfo = {\n  collisionGroup: string;\n  layers: Layer<CollisionFilterExtensionProps>[];\n  layerBounds: ([number[], number[]] | null)[];\n  allLayersLoaded: boolean;\n};\n\nexport default class CollisionFilterEffect implements Effect {\n  id = 'collision-filter-effect';\n  props = null;\n  useInPicking = true;\n  order = 1;\n\n  private channels: Record<string, RenderInfo> = {};\n  private collisionFilterPass?: CollisionFilterPass;\n  private collisionFBOs: Record<string, Framebuffer> = {};\n  private dummyCollisionMap?: Texture2D;\n  private lastViewport?: Viewport;\n\n  preRender(\n    gl: WebGLRenderingContext,\n    {\n      effects: allEffects,\n      layers,\n      layerFilter,\n      viewports,\n      onViewportActive,\n      views,\n      isPicking,\n      preRenderStats = {}\n    }: PreRenderOptions\n  ): void {\n    if (!this.dummyCollisionMap) {\n      this.dummyCollisionMap = new Texture2D(gl, {width: 1, height: 1});\n    }\n\n    if (isPicking) {\n      // Do not update on picking pass\n      return;\n    }\n\n    const collisionLayers = layers.filter(\n      // @ts-ignore\n      ({props: {visible, collisionEnabled}}) => visible && collisionEnabled\n    ) as Layer<CollisionFilterExtensionProps>[];\n    if (collisionLayers.length === 0) {\n      this.channels = {};\n      return;\n    }\n\n    if (!this.collisionFilterPass) {\n      this.collisionFilterPass = new CollisionFilterPass(gl, {id: 'default-collision-filter'});\n    }\n\n    // Detect if mask has rendered. TODO: better dependency system for Effects\n    const effects = allEffects?.filter(e => e.constructor === MaskEffect);\n    const maskEffectRendered = (preRenderStats['mask-effect'] as MaskPreRenderStats)?.didRender;\n\n    // Collect layers to render\n    const channels = this._groupByCollisionGroup(gl, collisionLayers);\n\n    const viewport = viewports[0];\n    const viewportChanged =\n      !this.lastViewport || !this.lastViewport.equals(viewport) || maskEffectRendered;\n\n    // Resize framebuffers to match canvas\n    for (const collisionGroup in channels) {\n      const collisionFBO = this.collisionFBOs[collisionGroup];\n      const renderInfo = channels[collisionGroup];\n      collisionFBO.resize({\n        width: gl.canvas.width / DOWNSCALE,\n        height: gl.canvas.height / DOWNSCALE\n      });\n      this._render(renderInfo, {\n        effects,\n        layerFilter,\n        onViewportActive,\n        views,\n        viewport,\n        viewportChanged\n      });\n    }\n\n    // debugFBO(this.collisionFBOs[Object.keys(channels)[0]], {minimap: true});\n  }\n\n  private _render(\n    renderInfo: RenderInfo,\n    {\n      effects,\n      layerFilter,\n      onViewportActive,\n      views,\n      viewport,\n      viewportChanged\n    }: {\n      effects: PreRenderOptions['effects'];\n      layerFilter: PreRenderOptions['layerFilter'];\n      onViewportActive: PreRenderOptions['onViewportActive'];\n      views: PreRenderOptions['views'];\n      viewport: Viewport;\n      viewportChanged: boolean;\n    }\n  ) {\n    const {collisionGroup} = renderInfo;\n    const oldRenderInfo = this.channels[collisionGroup];\n    if (!oldRenderInfo) {\n      return;\n    }\n\n    const needsRender =\n      viewportChanged ||\n      // If render info is new\n      renderInfo === oldRenderInfo ||\n      // If sublayers have changed\n      !deepEqual(oldRenderInfo.layers, renderInfo.layers, 1) ||\n      // If a sublayer's bounds have been updated\n      renderInfo.layerBounds.some((b, i) => !equals(b, oldRenderInfo.layerBounds[i])) ||\n      // If a sublayer's isLoaded state has been updated\n      renderInfo.allLayersLoaded !== oldRenderInfo.allLayersLoaded ||\n      // Some prop is in transition\n      renderInfo.layers.some(layer => layer.props.transitions);\n\n    this.channels[collisionGroup] = renderInfo;\n\n    if (needsRender) {\n      this.lastViewport = viewport;\n      const collisionFBO = this.collisionFBOs[collisionGroup];\n\n      // Rerender collision FBO\n      this.collisionFilterPass!.renderCollisionMap(collisionFBO, {\n        pass: 'collision-filter',\n        isPicking: true,\n        layers: renderInfo.layers,\n        effects,\n        layerFilter,\n        viewports: viewport ? [viewport] : [],\n        onViewportActive,\n        views,\n        moduleParameters: {\n          // To avoid feedback loop forming between Framebuffer and active Texture.\n          dummyCollisionMap: this.dummyCollisionMap,\n          devicePixelRatio: cssToDeviceRatio(collisionFBO.gl) / DOWNSCALE\n        }\n      });\n    }\n  }\n\n  /**\n   * Group layers by collisionGroup\n   * Returns a map from collisionGroup to render info\n   */\n  private _groupByCollisionGroup(\n    gl: WebGLRenderingContext,\n    collisionLayers: Layer<CollisionFilterExtensionProps>[]\n  ): Record<string, RenderInfo> {\n    const channelMap = {};\n    for (const layer of collisionLayers) {\n      const {collisionGroup} = layer.props;\n      let channelInfo = channelMap[collisionGroup];\n      if (!channelInfo) {\n        channelInfo = {collisionGroup, layers: [], layerBounds: [], allLayersLoaded: true};\n        channelMap[collisionGroup] = channelInfo;\n      }\n      channelInfo.layers.push(layer);\n      channelInfo.layerBounds.push(layer.getBounds());\n      if (!layer.isLoaded) {\n        channelInfo.allLayersLoaded = false;\n      }\n    }\n\n    // Create any new passes and remove any old ones\n    for (const collisionGroup of Object.keys(channelMap)) {\n      if (!this.collisionFBOs[collisionGroup]) {\n        this.createFBO(gl, collisionGroup);\n      }\n      if (!this.channels[collisionGroup]) {\n        this.channels[collisionGroup] = channelMap[collisionGroup];\n      }\n    }\n    for (const collisionGroup of Object.keys(this.collisionFBOs)) {\n      if (!channelMap[collisionGroup]) {\n        this.destroyFBO(collisionGroup);\n      }\n    }\n\n    return channelMap;\n  }\n\n  getModuleParameters(layer: Layer): {\n    collisionFBO: Framebuffer;\n    dummyCollisionMap: Texture2D;\n  } {\n    const {collisionGroup} = (layer as Layer<CollisionFilterExtensionProps>).props;\n    const {collisionFBOs, dummyCollisionMap} = this;\n    return {collisionFBO: collisionFBOs[collisionGroup], dummyCollisionMap};\n  }\n\n  cleanup(): void {\n    if (this.dummyCollisionMap) {\n      this.dummyCollisionMap.delete();\n      this.dummyCollisionMap = undefined;\n    }\n    this.channels = {};\n    for (const collisionGroup of Object.keys(this.collisionFBOs)) {\n      this.destroyFBO(collisionGroup);\n    }\n    this.collisionFBOs = {};\n    this.lastViewport = undefined;\n  }\n\n  createFBO(gl: WebGLRenderingContext, collisionGroup: string) {\n    const {width, height} = gl.canvas;\n    const collisionMap = new Texture2D(gl, {\n      width,\n      height,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.NEAREST,\n        [gl.TEXTURE_MAG_FILTER]: gl.NEAREST,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    const depthBuffer = new Renderbuffer(gl, {format: gl.DEPTH_COMPONENT16, width, height});\n    this.collisionFBOs[collisionGroup] = new Framebuffer(gl, {\n      id: `Collision-${collisionGroup}`,\n      width,\n      height,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: collisionMap,\n        [gl.DEPTH_ATTACHMENT]: depthBuffer\n      }\n    });\n  }\n\n  destroyFBO(collisionGroup: string) {\n    const fbo = this.collisionFBOs[collisionGroup];\n    for (const attachment of Object.values(fbo.attachments as Texture2D[])) {\n      attachment.delete();\n    }\n    fbo.delete();\n    delete this.collisionFBOs[collisionGroup];\n  }\n}\n"],"file":"collision-filter-effect.js"}