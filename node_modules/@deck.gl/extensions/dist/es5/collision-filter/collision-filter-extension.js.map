{"version":3,"sources":["../../../src/collision-filter/collision-filter-extension.ts"],"names":["defaultProps","getCollisionPriority","type","value","collisionEnabled","collisionGroup","collisionTestProps","CollisionFilterExtension","modules","collision","uniforms","context","moduleParameters","props","collisionFBO","drawToCollisionMap","enabled","Boolean","collision_enabled","clone","extension","getAttributeManager","deck","_addDefaultEffect","CollisionFilterEffect","attributeManager","add","collisionPriorities","size","accessor","shaderAttributes","divisor","instanceCollisionPriorities","LayerExtension"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,oBAAoB,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GADH;AAEnBC,EAAAA,gBAAgB,EAAE,IAFC;AAGnBC,EAAAA,cAAc,EAAE;AAACH,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAHG;AAInBG,EAAAA,kBAAkB,EAAE;AAJD,CAArB;;IA+BqBC,wB;;;;;;;;;;;;WAInB,sBAA4D;AAC1D,aAAO;AAACC,QAAAA,OAAO,EAAE,CAACC,qBAAD;AAAV,OAAP;AACD;;;WAGD,oBAA6F;AAAA,UAA3CC,QAA2C,QAA3CA,QAA2C;AAAA,UAAjCC,OAAiC,QAAjCA,OAAiC;AAAA,UAAxBC,gBAAwB,QAAxBA,gBAAwB;AAC3F,UAAOR,gBAAP,GAA2B,KAAKS,KAAhC,CAAOT,gBAAP;AACA,UAAOU,YAAP,GAA2CF,gBAA3C,CAAOE,YAAP;AAAA,UAAqBC,kBAArB,GAA2CH,gBAA3C,CAAqBG,kBAArB;AACA,UAAMC,OAAO,GAAGZ,gBAAgB,IAAIa,OAAO,CAACH,YAAD,CAA3C;AACAJ,MAAAA,QAAQ,CAACQ,iBAAT,GAA6BF,OAA7B;;AAEA,UAAID,kBAAJ,EAAwB;AAGtB,aAAKF,KAAL,GAAa,KAAKM,KAAL,CAAW,KAAKN,KAAL,CAAWP,kBAAtB,EAA0CO,KAAvD;AACD;AACF;;;WAED,yBAEEF,OAFF,EAGES,SAHF,EAIE;AAAA;;AACA,UAAI,KAAKC,mBAAL,OAA+B,IAAnC,EAAyC;AACvC;AACD;;AACD,iCAAKV,OAAL,CAAaW,IAAb,0EAAmBC,iBAAnB,CAAqC,IAAIC,8BAAJ,EAArC;AACA,UAAMC,gBAAgB,GAAG,KAAKJ,mBAAL,EAAzB;AACAI,MAAAA,gBAAgB,CAAEC,GAAlB,CAAsB;AACpBC,QAAAA,mBAAmB,EAAE;AACnBC,UAAAA,IAAI,EAAE,CADa;AAEnBC,UAAAA,QAAQ,EAAE,sBAFS;AAGnBC,UAAAA,gBAAgB,EAAE;AAChBH,YAAAA,mBAAmB,EAAE;AAACI,cAAAA,OAAO,EAAE;AAAV,aADL;AAEhBC,YAAAA,2BAA2B,EAAE;AAACD,cAAAA,OAAO,EAAE;AAAV;AAFb;AAHC;AADD,OAAtB;AAUD;;;WAED,iCAA2E;AACzE,aAAO,KAAKlB,KAAL,CAAWT,gBAAlB;AACD;;;EA9CmD6B,oB;;;8BAAjC1B,wB,kBACGP,Y;8BADHO,wB,mBAEI,0B","sourcesContent":["import {Accessor, Layer, LayerContext, LayerExtension} from '@deck.gl/core';\nimport collision from './shader-module';\nimport CollisionFilterEffect from './collision-filter-effect';\n\nconst defaultProps = {\n  getCollisionPriority: {type: 'accessor', value: 0},\n  collisionEnabled: true,\n  collisionGroup: {type: 'string', value: 'default'},\n  collisionTestProps: {}\n};\n\nexport type CollisionFilterExtensionProps<DataT = any> = {\n  /**\n   * Accessor for collision priority. Must return a number in the range -1000 -> 1000. Features with higher values are shown preferentially.\n   */\n  getCollisionPriority?: Accessor<DataT, number>;\n\n  /**\n   * Enable/disable collisions. If collisions are disabled, all objects are rendered.\n   * @default true\n   */\n  collisionEnabled: boolean;\n\n  /**\n   * Collision group this layer belongs to. If it is not set, the 'default' collision group is used\n   */\n  collisionGroup?: string;\n\n  /**\n   * Props to override when rendering collision map\n   */\n  collisionTestProps?: {};\n};\n\n/** Allows layers to hide overlapping objects. */\nexport default class CollisionFilterExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'CollisionFilterExtension';\n\n  getShaders(this: Layer<CollisionFilterExtensionProps>): any {\n    return {modules: [collision]};\n  }\n\n  /* eslint-disable camelcase */\n  draw(this: Layer<CollisionFilterExtensionProps>, {uniforms, context, moduleParameters}: any) {\n    const {collisionEnabled} = this.props;\n    const {collisionFBO, drawToCollisionMap} = moduleParameters;\n    const enabled = collisionEnabled && Boolean(collisionFBO);\n    uniforms.collision_enabled = enabled;\n\n    if (drawToCollisionMap) {\n      // Override any props with those defined in collisionTestProps\n      // @ts-ignore\n      this.props = this.clone(this.props.collisionTestProps).props;\n    }\n  }\n\n  initializeState(\n    this: Layer<CollisionFilterExtensionProps>,\n    context: LayerContext,\n    extension: this\n  ) {\n    if (this.getAttributeManager() === null) {\n      return;\n    }\n    this.context.deck?._addDefaultEffect(new CollisionFilterEffect());\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.add({\n      collisionPriorities: {\n        size: 1,\n        accessor: 'getCollisionPriority',\n        shaderAttributes: {\n          collisionPriorities: {divisor: 0},\n          instanceCollisionPriorities: {divisor: 1}\n        }\n      }\n    });\n  }\n\n  getNeedsPickingBuffer(this: Layer<CollisionFilterExtensionProps>): boolean {\n    return this.props.collisionEnabled;\n  }\n}\n"],"file":"collision-filter-extension.js"}