{"version":3,"sources":["../../../src/terrain/terrain-effect.ts"],"names":["TerrainEffect","Map","gl","dummyHeightMap","Texture2D","width","height","data","Uint8Array","terrainPass","TerrainPass","id","terrainPickingPass","TerrainPickingPass","HeightMapBuilder","isSupported","heightMap","log","warn","ProgramManager","getDefaultProgramManager","addDefaultModule","terrainModule","opts","initialize","layers","layer","props","operation","includes","setChangeFlags","extensionsChanged","pickZ","isDrapingEnabled","viewports","isPicking","viewport","getRenderableLayers","terrainLayers","filter","l","length","offsetLayers","state","terrainDrawMode","_updateHeightMap","drapeLayers","_updateTerrainCovers","getRenderFramebuffer","heightMapBounds","bounds","terrainCover","terrainCovers","get","useTerrainHeightMap","terrainSkipRender","delete","undefined","values","clear","shouldUpdate","renderHeightMap","moduleParameters","devicePixelRatio","drawToTerrainHeightMap","layerNeedsRedraw","terrainCoverNeedsRedraw","isDirty","_updateTerrainCover","_pruneTerrainCovers","terrainLayer","renderPass","TerrainCover","set","targetLayer","renderTerrainCover","err","raiseError","idsToRemove","isActive","push"],"mappings":"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","sourcesContent":["import {Texture2D, ProgramManager} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\n\nimport {terrainModule, TerrainModuleSettings} from './shader-module';\nimport {TerrainCover} from './terrain-cover';\nimport {TerrainPass} from './terrain-pass';\nimport {TerrainPickingPass, TerrainPickingPassRenderOptions} from './terrain-picking-pass';\nimport {HeightMapBuilder} from './height-map-builder';\n\nimport type {Effect, PreRenderOptions, Layer, Viewport} from '@deck.gl/core';\n\n/** Class to manage terrain effect */\nexport class TerrainEffect implements Effect {\n  id = 'terrain-effect';\n  props = null;\n  useInPicking = true;\n\n  /** true if picking in the current pass */\n  private isPicking: boolean = false;\n  /** true if should use in the current pass */\n  private isDrapingEnabled: boolean = false;\n  /** An empty texture as placeholder */\n  private dummyHeightMap: Texture2D;\n  /** A texture encoding the ground elevation, updated once per redraw. Used by layers with offset mode */\n  private heightMap?: HeightMapBuilder;\n  private terrainPass!: TerrainPass;\n  private terrainPickingPass!: TerrainPickingPass;\n  /** One texture for each primitive terrain layer, into which the draped layers render */\n  private terrainCovers: Map<string, TerrainCover> = new Map();\n\n  initialize(gl: WebGLRenderingContext) {\n    this.dummyHeightMap = new Texture2D(gl, {\n      width: 1,\n      height: 1,\n      data: new Uint8Array([0, 0, 0, 0])\n    });\n    this.terrainPass = new TerrainPass(gl, {id: 'terrain'});\n    this.terrainPickingPass = new TerrainPickingPass(gl, {id: 'terrain-picking'});\n\n    if (HeightMapBuilder.isSupported(gl)) {\n      this.heightMap = new HeightMapBuilder(gl);\n    } else {\n      log.warn('Terrain offset mode is not supported by this browser')();\n    }\n\n    ProgramManager.getDefaultProgramManager(gl).addDefaultModule(terrainModule);\n  }\n\n  preRender(gl: WebGLRenderingContext, opts: PreRenderOptions): void {\n    if (!this.dummyHeightMap) {\n      // First time this effect is in use, initialize resources and register the shader module\n      this.initialize(gl);\n      for (const layer of opts.layers) {\n        // Force the terrain layer (and its descendents) to rebuild their models with the new shader\n        if (layer.props.operation.includes('terrain')) {\n          layer.setChangeFlags({extensionsChanged: true});\n        }\n      }\n    }\n\n    // @ts-expect-error pickZ only defined in picking pass\n    if (opts.pickZ) {\n      // Do not update if picking attributes\n      this.isDrapingEnabled = false;\n      return;\n    }\n\n    const {viewports, isPicking = false} = opts;\n    this.isPicking = isPicking;\n    this.isDrapingEnabled = true;\n\n    // TODO - support multiple views?\n    const viewport = viewports[0];\n    const layers = (isPicking ? this.terrainPickingPass : this.terrainPass).getRenderableLayers(\n      viewport,\n      opts as TerrainPickingPassRenderOptions\n    );\n\n    const terrainLayers = layers.filter(l => l.props.operation.includes('terrain'));\n    if (terrainLayers.length === 0) {\n      return;\n    }\n\n    if (!isPicking) {\n      const offsetLayers = layers.filter(l => l.state.terrainDrawMode === 'offset');\n      if (offsetLayers.length > 0) {\n        this._updateHeightMap(terrainLayers, viewport, opts);\n      }\n    }\n\n    const drapeLayers = layers.filter(l => l.state.terrainDrawMode === 'drape');\n    this._updateTerrainCovers(terrainLayers, drapeLayers, viewport, opts);\n  }\n\n  getModuleParameters(layer: Layer): TerrainModuleSettings {\n    const {terrainDrawMode} = layer.state;\n\n    return {\n      heightMap: this.heightMap?.getRenderFramebuffer(),\n      heightMapBounds: this.heightMap?.bounds,\n      dummyHeightMap: this.dummyHeightMap,\n      terrainCover: this.isDrapingEnabled ? this.terrainCovers.get(layer.id) : null,\n      useTerrainHeightMap: terrainDrawMode === 'offset',\n      terrainSkipRender: terrainDrawMode === 'drape' || !layer.props.operation.includes('draw')\n    };\n  }\n\n  cleanup(): void {\n    if (this.dummyHeightMap) {\n      this.dummyHeightMap.delete();\n      this.dummyHeightMap = undefined;\n    }\n\n    if (this.heightMap) {\n      this.heightMap.delete();\n      this.heightMap = undefined;\n    }\n\n    for (const terrainCover of this.terrainCovers.values()) {\n      terrainCover.delete();\n    }\n    this.terrainCovers.clear();\n  }\n\n  private _updateHeightMap(terrainLayers: Layer[], viewport: Viewport, opts: PreRenderOptions) {\n    if (!this.heightMap) {\n      // Not supported\n      return;\n    }\n\n    const shouldUpdate = this.heightMap.shouldUpdate({layers: terrainLayers, viewport});\n    if (!shouldUpdate) {\n      return;\n    }\n\n    this.terrainPass.renderHeightMap(this.heightMap, {\n      ...opts,\n      layers: terrainLayers,\n      moduleParameters: {\n        heightMapBounds: this.heightMap.bounds,\n        dummyHeightMap: this.dummyHeightMap,\n        devicePixelRatio: 1,\n        drawToTerrainHeightMap: true\n      }\n    });\n  }\n\n  private _updateTerrainCovers(\n    terrainLayers: Layer[],\n    drapeLayers: Layer[],\n    viewport: Viewport,\n    opts: PreRenderOptions\n  ) {\n    // Mark a terrain cover as dirty if one of the drape layers needs redraw\n    const layerNeedsRedraw: Record<string, boolean> = {};\n    for (const layer of drapeLayers) {\n      if (layer.state.terrainCoverNeedsRedraw) {\n        layerNeedsRedraw[layer.id] = true;\n        layer.state.terrainCoverNeedsRedraw = false;\n      }\n    }\n    for (const terrainCover of this.terrainCovers.values()) {\n      terrainCover.isDirty = terrainCover.isDirty || terrainCover.shouldUpdate({layerNeedsRedraw});\n    }\n\n    for (const layer of terrainLayers) {\n      this._updateTerrainCover(layer, drapeLayers, viewport, opts);\n    }\n\n    if (!this.isPicking) {\n      this._pruneTerrainCovers();\n    }\n  }\n\n  private _updateTerrainCover(\n    terrainLayer: Layer,\n    drapeLayers: Layer[],\n    viewport: Viewport,\n    opts: PreRenderOptions\n  ) {\n    const renderPass = this.isPicking ? this.terrainPickingPass : this.terrainPass;\n    let terrainCover = this.terrainCovers.get(terrainLayer.id);\n    if (!terrainCover) {\n      terrainCover = new TerrainCover(terrainLayer);\n      this.terrainCovers.set(terrainLayer.id, terrainCover);\n    }\n    try {\n      const isDirty = terrainCover.shouldUpdate({\n        targetLayer: terrainLayer,\n        viewport,\n        layers: drapeLayers\n      });\n      if (this.isPicking || terrainCover.isDirty || isDirty) {\n        renderPass.renderTerrainCover(terrainCover, {\n          ...opts,\n          layers: drapeLayers,\n          moduleParameters: {\n            dummyHeightMap: this.dummyHeightMap,\n            terrainSkipRender: false,\n            devicePixelRatio: 1\n          }\n        });\n        terrainCover.isDirty = false;\n      }\n    } catch (err) {\n      terrainLayer.raiseError(err as Error, `Error rendering terrain cover ${terrainCover.id}`);\n    }\n  }\n\n  private _pruneTerrainCovers() {\n    /** Prune the cache, remove textures for layers that have been removed */\n    const idsToRemove: string[] = [];\n    for (const [id, terrainCover] of this.terrainCovers) {\n      if (!terrainCover.isActive) {\n        idsToRemove.push(id);\n      }\n    }\n    for (const id of idsToRemove) {\n      this.terrainCovers.delete(id);\n    }\n  }\n}\n"],"file":"terrain-effect.js"}