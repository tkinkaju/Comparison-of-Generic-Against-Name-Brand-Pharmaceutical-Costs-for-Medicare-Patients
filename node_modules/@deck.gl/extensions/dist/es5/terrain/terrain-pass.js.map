{"version":3,"sources":["../../../src/terrain/terrain-pass.ts"],"names":["TerrainPass","viewport","opts","layers","result","drawParamsByIndex","_getDrawLayerParams","i","length","layer","isComposite","shouldDrawLayer","push","heightMap","target","getRenderFramebuffer","renderViewport","resize","gl","clearColor","blend","blendFunc","blendEquation","depthTest","render","pass","viewports","effects","terrainCover","filterLayers","id","LayersPass"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;IASaA,W;;;;;;;;;;;;WACX,6BAAoBC,QAApB,EAAwCC,IAAxC,EAAiF;AAC/E,UAAOC,MAAP,GAAiBD,IAAjB,CAAOC,MAAP;AACA,UAAMC,MAAe,GAAG,EAAxB;;AACA,UAAMC,iBAAiB,GAAG,KAAKC,mBAAL,CAAyBL,QAAzB,EAAmCC,IAAnC,EAAyC,IAAzC,CAA1B;;AACA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YAAME,KAAK,GAAGN,MAAM,CAACI,CAAD,CAApB;;AACA,YAAI,CAACE,KAAK,CAACC,WAAP,IAAsBL,iBAAiB,CAACE,CAAD,CAAjB,CAAqBI,eAA/C,EAAgE;AAC9DP,UAAAA,MAAM,CAACQ,IAAP,CAAYH,KAAZ;AACD;AACF;;AAED,aAAOL,MAAP;AACD;;;WAED,yBAAgBS,SAAhB,EAA6CX,IAA7C,EAAsF;AAAA;;AAEpF,UAAMY,MAAM,GAAGD,SAAS,CAACE,oBAAV,EAAf;AACA,UAAMd,QAAQ,GAAGY,SAAS,CAACG,cAA3B;;AAEA,UAAI,CAACF,MAAD,IAAW,CAACb,QAAhB,EAA0B;AACxB;AACD;;AAEDa,MAAAA,MAAM,CAACG,MAAP,CAAchB,QAAd;AAEA,gCACE,KAAKiB,EADP,EAEE;AACEC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADd;AAEEC,QAAAA,KAAK,EAAE,IAFT;AAGEC,QAAAA,SAAS,EAAE,MAHb;AAIEC,QAAAA,aAAa,OAJf;AAKEC,QAAAA,SAAS,EAAE;AALb,OAFF,EASE;AAAA,eACE,KAAI,CAACC,MAAL,iCACKtB,IADL;AAEEY,UAAAA,MAAM,EAANA,MAFF;AAGEW,UAAAA,IAAI,EAAE,oBAHR;AAIEtB,UAAAA,MAAM,EAAED,IAAI,CAACC,MAJf;AAKEuB,UAAAA,SAAS,EAAE,CAACzB,QAAD,CALb;AAME0B,UAAAA,OAAO,EAAE;AANX,WADF;AAAA,OATF;AAmBD;;;WAED,4BAAmBC,YAAnB,EAA+C1B,IAA/C,EAAwF;AAAA;;AAEtF,UAAMY,MAAM,GAAGc,YAAY,CAACb,oBAAb,EAAf;AACA,UAAMd,QAAQ,GAAG2B,YAAY,CAACZ,cAA9B;;AAEA,UAAI,CAACF,MAAD,IAAW,CAACb,QAAhB,EAA0B;AACxB;AACD;;AAED,UAAME,MAAM,GAAGyB,YAAY,CAACC,YAAb,CAA0B3B,IAAI,CAACC,MAA/B,CAAf;AACAW,MAAAA,MAAM,CAACG,MAAP,CAAchB,QAAd;AAEA,gCACE,KAAKiB,EADP,EAEE;AACEK,QAAAA,SAAS,EAAE;AADb,OAFF,EAKE;AAAA,eACE,MAAI,CAACC,MAAL,iCACKtB,IADL;AAEEY,UAAAA,MAAM,EAANA,MAFF;AAGEW,UAAAA,IAAI,0BAAmBG,YAAY,CAACE,EAAhC,CAHN;AAIE3B,UAAAA,MAAM,EAANA,MAJF;AAKEwB,UAAAA,OAAO,EAAE,EALX;AAMED,UAAAA,SAAS,EAAE,CAACzB,QAAD;AANb,WADF;AAAA,OALF;AAeD;;;EA1E8B8B,kB","sourcesContent":["import {withParameters} from '@luma.gl/core';\nimport {Layer, Viewport, _LayersPass as LayersPass, LayersPassRenderOptions} from '@deck.gl/core';\nimport type {HeightMapBuilder} from './height-map-builder';\nimport type {TerrainCover} from './terrain-cover';\n\nimport GL from '@luma.gl/constants';\n\nexport type TerrainPassRenderOptions = LayersPassRenderOptions;\n\n/** Renders textures used by the TerrainEffect render pass */\nexport class TerrainPass extends LayersPass {\n  getRenderableLayers(viewport: Viewport, opts: TerrainPassRenderOptions): Layer[] {\n    const {layers} = opts;\n    const result: Layer[] = [];\n    const drawParamsByIndex = this._getDrawLayerParams(viewport, opts, true);\n    for (let i = 0; i < layers.length; i++) {\n      const layer = layers[i];\n      if (!layer.isComposite && drawParamsByIndex[i].shouldDrawLayer) {\n        result.push(layer);\n      }\n    }\n\n    return result;\n  }\n\n  renderHeightMap(heightMap: HeightMapBuilder, opts: Partial<TerrainPassRenderOptions>) {\n    // console.log('Updating height map')\n    const target = heightMap.getRenderFramebuffer();\n    const viewport = heightMap.renderViewport;\n\n    if (!target || !viewport) {\n      return;\n    }\n\n    target.resize(viewport);\n\n    withParameters(\n      this.gl,\n      {\n        clearColor: [0, 0, 0, 0],\n        blend: true,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX,\n        depthTest: false\n      },\n      () =>\n        this.render({\n          ...opts,\n          target,\n          pass: 'terrain-height-map',\n          layers: opts.layers!,\n          viewports: [viewport],\n          effects: []\n        })\n    );\n  }\n\n  renderTerrainCover(terrainCover: TerrainCover, opts: Partial<TerrainPassRenderOptions>) {\n    // console.log('Updating terrain cover ' + terrainCover.id)\n    const target = terrainCover.getRenderFramebuffer();\n    const viewport = terrainCover.renderViewport;\n\n    if (!target || !viewport) {\n      return;\n    }\n\n    const layers = terrainCover.filterLayers(opts.layers!);\n    target.resize(viewport);\n\n    withParameters(\n      this.gl,\n      {\n        depthTest: false\n      },\n      () =>\n        this.render({\n          ...opts,\n          target,\n          pass: `terrain-cover-${terrainCover.id}`,\n          layers,\n          effects: [],\n          viewports: [viewport]\n        })\n    );\n  }\n}\n"],"file":"terrain-pass.js"}