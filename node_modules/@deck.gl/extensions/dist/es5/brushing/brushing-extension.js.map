{"version":3,"sources":["../../../src/brushing/brushing-extension.ts"],"names":["defaultProps","getBrushingTarget","type","value","brushingTarget","brushingEnabled","brushingRadius","BrushingExtension","modules","shaderModule","context","extension","attributeManager","getAttributeManager","add","brushingTargets","size","accessor","shaderAttributes","divisor","instanceBrushingTargets","state","onMouseMove","getCurrentLayer","setNeedsRedraw","deck","eventManager","on","pointermove","pointerleave","off","LayerExtension"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAoBA;;AACA;;;;;;AAIA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,iBAAiB,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA1B,GADA;AAGnBC,EAAAA,cAAc,EAAE,QAHG;AAInBC,EAAAA,eAAe,EAAE,IAJE;AAKnBC,EAAAA,cAAc,EAAE;AALG,CAArB;;IA8BqBC,iB;;;;;;;;;;;;WAInB,sBAAkB;AAChB,aAAO;AACLC,QAAAA,OAAO,EAAE,CAACC,qBAAD;AADJ,OAAP;AAGD;;;WAED,yBAAqDC,OAArD,EAA4EC,SAA5E,EAA6F;AAAA;;AAC3F,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;;AACA,UAAID,gBAAJ,EAAsB;AACpBA,QAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,UAAAA,eAAe,EAAE;AACfC,YAAAA,IAAI,EAAE,CADS;AAEfC,YAAAA,QAAQ,EAAE,mBAFK;AAGfC,YAAAA,gBAAgB,EAAE;AAChBH,cAAAA,eAAe,EAAE;AACfI,gBAAAA,OAAO,EAAE;AADM,eADD;AAIhBC,cAAAA,uBAAuB,EAAE;AACvBD,gBAAAA,OAAO,EAAE;AADc;AAJT;AAHH;AADE,SAArB;AAcD;;AAID,WAAKE,KAAL,CAAWC,WAAX,GAAyB,YAAM;AAAA;;AAC7B,iCAAA,KAAI,CAACC,eAAL,kFAAwBC,cAAxB;AACD,OAFD;;AAGA,UAAId,OAAO,CAACe,IAAZ,EAAkB;AAEhBf,QAAAA,OAAO,CAACe,IAAR,CAAaC,YAAb,CAA0BC,EAA1B,CAA6B;AAC3BC,UAAAA,WAAW,EAAE,KAAKP,KAAL,CAAWC,WADG;AAE3BO,UAAAA,YAAY,EAAE,KAAKR,KAAL,CAAWC;AAFE,SAA7B;AAID;AACF;;;WAED,uBAAmDZ,OAAnD,EAA0EC,SAA1E,EAA2F;AAEzF,UAAID,OAAO,CAACe,IAAZ,EAAkB;AAEhBf,QAAAA,OAAO,CAACe,IAAR,CAAaC,YAAb,CAA0BI,GAA1B,CAA8B;AAC5BF,UAAAA,WAAW,EAAE,KAAKP,KAAL,CAAWC,WADI;AAE5BO,UAAAA,YAAY,EAAE,KAAKR,KAAL,CAAWC;AAFG,SAA9B;AAID;AACF;;;EApD4CS,oB;;;8BAA1BxB,iB,kBACGP,Y;8BADHO,iB,mBAEI,mB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport shaderModule from './shader-module';\n\nimport type {Layer, LayerContext, Accessor} from '@deck.gl/core';\n\nconst defaultProps = {\n  getBrushingTarget: {type: 'accessor', value: [0, 0]},\n\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\n\nexport type BrushingExtensionProps<DataT = any> = {\n  /**\n   * Called to retrieve an arbitrary position for each object that it will be filtered by.\n   * Only effective if `brushingTarget` is set to `custom`.\n   */\n  getBrushingTarget?: Accessor<DataT, [number, number]>;\n  /**\n   * Enable/disable brushing. If brushing is disabled, all objects are rendered.\n   * @default true\n   */\n  brushingEnabled?: boolean;\n  /**\n   * The position used to filter each object by.\n   */\n  brushingTarget?: 'source' | 'target' | 'source_target' | 'custom';\n  /** The brushing radius centered at the pointer, in meters. If a data object is within this circle, it is rendered; otherwise it is hidden.\n   * @default 10000\n   */\n  brushingRadius?: number;\n};\n\n/** Adds GPU-based data brushing functionalities to layers. It allows the layer to show/hide objects based on the current pointer position. */\nexport default class BrushingExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'BrushingExtension';\n\n  getShaders(): any {\n    return {\n      modules: [shaderModule]\n    };\n  }\n\n  initializeState(this: Layer<BrushingExtensionProps>, context: LayerContext, extension: this) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        brushingTargets: {\n          size: 2,\n          accessor: 'getBrushingTarget',\n          shaderAttributes: {\n            brushingTargets: {\n              divisor: 0\n            },\n            instanceBrushingTargets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    // Trigger redraw when mouse moves\n    // TODO - expose this in a better way\n    this.state.onMouseMove = () => {\n      this.getCurrentLayer()?.setNeedsRedraw();\n    };\n    if (context.deck) {\n      // @ts-expect-error (2446) accessing protected property\n      context.deck.eventManager.on({\n        pointermove: this.state.onMouseMove,\n        pointerleave: this.state.onMouseMove\n      });\n    }\n  }\n\n  finalizeState(this: Layer<BrushingExtensionProps>, context: LayerContext, extension: this) {\n    // Remove event listeners\n    if (context.deck) {\n      // @ts-expect-error (2446) accessing protected property\n      context.deck.eventManager.off({\n        pointermove: this.state.onMouseMove,\n        pointerleave: this.state.onMouseMove\n      });\n    }\n  }\n}\n"],"file":"brushing-extension.js"}