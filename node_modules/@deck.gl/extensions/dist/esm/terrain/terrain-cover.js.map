{"version":3,"sources":["../../../src/terrain/terrain-cover.ts"],"names":["createRenderTarget","joinLayerBounds","makeViewport","getRenderBounds","TerrainCover","constructor","targetLayer","tile","getTile","id","isActive","Boolean","getCurrentLayer","shouldUpdate","viewport","layers","layerNeedsRedraw","sizeChanged","_updateViewport","layersChanged","_updateLayers","needsRedraw","getIntersectingLayers","length","i","map","layer","shouldRedraw","targetBounds","boundingBox","bottomLeftCommon","projectPosition","topRightCommon","targetBoundsCommon","getBounds","newZoom","Math","ceil","zoom","bounds","oldZoom","renderViewport","newBounds","oldBounds","some","x","getRenderFramebuffer","fbo","context","gl","getPickingFramebuffer","props","pickable","pickingFbo","filterLayers","filter","includes","delete","texture","sourceTile","intersect","parent","b1","b2"],"mappings":";AAIA,SAAQA,kBAAR,QAAiC,SAAjC;AACA,SAAQC,eAAR,EAAyBC,YAAzB,EAAuCC,eAAvC,QAAqE,2BAArE;AAaA,OAAO,MAAMC,YAAN,CAAmB;AAkBxBC,EAAAA,WAAW,CAACC,WAAD,EAAqB;AAAA,qCAjBb,IAiBa;;AAAA;;AAAA,4CAbE,IAaF;;AAAA,oCAXR,IAWQ;;AAAA;;AAAA;;AAAA,oCAPL,EAOK;;AAAA;;AAAA,0CAJoB,IAIpB;;AAAA,gDAFY,IAEZ;;AAC9B,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKC,IAAL,GAAYC,OAAO,CAACF,WAAD,CAAnB;AACD;;AAEK,MAAFG,EAAE,GAAG;AACP,WAAO,KAAKH,WAAL,CAAiBG,EAAxB;AACD;;AAGW,MAARC,QAAQ,GAAY;AACtB,WAAOC,OAAO,CAAC,KAAKL,WAAL,CAAiBM,eAAjB,EAAD,CAAd;AACD;;AAEDC,EAAAA,YAAY,CAAC;AACXP,IAAAA,WADW;AAEXQ,IAAAA,QAFW;AAGXC,IAAAA,MAHW;AAIXC,IAAAA;AAJW,GAAD,EAUA;AACV,QAAIV,WAAJ,EAAiB;AACf,WAAKA,WAAL,GAAmBA,WAAnB;AACD;;AACD,UAAMW,WAAW,GAAGH,QAAQ,GAAG,KAAKI,eAAL,CAAqBJ,QAArB,CAAH,GAAoC,KAAhE;AAEA,QAAIK,aAAa,GAAGJ,MAAM,GAAG,KAAKK,aAAL,CAAmBL,MAAnB,CAAH,GAAgC,KAA1D;;AAEA,QAAIC,gBAAJ,EAAsB;AACpB,WAAK,MAAMP,EAAX,IAAiB,KAAKM,MAAtB,EAA8B;AAC5B,YAAIC,gBAAgB,CAACP,EAAD,CAApB,EAA0B;AACxBU,UAAAA,aAAa,GAAG,IAAhB;AAEA;AACD;AACF;AACF;;AAED,WAAOA,aAAa,IAAIF,WAAxB;AACD;;AAGOG,EAAAA,aAAa,CAACL,MAAD,EAA2B;AAC9C,QAAIM,WAAW,GAAG,KAAlB;AACAN,IAAAA,MAAM,GAAG,KAAKR,IAAL,GAAYe,qBAAqB,CAAC,KAAKf,IAAN,EAAYQ,MAAZ,CAAjC,GAAuDA,MAAhE;;AAEA,QAAIA,MAAM,CAACQ,MAAP,KAAkB,KAAKR,MAAL,CAAYQ,MAAlC,EAA0C;AACxCF,MAAAA,WAAW,GAAG,IAAd;AAED,KAHD,MAGO;AACL,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACQ,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,cAAMf,EAAE,GAAGM,MAAM,CAACS,CAAD,CAAN,CAAUf,EAArB;;AACA,YAAIA,EAAE,KAAK,KAAKM,MAAL,CAAYS,CAAZ,CAAX,EAA2B;AACzBH,UAAAA,WAAW,GAAG,IAAd;AAEA;AACD;AACF;AACF;;AACD,QAAIA,WAAJ,EAAiB;AACf,WAAKN,MAAL,GAAcA,MAAM,CAACU,GAAP,CAAWC,KAAK,IAAIA,KAAK,CAACjB,EAA1B,CAAd;AACD;;AACD,WAAOY,WAAP;AACD;;AAGOH,EAAAA,eAAe,CAACJ,QAAD,EAA8B;AACnD,UAAMR,WAAW,GAAG,KAAKA,WAAzB;AACA,QAAIqB,YAAY,GAAG,KAAnB;;AAEA,QAAI,KAAKpB,IAAL,IAAa,iBAAiB,KAAKA,IAAvC,EAA6C;AAC3C,UAAI,CAAC,KAAKqB,YAAV,EAAwB;AACtBD,QAAAA,YAAY,GAAG,IAAf;AACA,aAAKC,YAAL,GAAoB,KAAKrB,IAAL,CAAUsB,WAA9B;AAEA,cAAMC,gBAAgB,GAAGhB,QAAQ,CAACiB,eAAT,CAAyB,KAAKH,YAAL,CAAkB,CAAlB,CAAzB,CAAzB;AACA,cAAMI,cAAc,GAAGlB,QAAQ,CAACiB,eAAT,CAAyB,KAAKH,YAAL,CAAkB,CAAlB,CAAzB,CAAvB;AACA,aAAKK,kBAAL,GAA0B,CACxBH,gBAAgB,CAAC,CAAD,CADQ,EAExBA,gBAAgB,CAAC,CAAD,CAFQ,EAGxBE,cAAc,CAAC,CAAD,CAHU,EAIxBA,cAAc,CAAC,CAAD,CAJU,CAA1B;AAMD;AACF,KAdD,MAcO,IAAI,KAAKJ,YAAL,KAAsBtB,WAAW,CAAC4B,SAAZ,EAA1B,EAAmD;AAExDP,MAAAA,YAAY,GAAG,IAAf;AACA,WAAKC,YAAL,GAAoBtB,WAAW,CAAC4B,SAAZ,EAApB;AACA,WAAKD,kBAAL,GAA0BhC,eAAe,CAAC,CAACK,WAAD,CAAD,EAAgBQ,QAAhB,CAAzC;AACD;;AAED,QAAI,CAAC,KAAKmB,kBAAV,EAA8B;AAC5B,aAAO,KAAP;AACD;;AAED,UAAME,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUvB,QAAQ,CAACwB,IAAT,GAAgB,GAA1B,CAAhB;;AAGA,QAAI,KAAK/B,IAAT,EAAe;AACb,WAAKgC,MAAL,GAAc,KAAKN,kBAAnB;AACD,KAFD,MAEO;AAAA;;AACL,YAAMO,OAAO,2BAAG,KAAKC,cAAR,yDAAG,qBAAqBH,IAArC;AACAX,MAAAA,YAAY,GAAGA,YAAY,IAAIQ,OAAO,KAAKK,OAA3C;AACA,YAAME,SAAS,GAAGvC,eAAe,CAAC,KAAK8B,kBAAN,EAA0BnB,QAA1B,CAAjC;AACA,YAAM6B,SAAS,GAAG,KAAKJ,MAAvB;AACAZ,MAAAA,YAAY,GAAGA,YAAY,IAAI,CAACgB,SAAjB,IAA8BD,SAAS,CAACE,IAAV,CAAe,CAACC,CAAD,EAAIrB,CAAJ,KAAUqB,CAAC,KAAKF,SAAS,CAACnB,CAAD,CAAxC,CAA7C;AACA,WAAKe,MAAL,GAAcG,SAAd;AACD;;AAED,QAAIf,YAAJ,EAAkB;AAChB,WAAKc,cAAL,GAAsBvC,YAAY,CAAC;AACjCqC,QAAAA,MAAM,EAAE,KAAKA,MADoB;AAEjCD,QAAAA,IAAI,EAAEH,OAF2B;AAGjCrB,QAAAA;AAHiC,OAAD,CAAlC;AAKD;;AAED,WAAOa,YAAP;AACD;;AAEDmB,EAAAA,oBAAoB,GAAuB;AACzC,QAAI,CAAC,KAAKL,cAAN,IAAwB,KAAK1B,MAAL,CAAYQ,MAAZ,KAAuB,CAAnD,EAAsD;AACpD,aAAO,IAAP;AACD;;AACD,QAAI,CAAC,KAAKwB,GAAV,EAAe;AACb,WAAKA,GAAL,GAAW/C,kBAAkB,CAAC,KAAKM,WAAL,CAAiB0C,OAAjB,CAAyBC,EAA1B,EAA8B;AAACxC,QAAAA,EAAE,EAAE,KAAKA;AAAV,OAA9B,CAA7B;AACD;;AACD,WAAO,KAAKsC,GAAZ;AACD;;AAEDG,EAAAA,qBAAqB,GAAuB;AAC1C,QAAI,CAAC,KAAKT,cAAN,IAAyB,KAAK1B,MAAL,CAAYQ,MAAZ,KAAuB,CAAvB,IAA4B,CAAC,KAAKjB,WAAL,CAAiB6C,KAAjB,CAAuBC,QAAjF,EAA4F;AAC1F,aAAO,IAAP;AACD;;AACD,QAAI,CAAC,KAAKC,UAAV,EAAsB;AACpB,WAAKA,UAAL,GAAkBrD,kBAAkB,CAAC,KAAKM,WAAL,CAAiB0C,OAAjB,CAAyBC,EAA1B,EAA8B;AAACxC,QAAAA,EAAE,YAAK,KAAKA,EAAV;AAAH,OAA9B,CAApC;AACD;;AACD,WAAO,KAAK4C,UAAZ;AACD;;AAEDC,EAAAA,YAAY,CAACvC,MAAD,EAAkB;AAC5B,WAAOA,MAAM,CAACwC,MAAP,CAAc,CAAC;AAAC9C,MAAAA;AAAD,KAAD,KAAU,KAAKM,MAAL,CAAYyC,QAAZ,CAAqB/C,EAArB,CAAxB,CAAP;AACD;;AAEDgD,EAAAA,MAAM,GAAG;AACP,UAAM;AAACV,MAAAA,GAAD;AAAMM,MAAAA;AAAN,QAAoB,IAA1B;;AACA,QAAIN,GAAJ,EAAS;AACPA,MAAAA,GAAG,CAACW,OAAJ,CAAYD,MAAZ;AACAV,MAAAA,GAAG,CAACU,MAAJ;AACD;;AACD,QAAIJ,UAAJ,EAAgB;AACdA,MAAAA,UAAU,CAACK,OAAX,CAAmBD,MAAnB;AACAJ,MAAAA,UAAU,CAACI,MAAX;AACD;AACF;;AAhLuB;;AAuL1B,SAASnC,qBAAT,CAA+BqC,UAA/B,EAAuD5C,MAAvD,EAAiF;AAC/E,SAAOA,MAAM,CAACwC,MAAP,CAAc7B,KAAK,IAAI;AAC5B,UAAMnB,IAAI,GAAGC,OAAO,CAACkB,KAAD,CAApB;;AACA,QAAInB,IAAJ,EAAU;AACR,aAAOqD,SAAS,CAACD,UAAU,CAAC9B,WAAZ,EAAyBtB,IAAI,CAACsB,WAA9B,CAAhB;AACD;;AACD,WAAO,IAAP;AACD,GANM,CAAP;AAOD;;AAGD,SAASrB,OAAT,CAAiBkB,KAAjB,EAAkD;AAChD,SAAOA,KAAP,EAAc;AAEZ,UAAM;AAACnB,MAAAA;AAAD,QAASmB,KAAK,CAACyB,KAArB;;AACA,QAAI5C,IAAJ,EAAU;AACR,aAAOA,IAAP;AACD;;AACDmB,IAAAA,KAAK,GAAGA,KAAK,CAACmC,MAAd;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASD,SAAT,CAAmBE,EAAnB,EAA8CC,EAA9C,EAAkF;AAChF,MAAID,EAAE,IAAIC,EAAV,EAAc;AACZ,WAAOD,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,IAAWC,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAAX,IAAuBA,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,IAAWD,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAAlC,IAA8CA,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,IAAWC,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAAzD,IAAqEA,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,IAAWD,EAAE,CAAC,CAAD,CAAF,CAAM,CAAN,CAAvF;AACD;;AACD,SAAO,KAAP;AACD","sourcesContent":["import {Framebuffer} from '@luma.gl/core';\n\nimport type {Layer, Viewport} from '@deck.gl/core';\n\nimport {createRenderTarget} from './utils';\nimport {joinLayerBounds, makeViewport, getRenderBounds, Bounds} from '../utils/projection-utils';\n\ntype TileHeader = {\n  boundingBox: [min: number[], max: number[]];\n};\n\n/**\n * Manages the lifecycle of the terrain cover (draped textures over a terrain mesh).\n * One terrain cover is created for each unique terrain layer (primitive layer with operation:terrain).\n * It is updated when the terrain source layer's mesh changes or when any of the terrainDrawMode:drape\n * layers requires redraw.\n * During the draw call of a terrain layer, the drape texture is overlaid on top of the layer's own color.\n */\nexport class TerrainCover {\n  isDirty: boolean = true;\n  /** The terrain layer that this instance belongs to */\n  targetLayer: Layer;\n  /** Viewport used to draw into the texture */\n  renderViewport: Viewport | null = null;\n  /** Bounds of the terrain cover texture, in cartesian space */\n  bounds: Bounds | null = null;\n\n  private fbo?: Framebuffer;\n  private pickingFbo?: Framebuffer;\n  private layers: string[] = [];\n  private tile: TileHeader | null;\n  /** Cached version of targetLayer.getBounds() */\n  private targetBounds: [number[], number[]] | null = null;\n  /** targetBounds in cartesian space */\n  private targetBoundsCommon: Bounds | null = null;\n\n  constructor(targetLayer: Layer) {\n    this.targetLayer = targetLayer;\n    this.tile = getTile(targetLayer);\n  }\n\n  get id() {\n    return this.targetLayer.id;\n  }\n\n  /** returns true if the target layer is still in use (i.e. not finalized) */\n  get isActive(): boolean {\n    return Boolean(this.targetLayer.getCurrentLayer());\n  }\n\n  shouldUpdate({\n    targetLayer,\n    viewport,\n    layers,\n    layerNeedsRedraw\n  }: {\n    targetLayer?: Layer;\n    viewport?: Viewport;\n    layers?: Layer[];\n    layerNeedsRedraw?: Record<string, boolean>;\n  }): boolean {\n    if (targetLayer) {\n      this.targetLayer = targetLayer;\n    }\n    const sizeChanged = viewport ? this._updateViewport(viewport) : false;\n\n    let layersChanged = layers ? this._updateLayers(layers) : false;\n\n    if (layerNeedsRedraw) {\n      for (const id of this.layers) {\n        if (layerNeedsRedraw[id]) {\n          layersChanged = true;\n          // console.log('layer needs redraw', id);\n          break;\n        }\n      }\n    }\n\n    return layersChanged || sizeChanged;\n  }\n\n  /** Compare layers with the last version. Only rerender if necessary. */\n  private _updateLayers(layers: Layer[]): boolean {\n    let needsRedraw = false;\n    layers = this.tile ? getIntersectingLayers(this.tile, layers) : layers;\n\n    if (layers.length !== this.layers.length) {\n      needsRedraw = true;\n      // console.log('layers count changed', this.layers.length, '>>', layers.length);\n    } else {\n      for (let i = 0; i < layers.length; i++) {\n        const id = layers[i].id;\n        if (id !== this.layers[i]) {\n          needsRedraw = true;\n          // console.log('layer added/removed', id);\n          break;\n        }\n      }\n    }\n    if (needsRedraw) {\n      this.layers = layers.map(layer => layer.id);\n    }\n    return needsRedraw;\n  }\n\n  /** Compare viewport and terrain bounds with the last version. Only rerender if necesary. */\n  private _updateViewport(viewport: Viewport): boolean {\n    const targetLayer = this.targetLayer;\n    let shouldRedraw = false;\n\n    if (this.tile && 'boundingBox' in this.tile) {\n      if (!this.targetBounds) {\n        shouldRedraw = true;\n        this.targetBounds = this.tile.boundingBox;\n\n        const bottomLeftCommon = viewport.projectPosition(this.targetBounds[0]);\n        const topRightCommon = viewport.projectPosition(this.targetBounds[1]);\n        this.targetBoundsCommon = [\n          bottomLeftCommon[0],\n          bottomLeftCommon[1],\n          topRightCommon[0],\n          topRightCommon[1]\n        ];\n      }\n    } else if (this.targetBounds !== targetLayer.getBounds()) {\n      // console.log('bounds changed', this.bounds, '>>', newBounds);\n      shouldRedraw = true;\n      this.targetBounds = targetLayer.getBounds();\n      this.targetBoundsCommon = joinLayerBounds([targetLayer], viewport);\n    }\n\n    if (!this.targetBoundsCommon) {\n      return false;\n    }\n\n    const newZoom = Math.ceil(viewport.zoom + 0.5);\n    // If the terrain layer is bound to a tile, always render a texture that cover the whole tile.\n    // Otherwise, use the smaller of layer bounds and the viewport bounds.\n    if (this.tile) {\n      this.bounds = this.targetBoundsCommon;\n    } else {\n      const oldZoom = this.renderViewport?.zoom;\n      shouldRedraw = shouldRedraw || newZoom !== oldZoom;\n      const newBounds = getRenderBounds(this.targetBoundsCommon, viewport);\n      const oldBounds = this.bounds;\n      shouldRedraw = shouldRedraw || !oldBounds || newBounds.some((x, i) => x !== oldBounds[i]);\n      this.bounds = newBounds;\n    }\n\n    if (shouldRedraw) {\n      this.renderViewport = makeViewport({\n        bounds: this.bounds,\n        zoom: newZoom,\n        viewport\n      });\n    }\n\n    return shouldRedraw;\n  }\n\n  getRenderFramebuffer(): Framebuffer | null {\n    if (!this.renderViewport || this.layers.length === 0) {\n      return null;\n    }\n    if (!this.fbo) {\n      this.fbo = createRenderTarget(this.targetLayer.context.gl, {id: this.id});\n    }\n    return this.fbo;\n  }\n\n  getPickingFramebuffer(): Framebuffer | null {\n    if (!this.renderViewport || (this.layers.length === 0 && !this.targetLayer.props.pickable)) {\n      return null;\n    }\n    if (!this.pickingFbo) {\n      this.pickingFbo = createRenderTarget(this.targetLayer.context.gl, {id: `${this.id}-picking`});\n    }\n    return this.pickingFbo;\n  }\n\n  filterLayers(layers: Layer[]) {\n    return layers.filter(({id}) => this.layers.includes(id));\n  }\n\n  delete() {\n    const {fbo, pickingFbo} = this;\n    if (fbo) {\n      fbo.texture.delete();\n      fbo.delete();\n    }\n    if (pickingFbo) {\n      pickingFbo.texture.delete();\n      pickingFbo.delete();\n    }\n  }\n}\n\n/**\n * Remove layers that do not overlap with the current terrain cover.\n * This implementation only has effect when a TileLayer is overlaid on top of a TileLayer\n */\nfunction getIntersectingLayers(sourceTile: TileHeader, layers: Layer[]): Layer[] {\n  return layers.filter(layer => {\n    const tile = getTile(layer);\n    if (tile) {\n      return intersect(sourceTile.boundingBox, tile.boundingBox);\n    }\n    return true;\n  });\n}\n\n/** If layer is the descendent of a TileLayer, return the corresponding tile. */\nfunction getTile(layer: Layer): TileHeader | null {\n  while (layer) {\n    // @ts-expect-error tile may not exist\n    const {tile} = layer.props;\n    if (tile) {\n      return tile;\n    }\n    layer = layer.parent as Layer;\n  }\n  return null;\n}\n\nfunction intersect(b1?: [number[], number[]], b2?: [number[], number[]]): boolean {\n  if (b1 && b2) {\n    return b1[0][0] < b2[1][0] && b2[0][0] < b1[1][0] && b1[0][1] < b2[1][1] && b2[0][1] < b1[1][1];\n  }\n  return false;\n}\n"],"file":"terrain-cover.js"}