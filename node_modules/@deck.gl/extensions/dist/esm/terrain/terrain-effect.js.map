{"version":3,"sources":["../../../src/terrain/terrain-effect.ts"],"names":["Texture2D","ProgramManager","log","terrainModule","TerrainCover","TerrainPass","TerrainPickingPass","HeightMapBuilder","TerrainEffect","Map","initialize","gl","dummyHeightMap","width","height","data","Uint8Array","terrainPass","id","terrainPickingPass","isSupported","heightMap","warn","getDefaultProgramManager","addDefaultModule","preRender","opts","layer","layers","props","operation","includes","setChangeFlags","extensionsChanged","pickZ","isDrapingEnabled","viewports","isPicking","viewport","getRenderableLayers","terrainLayers","filter","l","length","offsetLayers","state","terrainDrawMode","_updateHeightMap","drapeLayers","_updateTerrainCovers","getModuleParameters","getRenderFramebuffer","heightMapBounds","bounds","terrainCover","terrainCovers","get","useTerrainHeightMap","terrainSkipRender","cleanup","delete","undefined","values","clear","shouldUpdate","renderHeightMap","moduleParameters","devicePixelRatio","drawToTerrainHeightMap","layerNeedsRedraw","terrainCoverNeedsRedraw","isDirty","_updateTerrainCover","_pruneTerrainCovers","terrainLayer","renderPass","set","targetLayer","renderTerrainCover","err","raiseError","idsToRemove","isActive","push"],"mappings":"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","sourcesContent":["import {Texture2D, ProgramManager} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\n\nimport {terrainModule, TerrainModuleSettings} from './shader-module';\nimport {TerrainCover} from './terrain-cover';\nimport {TerrainPass} from './terrain-pass';\nimport {TerrainPickingPass, TerrainPickingPassRenderOptions} from './terrain-picking-pass';\nimport {HeightMapBuilder} from './height-map-builder';\n\nimport type {Effect, PreRenderOptions, Layer, Viewport} from '@deck.gl/core';\n\n/** Class to manage terrain effect */\nexport class TerrainEffect implements Effect {\n  id = 'terrain-effect';\n  props = null;\n  useInPicking = true;\n\n  /** true if picking in the current pass */\n  private isPicking: boolean = false;\n  /** true if should use in the current pass */\n  private isDrapingEnabled: boolean = false;\n  /** An empty texture as placeholder */\n  private dummyHeightMap: Texture2D;\n  /** A texture encoding the ground elevation, updated once per redraw. Used by layers with offset mode */\n  private heightMap?: HeightMapBuilder;\n  private terrainPass!: TerrainPass;\n  private terrainPickingPass!: TerrainPickingPass;\n  /** One texture for each primitive terrain layer, into which the draped layers render */\n  private terrainCovers: Map<string, TerrainCover> = new Map();\n\n  initialize(gl: WebGLRenderingContext) {\n    this.dummyHeightMap = new Texture2D(gl, {\n      width: 1,\n      height: 1,\n      data: new Uint8Array([0, 0, 0, 0])\n    });\n    this.terrainPass = new TerrainPass(gl, {id: 'terrain'});\n    this.terrainPickingPass = new TerrainPickingPass(gl, {id: 'terrain-picking'});\n\n    if (HeightMapBuilder.isSupported(gl)) {\n      this.heightMap = new HeightMapBuilder(gl);\n    } else {\n      log.warn('Terrain offset mode is not supported by this browser')();\n    }\n\n    ProgramManager.getDefaultProgramManager(gl).addDefaultModule(terrainModule);\n  }\n\n  preRender(gl: WebGLRenderingContext, opts: PreRenderOptions): void {\n    if (!this.dummyHeightMap) {\n      // First time this effect is in use, initialize resources and register the shader module\n      this.initialize(gl);\n      for (const layer of opts.layers) {\n        // Force the terrain layer (and its descendents) to rebuild their models with the new shader\n        if (layer.props.operation.includes('terrain')) {\n          layer.setChangeFlags({extensionsChanged: true});\n        }\n      }\n    }\n\n    // @ts-expect-error pickZ only defined in picking pass\n    if (opts.pickZ) {\n      // Do not update if picking attributes\n      this.isDrapingEnabled = false;\n      return;\n    }\n\n    const {viewports, isPicking = false} = opts;\n    this.isPicking = isPicking;\n    this.isDrapingEnabled = true;\n\n    // TODO - support multiple views?\n    const viewport = viewports[0];\n    const layers = (isPicking ? this.terrainPickingPass : this.terrainPass).getRenderableLayers(\n      viewport,\n      opts as TerrainPickingPassRenderOptions\n    );\n\n    const terrainLayers = layers.filter(l => l.props.operation.includes('terrain'));\n    if (terrainLayers.length === 0) {\n      return;\n    }\n\n    if (!isPicking) {\n      const offsetLayers = layers.filter(l => l.state.terrainDrawMode === 'offset');\n      if (offsetLayers.length > 0) {\n        this._updateHeightMap(terrainLayers, viewport, opts);\n      }\n    }\n\n    const drapeLayers = layers.filter(l => l.state.terrainDrawMode === 'drape');\n    this._updateTerrainCovers(terrainLayers, drapeLayers, viewport, opts);\n  }\n\n  getModuleParameters(layer: Layer): TerrainModuleSettings {\n    const {terrainDrawMode} = layer.state;\n\n    return {\n      heightMap: this.heightMap?.getRenderFramebuffer(),\n      heightMapBounds: this.heightMap?.bounds,\n      dummyHeightMap: this.dummyHeightMap,\n      terrainCover: this.isDrapingEnabled ? this.terrainCovers.get(layer.id) : null,\n      useTerrainHeightMap: terrainDrawMode === 'offset',\n      terrainSkipRender: terrainDrawMode === 'drape' || !layer.props.operation.includes('draw')\n    };\n  }\n\n  cleanup(): void {\n    if (this.dummyHeightMap) {\n      this.dummyHeightMap.delete();\n      this.dummyHeightMap = undefined;\n    }\n\n    if (this.heightMap) {\n      this.heightMap.delete();\n      this.heightMap = undefined;\n    }\n\n    for (const terrainCover of this.terrainCovers.values()) {\n      terrainCover.delete();\n    }\n    this.terrainCovers.clear();\n  }\n\n  private _updateHeightMap(terrainLayers: Layer[], viewport: Viewport, opts: PreRenderOptions) {\n    if (!this.heightMap) {\n      // Not supported\n      return;\n    }\n\n    const shouldUpdate = this.heightMap.shouldUpdate({layers: terrainLayers, viewport});\n    if (!shouldUpdate) {\n      return;\n    }\n\n    this.terrainPass.renderHeightMap(this.heightMap, {\n      ...opts,\n      layers: terrainLayers,\n      moduleParameters: {\n        heightMapBounds: this.heightMap.bounds,\n        dummyHeightMap: this.dummyHeightMap,\n        devicePixelRatio: 1,\n        drawToTerrainHeightMap: true\n      }\n    });\n  }\n\n  private _updateTerrainCovers(\n    terrainLayers: Layer[],\n    drapeLayers: Layer[],\n    viewport: Viewport,\n    opts: PreRenderOptions\n  ) {\n    // Mark a terrain cover as dirty if one of the drape layers needs redraw\n    const layerNeedsRedraw: Record<string, boolean> = {};\n    for (const layer of drapeLayers) {\n      if (layer.state.terrainCoverNeedsRedraw) {\n        layerNeedsRedraw[layer.id] = true;\n        layer.state.terrainCoverNeedsRedraw = false;\n      }\n    }\n    for (const terrainCover of this.terrainCovers.values()) {\n      terrainCover.isDirty = terrainCover.isDirty || terrainCover.shouldUpdate({layerNeedsRedraw});\n    }\n\n    for (const layer of terrainLayers) {\n      this._updateTerrainCover(layer, drapeLayers, viewport, opts);\n    }\n\n    if (!this.isPicking) {\n      this._pruneTerrainCovers();\n    }\n  }\n\n  private _updateTerrainCover(\n    terrainLayer: Layer,\n    drapeLayers: Layer[],\n    viewport: Viewport,\n    opts: PreRenderOptions\n  ) {\n    const renderPass = this.isPicking ? this.terrainPickingPass : this.terrainPass;\n    let terrainCover = this.terrainCovers.get(terrainLayer.id);\n    if (!terrainCover) {\n      terrainCover = new TerrainCover(terrainLayer);\n      this.terrainCovers.set(terrainLayer.id, terrainCover);\n    }\n    try {\n      const isDirty = terrainCover.shouldUpdate({\n        targetLayer: terrainLayer,\n        viewport,\n        layers: drapeLayers\n      });\n      if (this.isPicking || terrainCover.isDirty || isDirty) {\n        renderPass.renderTerrainCover(terrainCover, {\n          ...opts,\n          layers: drapeLayers,\n          moduleParameters: {\n            dummyHeightMap: this.dummyHeightMap,\n            terrainSkipRender: false,\n            devicePixelRatio: 1\n          }\n        });\n        terrainCover.isDirty = false;\n      }\n    } catch (err) {\n      terrainLayer.raiseError(err as Error, `Error rendering terrain cover ${terrainCover.id}`);\n    }\n  }\n\n  private _pruneTerrainCovers() {\n    /** Prune the cache, remove textures for layers that have been removed */\n    const idsToRemove: string[] = [];\n    for (const [id, terrainCover] of this.terrainCovers) {\n      if (!terrainCover.isActive) {\n        idsToRemove.push(id);\n      }\n    }\n    for (const id of idsToRemove) {\n      this.terrainCovers.delete(id);\n    }\n  }\n}\n"],"file":"terrain-effect.js"}