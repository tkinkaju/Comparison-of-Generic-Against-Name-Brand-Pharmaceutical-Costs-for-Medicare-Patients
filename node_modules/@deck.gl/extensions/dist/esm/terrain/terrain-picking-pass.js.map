{"version":3,"sources":["../../../src/terrain/terrain-picking-pass.ts"],"names":["_PickLayersPass","PickLayersPass","withParameters","TerrainPickingPass","getRenderableLayers","viewport","opts","layers","result","drawParameters","_resetColorEncoder","pickZ","drawParamsByIndex","_getDrawLayerParams","i","length","layer","isComposite","shouldDrawLayer","push","id","layerParameters","renderTerrainCover","terrainCover","target","getPickingFramebuffer","renderViewport","filterLayers","terrainLayer","targetLayer","props","pickable","unshift","resize","gl","depthTest","render","pickingFBO","pass","effects","viewports","cullRect","undefined","deviceRect","getLayerParameters","layerIndex","parameters","blend"],"mappings":";AAAA,SAIEA,eAAe,IAAIC,cAJrB,QAKO,eALP;AAMA,SAAQC,cAAR,QAA6B,eAA7B;AAQA,OAAO,MAAMC,kBAAN,SAAiCF,cAAjC,CAAgD;AAAA;AAAA;;AAAA,4CAOf,EAPe;AAAA;;AASrDG,EAAAA,mBAAmB,CAACC,QAAD,EAAqBC,IAArB,EAAqE;AACtF,UAAM;AAACC,MAAAA;AAAD,QAAWD,IAAjB;AACA,UAAME,MAAe,GAAG,EAAxB;AACA,SAAKC,cAAL,GAAsB,EAAtB;;AACA,SAAKC,kBAAL,CAAwBJ,IAAI,CAACK,KAA7B;;AACA,UAAMC,iBAAiB,GAAG,KAAKC,mBAAL,CAAyBR,QAAzB,EAAmCC,IAAnC,CAA1B;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAAM,CAACQ,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YAAME,KAAK,GAAGT,MAAM,CAACO,CAAD,CAApB;;AACA,UAAI,CAACE,KAAK,CAACC,WAAP,IAAsBL,iBAAiB,CAACE,CAAD,CAAjB,CAAqBI,eAA/C,EAAgE;AAC9DV,QAAAA,MAAM,CAACW,IAAP,CAAYH,KAAZ;AACA,aAAKP,cAAL,CAAoBO,KAAK,CAACI,EAA1B,IAAgCR,iBAAiB,CAACE,CAAD,CAAjB,CAAqBO,eAArD;AACD;AACF;;AAED,WAAOb,MAAP;AACD;;AAEDc,EAAAA,kBAAkB,CAACC,YAAD,EAA6BjB,IAA7B,EAA6E;AAE7F,UAAMkB,MAAM,GAAGD,YAAY,CAACE,qBAAb,EAAf;AACA,UAAMpB,QAAQ,GAAGkB,YAAY,CAACG,cAA9B;;AAEA,QAAI,CAACF,MAAD,IAAW,CAACnB,QAAhB,EAA0B;AACxB;AACD;;AAED,UAAME,MAAM,GAAGgB,YAAY,CAACI,YAAb,CAA0BrB,IAAI,CAACC,MAA/B,CAAf;AACA,UAAMqB,YAAY,GAAGL,YAAY,CAACM,WAAlC;;AACA,QAAID,YAAY,CAACE,KAAb,CAAmBC,QAAvB,EAAiC;AAC/BxB,MAAAA,MAAM,CAACyB,OAAP,CAAeJ,YAAf;AACD;;AACDJ,IAAAA,MAAM,CAACS,MAAP,CAAc5B,QAAd;AAEAH,IAAAA,cAAc,CACZ,KAAKgC,EADO,EAEZ;AACEC,MAAAA,SAAS,EAAE;AADb,KAFY,EAKZ,MACE,KAAKC,MAAL,CAAY,EACV,GAAG9B,IADO;AAEV+B,MAAAA,UAAU,EAAEb,MAFF;AAGVc,MAAAA,IAAI,kCAA2Bf,YAAY,CAACH,EAAxC,CAHM;AAIVb,MAAAA,MAJU;AAKVgC,MAAAA,OAAO,EAAE,EALC;AAMVC,MAAAA,SAAS,EAAE,CAACnC,QAAD,CAND;AASVoC,MAAAA,QAAQ,EAAEC,SATA;AAUVC,MAAAA,UAAU,EAAEtC,QAVF;AAWVM,MAAAA,KAAK,EAAE;AAXG,KAAZ,CANU,CAAd;AAoBD;;AAESiC,EAAAA,kBAAkB,CAAC5B,KAAD,EAAe6B,UAAf,EAAmCxC,QAAnC,EAA4D;AACtF,QAAI,KAAKI,cAAL,CAAoBO,KAAK,CAACI,EAA1B,CAAJ,EAAmC;AACjC,aAAO,KAAKX,cAAL,CAAoBO,KAAK,CAACI,EAA1B,CAAP;AACD;;AACD,UAAM0B,UAAU,GAAG,MAAMF,kBAAN,CAAyB5B,KAAzB,EAAgC6B,UAAhC,EAA4CxC,QAA5C,CAAnB;AACAyC,IAAAA,UAAU,CAACC,KAAX,GAAmB,IAAnB;AACA,WAAOD,UAAP;AACD;;AAvEoD","sourcesContent":["import {\n  Layer,\n  Viewport,\n  LayersPassRenderOptions,\n  _PickLayersPass as PickLayersPass\n} from '@deck.gl/core';\nimport {withParameters} from '@luma.gl/core';\nimport type {TerrainCover} from './terrain-cover';\n\nexport type TerrainPickingPassRenderOptions = LayersPassRenderOptions & {\n  pickZ: boolean;\n};\n\n/** Renders textures used by the TerrainEffect picking pass */\nexport class TerrainPickingPass extends PickLayersPass {\n  /** Save layer index for use when drawing to terrain cover.\n   * When a terrain cover's picking buffer is rendered,\n   * we need to make sure each layer receives a consistent index (encoded in the alpha channel)\n   * so that a picked color can be decoded back to the correct layer.\n   * Updated in getRenderableLayers which is called in TerrainEffect.preRender\n   */\n  drawParameters: Record<string, any> = {};\n\n  getRenderableLayers(viewport: Viewport, opts: TerrainPickingPassRenderOptions): Layer[] {\n    const {layers} = opts;\n    const result: Layer[] = [];\n    this.drawParameters = {};\n    this._resetColorEncoder(opts.pickZ);\n    const drawParamsByIndex = this._getDrawLayerParams(viewport, opts);\n    for (let i = 0; i < layers.length; i++) {\n      const layer = layers[i];\n      if (!layer.isComposite && drawParamsByIndex[i].shouldDrawLayer) {\n        result.push(layer);\n        this.drawParameters[layer.id] = drawParamsByIndex[i].layerParameters;\n      }\n    }\n\n    return result;\n  }\n\n  renderTerrainCover(terrainCover: TerrainCover, opts: Partial<TerrainPickingPassRenderOptions>) {\n    // console.log('Updating terrain cover for picking ' + terrainCover.id)\n    const target = terrainCover.getPickingFramebuffer();\n    const viewport = terrainCover.renderViewport;\n\n    if (!target || !viewport) {\n      return;\n    }\n\n    const layers = terrainCover.filterLayers(opts.layers!);\n    const terrainLayer = terrainCover.targetLayer;\n    if (terrainLayer.props.pickable) {\n      layers.unshift(terrainLayer);\n    }\n    target.resize(viewport);\n\n    withParameters(\n      this.gl,\n      {\n        depthTest: false\n      },\n      () =>\n        this.render({\n          ...opts,\n          pickingFBO: target,\n          pass: `terrain-cover-picking-${terrainCover.id}`,\n          layers,\n          effects: [],\n          viewports: [viewport],\n          // Disable the default culling because TileLayer would cull sublayers based on the screen viewport,\n          // not the viewport of the terrain cover. Culling is already done by `terrainCover.filterLayers`\n          cullRect: undefined,\n          deviceRect: viewport,\n          pickZ: false\n        })\n    );\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    if (this.drawParameters[layer.id]) {\n      return this.drawParameters[layer.id];\n    }\n    const parameters = super.getLayerParameters(layer, layerIndex, viewport);\n    parameters.blend = true;\n    return parameters;\n  }\n}\n"],"file":"terrain-picking-pass.js"}