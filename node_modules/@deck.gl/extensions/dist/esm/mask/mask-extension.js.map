{"version":3,"sources":["../../../src/mask/mask-extension.ts"],"names":["COORDINATE_SYSTEM","LayerExtension","log","mask","MaskEffect","defaultProps","maskId","maskByInstance","undefined","maskInverted","MaskExtension","initializeState","context","deck","_addDefaultEffect","getShaders","getAttributeManager","attributes","props","Boolean","state","modules","draw","uniforms","moduleParameters","mask_maskByInstance","maskChannels","viewport","index","bounds","coordinateOrigin","fromCoordinateOrigin","coordinateSystem","fromCoordinateSystem","mask_enabled","mask_channel","mask_inverted","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","opts","modelMatrix","bl","projectPosition","tr","mask_bounds","warn"],"mappings":"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","sourcesContent":["import {COORDINATE_SYSTEM, Layer, LayerExtension, log} from '@deck.gl/core';\nimport mask from './shader-module';\nimport MaskEffect from './mask-effect';\n\nconst defaultProps = {\n  maskId: '',\n  maskByInstance: undefined,\n  maskInverted: false\n};\n\nexport type MaskExtensionProps = {\n  /**\n   * Id of the layer that defines the mask. The mask layer must use the prop `operation: 'mask'`.\n   * Masking is disabled if `maskId` is empty or no valid mask layer with the specified id is found.\n   */\n  maskId?: string;\n  /**\n   * controls whether an object is clipped by its anchor (usually defined by an accessor called `getPosition`, e.g. icon, scatterplot) or by its geometry (e.g. path, polygon).\n   * If not specified, it is automatically deduced from the layer.\n   */\n  maskByInstance?: boolean;\n  /**\n   * Inverts the masking operation\n   */\n  maskInverted?: boolean;\n};\n\n/** Allows layers to show/hide objects by a geofence. */\nexport default class MaskExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'MaskExtension';\n\n  initializeState(this: Layer<MaskExtensionProps>) {\n    this.context.deck?._addDefaultEffect(new MaskEffect());\n  }\n\n  getShaders(this: Layer<MaskExtensionProps>): any {\n    // Infer by geometry if 'maskByInstance' prop isn't explictly set\n    let maskByInstance = 'instancePositions' in this.getAttributeManager()!.attributes;\n    // Users can override by setting the `maskByInstance` prop\n    if (this.props.maskByInstance !== undefined) {\n      maskByInstance = Boolean(this.props.maskByInstance);\n    }\n    this.state.maskByInstance = maskByInstance;\n\n    return {\n      modules: [mask]\n    };\n  }\n\n  /* eslint-disable camelcase */\n  draw(this: Layer<Required<MaskExtensionProps>>, {uniforms, context, moduleParameters}: any) {\n    uniforms.mask_maskByInstance = this.state.maskByInstance;\n    const {maskId, maskInverted} = this.props;\n    const {maskChannels} = moduleParameters;\n    const {viewport} = context;\n    if (maskChannels && maskChannels[maskId]) {\n      const {index, bounds, coordinateOrigin: fromCoordinateOrigin} = maskChannels[maskId];\n      let {coordinateSystem: fromCoordinateSystem} = maskChannels[maskId];\n      uniforms.mask_enabled = true;\n      uniforms.mask_channel = index;\n      uniforms.mask_inverted = maskInverted;\n\n      if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        fromCoordinateSystem = viewport.isGeospatial\n          ? COORDINATE_SYSTEM.LNGLAT\n          : COORDINATE_SYSTEM.CARTESIAN;\n      }\n      const opts = {modelMatrix: null, fromCoordinateOrigin, fromCoordinateSystem};\n      const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n      const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n      uniforms.mask_bounds = [bl[0], bl[1], tr[0], tr[1]];\n    } else {\n      if (maskId) {\n        log.warn(`Could not find a mask layer with id: ${maskId}`)();\n      }\n      uniforms.mask_enabled = false;\n    }\n  }\n}\n"],"file":"mask-extension.js"}