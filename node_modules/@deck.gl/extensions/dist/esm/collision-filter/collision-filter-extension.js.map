{"version":3,"sources":["../../../src/collision-filter/collision-filter-extension.ts"],"names":["LayerExtension","collision","CollisionFilterEffect","defaultProps","getCollisionPriority","type","value","collisionEnabled","collisionGroup","collisionTestProps","CollisionFilterExtension","getShaders","modules","draw","uniforms","context","moduleParameters","props","collisionFBO","drawToCollisionMap","enabled","Boolean","collision_enabled","clone","initializeState","extension","getAttributeManager","deck","_addDefaultEffect","attributeManager","add","collisionPriorities","size","accessor","shaderAttributes","divisor","instanceCollisionPriorities","getNeedsPickingBuffer"],"mappings":";AAAA,SAAuCA,cAAvC,QAA4D,eAA5D;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,qBAAP,MAAkC,2BAAlC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,oBAAoB,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GADH;AAEnBC,EAAAA,gBAAgB,EAAE,IAFC;AAGnBC,EAAAA,cAAc,EAAE;AAACH,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAHG;AAInBG,EAAAA,kBAAkB,EAAE;AAJD,CAArB;AA+BA,eAAe,MAAMC,wBAAN,SAAuCV,cAAvC,CAAsD;AAInEW,EAAAA,UAAU,GAAkD;AAC1D,WAAO;AAACC,MAAAA,OAAO,EAAE,CAACX,SAAD;AAAV,KAAP;AACD;;AAGDY,EAAAA,IAAI,CAA6C;AAACC,IAAAA,QAAD;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,GAA7C,EAAyF;AAC3F,UAAM;AAACT,MAAAA;AAAD,QAAqB,KAAKU,KAAhC;AACA,UAAM;AAACC,MAAAA,YAAD;AAAeC,MAAAA;AAAf,QAAqCH,gBAA3C;AACA,UAAMI,OAAO,GAAGb,gBAAgB,IAAIc,OAAO,CAACH,YAAD,CAA3C;AACAJ,IAAAA,QAAQ,CAACQ,iBAAT,GAA6BF,OAA7B;;AAEA,QAAID,kBAAJ,EAAwB;AAGtB,WAAKF,KAAL,GAAa,KAAKM,KAAL,CAAW,KAAKN,KAAL,CAAWR,kBAAtB,EAA0CQ,KAAvD;AACD;AACF;;AAEDO,EAAAA,eAAe,CAEbT,OAFa,EAGbU,SAHa,EAIb;AAAA;;AACA,QAAI,KAAKC,mBAAL,OAA+B,IAAnC,EAAyC;AACvC;AACD;;AACD,+BAAKX,OAAL,CAAaY,IAAb,0EAAmBC,iBAAnB,CAAqC,IAAI1B,qBAAJ,EAArC;AACA,UAAM2B,gBAAgB,GAAG,KAAKH,mBAAL,EAAzB;AACAG,IAAAA,gBAAgB,CAAEC,GAAlB,CAAsB;AACpBC,MAAAA,mBAAmB,EAAE;AACnBC,QAAAA,IAAI,EAAE,CADa;AAEnBC,QAAAA,QAAQ,EAAE,sBAFS;AAGnBC,QAAAA,gBAAgB,EAAE;AAChBH,UAAAA,mBAAmB,EAAE;AAACI,YAAAA,OAAO,EAAE;AAAV,WADL;AAEhBC,UAAAA,2BAA2B,EAAE;AAACD,YAAAA,OAAO,EAAE;AAAV;AAFb;AAHC;AADD,KAAtB;AAUD;;AAEDE,EAAAA,qBAAqB,GAAsD;AACzE,WAAO,KAAKpB,KAAL,CAAWV,gBAAlB;AACD;;AA9CkE;;gBAAhDG,wB,kBACGP,Y;;gBADHO,wB,mBAEI,0B","sourcesContent":["import {Accessor, Layer, LayerContext, LayerExtension} from '@deck.gl/core';\nimport collision from './shader-module';\nimport CollisionFilterEffect from './collision-filter-effect';\n\nconst defaultProps = {\n  getCollisionPriority: {type: 'accessor', value: 0},\n  collisionEnabled: true,\n  collisionGroup: {type: 'string', value: 'default'},\n  collisionTestProps: {}\n};\n\nexport type CollisionFilterExtensionProps<DataT = any> = {\n  /**\n   * Accessor for collision priority. Must return a number in the range -1000 -> 1000. Features with higher values are shown preferentially.\n   */\n  getCollisionPriority?: Accessor<DataT, number>;\n\n  /**\n   * Enable/disable collisions. If collisions are disabled, all objects are rendered.\n   * @default true\n   */\n  collisionEnabled: boolean;\n\n  /**\n   * Collision group this layer belongs to. If it is not set, the 'default' collision group is used\n   */\n  collisionGroup?: string;\n\n  /**\n   * Props to override when rendering collision map\n   */\n  collisionTestProps?: {};\n};\n\n/** Allows layers to hide overlapping objects. */\nexport default class CollisionFilterExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'CollisionFilterExtension';\n\n  getShaders(this: Layer<CollisionFilterExtensionProps>): any {\n    return {modules: [collision]};\n  }\n\n  /* eslint-disable camelcase */\n  draw(this: Layer<CollisionFilterExtensionProps>, {uniforms, context, moduleParameters}: any) {\n    const {collisionEnabled} = this.props;\n    const {collisionFBO, drawToCollisionMap} = moduleParameters;\n    const enabled = collisionEnabled && Boolean(collisionFBO);\n    uniforms.collision_enabled = enabled;\n\n    if (drawToCollisionMap) {\n      // Override any props with those defined in collisionTestProps\n      // @ts-ignore\n      this.props = this.clone(this.props.collisionTestProps).props;\n    }\n  }\n\n  initializeState(\n    this: Layer<CollisionFilterExtensionProps>,\n    context: LayerContext,\n    extension: this\n  ) {\n    if (this.getAttributeManager() === null) {\n      return;\n    }\n    this.context.deck?._addDefaultEffect(new CollisionFilterEffect());\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.add({\n      collisionPriorities: {\n        size: 1,\n        accessor: 'getCollisionPriority',\n        shaderAttributes: {\n          collisionPriorities: {divisor: 0},\n          instanceCollisionPriorities: {divisor: 1}\n        }\n      }\n    });\n  }\n\n  getNeedsPickingBuffer(this: Layer<CollisionFilterExtensionProps>): boolean {\n    return this.props.collisionEnabled;\n  }\n}\n"],"file":"collision-filter-extension.js"}