{"version":3,"sources":["../../../src/collision-filter/collision-filter-effect.ts"],"names":["Framebuffer","Renderbuffer","Texture2D","cssToDeviceRatio","equals","_deepEqual","deepEqual","CollisionFilterPass","MaskEffect","DOWNSCALE","CollisionFilterEffect","preRender","gl","effects","allEffects","layers","layerFilter","viewports","onViewportActive","views","isPicking","preRenderStats","dummyCollisionMap","width","height","collisionLayers","filter","props","visible","collisionEnabled","length","channels","collisionFilterPass","id","e","constructor","maskEffectRendered","didRender","_groupByCollisionGroup","viewport","viewportChanged","lastViewport","collisionGroup","collisionFBO","collisionFBOs","renderInfo","resize","canvas","_render","oldRenderInfo","needsRender","layerBounds","some","b","i","allLayersLoaded","layer","transitions","renderCollisionMap","pass","moduleParameters","devicePixelRatio","channelMap","channelInfo","push","getBounds","isLoaded","Object","keys","createFBO","destroyFBO","getModuleParameters","cleanup","delete","undefined","collisionMap","parameters","depthBuffer","format","attachments","fbo","attachment","values"],"mappings":"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","sourcesContent":["import {Framebuffer, Renderbuffer, Texture2D, cssToDeviceRatio} from '@luma.gl/core';\nimport {equals} from '@math.gl/core';\nimport {_deepEqual as deepEqual} from '@deck.gl/core';\nimport type {Effect, Layer, PreRenderOptions, Viewport} from '@deck.gl/core';\nimport CollisionFilterPass from './collision-filter-pass';\nimport MaskEffect, {MaskPreRenderStats} from '../mask/mask-effect';\n// import {debugFBO} from '../utils/debug';\n\ntype CollisionFilterExtensionProps = {\n  collisionTestProps?: {};\n  collisionGroup: string;\n};\n\n// Factor by which to downscale Collision FBO relative to canvas\nconst DOWNSCALE = 2;\n\ntype RenderInfo = {\n  collisionGroup: string;\n  layers: Layer<CollisionFilterExtensionProps>[];\n  layerBounds: ([number[], number[]] | null)[];\n  allLayersLoaded: boolean;\n};\n\nexport default class CollisionFilterEffect implements Effect {\n  id = 'collision-filter-effect';\n  props = null;\n  useInPicking = true;\n  order = 1;\n\n  private channels: Record<string, RenderInfo> = {};\n  private collisionFilterPass?: CollisionFilterPass;\n  private collisionFBOs: Record<string, Framebuffer> = {};\n  private dummyCollisionMap?: Texture2D;\n  private lastViewport?: Viewport;\n\n  preRender(\n    gl: WebGLRenderingContext,\n    {\n      effects: allEffects,\n      layers,\n      layerFilter,\n      viewports,\n      onViewportActive,\n      views,\n      isPicking,\n      preRenderStats = {}\n    }: PreRenderOptions\n  ): void {\n    if (!this.dummyCollisionMap) {\n      this.dummyCollisionMap = new Texture2D(gl, {width: 1, height: 1});\n    }\n\n    if (isPicking) {\n      // Do not update on picking pass\n      return;\n    }\n\n    const collisionLayers = layers.filter(\n      // @ts-ignore\n      ({props: {visible, collisionEnabled}}) => visible && collisionEnabled\n    ) as Layer<CollisionFilterExtensionProps>[];\n    if (collisionLayers.length === 0) {\n      this.channels = {};\n      return;\n    }\n\n    if (!this.collisionFilterPass) {\n      this.collisionFilterPass = new CollisionFilterPass(gl, {id: 'default-collision-filter'});\n    }\n\n    // Detect if mask has rendered. TODO: better dependency system for Effects\n    const effects = allEffects?.filter(e => e.constructor === MaskEffect);\n    const maskEffectRendered = (preRenderStats['mask-effect'] as MaskPreRenderStats)?.didRender;\n\n    // Collect layers to render\n    const channels = this._groupByCollisionGroup(gl, collisionLayers);\n\n    const viewport = viewports[0];\n    const viewportChanged =\n      !this.lastViewport || !this.lastViewport.equals(viewport) || maskEffectRendered;\n\n    // Resize framebuffers to match canvas\n    for (const collisionGroup in channels) {\n      const collisionFBO = this.collisionFBOs[collisionGroup];\n      const renderInfo = channels[collisionGroup];\n      collisionFBO.resize({\n        width: gl.canvas.width / DOWNSCALE,\n        height: gl.canvas.height / DOWNSCALE\n      });\n      this._render(renderInfo, {\n        effects,\n        layerFilter,\n        onViewportActive,\n        views,\n        viewport,\n        viewportChanged\n      });\n    }\n\n    // debugFBO(this.collisionFBOs[Object.keys(channels)[0]], {minimap: true});\n  }\n\n  private _render(\n    renderInfo: RenderInfo,\n    {\n      effects,\n      layerFilter,\n      onViewportActive,\n      views,\n      viewport,\n      viewportChanged\n    }: {\n      effects: PreRenderOptions['effects'];\n      layerFilter: PreRenderOptions['layerFilter'];\n      onViewportActive: PreRenderOptions['onViewportActive'];\n      views: PreRenderOptions['views'];\n      viewport: Viewport;\n      viewportChanged: boolean;\n    }\n  ) {\n    const {collisionGroup} = renderInfo;\n    const oldRenderInfo = this.channels[collisionGroup];\n    if (!oldRenderInfo) {\n      return;\n    }\n\n    const needsRender =\n      viewportChanged ||\n      // If render info is new\n      renderInfo === oldRenderInfo ||\n      // If sublayers have changed\n      !deepEqual(oldRenderInfo.layers, renderInfo.layers, 1) ||\n      // If a sublayer's bounds have been updated\n      renderInfo.layerBounds.some((b, i) => !equals(b, oldRenderInfo.layerBounds[i])) ||\n      // If a sublayer's isLoaded state has been updated\n      renderInfo.allLayersLoaded !== oldRenderInfo.allLayersLoaded ||\n      // Some prop is in transition\n      renderInfo.layers.some(layer => layer.props.transitions);\n\n    this.channels[collisionGroup] = renderInfo;\n\n    if (needsRender) {\n      this.lastViewport = viewport;\n      const collisionFBO = this.collisionFBOs[collisionGroup];\n\n      // Rerender collision FBO\n      this.collisionFilterPass!.renderCollisionMap(collisionFBO, {\n        pass: 'collision-filter',\n        isPicking: true,\n        layers: renderInfo.layers,\n        effects,\n        layerFilter,\n        viewports: viewport ? [viewport] : [],\n        onViewportActive,\n        views,\n        moduleParameters: {\n          // To avoid feedback loop forming between Framebuffer and active Texture.\n          dummyCollisionMap: this.dummyCollisionMap,\n          devicePixelRatio: cssToDeviceRatio(collisionFBO.gl) / DOWNSCALE\n        }\n      });\n    }\n  }\n\n  /**\n   * Group layers by collisionGroup\n   * Returns a map from collisionGroup to render info\n   */\n  private _groupByCollisionGroup(\n    gl: WebGLRenderingContext,\n    collisionLayers: Layer<CollisionFilterExtensionProps>[]\n  ): Record<string, RenderInfo> {\n    const channelMap = {};\n    for (const layer of collisionLayers) {\n      const {collisionGroup} = layer.props;\n      let channelInfo = channelMap[collisionGroup];\n      if (!channelInfo) {\n        channelInfo = {collisionGroup, layers: [], layerBounds: [], allLayersLoaded: true};\n        channelMap[collisionGroup] = channelInfo;\n      }\n      channelInfo.layers.push(layer);\n      channelInfo.layerBounds.push(layer.getBounds());\n      if (!layer.isLoaded) {\n        channelInfo.allLayersLoaded = false;\n      }\n    }\n\n    // Create any new passes and remove any old ones\n    for (const collisionGroup of Object.keys(channelMap)) {\n      if (!this.collisionFBOs[collisionGroup]) {\n        this.createFBO(gl, collisionGroup);\n      }\n      if (!this.channels[collisionGroup]) {\n        this.channels[collisionGroup] = channelMap[collisionGroup];\n      }\n    }\n    for (const collisionGroup of Object.keys(this.collisionFBOs)) {\n      if (!channelMap[collisionGroup]) {\n        this.destroyFBO(collisionGroup);\n      }\n    }\n\n    return channelMap;\n  }\n\n  getModuleParameters(layer: Layer): {\n    collisionFBO: Framebuffer;\n    dummyCollisionMap: Texture2D;\n  } {\n    const {collisionGroup} = (layer as Layer<CollisionFilterExtensionProps>).props;\n    const {collisionFBOs, dummyCollisionMap} = this;\n    return {collisionFBO: collisionFBOs[collisionGroup], dummyCollisionMap};\n  }\n\n  cleanup(): void {\n    if (this.dummyCollisionMap) {\n      this.dummyCollisionMap.delete();\n      this.dummyCollisionMap = undefined;\n    }\n    this.channels = {};\n    for (const collisionGroup of Object.keys(this.collisionFBOs)) {\n      this.destroyFBO(collisionGroup);\n    }\n    this.collisionFBOs = {};\n    this.lastViewport = undefined;\n  }\n\n  createFBO(gl: WebGLRenderingContext, collisionGroup: string) {\n    const {width, height} = gl.canvas;\n    const collisionMap = new Texture2D(gl, {\n      width,\n      height,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.NEAREST,\n        [gl.TEXTURE_MAG_FILTER]: gl.NEAREST,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    const depthBuffer = new Renderbuffer(gl, {format: gl.DEPTH_COMPONENT16, width, height});\n    this.collisionFBOs[collisionGroup] = new Framebuffer(gl, {\n      id: `Collision-${collisionGroup}`,\n      width,\n      height,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: collisionMap,\n        [gl.DEPTH_ATTACHMENT]: depthBuffer\n      }\n    });\n  }\n\n  destroyFBO(collisionGroup: string) {\n    const fbo = this.collisionFBOs[collisionGroup];\n    for (const attachment of Object.values(fbo.attachments as Texture2D[])) {\n      attachment.delete();\n    }\n    fbo.delete();\n    delete this.collisionFBOs[collisionGroup];\n  }\n}\n"],"file":"collision-filter-effect.js"}