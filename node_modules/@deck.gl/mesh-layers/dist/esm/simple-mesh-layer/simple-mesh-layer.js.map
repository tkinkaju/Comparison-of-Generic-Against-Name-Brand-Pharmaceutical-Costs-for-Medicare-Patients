{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.ts"],"names":["Layer","project32","phongLighting","picking","log","Model","Geometry","Texture2D","isWebGL2","hasFeature","FEATURES","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs","fs","getMeshBoundingBox","validateGeometryAttributes","attributes","useMeshColors","hasColorAttribute","COLOR_0","colors","useColorAttribute","constant","value","Float32Array","assert","positions","POSITION","getGeometry","data","Error","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","_useMeshColors","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","textureParameters","ignore","SimpleMeshLayer","getShaders","transpileToGLSL100","context","gl","defines","GLSL_DERIVATIVES","DERIVATIVES_AVAILABLE","modules","getBounds","props","result","state","positionBounds","header","boundingBox","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","colorFormat","length","normalized","defaultValue","instanceModelMatrix","setState","emptyTexture","Uint8Array","width","height","updateState","params","oldProps","changeFlags","extensionsChanged","model","delete","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","finalizeState","draw","uniforms","viewport","coordinateSystem","setUniforms","composeModelMatrix","flatShading","id","geometry","isInstanced","sampler","hasTexture"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  phongLighting,\n  picking,\n  DefaultProps,\n  log,\n  LayerContext,\n  Material\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Position,\n  Color,\n  Texture\n} from '@deck.gl/core';\nimport type {MeshAttribute, MeshAttributes} from '@loaders.gl/schema';\nimport type {Geometry as GeometryType} from '@luma.gl/engine';\nimport {GLTFMaterialParser} from '@luma.gl/experimental';\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\n\nfunction validateGeometryAttributes(attributes: Record<string, any>, useMeshColors: boolean): void {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'no \"postions\" or \"POSITION\" attribute in mesh'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data: Mesh, useMeshColors: boolean): Geometry {\n  if ((data as any).attributes) {\n    validateGeometryAttributes((data as any).attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if ((data as MeshAttributes).positions || (data as MeshAttributes).POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\ntype Mesh =\n  | GeometryType\n  | {\n      attributes: MeshAttributes;\n      indices?: MeshAttribute;\n    }\n  | MeshAttributes;\n\ntype _SimpleMeshLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  mesh: string | Mesh | Promise<Mesh> | null;\n  texture?: string | Texture | Promise<Texture>;\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Color value or accessor.\n   * If `mesh` does not contain vertex colors, use this color to render each object.\n   * If `mesh` contains vertex colors, then the two colors are mixed together.\n   * Use `[255, 255, 255]` to use the original mesh colors.\n   * If `texture` is assigned, then both colors will be ignored.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Orientation in [pitch, yaw, roll] in degrees.\n   * @see https://en.wikipedia.org/wiki/Euler_angles\n   * @default [0, 0, 0]\n   */\n  getOrientation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Scaling factor of the model along each axis.\n   * @default [1, 1, 1]\n   */\n  getScale?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Translation from the anchor point, [x, y, z] in meters.\n   * @default [0, 0, 0]\n   */\n  getTranslation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * TransformMatrix. If specified, `getOrientation`, `getScale` and `getTranslation` are ignored.\n   */\n  getTransformMatrix?: Accessor<DataT, number[]>;\n  /**\n   * Multiplier to scale each geometry by.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * @deprecated Whether to color pixels using vertex colors supplied in the mesh (the `COLOR_0` or `colors` attribute).\n   * If set to `false` vertex colors will be ignored.\n   * This prop will be removed and set to always true in the next major release.\n   * @default false\n   */\n  _useMeshColors?: boolean;\n\n  /**\n   * (Experimental) If rendering only one instance of the mesh, set this to false to treat mesh positions\n   * as deltas of the world coordinates of the anchor.\n   * E.g. in LNGLAT coordinates, mesh positions are interpreted as meter offsets by default.\n   * setting _instanced to false interpreted mesh positions as lnglat deltas.\n   * @default true\n   */\n  _instanced?: boolean; // TODO - formalize API\n  /**\n   * Whether to render the mesh in wireframe mode.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * Material props for lighting effect.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting#constructing-a-material-instance\n   */\n  material?: Material;\n};\n\nexport type SimpleMeshLayerProps<DataT = any> = _SimpleMeshLayerProps<DataT> & LayerProps;\n\nconst defaultProps: DefaultProps<SimpleMeshLayerProps> = {\n  mesh: {type: 'object', value: null, async: true},\n  texture: {type: 'image', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // Whether the color attribute in a mesh will be used\n  // This prop will be removed and set to true in next major release\n  _useMeshColors: {type: 'boolean', value: false},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []},\n\n  textureParameters: {type: 'object', ignore: true}\n};\n\n/** Render a number of instances of an arbitrary 3D geometry. */\nexport default class SimpleMeshLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_SimpleMeshLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SimpleMeshLayer';\n\n  state!: {\n    materialParser?: GLTFMaterialParser;\n    model?: Model;\n    emptyTexture: Texture2D;\n    hasNormals?: boolean;\n    positionBounds?: [number[], number[]] | null;\n  };\n\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines: any = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  getBounds(): [number[], number[]] | null {\n    if (this.props._instanced) {\n      return super.getBounds();\n    }\n    let result = this.state.positionBounds;\n    if (result) {\n      return result;\n    }\n    const {mesh} = this.props;\n    if (!mesh) {\n      return null;\n    }\n    // @ts-ignore Detect if mesh is generated by loaders.gl\n    result = mesh.header?.boundingBox;\n\n    if (!result) {\n      // Otherwise, calculate bounding box from positions\n      const {attributes} = getGeometry(mesh as Mesh, this.props._useMeshColors);\n      attributes.POSITION = attributes.POSITION || attributes.positions;\n      result = getMeshBoundingBox(attributes);\n    }\n\n    this.state.positionBounds = result;\n    return result;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    // attributeManager is always defined in a primitive layer\n    attributeManager!.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      this.state.positionBounds = null;\n      this.state.model?.delete();\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh as Mesh);\n\n        const attributes = (props.mesh as any).attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      // attributeManager is always defined in a primitive layer\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n\n    this.state.emptyTexture.delete();\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n      .draw();\n  }\n\n  protected getModel(mesh: Mesh): Model {\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n\n    const {texture} = this.props;\n    const {emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  private setTexture(texture: Texture2D): void {\n    const {emptyTexture, model} = this.state;\n\n    // props.mesh may not be ready at this time.\n    // The sampler will be set when `getModel` is called\n    if (model) {\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n"],"file":"simple-mesh-layer.js"}