{"version":3,"sources":["../../../src/wms-layer/wms-layer.ts"],"names":["defaultProps","id","data","serviceType","srs","layers","type","compare","value","onMetadataLoad","onMetadataLoadError","console","error","onImageLoadStart","onImageLoad","onImageLoadError","requestId","WMSLayer","Boolean","state","loadCounter","_nextRequestId","lastRequestId","changeFlags","props","oldProps","viewport","context","dataChanged","imageSource","_createImageSource","_loadMetadata","debounce","loadImage","viewportChanged","bounds","image","lastRequestParameters","BitmapLayer","getSubLayerProps","_imageCoordinateSystem","COORDINATE_SYSTEM","LNGLAT","CARTESIAN","x","y","getFeatureInfoText","query_layers","info_format","featureInfo","ImageSource","url","loadOptions","Error","getMetadata","metadata","getCurrentLayer","reason","length","getBounds","width","height","getRequestId","resolution","requestParams","bbox","minX","minY","maxX","maxY","getImage","setState","raiseError","fn","ms","clearTimeout","_timeoutId","setTimeout","CompositeLayer"],"mappings":"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","sourcesContent":["// deck.gl, MIT license\n// Attributions:\n// Copyright 2022 Foursquare Labs, Inc.\n\n/* eslint-disable camelcase */ // Some WMS parameters are not in camel case\n/* global setTimeout, clearTimeout */\n\nimport {\n  Layer,\n  CompositeLayer,\n  CompositeLayerProps,\n  UpdateParameters,\n  DefaultProps,\n  Viewport,\n  COORDINATE_SYSTEM,\n  _deepEqual as deepEqual\n} from '@deck.gl/core';\nimport {BitmapLayer} from '@deck.gl/layers';\nimport type {ImageSourceMetadata, ImageType, ImageServiceType} from '@loaders.gl/wms';\nimport {ImageSource, createImageSource} from '@loaders.gl/wms';\nimport {WGS84ToPseudoMercator} from './utils';\n\n/** All props supported by the TileLayer */\nexport type WMSLayerProps = CompositeLayerProps & _WMSLayerProps;\n\n/** Props added by the TileLayer */\ntype _WMSLayerProps = {\n  data: string | ImageSource;\n  serviceType?: ImageServiceType | 'auto';\n  layers?: string[];\n  srs?: 'EPSG:4326' | 'EPSG:3857' | 'auto';\n  onMetadataLoad?: (metadata: ImageSourceMetadata) => void;\n  onMetadataLoadError?: (error: Error) => void;\n  onImageLoadStart?: (requestId: unknown) => void;\n  onImageLoad?: (requestId: unknown) => void;\n  onImageLoadError?: (requestId: unknown, error: Error) => void;\n};\n\nconst defaultProps: DefaultProps<WMSLayerProps> = {\n  id: 'imagery-layer',\n  data: '',\n  serviceType: 'auto',\n  srs: 'auto',\n  layers: {type: 'array', compare: true, value: []},\n  onMetadataLoad: {type: 'function', value: () => {}},\n  // eslint-disable-next-line\n  onMetadataLoadError: {type: 'function', value: console.error},\n  onImageLoadStart: {type: 'function', value: () => {}},\n  onImageLoad: {type: 'function', value: () => {}},\n  onImageLoadError: {\n    type: 'function',\n    compare: false,\n    // eslint-disable-next-line\n    value: (requestId: unknown, error: Error) => console.error(error, requestId)\n  }\n};\n\n/**\n * The layer is used in Hex Tile layer in order to properly discard invisible elements during animation\n */\nexport class WMSLayer<ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_WMSLayerProps>\n> {\n  static layerName = 'WMSLayer';\n  static defaultProps: DefaultProps = defaultProps;\n\n  state!: {\n    imageSource: ImageSource;\n    image: ImageType;\n    bounds: [number, number, number, number];\n    lastRequestParameters: {\n      bbox: [number, number, number, number];\n      layers: string[];\n      srs: 'EPSG:4326' | 'EPSG:3857';\n      width: number;\n      height: number;\n    };\n    lastRequestId: number;\n    _nextRequestId: number;\n    /** TODO: Change any => setTimeout return type. Different between Node and browser... */\n    _timeoutId: any;\n    loadCounter: number;\n  };\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    // Track the explicit loading done by this layer\n    return Boolean(this.state) && this.state.loadCounter === 0 && super.isLoaded;\n  }\n\n  /** Lets deck.gl know that we want viewport change events */\n  override shouldUpdateState(): boolean {\n    return true;\n  }\n\n  override initializeState(): void {\n    // intentionally empty, initialization is done in updateState\n    this.state._nextRequestId = 0;\n    this.state.lastRequestId = -1;\n    this.state.loadCounter = 0;\n  }\n\n  override updateState({changeFlags, props, oldProps}: UpdateParameters<this>): void {\n    const {viewport} = this.context;\n\n    // Check if data source has changed\n    if (changeFlags.dataChanged || props.serviceType !== oldProps.serviceType) {\n      this.state.imageSource = this._createImageSource(props);\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._loadMetadata();\n      this.debounce(() => this.loadImage(viewport, 'image source changed'), 0);\n    } else if (!deepEqual(props.layers, oldProps.layers, 1)) {\n      this.debounce(() => this.loadImage(viewport, 'layers changed'), 0);\n    } else if (changeFlags.viewportChanged) {\n      this.debounce(() => this.loadImage(viewport, 'viewport changed'));\n    }\n  }\n\n  override finalizeState(): void {\n    // TODO - we could cancel outstanding requests\n  }\n\n  override renderLayers(): Layer {\n    // TODO - which bitmap layer is rendered should depend on the current viewport\n    // Currently Studio only uses one viewport\n    const {bounds, image, lastRequestParameters} = this.state;\n\n    return (\n      image &&\n      new BitmapLayer({\n        ...this.getSubLayerProps({id: 'bitmap'}),\n        _imageCoordinateSystem:\n          lastRequestParameters.srs === 'EPSG:4326'\n            ? COORDINATE_SYSTEM.LNGLAT\n            : COORDINATE_SYSTEM.CARTESIAN,\n        bounds,\n        image\n      })\n    );\n  }\n\n  async getFeatureInfoText(x: number, y: number): Promise<string | null> {\n    const {lastRequestParameters} = this.state;\n    if (lastRequestParameters) {\n      // @ts-expect-error Undocumented method\n      const featureInfo = await this.state.imageSource.getFeatureInfoText?.({\n        ...lastRequestParameters,\n        query_layers: lastRequestParameters.layers,\n        x,\n        y,\n        info_format: 'application/vnd.ogc.gml'\n      });\n      return featureInfo;\n    }\n    return '';\n  }\n\n  _createImageSource(props: WMSLayerProps): ImageSource {\n    if (props.data instanceof ImageSource) {\n      return props.data;\n    }\n\n    if (typeof props.data === 'string') {\n      return createImageSource({\n        url: props.data,\n        loadOptions: props.loadOptions,\n        type: props.serviceType\n      });\n    }\n\n    throw new Error('invalid image source in props.data');\n  }\n\n  /** Run a getMetadata on the image service */\n  async _loadMetadata(): Promise<void> {\n    const {imageSource} = this.state;\n    try {\n      this.state.loadCounter++;\n      const metadata = await imageSource.getMetadata();\n\n      // If a request takes a long time, it may no longer be expected\n      if (this.state.imageSource === imageSource) {\n        this.getCurrentLayer()?.props.onMetadataLoad(metadata);\n      }\n    } catch (error) {\n      this.getCurrentLayer()?.props.onMetadataLoadError(error as Error);\n    } finally {\n      this.state.loadCounter--;\n    }\n  }\n\n  /** Load an image */\n  async loadImage(viewport: Viewport, reason: string): Promise<void> {\n    const {layers, serviceType} = this.props;\n\n    // TODO - move to ImageSource?\n    if (serviceType === 'wms' && layers.length === 0) {\n      return;\n    }\n\n    const bounds = viewport.getBounds();\n    const {width, height} = viewport;\n    const requestId = this.getRequestId();\n    let {srs} = this.props;\n    if (srs === 'auto') {\n      // BitmapLayer only supports LNGLAT or CARTESIAN (Web-Mercator)\n      srs = viewport.resolution ? 'EPSG:4326' : 'EPSG:3857';\n    }\n    const requestParams = {\n      width,\n      height,\n      bbox: bounds,\n      layers,\n      srs\n    };\n    if (srs === 'EPSG:3857') {\n      const [minX, minY] = WGS84ToPseudoMercator([bounds[0], bounds[1]]);\n      const [maxX, maxY] = WGS84ToPseudoMercator([bounds[2], bounds[3]]);\n      requestParams.bbox = [minX, minY, maxX, maxY];\n    }\n\n    try {\n      this.state.loadCounter++;\n      this.props.onImageLoadStart(requestId);\n\n      const image = await this.state.imageSource.getImage(requestParams);\n\n      // If a request takes a long time, later requests may have already loaded.\n      if (this.state.lastRequestId < requestId) {\n        this.getCurrentLayer()?.props.onImageLoad(requestId);\n        // Not type safe...\n        this.setState({\n          image,\n          bounds,\n          lastRequestParameters: requestParams,\n          lastRequestId: requestId\n        });\n      }\n    } catch (error) {\n      this.raiseError(error as Error, 'Load image');\n      this.getCurrentLayer()?.props.onImageLoadError(requestId, error as Error);\n    } finally {\n      this.state.loadCounter--;\n    }\n  }\n\n  // HELPERS\n\n  /** Global counter for issuing unique request ids */\n  private getRequestId(): number {\n    return this.state._nextRequestId++;\n  }\n\n  /** Runs an action in the future, cancels it if the new action is issued before it executes */\n  private debounce(fn: Function, ms = 500): void {\n    clearTimeout(this.state._timeoutId);\n    this.state._timeoutId = setTimeout(() => fn(), ms);\n  }\n}\n"],"file":"wms-layer.js"}