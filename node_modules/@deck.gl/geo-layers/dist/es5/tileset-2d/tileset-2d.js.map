{"version":3,"sources":["../../../src/tileset-2d/tileset-2d.ts"],"names":["TILE_STATE_VISITED","TILE_STATE_VISIBLE","STRATEGY_NEVER","STRATEGY_REPLACE","STRATEGY_DEFAULT","DEFAULT_CACHE_SCALE","STRATEGIES","updateTileStateDefault","updateTileStateReplace","DEFAULT_TILESET2D_PROPS","extent","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","zRange","maxRequests","zoomOffset","onTileLoad","onTileUnload","onTileError","Tileset2D","opts","getCullBounds","tile","_cacheByteSize","byteLength","_resizeCache","_requestScheduler","RequestScheduler","throttleRequests","Boolean","_cache","Map","_tiles","_dirty","_viewport","_selectedTiles","_frameNumber","_modelMatrix","Matrix4","_modelMatrixInverse","setOptions","every","isLoaded","some","needsReload","Object","assign","Number","isFinite","_maxZoom","Math","floor","_minZoom","ceil","values","isLoading","abort","clear","keys","id","get","includes","delete","setNeedsReload","viewport","modelMatrix","modelMatrixAsMatrix4","isModelMatrixNew","equals","_zRange","clone","invert","tileIndices","getTileIndices","modelMatrixInverse","map","index","_getTile","_rebuildTree","changed","updateTileStates","_pruneRequests","cullRect","isVisible","boundsArr","_getCullBounds","z","bbox","minX","minY","maxX","maxY","overlaps","west","east","south","north","y0","min","top","bottom","y1","max","left","right","x","y","visibilities","Array","size","i","isSelected","from","abortCandidates","ongoingRequestCount","push","length","shift","parent","children","_getNearestAncestor","Infinity","selectedTiles","overflown","sort","t1","t2","zoom","create","getTileId","Tile2DHeader","getTileMetadata","getTileZoom","set","loadData","getData","getTileData","requestScheduler","onLoad","onError","getParentIndex","allTiles","state","getPlaceholderInAncestors","getPlaceholderInChildren","sortedTiles","child","startTile","content"],"mappings":"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","sourcesContent":["import {Viewport} from '@deck.gl/core';\n\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {Matrix4, equals} from '@math.gl/core';\n\nimport {Tile2DHeader} from './tile-2d-header';\n\nimport {getTileIndices, tileToBoundingBox, getCullBounds} from './utils';\nimport {Bounds, TileIndex, ZRange} from './types';\nimport {TileLoadProps} from './types';\nimport {memoize} from './memoize';\n\n// bit masks\nconst TILE_STATE_VISITED = 1;\nconst TILE_STATE_VISIBLE = 2;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nexport type RefinementStrategyFunction = (tiles: Tile2DHeader[]) => void;\nexport type RefinementStrategy =\n  | 'never'\n  | 'no-overlap'\n  | 'best-available'\n  | RefinementStrategyFunction;\n\nconst DEFAULT_CACHE_SCALE = 5;\n\nconst STRATEGIES = {\n  [STRATEGY_DEFAULT]: updateTileStateDefault,\n  [STRATEGY_REPLACE]: updateTileStateReplace,\n  [STRATEGY_NEVER]: () => {}\n};\n\nexport type Tileset2DProps<DataT = any> = {\n  /** `getTileData` is called to retrieve the data of each tile. */\n  getTileData: (props: TileLoadProps) => Promise<DataT> | DataT;\n\n  /** The bounding box of the layer's data. */\n  extent?: number[] | null;\n  /** The pixel dimension of the tiles, usually a power of 2. */\n  tileSize?: number;\n  /** The max zoom level of the layer's data. @default null */\n  maxZoom?: number | null;\n  /** The min zoom level of the layer's data. @default 0 */\n  minZoom?: number | null;\n  /** The maximum number of tiles that can be cached. */\n  maxCacheSize?: number | null;\n  /** The maximum memory used for caching tiles. @default null */\n  maxCacheByteSize?: number | null;\n  /** How the tile layer refines the visibility of tiles. @default 'best-available' */\n  refinementStrategy?: RefinementStrategy;\n  /** Range of minimum and maximum heights in the tile. */\n  zRange?: ZRange | null;\n  /** The maximum number of concurrent getTileData calls. @default 6 */\n  maxRequests?: number;\n  /** Changes the zoom level at which the tiles are fetched. Needs to be an integer. @default 0 */\n  zoomOffset?: number;\n\n  /** Called when a tile successfully loads. */\n  onTileLoad?: (tile: Tile2DHeader<DataT>) => void;\n  /** Called when a tile is cleared from cache. */\n  onTileUnload?: (tile: Tile2DHeader<DataT>) => void;\n  /** Called when a tile failed to load. */\n  onTileError?: (err: any, tile: Tile2DHeader<DataT>) => void;\n\n  // onTileLoad: (tile: Tile2DHeader) => void;\n  // onTileUnload: (tile: Tile2DHeader) => void;\n  // onTileError: (error: any, tile: Tile2DHeader) => void;\n  /** Called when all tiles in the current viewport are loaded. */\n  // sonViewportLoad?: ((tiles: Tile2DHeader<DataT>[]) => void) | null;\n};\n\nexport const DEFAULT_TILESET2D_PROPS: Omit<Required<Tileset2DProps>, 'getTileData'> = {\n  extent: null,\n  tileSize: 512,\n\n  maxZoom: null,\n  minZoom: null,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: 'best-available',\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0,\n\n  // onTileLoad: (tile: Tile2DHeader) => void,  // onTileUnload: (tile: Tile2DHeader) => void,  // onTileError: (error: any, tile: Tile2DHeader) => void,  /** Called when all tiles in the current viewport are loaded. */\n  // onViewportLoad: ((tiles: Tile2DHeader<DataT>[]) => void) | null,\n  onTileLoad: () => {},\n  onTileUnload: () => {},\n  onTileError: () => {}\n};\n\n/**\n * Manages loading and purging of tile data. This class caches recently visited tiles\n * and only creates new tiles if they are present.\n */\nexport class Tileset2D {\n  private opts: Required<Tileset2DProps>;\n  private _requestScheduler: RequestScheduler;\n  private _cache: Map<string, Tile2DHeader>;\n  private _dirty: boolean;\n  private _tiles: Tile2DHeader[];\n\n  private _cacheByteSize: number;\n  private _viewport: Viewport | null;\n  private _zRange?: ZRange;\n  private _selectedTiles: Tile2DHeader[] | null;\n  private _frameNumber: number;\n  private _modelMatrix: Matrix4;\n  private _modelMatrixInverse: Matrix4;\n\n  private _maxZoom?: number;\n  private _minZoom?: number;\n\n  private onTileLoad: (tile: Tile2DHeader) => void;\n\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts: Tileset2DProps) {\n    this.opts = {...DEFAULT_TILESET2D_PROPS, ...opts};\n\n    this.onTileLoad = tile => {\n      this.opts.onTileLoad?.(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: Boolean(opts.maxRequests && opts.maxRequests > 0)\n    });\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this._modelMatrix = new Matrix4();\n    this._modelMatrixInverse = new Matrix4();\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles(): Tile2DHeader[] | null {\n    return this._selectedTiles;\n  }\n\n  get isLoaded(): boolean {\n    return this._selectedTiles !== null && this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  get needsReload(): boolean {\n    return this._selectedTiles !== null && this._selectedTiles.some(tile => tile.needsReload);\n  }\n\n  setOptions(opts: Tileset2DProps): void {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom as number);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom as number);\n    }\n  }\n\n  // Clean up any outstanding tile requests.\n  finalize(): void {\n    for (const tile of this._cache.values()) {\n      if (tile.isLoading) {\n        tile.abort();\n      }\n    }\n    this._cache.clear();\n    this._tiles = [];\n    this._selectedTiles = null;\n  }\n\n  reloadAll(): void {\n    for (const id of this._cache.keys()) {\n      const tile = this._cache.get(id) as Tile2DHeader;\n      if (!this._selectedTiles || !this._selectedTiles.includes(tile)) {\n        this._cache.delete(id);\n      } else {\n        tile.setNeedsReload();\n      }\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and model matrix and triggers callback onUpdate.\n   */\n  update(\n    viewport: Viewport,\n    {zRange, modelMatrix}: {zRange?: ZRange; modelMatrix?: Matrix4} = {}\n  ): number {\n    const modelMatrixAsMatrix4 = new Matrix4(modelMatrix);\n    const isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);\n    if (\n      !this._viewport ||\n      !viewport.equals(this._viewport) ||\n      !equals(this._zRange, zRange) ||\n      isModelMatrixNew\n    ) {\n      if (isModelMatrixNew) {\n        this._modelMatrixInverse = modelMatrixAsMatrix4.clone().invert();\n        this._modelMatrix = modelMatrixAsMatrix4;\n      }\n      this._viewport = viewport;\n      this._zRange = zRange;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom,\n        zRange,\n        modelMatrix: this._modelMatrix,\n        modelMatrixInverse: this._modelMatrixInverse\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n      // Check for needed reloads explicitly even if the view/matrix has not changed.\n    } else if (this.needsReload) {\n      this._selectedTiles = this._selectedTiles!.map(tile => this._getTile(tile.index, true));\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n    this._pruneRequests();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n\n    return this._frameNumber;\n  }\n\n  // eslint-disable-next-line complexity\n  isTileVisible(\n    tile: Tile2DHeader,\n    cullRect?: {x: number; y: number; width: number; height: number}\n  ): boolean {\n    if (!tile.isVisible) {\n      return false;\n    }\n\n    if (cullRect && this._viewport) {\n      const boundsArr = this._getCullBounds({\n        viewport: this._viewport,\n        z: this._zRange,\n        cullRect\n      });\n      const {bbox} = tile;\n      for (const [minX, minY, maxX, maxY] of boundsArr) {\n        let overlaps;\n        if ('west' in bbox) {\n          overlaps = bbox.west < maxX && bbox.east > minX && bbox.south < maxY && bbox.north > minY;\n        } else {\n          // top/bottom could be swapped depending on the indexing system\n          const y0 = Math.min(bbox.top, bbox.bottom);\n          const y1 = Math.max(bbox.top, bbox.bottom);\n          overlaps = bbox.left < maxX && bbox.right > minX && y0 < maxY && y1 > minY;\n        }\n        if (overlaps) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /* Public interface for subclassing */\n\n  /** Returns array of tile indices in the current viewport */\n  getTileIndices({\n    viewport,\n    maxZoom,\n    minZoom,\n    zRange,\n    modelMatrix,\n    modelMatrixInverse\n  }: {\n    viewport: Viewport;\n    maxZoom?: number;\n    minZoom?: number;\n    zRange: ZRange | undefined;\n    tileSize?: number;\n    modelMatrix?: Matrix4;\n    modelMatrixInverse?: Matrix4;\n    zoomOffset?: number;\n  }): TileIndex[] {\n    const {tileSize, extent, zoomOffset} = this.opts;\n    return getTileIndices({\n      viewport,\n      maxZoom,\n      minZoom,\n      zRange,\n      tileSize,\n      extent: extent as Bounds | undefined,\n      modelMatrix,\n      modelMatrixInverse,\n      zoomOffset\n    });\n  }\n\n  /** Returns unique string key for a tile index */\n  getTileId(index: TileIndex) {\n    return `${index.x}-${index.y}-${index.z}`;\n  }\n\n  /** Returns a zoom level for a tile index */\n  getTileZoom(index: TileIndex) {\n    return index.z;\n  }\n\n  /** Returns additional metadata to add to tile, bbox by default */\n  getTileMetadata(index: TileIndex): Record<string, any> {\n    const {tileSize} = this.opts;\n    // @ts-expect-error\n    return {bbox: tileToBoundingBox(this._viewport, index.x, index.y, index.z, tileSize)};\n  }\n\n  /** Returns index of the parent tile */\n  getParentIndex(index: TileIndex) {\n    const x = Math.floor(index.x / 2);\n    const y = Math.floor(index.y / 2);\n    const z = index.z - 1;\n    return {x, y, z};\n  }\n\n  // Returns true if any tile's visibility changed\n  private updateTileStates() {\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    const visibilities = new Array(this._cache.size);\n    let i = 0;\n    // Reset state\n    for (const tile of this._cache.values()) {\n      // save previous state\n      visibilities[i++] = tile.isVisible;\n      tile.isSelected = false;\n      tile.isVisible = false;\n    }\n    // @ts-expect-error called only when _selectedTiles is already defined\n    for (const tile of this._selectedTiles) {\n      tile.isSelected = true;\n      tile.isVisible = true;\n    }\n\n    // Strategy-specific state logic\n    (typeof refinementStrategy === 'function'\n      ? refinementStrategy\n      : STRATEGIES[refinementStrategy])(Array.from(this._cache.values()));\n\n    i = 0;\n    // Check if any visibility has changed\n    for (const tile of this._cache.values()) {\n      if (visibilities[i++] !== tile.isVisible) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /* Private methods */\n\n  private _getCullBounds = memoize(getCullBounds);\n\n  private _pruneRequests(): void {\n    const {maxRequests = 0} = this.opts;\n\n    const abortCandidates: Tile2DHeader[] = [];\n    let ongoingRequestCount = 0;\n    for (const tile of this._cache.values()) {\n      // Keep track of all the ongoing requests\n      if (tile.isLoading) {\n        ongoingRequestCount++;\n        if (!tile.isSelected && !tile.isVisible) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n\n    while (maxRequests > 0 && ongoingRequestCount > maxRequests && abortCandidates.length > 0) {\n      // There are too many ongoing requests, so abort some that are unselected\n      const tile = abortCandidates.shift()!;\n      tile.abort();\n      ongoingRequestCount--;\n    }\n  }\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  private _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      if (tile.children) {\n        tile.children.length = 0;\n      }\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile);\n      tile.parent = parent;\n      if (parent?.children) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  private _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      // @ts-expect-error called only when selectedTiles is initialized\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [id, tile] of _cache) {\n        if (!tile.isVisible && !tile.isSelected) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(id);\n          this.opts.onTileUnload?.(tile);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      // sort by zoom level so that smaller tiles are displayed on top\n      this._tiles = Array.from(this._cache.values()).sort((t1, t2) => t1.zoom - t2.zoom);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  private _getTile(index: TileIndex, create: true): Tile2DHeader;\n  private _getTile(index: TileIndex, create?: false): Tile2DHeader | undefined;\n  private _getTile(index: TileIndex, create?: boolean): Tile2DHeader | undefined {\n    const id = this.getTileId(index);\n    let tile = this._cache.get(id);\n    let needsReload = false;\n\n    if (!tile && create) {\n      tile = new Tile2DHeader(index);\n      Object.assign(tile, this.getTileMetadata(tile.index));\n      Object.assign(tile, {id, zoom: this.getTileZoom(tile.index)});\n      needsReload = true;\n      this._cache.set(id, tile);\n      this._dirty = true;\n    } else if (tile && tile.needsReload) {\n      needsReload = true;\n    }\n    if (tile && needsReload) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      tile.loadData({\n        getData: this.opts.getTileData,\n        requestScheduler: this._requestScheduler,\n        onLoad: this.onTileLoad,\n        onError: this.opts.onTileError\n      });\n    }\n\n    return tile;\n  }\n\n  _getNearestAncestor(tile: Tile2DHeader): Tile2DHeader | null {\n    const {_minZoom = 0} = this;\n\n    let index = tile.index;\n    while (this.getTileZoom(index) > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n/* -- Refinement strategies --*/\n/* eslint-disable max-depth */\n\n// For all the selected && pending tiles:\n// - pick the closest ancestor as placeholder\n// - if no ancestor is visible, pick the closest children as placeholder\nfunction updateTileStateDefault(allTiles: Tile2DHeader[]) {\n  for (const tile of allTiles) {\n    tile.state = 0;\n  }\n  for (const tile of allTiles) {\n    if (tile.isSelected && !getPlaceholderInAncestors(tile)) {\n      getPlaceholderInChildren(tile);\n    }\n  }\n  for (const tile of allTiles) {\n    tile.isVisible = Boolean(tile.state! & TILE_STATE_VISIBLE);\n  }\n}\n\n// Until a selected tile and all its selected siblings are loaded, use the closest ancestor as placeholder\nfunction updateTileStateReplace(allTiles: Tile2DHeader[]) {\n  for (const tile of allTiles) {\n    tile.state = 0;\n  }\n  for (const tile of allTiles) {\n    if (tile.isSelected) {\n      getPlaceholderInAncestors(tile);\n    }\n  }\n  // Always process parents first\n  const sortedTiles = Array.from(allTiles).sort((t1, t2) => t1.zoom - t2.zoom);\n  for (const tile of sortedTiles) {\n    tile.isVisible = Boolean(tile.state! & TILE_STATE_VISIBLE);\n\n    if (tile.children && (tile.isVisible || tile.state! & TILE_STATE_VISITED)) {\n      // If the tile is rendered, or if the tile has been explicitly hidden, hide all of its children\n      for (const child of tile.children) {\n        child.state = TILE_STATE_VISITED;\n      }\n    } else if (tile.isSelected) {\n      getPlaceholderInChildren(tile);\n    }\n  }\n}\n\n// Walk up the tree until we find one ancestor that is loaded. Returns true if successful.\nfunction getPlaceholderInAncestors(startTile: Tile2DHeader) {\n  let tile: Tile2DHeader | null = startTile;\n  while (tile) {\n    if (tile.isLoaded || tile.content) {\n      tile.state! |= TILE_STATE_VISIBLE;\n      return true;\n    }\n    tile = tile.parent;\n  }\n  return false;\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    if (child.isLoaded || child.content) {\n      child.state |= TILE_STATE_VISIBLE;\n    } else {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n"],"file":"tileset-2d.js"}