import { Layer, CompositeLayer, CompositeLayerProps, UpdateParameters, DefaultProps, Viewport } from '@deck.gl/core/typed';
import type { ImageSourceMetadata, ImageType, ImageServiceType } from '@loaders.gl/wms';
import { ImageSource } from '@loaders.gl/wms';
/** All props supported by the TileLayer */
export declare type ImageryLayerProps = CompositeLayerProps<any> & _ImageryLayerProps;
/** Props added by the TileLayer */
declare type _ImageryLayerProps = {
    serviceType?: ImageServiceType | 'auto';
    layers?: string[];
    srs?: 'EPSG:4326' | 'EPSG:3857' | 'auto';
    onMetadataLoadStart?: () => void;
    onMetadataLoadComplete?: (metadata: ImageSourceMetadata) => void;
    onMetadataLoadError?: (error: Error) => void;
    onImageLoadStart?: (requestId: unknown) => void;
    onImageLoadComplete?: (requestId: unknown) => void;
    onImageLoadError?: (requestId: unknown, error: Error) => void;
};
/**
 * The layer is used in Hex Tile layer in order to properly discard invisible elements during animation
 */
export declare class ImageryLayer<ExtraPropsT extends {} = {}> extends CompositeLayer<ExtraPropsT & Required<_ImageryLayerProps>> {
    static layerName: string;
    static defaultProps: DefaultProps;
    state: {
        imageSource: ImageSource;
        image: ImageType;
        srs: 'EPSG:4326' | 'EPSG:3857';
        bounds: [number, number, number, number];
        width: number;
        height: number;
        lastLoadedId: number;
        _nextRequestId: number;
        _timeoutId: any;
    };
    /** Lets deck.gl know that we want viewport change events */
    shouldUpdateState(): boolean;
    initializeState(): void;
    updateState({ changeFlags, props, oldProps }: UpdateParameters<this>): void;
    finalizeState(): void;
    renderLayers(): Layer;
    getFeatureInfoText(x: number, y: number): Promise<string | null>;
    _createImageSource(props: ImageryLayerProps): ImageSource;
    /** Run a getMetadata on the image service */
    _loadMetadata(): Promise<void>;
    /** Load an image */
    loadImage(viewport: Viewport, reason: string): Promise<void>;
    /** Global counter for issuing unique request ids */
    private getRequestId;
    /** Runs an action in the future, cancels it if the new action is issued before it executes */
    private debounce;
}
export {};
//# sourceMappingURL=imagery-layer.d.ts.map