{"version":3,"sources":["../../../src/solid-polygon-layer/polygon.ts"],"names":["OUTER_POLYGON_WINDING","WINDING","CLOCKWISE","HOLE_POLYGON_WINDING","COUNTER_CLOCKWISE","windingOptions","isClosed","validate","polygon","positions","Array","isArray","ArrayBuffer","isView","Error","getPositions","getHoleIndices","holeIndices","isNested","isSimple","length","Number","isFinite","isNestedRingClosed","simplePolygon","p0","p1","isFlatRingClosed","size","startIndex","endIndex","i","copyNestedRing","target","targetStartIndex","windingDirection","targetIndex","len","j","start","end","copyFlatRing","srcStartIndex","srcEndIndex","srcLength","normalize","positionSize","srcPositions","srcHoleIndices","push","pop","entries","polygonIndex","getPlaneArea","xIndex","yIndex","numVerts","area","Math","abs","permutePositions","zIndex","o","x","y","z","getSurfaceIndices","preproject","full3d","map","positionIndex","is3d","n","slice","p","xy","xyArea","xzArea","yzArea"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-params */\nimport earcut from 'earcut';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\nimport type {Position} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;\nconst HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;\n\ntype WindingOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\n/** A scratch object for sending winding options */\nconst windingOptions: WindingOptions = {\n  isClosed: true\n};\n\n// 4 data formats are supported:\n\n/** Simple Polygon: an array of points */\nexport type NestedSimplePolygonGeometry = Position[];\n/** Complex Polygon: an array of array of points (array of rings)\n * with the first ring representing the outer hull and other rings representing holes\n */\nexport type NestedComplexPolygonGeometry = Position[][];\n/** An array of numbers (flattened \"simple polygon\") */\nexport type FlatSimplePolygonGeometry = NumericArray;\n/** Flattened \"complex polygon\" */\nexport type FlatComplexPolygonGeometry = {positions: NumericArray; holeIndices: NumericArray};\n\nexport type PolygonGeometry =\n  | NestedSimplePolygonGeometry\n  | NestedComplexPolygonGeometry\n  | FlatSimplePolygonGeometry\n  | FlatComplexPolygonGeometry;\n\nexport type NormalizedPolygonGeometry = FlatSimplePolygonGeometry | FlatComplexPolygonGeometry;\n\n/**\n * Ensure a polygon is valid format\n */\nfunction validate(polygon: PolygonGeometry): void {\n  polygon = (polygon && (polygon as FlatComplexPolygonGeometry).positions) || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n\n/** Get the positions from a normalized polygon */\nexport function getPositions(polygon: NormalizedPolygonGeometry): NumericArray {\n  return 'positions' in polygon ? polygon.positions : polygon;\n}\n\n/** Get the hole indices from a normalized polygon */\nexport function getHoleIndices(polygon: NormalizedPolygonGeometry): NumericArray | null {\n  return 'holeIndices' in polygon ? polygon.holeIndices : null;\n}\n\n/**\n * Check if a polygon is nested or flat\n * Returns true if the polygon is a flat polygon (i.e. not an array of polygons)\n */\nfunction isNested(\n  polygon: PolygonGeometry\n): polygon is NestedSimplePolygonGeometry | NestedComplexPolygonGeometry {\n  return Array.isArray(polygon[0]);\n}\n\n/**\n * Check if a polygon is simple or complex\n * Returns true if the polygon is a simple polygon (i.e. not an array of polygons)\n */\nfunction isSimple(\n  polygon: NestedSimplePolygonGeometry | NestedComplexPolygonGeometry\n): polygon is NestedSimplePolygonGeometry {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n\n/**\n * Check if a simple polygon is a closed ring\n * Returns true if the simple polygon is a closed ring\n */\nfunction isNestedRingClosed(simplePolygon: NestedSimplePolygonGeometry): boolean {\n  // check if first and last vertex are the same\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n\n/**\n * Check if a simple flat array is a closed ring\n * Returns true if the simple flat array is a closed ring\n */\nfunction isFlatRingClosed(\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  startIndex: number,\n  /** end index of the path in the positions array */\n  endIndex: number\n): boolean {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyNestedRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  simplePolygon: NestedSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** modify polygon to be of the specified winding direction */\n  windingDirection: number\n): number {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Copy a simple flat array into another flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyFlatRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  srcStartIndex: number = 0,\n  /** end index of the path in the positions array */\n  srcEndIndex: number,\n  windingDirection: number\n): number {\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  let targetIndex = targetStartIndex;\n\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Normalize any polygon representation into the \"complex flat\" format\n */\n/* eslint-disable max-statements */\nexport function normalize(\n  polygon: PolygonGeometry,\n  positionSize: number\n): NormalizedPolygonGeometry {\n  validate(polygon);\n\n  const positions: number[] = [];\n  const holeIndices: number[] = [];\n\n  if ('positions' in polygon) {\n    // complex flat\n    const {positions: srcPositions, holeIndices: srcHoleIndices} = polygon;\n\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(\n          positions,\n          targetIndex,\n          srcPositions,\n          positionSize,\n          srcHoleIndices[i - 1],\n          srcHoleIndices[i],\n          i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n        );\n        holeIndices.push(targetIndex);\n      }\n      // The last one is not a starting index of a hole, remove\n      holeIndices.pop();\n\n      return {positions, holeIndices};\n    }\n    polygon = srcPositions;\n  }\n  if (!isNested(polygon)) {\n    // simple flat\n    copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let targetIndex = 0;\n\n    for (const [polygonIndex, simplePolygon] of polygon.entries()) {\n      targetIndex = copyNestedRing(\n        positions,\n        targetIndex,\n        simplePolygon,\n        positionSize,\n        polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n      );\n      holeIndices.push(targetIndex);\n    }\n    // The last one is not a starting index of a hole, remove\n    holeIndices.pop();\n    // last index points to the end of the array, remove it\n    return {positions, holeIndices};\n  }\n  // simple polygon\n  copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);\n  return positions;\n}\n/* eslint-enable max-statements */\n\n/*\n * Calculate the area of a single plane of the polygon\n */\nfunction getPlaneArea(positions: NumericArray, xIndex: number, yIndex: number): number {\n  const numVerts = positions.length / 3;\n  let area = 0;\n  for (let i = 0; i < numVerts; i++) {\n    const j = (i + 1) % numVerts;\n    area += positions[i * 3 + xIndex] * positions[j * 3 + yIndex];\n    area -= positions[j * 3 + xIndex] * positions[i * 3 + yIndex];\n  }\n  return Math.abs(area / 2);\n}\n\nfunction permutePositions(positions: NumericArray, xIndex: number, yIndex: number, zIndex: number) {\n  const numVerts = positions.length / 3;\n  for (let i = 0; i < numVerts; i++) {\n    const o = i * 3;\n\n    const x = positions[o + 0];\n    const y = positions[o + 1];\n    const z = positions[o + 2];\n\n    positions[o + xIndex] = x;\n    positions[o + yIndex] = y;\n    positions[o + zIndex] = z;\n  }\n}\n\n/*\n * Get vertex indices for drawing polygon mesh (triangulation)\n */\n// eslint-disable-next-line complexity, max-statements\nexport function getSurfaceIndices(\n  polygon: NormalizedPolygonGeometry,\n  positionSize: number,\n  preproject?: (xy: number[]) => number[],\n  full3d?: boolean\n): number[] {\n  let holeIndices = getHoleIndices(polygon);\n  if (holeIndices) {\n    holeIndices = holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n\n  let positions = getPositions(polygon);\n\n  const is3d = full3d && positionSize === 3;\n\n  if (preproject) {\n    // When tesselating lnglat coordinates, project them to the common space for accuracy\n    const n = positions.length;\n\n    // Clone the array\n    positions = positions.slice();\n\n    const p: number[] = [];\n    for (let i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n\n      if (is3d) {\n        p[2] = positions[i + 2];\n      }\n\n      const xy = preproject(p);\n\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n\n      if (is3d) {\n        positions[i + 2] = xy[2];\n      }\n    }\n  }\n\n  if (is3d) {\n    // calculate plane with largest area\n    const xyArea = getPlaneArea(positions, 0, 1);\n    const xzArea = getPlaneArea(positions, 0, 2);\n    const yzArea = getPlaneArea(positions, 1, 2);\n\n    if (!xyArea && !xzArea && !yzArea) {\n      return []; // no planes have area, nothing we can do\n    }\n\n    // permute positions to make the largest plane xy for earcut\n    if (xyArea > xzArea && xyArea > yzArea) {\n      // xy plane largest, nothing to do\n    } else if (xzArea > yzArea) {\n      // xz plane largest, permute to make xyz -> xzy\n      if (!preproject) {\n        positions = positions.slice();\n      }\n      permutePositions(positions, 0, 2, 1);\n    } else {\n      // yz plane largest, permute to make xyz -> yzx\n      if (!preproject) {\n        positions = positions.slice();\n      }\n      permutePositions(positions, 1, 2, 0);\n    }\n  }\n\n  // Let earcut triangulate the polygon\n  return earcut(positions, holeIndices, positionSize);\n}\n"],"file":"polygon.js"}