{"version":3,"sources":["../../../src/text-layer/utils.ts"],"names":["log","MISSING_CHAR_WIDTH","SINGLE_LINE","nextPowOfTwo","number","Math","pow","ceil","log2","buildMapping","characterSet","getFontWidth","fontHeight","buffer","maxCanvasWidth","mapping","xOffset","yOffset","row","x","rowHeight","char","width","y","height","layoutWidth","layoutHeight","canvasHeight","getTextWidth","text","startIndex","endIndex","i","character","breakAll","maxWidth","iconMapping","target","rowStartCharIndex","rowOffsetLeft","textWidth","push","breakWord","groupStartCharIndex","groupEndCharIndex","groupWidth","length","autoWrapping","wordBreak","undefined","result","transformRow","line","leftOffsets","rowSize","frame","warn","codePointAt","transformParagraph","paragraph","lineHeight","characters","Array","from","numCharacters","rowWidth","autoWrappingEnabled","isFinite","size","rowOffsetTop","lineStartIndex","lineEndIndex","rows","rowIndex","rowStart","rowEnd","j","layoutOffsetY","max","getTextFromBuffer","value","stride","offset","startIndices","bytesPerElement","BYTES_PER_ELEMENT","elementStride","elementOffset","characterCount","autoCharacterSet","Set","texts","codes","ArrayType","constructor","index","codesAtIndex","subarray","String","fromCodePoint","apply","forEach","add","charCode"],"mappings":"AAEA,SAAQA,GAAR,QAAkB,eAAlB;AAGA,MAAMC,kBAAkB,GAAG,EAA3B;AACA,MAAMC,WAAW,GAAG,EAApB;AAcA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8C;AACnD,SAAOC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,IAAL,CAAUF,IAAI,CAACG,IAAL,CAAUJ,MAAV,CAAV,CAAZ,CAAP;AACD;AAKD,OAAO,SAASK,YAAT,CAAsB;AAC3BC,EAAAA,YAD2B;AAE3BC,EAAAA,YAF2B;AAG3BC,EAAAA,UAH2B;AAI3BC,EAAAA,MAJ2B;AAK3BC,EAAAA,cAL2B;AAM3BC,EAAAA,OAAO,GAAG,EANiB;AAO3BC,EAAAA,OAAO,GAAG,CAPiB;AAQ3BC,EAAAA,OAAO,GAAG;AARiB,CAAtB,EAmCL;AACA,MAAIC,GAAG,GAAG,CAAV;AAEA,MAAIC,CAAC,GAAGH,OAAR;AACA,QAAMI,SAAS,GAAGR,UAAU,GAAGC,MAAM,GAAG,CAAxC;;AAEA,OAAK,MAAMQ,IAAX,IAAmBX,YAAnB,EAAiC;AAC/B,QAAI,CAACK,OAAO,CAACM,IAAD,CAAZ,EAAoB;AAIlB,YAAMC,KAAK,GAAGX,YAAY,CAACU,IAAD,CAA1B;;AAEA,UAAIF,CAAC,GAAGG,KAAJ,GAAYT,MAAM,GAAG,CAArB,GAAyBC,cAA7B,EAA6C;AAC3CK,QAAAA,CAAC,GAAG,CAAJ;AACAD,QAAAA,GAAG;AACJ;;AACDH,MAAAA,OAAO,CAACM,IAAD,CAAP,GAAgB;AACdF,QAAAA,CAAC,EAAEA,CAAC,GAAGN,MADO;AAEdU,QAAAA,CAAC,EAAEN,OAAO,GAAGC,GAAG,GAAGE,SAAhB,GAA4BP,MAFjB;AAGdS,QAAAA,KAHc;AAIdE,QAAAA,MAAM,EAAEJ,SAJM;AAKdK,QAAAA,WAAW,EAAEH,KALC;AAMdI,QAAAA,YAAY,EAAEd;AANA,OAAhB;AAQAO,MAAAA,CAAC,IAAIG,KAAK,GAAGT,MAAM,GAAG,CAAtB;AACD;AACF;;AAED,SAAO;AACLE,IAAAA,OADK;AAELC,IAAAA,OAAO,EAAEG,CAFJ;AAGLF,IAAAA,OAAO,EAAEA,OAAO,GAAGC,GAAG,GAAGE,SAHpB;AAILO,IAAAA,YAAY,EAAExB,YAAY,CAACc,OAAO,GAAG,CAACC,GAAG,GAAG,CAAP,IAAYE,SAAvB;AAJrB,GAAP;AAMD;;AAED,SAASQ,YAAT,CACEC,IADF,EAEEC,UAFF,EAGEC,QAHF,EAIEhB,OAJF,EAKU;AACR,MAAIO,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIU,CAAC,GAAGF,UAAb,EAAyBE,CAAC,GAAGD,QAA7B,EAAuCC,CAAC,EAAxC,EAA4C;AAAA;;AAC1C,UAAMC,SAAS,GAAGJ,IAAI,CAACG,CAAD,CAAtB;AACAV,IAAAA,KAAK,IAAI,uBAAAP,OAAO,CAACkB,SAAD,CAAP,0EAAoBR,WAApB,KAAmC,CAA5C;AACD;;AAED,SAAOH,KAAP;AACD;;AAED,SAASY,QAAT,CACEL,IADF,EAEEC,UAFF,EAGEC,QAHF,EAIEI,QAJF,EAKEC,WALF,EAMEC,MANF,EAOU;AACR,MAAIC,iBAAiB,GAAGR,UAAxB;AACA,MAAIS,aAAa,GAAG,CAApB;;AAEA,OAAK,IAAIP,CAAC,GAAGF,UAAb,EAAyBE,CAAC,GAAGD,QAA7B,EAAuCC,CAAC,EAAxC,EAA4C;AAE1C,UAAMQ,SAAS,GAAGZ,YAAY,CAACC,IAAD,EAAOG,CAAP,EAAUA,CAAC,GAAG,CAAd,EAAiBI,WAAjB,CAA9B;;AACA,QAAIG,aAAa,GAAGC,SAAhB,GAA4BL,QAAhC,EAA0C;AACxC,UAAIG,iBAAiB,GAAGN,CAAxB,EAA2B;AACzBK,QAAAA,MAAM,CAACI,IAAP,CAAYT,CAAZ;AACD;;AACDM,MAAAA,iBAAiB,GAAGN,CAApB;AACAO,MAAAA,aAAa,GAAG,CAAhB;AACD;;AACDA,IAAAA,aAAa,IAAIC,SAAjB;AACD;;AAED,SAAOD,aAAP;AACD;;AAED,SAASG,SAAT,CACEb,IADF,EAEEC,UAFF,EAGEC,QAHF,EAIEI,QAJF,EAKEC,WALF,EAMEC,MANF,EAOU;AACR,MAAIC,iBAAiB,GAAGR,UAAxB;AACA,MAAIa,mBAAmB,GAAGb,UAA1B;AACA,MAAIc,iBAAiB,GAAGd,UAAxB;AACA,MAAIS,aAAa,GAAG,CAApB;;AAEA,OAAK,IAAIP,CAAC,GAAGF,UAAb,EAAyBE,CAAC,GAAGD,QAA7B,EAAuCC,CAAC,EAAxC,EAA4C;AAK1C,QAAIH,IAAI,CAACG,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACnBY,MAAAA,iBAAiB,GAAGZ,CAAC,GAAG,CAAxB;AACD,KAFD,MAEO,IAAIH,IAAI,CAACG,CAAC,GAAG,CAAL,CAAJ,KAAgB,GAAhB,IAAuBA,CAAC,GAAG,CAAJ,KAAUD,QAArC,EAA+C;AACpDa,MAAAA,iBAAiB,GAAGZ,CAAC,GAAG,CAAxB;AACD;;AAED,QAAIY,iBAAiB,GAAGD,mBAAxB,EAA6C;AAE3C,UAAIE,UAAU,GAAGjB,YAAY,CAACC,IAAD,EAAOc,mBAAP,EAA4BC,iBAA5B,EAA+CR,WAA/C,CAA7B;;AACA,UAAIG,aAAa,GAAGM,UAAhB,GAA6BV,QAAjC,EAA2C;AACzC,YAAIG,iBAAiB,GAAGK,mBAAxB,EAA6C;AAC3CN,UAAAA,MAAM,CAACI,IAAP,CAAYE,mBAAZ;AACAL,UAAAA,iBAAiB,GAAGK,mBAApB;AACAJ,UAAAA,aAAa,GAAG,CAAhB;AACD;;AAGD,YAAIM,UAAU,GAAGV,QAAjB,EAA2B;AACzBU,UAAAA,UAAU,GAAGX,QAAQ,CACnBL,IADmB,EAEnBc,mBAFmB,EAGnBC,iBAHmB,EAInBT,QAJmB,EAKnBC,WALmB,EAMnBC,MANmB,CAArB;AASAC,UAAAA,iBAAiB,GAAGD,MAAM,CAACA,MAAM,CAACS,MAAP,GAAgB,CAAjB,CAA1B;AACD;AACF;;AACDH,MAAAA,mBAAmB,GAAGC,iBAAtB;AACAL,MAAAA,aAAa,IAAIM,UAAjB;AACD;AACF;;AAED,SAAON,aAAP;AACD;;AAMD,OAAO,SAASQ,YAAT,CACLlB,IADK,EAELmB,SAFK,EAGLb,QAHK,EAILC,WAJK,EAKLN,UAAkB,GAAG,CALhB,EAMLC,QANK,EAOK;AACV,MAAIA,QAAQ,KAAKkB,SAAjB,EAA4B;AAC1BlB,IAAAA,QAAQ,GAAGF,IAAI,CAACiB,MAAhB;AACD;;AACD,QAAMI,MAAM,GAAG,EAAf;;AACA,MAAIF,SAAS,KAAK,WAAlB,EAA+B;AAC7Bd,IAAAA,QAAQ,CAACL,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,EAA6BI,QAA7B,EAAuCC,WAAvC,EAAoDc,MAApD,CAAR;AACD,GAFD,MAEO;AACLR,IAAAA,SAAS,CAACb,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,EAA6BI,QAA7B,EAAuCC,WAAvC,EAAoDc,MAApD,CAAT;AACD;;AACD,SAAOA,MAAP;AACD;;AAED,SAASC,YAAT,CACEC,IADF,EAEEtB,UAFF,EAGEC,QAHF,EAIEK,WAJF,EAKEiB,WALF,EAMEC,OANF,EAOE;AACA,MAAInC,CAAC,GAAG,CAAR;AACA,MAAIC,SAAS,GAAG,CAAhB;;AAEA,OAAK,IAAIY,CAAC,GAAGF,UAAb,EAAyBE,CAAC,GAAGD,QAA7B,EAAuCC,CAAC,EAAxC,EAA4C;AAC1C,UAAMC,SAAS,GAAGmB,IAAI,CAACpB,CAAD,CAAtB;AACA,UAAMuB,KAAK,GAAGnB,WAAW,CAACH,SAAD,CAAzB;;AACA,QAAIsB,KAAJ,EAAW;AACT,UAAI,CAACnC,SAAL,EAAgB;AAEdA,QAAAA,SAAS,GAAGmC,KAAK,CAAC7B,YAAlB;AACD;;AACD2B,MAAAA,WAAW,CAACrB,CAAD,CAAX,GAAiBb,CAAC,GAAGoC,KAAK,CAAC9B,WAAN,GAAoB,CAAzC;AACAN,MAAAA,CAAC,IAAIoC,KAAK,CAAC9B,WAAX;AACD,KAPD,MAOO;AACLzB,MAAAA,GAAG,CAACwD,IAAJ,8BAA+BvB,SAA/B,eAA6CA,SAAS,CAACwB,WAAV,CAAsB,CAAtB,CAA7C;AACAJ,MAAAA,WAAW,CAACrB,CAAD,CAAX,GAAiBb,CAAjB;AACAA,MAAAA,CAAC,IAAIlB,kBAAL;AACD;AACF;;AAEDqD,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAanC,CAAb;AACAmC,EAAAA,OAAO,CAAC,CAAD,CAAP,GAAalC,SAAb;AACD;;AAKD,OAAO,SAASsC,kBAAT,CACLC,SADK,EAGLC,UAHK,EAKLZ,SALK,EAOLb,QAPK,EASLC,WATK,EAmBL;AAGA,QAAMyB,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWJ,SAAX,CAAnB;AACA,QAAMK,aAAa,GAAGH,UAAU,CAACf,MAAjC;AACA,QAAM3B,CAAC,GAAG,IAAI2C,KAAJ,CAAUE,aAAV,CAAV;AACA,QAAMzC,CAAC,GAAG,IAAIuC,KAAJ,CAAUE,aAAV,CAAV;AACA,QAAMC,QAAQ,GAAG,IAAIH,KAAJ,CAAUE,aAAV,CAAjB;AACA,QAAME,mBAAmB,GACvB,CAAClB,SAAS,KAAK,YAAd,IAA8BA,SAAS,KAAK,WAA7C,KAA6DmB,QAAQ,CAAChC,QAAD,CAArE,IAAmFA,QAAQ,GAAG,CADhG;AAIA,QAAMiC,IAAsB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAA/B;AACA,QAAMd,OAAyB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAlC;AACA,MAAIe,YAAY,GAAG,CAAnB;AACA,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,YAAY,GAAG,CAAnB;;AAEA,OAAK,IAAIvC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIgC,aAArB,EAAoChC,CAAC,EAArC,EAAyC;AACvC,UAAMX,IAAI,GAAGwC,UAAU,CAAC7B,CAAD,CAAvB;;AACA,QAAIX,IAAI,KAAK,IAAT,IAAiBW,CAAC,KAAKgC,aAA3B,EAA0C;AACxCO,MAAAA,YAAY,GAAGvC,CAAf;AACD;;AAED,QAAIuC,YAAY,GAAGD,cAAnB,EAAmC;AACjC,YAAME,IAAI,GAAGN,mBAAmB,GAC5BnB,YAAY,CAACc,UAAD,EAAab,SAAb,EAAwBb,QAAxB,EAAkCC,WAAlC,EAA+CkC,cAA/C,EAA+DC,YAA/D,CADgB,GAE5BrE,WAFJ;;AAIA,WAAK,IAAIuE,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,IAAID,IAAI,CAAC1B,MAAxC,EAAgD2B,QAAQ,EAAxD,EAA4D;AAC1D,cAAMC,QAAQ,GAAGD,QAAQ,KAAK,CAAb,GAAiBH,cAAjB,GAAkCE,IAAI,CAACC,QAAQ,GAAG,CAAZ,CAAvD;AACA,cAAME,MAAM,GAAGF,QAAQ,GAAGD,IAAI,CAAC1B,MAAhB,GAAyB0B,IAAI,CAACC,QAAD,CAA7B,GAA0CF,YAAzD;AAEApB,QAAAA,YAAY,CAACU,UAAD,EAAaa,QAAb,EAAuBC,MAAvB,EAA+BvC,WAA/B,EAA4CjB,CAA5C,EAA+CmC,OAA/C,CAAZ;;AACA,aAAK,IAAIsB,CAAC,GAAGF,QAAb,EAAuBE,CAAC,GAAGD,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AAAA;;AACtC,gBAAMvD,IAAI,GAAGwC,UAAU,CAACe,CAAD,CAAvB;AACA,gBAAMC,aAAa,GAAG,sBAAAzC,WAAW,CAACf,IAAD,CAAX,wEAAmBwD,aAAnB,KAAoC,CAA1D;AACAtD,UAAAA,CAAC,CAACqD,CAAD,CAAD,GAAOP,YAAY,GAAGf,OAAO,CAAC,CAAD,CAAP,GAAa,CAA5B,GAAgCuB,aAAvC;AACAZ,UAAAA,QAAQ,CAACW,CAAD,CAAR,GAActB,OAAO,CAAC,CAAD,CAArB;AACD;;AAEDe,QAAAA,YAAY,GAAGA,YAAY,GAAGf,OAAO,CAAC,CAAD,CAAP,GAAaM,UAA3C;AACAQ,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU/D,IAAI,CAACyE,GAAL,CAASV,IAAI,CAAC,CAAD,CAAb,EAAkBd,OAAO,CAAC,CAAD,CAAzB,CAAV;AACD;;AACDgB,MAAAA,cAAc,GAAGC,YAAjB;AACD;;AAED,QAAIlD,IAAI,KAAK,IAAb,EAAmB;AAEjBF,MAAAA,CAAC,CAACmD,cAAD,CAAD,GAAoB,CAApB;AACA/C,MAAAA,CAAC,CAAC+C,cAAD,CAAD,GAAoB,CAApB;AACAL,MAAAA,QAAQ,CAACK,cAAD,CAAR,GAA2B,CAA3B;AACAA,MAAAA,cAAc;AACf;AACF;;AAGDF,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,YAAV;AACA,SAAO;AAAClD,IAAAA,CAAD;AAAII,IAAAA,CAAJ;AAAO0C,IAAAA,QAAP;AAAiBG,IAAAA;AAAjB,GAAP;AACD;AAED,OAAO,SAASW,iBAAT,CAA2B;AAChCC,EAAAA,KADgC;AAEhClC,EAAAA,MAFgC;AAGhCmC,EAAAA,MAHgC;AAIhCC,EAAAA,MAJgC;AAKhCC,EAAAA,YALgC;AAMhCzE,EAAAA;AANgC,CAA3B,EAiBL;AACA,QAAM0E,eAAe,GAAGJ,KAAK,CAACK,iBAA9B;AACA,QAAMC,aAAa,GAAGL,MAAM,GAAGA,MAAM,GAAGG,eAAZ,GAA8B,CAA1D;AACA,QAAMG,aAAa,GAAGL,MAAM,GAAGA,MAAM,GAAGE,eAAZ,GAA8B,CAA1D;AACA,QAAMI,cAAc,GAClBL,YAAY,CAACrC,MAAD,CAAZ,IAAwBzC,IAAI,CAACE,IAAL,CAAU,CAACyE,KAAK,CAAClC,MAAN,GAAeyC,aAAhB,IAAiCD,aAA3C,CAD1B;AAEA,QAAMG,gBAAgB,GAAG/E,YAAY,IAAI,IAAIgF,GAAJ,EAAzC;AAEA,QAAMC,KAAK,GAAG,IAAI7B,KAAJ,CAAUhB,MAAV,CAAd;AAEA,MAAI8C,KAAK,GAAGZ,KAAZ;;AACA,MAAIM,aAAa,GAAG,CAAhB,IAAqBC,aAAa,GAAG,CAAzC,EAA4C;AAC1C,UAAMM,SAAS,GAAGb,KAAK,CAACc,WAAxB;AAKAF,IAAAA,KAAK,GAAG,IAAIC,SAAJ,CAAcL,cAAd,CAAR;;AACA,SAAK,IAAIxD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwD,cAApB,EAAoCxD,CAAC,EAArC,EAAyC;AACvC4D,MAAAA,KAAK,CAAC5D,CAAD,CAAL,GAAWgD,KAAK,CAAChD,CAAC,GAAGsD,aAAJ,GAAoBC,aAArB,CAAhB;AACD;AACF;;AAED,OAAK,IAAIQ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGjD,MAA5B,EAAoCiD,KAAK,EAAzC,EAA6C;AAC3C,UAAMjE,UAAU,GAAGqD,YAAY,CAACY,KAAD,CAA/B;AACA,UAAMhE,QAAQ,GAAGoD,YAAY,CAACY,KAAK,GAAG,CAAT,CAAZ,IAA2BP,cAA5C;AACA,UAAMQ,YAAY,GAAGJ,KAAK,CAACK,QAAN,CAAenE,UAAf,EAA2BC,QAA3B,CAArB;AAEA4D,IAAAA,KAAK,CAACI,KAAD,CAAL,GAAeG,MAAM,CAACC,aAAP,CAAqBC,KAArB,CAA2B,IAA3B,EAAiCJ,YAAjC,CAAf;;AACA,QAAIP,gBAAJ,EAAsB;AAEpBO,MAAAA,YAAY,CAACK,OAAb,CAAqBZ,gBAAgB,CAACa,GAAtC,EAA2Cb,gBAA3C;AACD;AACF;;AAED,MAAIA,gBAAJ,EAAsB;AACpB,SAAK,MAAMc,QAAX,IAAuBd,gBAAvB,EAAyC;AACvC/E,MAAAA,YAAY,CAAC4F,GAAb,CAAiBJ,MAAM,CAACC,aAAP,CAAqBI,QAArB,CAAjB;AACD;AACF;;AAED,SAAO;AAACZ,IAAAA,KAAD;AAAQH,IAAAA;AAAR,GAAP;AACD","sourcesContent":["/* eslint-disable max-statements, max-params, complexity, max-depth */\n// TODO merge with icon-layer/icon-manager\nimport {log} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst MISSING_CHAR_WIDTH = 32;\nconst SINGLE_LINE = [];\n\nexport type Character = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  layoutWidth: number;\n  layoutHeight: number;\n  layoutOffsetY?: number;\n};\n\nexport type CharacterMapping = Record<string, Character>;\n\nexport function nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n/**\n * Generate character mapping table or update from an existing mapping table\n */\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}: {\n  /** list of characters */\n  characterSet: Set<string>;\n  /** function to get width of each character */\n  getFontWidth: (char: string) => number;\n  /** height of font */\n  fontHeight: number;\n  /** bleeding buffer surround each character */\n  buffer: number;\n  /** max width of font atlas */\n  maxCanvasWidth: number;\n  /** cached mapping table */\n  mapping?: CharacterMapping;\n  /** x position of last character in the existing mapping table */\n  xOffset?: number;\n  /** y position of last character in the existing mapping table */\n  yOffset?: number;\n}): {\n  /** new mapping table */\n  mapping: CharacterMapping;\n  /** x position of last character in the new mapping table */\n  xOffset: number;\n  /** y position of last character in the new mapping table */\n  yOffset: number;\n  /** height of the font atlas canvas, power of 2 */\n  canvasHeight: number;\n} {\n  let row = 0;\n  // continue from x position of last character in the old mapping\n  let x = xOffset;\n  const rowHeight = fontHeight + buffer * 2;\n\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      // measure texts\n      // TODO - use Advanced text metrics when they are adopted:\n      // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n      const width = getFontWidth(char);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * rowHeight + buffer,\n        width,\n        height: rowHeight,\n        layoutWidth: width,\n        layoutHeight: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  mapping: CharacterMapping\n): number {\n  let width = 0;\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = text[i];\n    width += mapping[character]?.layoutWidth || 0;\n  }\n\n  return width;\n}\n\nfunction breakAll(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  target: number[]\n): number {\n  let rowStartCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 2. figure out where to break lines\n    const textWidth = getTextWidth(text, i, i + 1, iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  target: number[]\n): number {\n  let rowStartCharIndex = startIndex;\n  let groupStartCharIndex = startIndex;\n  let groupEndCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 1. break text into word groups\n    //  - if current char is white space\n    //  - else if next char is white space\n    //  - else if reach last char\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      // 2. break text into next row at maxWidth\n      let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        // if a single text group is bigger than maxWidth, then `break-all`\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(\n            text,\n            groupStartCharIndex,\n            groupEndCharIndex,\n            maxWidth,\n            iconMapping,\n            target\n          );\n          // move reference to last row\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\n/**\n * Wrap the given text so that each line does not exceed the given max width.\n * Returns a list of indices where line breaks should be inserted.\n */\nexport function autoWrapping(\n  text: string[],\n  wordBreak: 'break-all' | 'break-word',\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  startIndex: number = 0,\n  endIndex: number\n): number[] {\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n  const result = [];\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n  return result;\n}\n\nfunction transformRow(\n  line: string[],\n  startIndex: number,\n  endIndex: number,\n  iconMapping: CharacterMapping,\n  leftOffsets: number[],\n  rowSize: [number, number]\n) {\n  let x = 0;\n  let rowHeight = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = line[i];\n    const frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        // frame.height should be a constant\n        rowHeight = frame.layoutHeight;\n      }\n      leftOffsets[i] = x + frame.layoutWidth / 2;\n      x += frame.layoutWidth;\n    } else {\n      log.warn(`Missing character: ${character} (${character.codePointAt(0)})`)();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\n/**\n * Transform a text paragraph to an array of characters, each character contains\n */\nexport function transformParagraph(\n  paragraph: string,\n  /** CSS line-height */\n  lineHeight: number,\n  /** CSS word-break option */\n  wordBreak: 'break-word' | 'break-all',\n  /** CSS max-width */\n  maxWidth: number,\n  /** character mapping table for retrieving a character from font atlas */\n  iconMapping: CharacterMapping\n): {\n  /** x position of each character */\n  x: number[];\n  /** y position of each character */\n  y: number[];\n  /** the current row width of each character */\n  rowWidth: number[];\n  /** the width and height of the paragraph */\n  size: [number, number];\n} {\n  // Break into an array of characters\n  // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n  const characters = Array.from(paragraph);\n  const numCharacters = characters.length;\n  const x = new Array(numCharacters) as number[];\n  const y = new Array(numCharacters) as number[];\n  const rowWidth = new Array(numCharacters) as number[];\n  const autoWrappingEnabled =\n    (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n\n  // maxWidth and height of the paragraph\n  const size: [number, number] = [0, 0];\n  const rowSize: [number, number] = [0, 0];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n  let lineEndIndex = 0;\n\n  for (let i = 0; i <= numCharacters; i++) {\n    const char = characters[i];\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      const rows = autoWrappingEnabled\n        ? autoWrapping(characters, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex)\n        : SINGLE_LINE;\n\n      for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n\n        transformRow(characters, rowStart, rowEnd, iconMapping, x, rowSize);\n        for (let j = rowStart; j < rowEnd; j++) {\n          const char = characters[j];\n          const layoutOffsetY = iconMapping[char]?.layoutOffsetY || 0;\n          y[j] = rowOffsetTop + rowSize[1] / 2 + layoutOffsetY;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      // Make sure result.length matches paragraph.length\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  // last row\n  size[1] = rowOffsetTop;\n  return {x, y, rowWidth, size};\n}\n\nexport function getTextFromBuffer({\n  value,\n  length,\n  stride,\n  offset,\n  startIndices,\n  characterSet\n}: {\n  value: Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array;\n  length: number;\n  stride?: number;\n  offset?: number;\n  startIndices: NumericArray;\n  characterSet?: Set<string>;\n}): {\n  texts: string[];\n  characterCount: number;\n} {\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount =\n    startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  const autoCharacterSet = characterSet && new Set<number>();\n\n  const texts = new Array(length);\n\n  let codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    const ArrayType = value.constructor as\n      | Uint8ArrayConstructor\n      | Uint8ClampedArrayConstructor\n      | Uint16ArrayConstructor\n      | Uint32ArrayConstructor;\n    codes = new ArrayType(characterCount);\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    const codesAtIndex = codes.subarray(startIndex, endIndex);\n    // @ts-ignore TS wants the argument to be number[] but typed array works too\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n    if (autoCharacterSet) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    for (const charCode of autoCharacterSet) {\n      characterSet.add(String.fromCodePoint(charCode));\n    }\n  }\n\n  return {texts, characterCount};\n}\n"],"file":"utils.js"}