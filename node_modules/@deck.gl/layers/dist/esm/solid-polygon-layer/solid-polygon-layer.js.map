{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.ts"],"names":["Layer","project32","gouraudLighting","picking","COORDINATE_SYSTEM","Model","Geometry","hasFeatures","FEATURES","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","_windingOrder","_full3d","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","getShaders","vs","defines","RING_WINDING_ORDER_CW","props","modules","wrapLongitude","initializeState","gl","viewport","context","coordinateSystem","isGeospatial","DEFAULT","LNGLAT","preproject","projectPosition","bind","projectFlat","setState","numInstances","polygonTesselator","fp64","use64bitPositions","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","index","target","encodePickingColor","__source","instancePickingColors","getPickingInfo","params","info","data","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","uniforms","topModel","sideModel","state","renderUniforms","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","setVertexCount","vertexCount","updateState","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","models","forEach","model","delete","_getModels","invalidateAll","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","attributes","normalize","geometryBuffer","getGeometry","positionFormat","resolution","full3d","startIndices","vertexStarts","id","shaders","NON_INSTANCED_MODEL","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","get"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Color,\n  Material,\n  Accessor,\n  AccessorFunction,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PolygonGeometry} from './polygon';\n\ntype _SolidPolygonLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** Whether to fill the polygons\n   * @default true\n   */\n  filled?: boolean;\n  /** Whether to extrude the polygons\n   * @default false\n   */\n  extruded?: boolean;\n  /** Whether to generate a line wireframe of the polygon.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * (Experimental) If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   * @default true\n   */\n  _normalize?: boolean;\n  /**\n   * (Experimental) This prop is only effective with `_normalize: false`.\n   * It specifies the winding order of rings in the polygon data, one of 'CW' (clockwise) and 'CCW' (counter-clockwise)\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * (Experimental) This prop is only effective with `XYZ` data.\n   * When true, polygon tesselation will be performed on the plane with the largest area, instead of the xy plane.\n   * @default false\n   */\n  _full3d?: boolean;\n\n  /** Elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /** Polygon geometry accessor. */\n  getPolygon?: AccessorFunction<DataT, PolygonGeometry>;\n  /** Extrusion height accessor.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n  /** Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /** Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** Render filled and/or extruded polygons. */\nexport type SolidPolygonLayerProps<DataT = any> = _SolidPolygonLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<SolidPolygonLayerProps> = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  _full3d: false,\n\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  getElevation: {type: 'accessor', value: 1000},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_SolidPolygonLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SolidPolygonLayer';\n\n  state!: {\n    topModel?: Model;\n    sideModel?: Model;\n    models?: Model[];\n    numInstances: number;\n    polygonTesselator: PolygonTesselator;\n  };\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    const {_full3d} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    let preproject: ((xy: number[]) => number[]) | undefined;\n\n    if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n      if (_full3d) {\n        preproject = viewport.projectPosition.bind(viewport);\n      } else {\n        preproject = viewport.projectFlat.bind(viewport);\n      }\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager()!;\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams: UpdateParameters<this>) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.delete());\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  protected updateGeometry({props, oldProps, changeFlags}: UpdateParameters<this>) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged,\n        full3d: props._full3d\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager()!.invalidateAll();\n      }\n    }\n  }\n\n  protected _getModels(gl: WebGLRenderingContext): Model {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(gl, {\n        ...shaders,\n        id: `${id}-top`,\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        geometry: new Geometry({\n          drawMode: GL.LINES,\n          vertexCount: 4,\n          attributes: {\n            // top right - top left - bootom left - bottom right\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  protected calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  protected calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  protected calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n"],"file":"solid-polygon-layer.js"}