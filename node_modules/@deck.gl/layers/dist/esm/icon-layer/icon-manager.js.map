{"version":3,"sources":["../../../src/icon-layer/icon-manager.ts"],"names":["Texture2D","copyToTexture","load","createIterable","DEFAULT_CANVAS_WIDTH","DEFAULT_BUFFER","noop","DEFAULT_TEXTURE_PARAMETERS","nextPowOfTwo","number","Math","pow","ceil","log2","resizeImage","ctx","imageData","maxWidth","maxHeight","resizeRatio","min","width","height","floor","data","canvas","clearRect","drawImage","getIconId","icon","id","url","resizeTexture","texture","parameters","oldWidth","oldHeight","newTexture","gl","targetY","delete","buildRowMapping","mapping","columns","yOffset","i","length","xOffset","x","y","buildMapping","icons","buffer","rowHeight","canvasWidth","push","max","canvasHeight","getDiffIcons","getIcon","cachedIcons","iterable","objectInfo","object","index","Error","source","sourceIndex","IconManager","constructor","onUpdate","onError","finalize","_texture","getTexture","_externalTexture","getIconMapping","_autoPacking","_mapping","setProps","loadOptions","autoPacking","iconAtlas","iconMapping","textureParameters","_loadOptions","undefined","_textureParameters","isLoaded","_pendingCount","packIcons","document","Object","values","_buffer","_canvasWidth","_rowHeight","_xOffset","_yOffset","_canvasHeight","_canvas","createElement","_loadIcons","getContext","willReadFrequently","then","iconDef","setSubImageData","generateMipmap","catch","error","finally"],"mappings":";AAEA,SAAQA,SAAR,EAAmBC,aAAnB,QAAuC,eAAvC;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,cAAR,QAA6B,eAA7B;AAIA,MAAMC,oBAAoB,GAAG,IAA7B;AACA,MAAMC,cAAc,GAAG,CAAvB;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEA,MAAMC,0BAA0B,GAAG;AACjC,eADiC;AAGjC,eAHiC;AAKjC,gBALiC;AAMjC;AANiC,CAAnC;;AAuDA,SAASC,YAAT,CAAsBC,MAAtB,EAA8C;AAC5C,SAAOC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,IAAL,CAAUF,IAAI,CAACG,IAAL,CAAUJ,MAAV,CAAV,CAAZ,CAAP;AACD;;AAGD,SAASK,WAAT,CACEC,GADF,EAEEC,SAFF,EAGEC,QAHF,EAIEC,SAJF,EASE;AACA,QAAMC,WAAW,GAAGT,IAAI,CAACU,GAAL,CAASH,QAAQ,GAAGD,SAAS,CAACK,KAA9B,EAAqCH,SAAS,GAAGF,SAAS,CAACM,MAA3D,CAApB;AACA,QAAMD,KAAK,GAAGX,IAAI,CAACa,KAAL,CAAWP,SAAS,CAACK,KAAV,GAAkBF,WAA7B,CAAd;AACA,QAAMG,MAAM,GAAGZ,IAAI,CAACa,KAAL,CAAWP,SAAS,CAACM,MAAV,GAAmBH,WAA9B,CAAf;;AAEA,MAAIA,WAAW,KAAK,CAApB,EAAuB;AAErB,WAAO;AAACK,MAAAA,IAAI,EAAER,SAAP;AAAkBK,MAAAA,KAAlB;AAAyBC,MAAAA;AAAzB,KAAP;AACD;;AAEDP,EAAAA,GAAG,CAACU,MAAJ,CAAWH,MAAX,GAAoBA,MAApB;AACAP,EAAAA,GAAG,CAACU,MAAJ,CAAWJ,KAAX,GAAmBA,KAAnB;AAEAN,EAAAA,GAAG,CAACW,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBL,KAApB,EAA2BC,MAA3B;AAGAP,EAAAA,GAAG,CAACY,SAAJ,CAAcX,SAAd,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BA,SAAS,CAACK,KAAzC,EAAgDL,SAAS,CAACM,MAA1D,EAAkE,CAAlE,EAAqE,CAArE,EAAwED,KAAxE,EAA+EC,MAA/E;AACA,SAAO;AAACE,IAAAA,IAAI,EAAET,GAAG,CAACU,MAAX;AAAmBJ,IAAAA,KAAnB;AAA0BC,IAAAA;AAA1B,GAAP;AACD;;AAED,SAASM,SAAT,CAAmBC,IAAnB,EAA+C;AAC7C,SAAOA,IAAI,KAAKA,IAAI,CAACC,EAAL,IAAWD,IAAI,CAACE,GAArB,CAAX;AACD;;AAGD,SAASC,aAAT,CACEC,OADF,EAEEZ,KAFF,EAGEC,MAHF,EAIEY,UAJF,EAKa;AACX,QAAMC,QAAQ,GAAGF,OAAO,CAACZ,KAAzB;AACA,QAAMe,SAAS,GAAGH,OAAO,CAACX,MAA1B;AAEA,QAAMe,UAAU,GAAG,IAAIrC,SAAJ,CAAciC,OAAO,CAACK,EAAtB,EAA0B;AAACjB,IAAAA,KAAD;AAAQC,IAAAA,MAAR;AAAgBY,IAAAA;AAAhB,GAA1B,CAAnB;AACAjC,EAAAA,aAAa,CAACgC,OAAD,EAAUI,UAAV,EAAsB;AACjCE,IAAAA,OAAO,EAAE,CADwB;AAEjClB,IAAAA,KAAK,EAAEc,QAF0B;AAGjCb,IAAAA,MAAM,EAAEc;AAHyB,GAAtB,CAAb;AAMAH,EAAAA,OAAO,CAACO,MAAR;AACA,SAAOH,UAAP;AACD;;AAID,SAASI,eAAT,CACEC,OADF,EAEEC,OAFF,EAMEC,OANF,EAOQ;AACN,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAM;AAAChB,MAAAA,IAAD;AAAOkB,MAAAA;AAAP,QAAkBJ,OAAO,CAACE,CAAD,CAA/B;AACA,UAAMf,EAAE,GAAGF,SAAS,CAACC,IAAD,CAApB;AACAa,IAAAA,OAAO,CAACZ,EAAD,CAAP,GAAc,EACZ,GAAGD,IADS;AAEZmB,MAAAA,CAAC,EAAED,OAFS;AAGZE,MAAAA,CAAC,EAAEL;AAHS,KAAd;AAKD;AACF;;AAKD,OAAO,SAASM,YAAT,CAAsB;AAC3BC,EAAAA,KAD2B;AAE3BC,EAAAA,MAF2B;AAG3BV,EAAAA,OAAO,GAAG,EAHiB;AAI3BK,EAAAA,OAAO,GAAG,CAJiB;AAK3BH,EAAAA,OAAO,GAAG,CALiB;AAM3BS,EAAAA,SAAS,GAAG,CANe;AAO3BC,EAAAA;AAP2B,CAAtB,EA6BL;AACA,MAAIX,OAGD,GAAG,EAHN;;AAWA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,KAAK,CAACL,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAMhB,IAAI,GAAGsB,KAAK,CAACN,CAAD,CAAlB;AACA,UAAMf,EAAE,GAAGF,SAAS,CAACC,IAAD,CAApB;;AAEA,QAAI,CAACa,OAAO,CAACZ,EAAD,CAAZ,EAAkB;AAChB,YAAM;AAACR,QAAAA,MAAD;AAASD,QAAAA;AAAT,UAAkBQ,IAAxB;;AAGA,UAAIkB,OAAO,GAAG1B,KAAV,GAAkB+B,MAAlB,GAA2BE,WAA/B,EAA4C;AAC1Cb,QAAAA,eAAe,CAACC,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,CAAf;AAEAG,QAAAA,OAAO,GAAG,CAAV;AACAH,QAAAA,OAAO,GAAGS,SAAS,GAAGT,OAAZ,GAAsBQ,MAAhC;AACAC,QAAAA,SAAS,GAAG,CAAZ;AACAV,QAAAA,OAAO,GAAG,EAAV;AACD;;AAEDA,MAAAA,OAAO,CAACY,IAAR,CAAa;AACX1B,QAAAA,IADW;AAEXkB,QAAAA;AAFW,OAAb;AAKAA,MAAAA,OAAO,GAAGA,OAAO,GAAG1B,KAAV,GAAkB+B,MAA5B;AACAC,MAAAA,SAAS,GAAG3C,IAAI,CAAC8C,GAAL,CAASH,SAAT,EAAoB/B,MAApB,CAAZ;AACD;AACF;;AAED,MAAIqB,OAAO,CAACG,MAAR,GAAiB,CAArB,EAAwB;AACtBL,IAAAA,eAAe,CAACC,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,CAAf;AACD;;AAED,SAAO;AACLF,IAAAA,OADK;AAELW,IAAAA,SAFK;AAGLN,IAAAA,OAHK;AAILH,IAAAA,OAJK;AAKLU,IAAAA,WALK;AAMLG,IAAAA,YAAY,EAAEjD,YAAY,CAAC6C,SAAS,GAAGT,OAAZ,GAAsBQ,MAAvB;AANrB,GAAP;AAQD;AAID,OAAO,SAASM,YAAT,CACLlC,IADK,EAELmC,OAFK,EAGLC,WAHK,EAUE;AACP,MAAI,CAACpC,IAAD,IAAS,CAACmC,OAAd,EAAuB;AACrB,WAAO,IAAP;AACD;;AAEDC,EAAAA,WAAW,GAAGA,WAAW,IAAI,EAA7B;AACA,QAAMT,KAAK,GAAG,EAAd;AACA,QAAM;AAACU,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAyB3D,cAAc,CAACqB,IAAD,CAA7C;;AACA,OAAK,MAAMuC,MAAX,IAAqBF,QAArB,EAA+B;AAC7BC,IAAAA,UAAU,CAACE,KAAX;AACA,UAAMnC,IAAI,GAAG8B,OAAO,CAACI,MAAD,EAASD,UAAT,CAApB;AACA,UAAMhC,EAAE,GAAGF,SAAS,CAACC,IAAD,CAApB;;AAEA,QAAI,CAACA,IAAL,EAAW;AACT,YAAM,IAAIoC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,QAAI,CAACpC,IAAI,CAACE,GAAV,EAAe;AACb,YAAM,IAAIkC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,QAAI,CAACd,KAAK,CAACrB,EAAD,CAAN,KAAe,CAAC8B,WAAW,CAAC9B,EAAD,CAAZ,IAAoBD,IAAI,CAACE,GAAL,KAAa6B,WAAW,CAAC9B,EAAD,CAAX,CAAgBC,GAAhE,CAAJ,EAA0E;AACxEoB,MAAAA,KAAK,CAACrB,EAAD,CAAL,GAAY,EAAC,GAAGD,IAAJ;AAAUqC,QAAAA,MAAM,EAAEH,MAAlB;AAA0BI,QAAAA,WAAW,EAAEL,UAAU,CAACE;AAAlD,OAAZ;AACD;AACF;;AACD,SAAOb,KAAP;AACD;AAED,eAAe,MAAMiB,WAAN,CAAkB;AA0B/BC,EAAAA,WAAW,CACT/B,EADS,EAET;AACEgC,IAAAA,QAAQ,GAAGhE,IADb;AAEEiE,IAAAA,OAAO,GAAGjE;AAFZ,GAFS,EAWT;AAAA;;AAAA;;AAAA;;AAAA,0CAhC0B,IAgC1B;;AAAA,sCA/BmC,IA+BnC;;AAAA,8CA9B2C,IA8B3C;;AAAA,sCA7B8B,EA6B9B;;AAAA,gDA5B0D,IA4B1D;;AAAA,2CAzB8B,CAyB9B;;AAAA,0CAvB8B,KAuB9B;;AAAA,sCAnByB,CAmBzB;;AAAA,sCAlByB,CAkBzB;;AAAA,wCAjB2B,CAiB3B;;AAAA,qCAhBwBD,cAgBxB;;AAAA,0CAf6BD,oBAe7B;;AAAA,2CAd8B,CAc9B;;AAAA,qCAb0C,IAa1C;;AACA,SAAKkC,EAAL,GAAUA,EAAV;AACA,SAAKgC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;AAEDC,EAAAA,QAAQ,GAAS;AAAA;;AACf,2BAAKC,QAAL,kEAAejC,MAAf;AACD;;AAEDkC,EAAAA,UAAU,GAAqB;AAC7B,WAAO,KAAKD,QAAL,IAAiB,KAAKE,gBAA7B;AACD;;AAEDC,EAAAA,cAAc,CAAC/C,IAAD,EAA6C;AACzD,UAAMC,EAAE,GAAG,KAAK+C,YAAL,GAAoBjD,SAAS,CAACC,IAAD,CAA7B,GAAuDA,IAAlE;AACA,WAAO,KAAKiD,QAAL,CAAchD,EAAd,KAAqB,EAA5B;AACD;;AAEDiD,EAAAA,QAAQ,CAAC;AACPC,IAAAA,WADO;AAEPC,IAAAA,WAFO;AAGPC,IAAAA,SAHO;AAIPC,IAAAA,WAJO;AAKPC,IAAAA;AALO,GAAD,EAYL;AACD,QAAIJ,WAAJ,EAAiB;AACf,WAAKK,YAAL,GAAoBL,WAApB;AACD;;AAED,QAAIC,WAAW,KAAKK,SAApB,EAA+B;AAC7B,WAAKT,YAAL,GAAoBI,WAApB;AACD;;AAED,QAAIE,WAAJ,EAAiB;AACf,WAAKL,QAAL,GAAgBK,WAAhB;AACD;;AAED,QAAID,SAAJ,EAAe;AAAA;;AACb,8BAAKT,QAAL,oEAAejC,MAAf;AACA,WAAKiC,QAAL,GAAgB,IAAhB;AACA,WAAKE,gBAAL,GAAwBO,SAAxB;AACD;;AAED,QAAIE,iBAAJ,EAAuB;AACrB,WAAKG,kBAAL,GAA0BH,iBAA1B;AACD;AACF;;AAEW,MAARI,QAAQ,GAAY;AACtB,WAAO,KAAKC,aAAL,KAAuB,CAA9B;AACD;;AAEDC,EAAAA,SAAS,CAAClE,IAAD,EAAYmC,OAAZ,EAAgE;AACvE,QAAI,CAAC,KAAKkB,YAAN,IAAsB,OAAOc,QAAP,KAAoB,WAA9C,EAA2D;AACzD;AACD;;AAED,UAAMxC,KAAK,GAAGyC,MAAM,CAACC,MAAP,CAAcnC,YAAY,CAAClC,IAAD,EAAOmC,OAAP,EAAgB,KAAKmB,QAArB,CAAZ,IAA8C,EAA5D,CAAd;;AAEA,QAAI3B,KAAK,CAACL,MAAN,GAAe,CAAnB,EAAsB;AAEpB,YAAM;AAACJ,QAAAA,OAAD;AAAUK,QAAAA,OAAV;AAAmBH,QAAAA,OAAnB;AAA4BS,QAAAA,SAA5B;AAAuCI,QAAAA;AAAvC,UAAuDP,YAAY,CAAC;AACxEC,QAAAA,KADwE;AAExEC,QAAAA,MAAM,EAAE,KAAK0C,OAF2D;AAGxExC,QAAAA,WAAW,EAAE,KAAKyC,YAHsD;AAIxErD,QAAAA,OAAO,EAAE,KAAKoC,QAJ0D;AAKxEzB,QAAAA,SAAS,EAAE,KAAK2C,UALwD;AAMxEjD,QAAAA,OAAO,EAAE,KAAKkD,QAN0D;AAOxErD,QAAAA,OAAO,EAAE,KAAKsD;AAP0D,OAAD,CAAzE;AAUA,WAAKF,UAAL,GAAkB3C,SAAlB;AACA,WAAKyB,QAAL,GAAgBpC,OAAhB;AACA,WAAKuD,QAAL,GAAgBlD,OAAhB;AACA,WAAKmD,QAAL,GAAgBtD,OAAhB;AACA,WAAKuD,aAAL,GAAqB1C,YAArB;;AAGA,UAAI,CAAC,KAAKgB,QAAV,EAAoB;AAClB,aAAKA,QAAL,GAAgB,IAAIzE,SAAJ,CAAc,KAAKsC,EAAnB,EAAuB;AACrCjB,UAAAA,KAAK,EAAE,KAAK0E,YADyB;AAErCzE,UAAAA,MAAM,EAAE,KAAK6E,aAFwB;AAGrCjE,UAAAA,UAAU,EAAE,KAAKqD,kBAAL,IAA2BhF;AAHF,SAAvB,CAAhB;AAKD;;AAED,UAAI,KAAKkE,QAAL,CAAcnD,MAAd,KAAyB,KAAK6E,aAAlC,EAAiD;AAC/C,aAAK1B,QAAL,GAAgBzC,aAAa,CAC3B,KAAKyC,QADsB,EAE3B,KAAKsB,YAFsB,EAG3B,KAAKI,aAHsB,EAI3B,KAAKZ,kBAAL,IAA2BhF,0BAJA,CAA7B;AAMD;;AAED,WAAK+D,QAAL;AAGA,WAAK8B,OAAL,GAAe,KAAKA,OAAL,IAAgBT,QAAQ,CAACU,aAAT,CAAuB,QAAvB,CAA/B;;AACA,WAAKC,UAAL,CAAgBnD,KAAhB;AACD;AACF;;AAEOmD,EAAAA,UAAU,CAChBnD,KADgB,EAKV;AAEN,UAAMpC,GAAG,GAAG,KAAKqF,OAAL,CAAcG,UAAd,CAAyB,IAAzB,EAA+B;AACzCC,MAAAA,kBAAkB,EAAE;AADqB,KAA/B,CAAZ;;AAIA,SAAK,MAAM3E,IAAX,IAAmBsB,KAAnB,EAA0B;AACxB,WAAKsC,aAAL;AACAvF,MAAAA,IAAI,CAAC2B,IAAI,CAACE,GAAN,EAAW,KAAKsD,YAAhB,CAAJ,CACGoB,IADH,CACQzF,SAAS,IAAI;AACjB,cAAMc,EAAE,GAAGF,SAAS,CAACC,IAAD,CAApB;AAEA,cAAM6E,OAAO,GAAG,KAAK5B,QAAL,CAAchD,EAAd,CAAhB;AACA,cAAM;AAACkB,UAAAA,CAAD;AAAIC,UAAAA,CAAJ;AAAO5B,UAAAA,KAAK,EAAEJ,QAAd;AAAwBK,UAAAA,MAAM,EAAEJ;AAAhC,YAA6CwF,OAAnD;AAEA,cAAM;AAAClF,UAAAA,IAAD;AAAOH,UAAAA,KAAP;AAAcC,UAAAA;AAAd,YAAwBR,WAAW,CAACC,GAAD,EAAMC,SAAN,EAAiBC,QAAjB,EAA2BC,SAA3B,CAAzC;;AAEA,aAAKuD,QAAL,CAAckC,eAAd,CAA8B;AAC5BnF,UAAAA,IAD4B;AAE5BwB,UAAAA,CAAC,EAAEA,CAAC,GAAG,CAAC/B,QAAQ,GAAGI,KAAZ,IAAqB,CAFA;AAG5B4B,UAAAA,CAAC,EAAEA,CAAC,GAAG,CAAC/B,SAAS,GAAGI,MAAb,IAAuB,CAHF;AAI5BD,UAAAA,KAJ4B;AAK5BC,UAAAA;AAL4B,SAA9B;;AAOAoF,QAAAA,OAAO,CAACrF,KAAR,GAAgBA,KAAhB;AACAqF,QAAAA,OAAO,CAACpF,MAAR,GAAiBA,MAAjB;;AAGA,aAAKmD,QAAL,CAAcmC,cAAd;;AAEA,aAAKtC,QAAL;AACD,OAvBH,EAwBGuC,KAxBH,CAwBSC,KAAK,IAAI;AACd,aAAKvC,OAAL,CAAa;AACXxC,UAAAA,GAAG,EAAEF,IAAI,CAACE,GADC;AAEXmC,UAAAA,MAAM,EAAErC,IAAI,CAACqC,MAFF;AAGXC,UAAAA,WAAW,EAAEtC,IAAI,CAACsC,WAHP;AAIXa,UAAAA,WAAW,EAAE,KAAKK,YAJP;AAKXyB,UAAAA;AALW,SAAb;AAOD,OAhCH,EAiCGC,OAjCH,CAiCW,MAAM;AACb,aAAKtB,aAAL;AACD,OAnCH;AAoCD;AACF;;AArM8B","sourcesContent":["/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, copyToTexture} from '@luma.gl/core';\nimport {load} from '@loaders.gl/core';\nimport {createIterable} from '@deck.gl/core';\n\nimport type {AccessorFunction} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\ntype IconDef = {\n  /** Width of the icon */\n  width: number;\n  /** Height of the icon */\n  height: number;\n  /** Horizontal position of icon anchor. Default: half width. */\n  anchorX?: number;\n  /** Vertical position of icon anchor. Default: half height. */\n  anchorY?: number;\n  /**\n   * Whether the icon is treated as a transparency mask.\n   * If `true`, color defined by `getColor` is applied.\n   * If `false`, pixel color from the icon image is applied.\n   * @default false\n   */\n  mask?: boolean;\n};\n\nexport type UnpackedIcon = {\n  /** Url to fetch the icon */\n  url: string;\n  /** Unique identifier of the icon. Icons of the same id are only fetched once. Fallback to `url` if not specified. */\n  id?: string;\n} & IconDef;\n\ntype PrepackedIcon = {\n  /** Left position of the icon on the atlas */\n  x: number;\n  /** Top position of the icon on the atlas */\n  y: number;\n} & IconDef;\n\nexport type IconMapping = Record<string, PrepackedIcon>;\n\nexport type LoadIconErrorContext = {\n  error: Error;\n  /** The URL that was trying to fetch */\n  url: string;\n  /** The original data object that requested this icon */\n  source: any;\n  /** The index of the original data object that requested this icon */\n  sourceIndex: number;\n  /** The load options used for the fetch */\n  loadOptions: any;\n};\n\nfunction nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(\n  ctx: CanvasRenderingContext2D,\n  imageData: HTMLImageElement | ImageBitmap,\n  maxWidth: number,\n  maxHeight: number\n): {\n  data: HTMLImageElement | HTMLCanvasElement | ImageBitmap;\n  width: number;\n  height: number;\n} {\n  const resizeRatio = Math.min(maxWidth / imageData.width, maxHeight / imageData.height);\n  const width = Math.floor(imageData.width * resizeRatio);\n  const height = Math.floor(imageData.height * resizeRatio);\n\n  if (resizeRatio === 1) {\n    // No resizing required\n    return {data: imageData, width, height};\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, width, height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n  return {data: ctx.canvas, width, height};\n}\n\nfunction getIconId(icon: UnpackedIcon): string {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(\n  texture: Texture2D,\n  width: number,\n  height: number,\n  parameters: any\n): Texture2D {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n\n  const newTexture = new Texture2D(texture.gl, {width, height, parameters});\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n\n  texture.delete();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(\n  mapping: IconMapping,\n  columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[],\n  yOffset: number\n): void {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = {\n      ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}: {\n  /** list of icon definitions */\n  icons: UnpackedIcon[];\n  /** add bleeding buffer to the right and bottom side of the image */\n  buffer: number;\n  /** right position of last icon in old mapping */\n  xOffset: number;\n  /** top position in last icon in old mapping */\n  yOffset: number;\n  /** height of the last icon's row */\n  rowHeight: number;\n  /** max width of canvas */\n  canvasWidth: number;\n  mapping: IconMapping;\n}): {\n  mapping: IconMapping;\n  rowHeight: number;\n  xOffset: number;\n  yOffset: number;\n  canvasWidth: number;\n  canvasHeight: number;\n} {\n  let columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[] = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(\n  data: any,\n  getIcon: AccessorFunction<any, UnpackedIcon> | null,\n  cachedIcons: Record<string, PrepackedIcon & {url?: string}>\n): Record<\n  string,\n  UnpackedIcon & {\n    source: any;\n    sourceIndex: number;\n  }\n> | null {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = {...icon, source: object, sourceIndex: objectInfo.index};\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  gl: WebGLRenderingContext;\n\n  private onUpdate: () => void;\n  private onError: (context: LoadIconErrorContext) => void;\n  private _loadOptions: any = null;\n  private _texture: Texture2D | null = null;\n  private _externalTexture: Texture2D | null = null;\n  private _mapping: IconMapping = {};\n  private _textureParameters: Record<number, number> | null = null;\n\n  /** count of pending requests to fetch icons */\n  private _pendingCount: number = 0;\n\n  private _autoPacking: boolean = false;\n\n  // / internal state used for autoPacking\n\n  private _xOffset: number = 0;\n  private _yOffset: number = 0;\n  private _rowHeight: number = 0;\n  private _buffer: number = DEFAULT_BUFFER;\n  private _canvasWidth: number = DEFAULT_CANVAS_WIDTH;\n  private _canvasHeight: number = 0;\n  private _canvas: HTMLCanvasElement | null = null;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      onUpdate = noop,\n      onError = noop\n    }: {\n      /** Callback when the texture updates */\n      onUpdate: () => void;\n      /** Callback when an error is encountered */\n      onError: (context: LoadIconErrorContext) => void;\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n  }\n\n  finalize(): void {\n    this._texture?.delete();\n  }\n\n  getTexture(): Texture2D | null {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon: string | UnpackedIcon): PrepackedIcon {\n    const id = this._autoPacking ? getIconId(icon as UnpackedIcon) : (icon as string);\n    return this._mapping[id] || {};\n  }\n\n  setProps({\n    loadOptions,\n    autoPacking,\n    iconAtlas,\n    iconMapping,\n    textureParameters\n  }: {\n    loadOptions?: any;\n    autoPacking?: boolean;\n    iconAtlas?: Texture2D | null;\n    iconMapping?: IconMapping | null;\n    textureParameters?: Record<number, number> | null;\n  }) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._texture?.delete();\n      this._texture = null;\n      this._externalTexture = iconAtlas;\n    }\n\n    if (textureParameters) {\n      this._textureParameters = textureParameters;\n    }\n  }\n\n  get isLoaded(): boolean {\n    return this._pendingCount === 0;\n  }\n\n  packIcons(data: any, getIcon: AccessorFunction<any, UnpackedIcon>): void {\n    if (!this._autoPacking || typeof document === 'undefined') {\n      return;\n    }\n\n    const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(\n          this._texture,\n          this._canvasWidth,\n          this._canvasHeight,\n          this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        );\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._canvas = this._canvas || document.createElement('canvas');\n      this._loadIcons(icons);\n    }\n  }\n\n  private _loadIcons(\n    icons: (UnpackedIcon & {\n      source: any;\n      sourceIndex: number;\n    })[]\n  ): void {\n    // This method is only called in the auto packing case, where _canvas is defined\n    const ctx = this._canvas!.getContext('2d', {\n      willReadFrequently: true\n    }) as CanvasRenderingContext2D;\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n\n          const iconDef = this._mapping[id];\n          const {x, y, width: maxWidth, height: maxHeight} = iconDef;\n\n          const {data, width, height} = resizeImage(ctx, imageData, maxWidth, maxHeight);\n\n          this._texture.setSubImageData({\n            data,\n            x: x + (maxWidth - width) / 2,\n            y: y + (maxHeight - height) / 2,\n            width,\n            height\n          });\n          iconDef.width = width;\n          iconDef.height = height;\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          this.onError({\n            url: icon.url,\n            source: icon.source,\n            sourceIndex: icon.sourceIndex,\n            loadOptions: this._loadOptions,\n            error\n          });\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n"],"file":"icon-manager.js"}