{"version":3,"sources":["../../../src/classes/accessor.js"],"names":["DEFAULT_ACCESSOR_VALUES","offset","stride","type","size","divisor","normalized","integer","PROP_CHECKS","deprecatedProps","instanced","isInstanced","Accessor","accessors","forEach","accessor","_assign","Object","freeze","JSON","stringify","getBytesPerElement","getBytesPerVertex","props","undefined","buffer","index","ArrayType","BYTES_PER_ELEMENT"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport {assert} from '../utils/assert';\nimport {checkProps} from '../utils/check-props';\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\n\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors) {\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props = {}) {\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if (props.type === GL.INT || props.type === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof props.index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    // DEPRECATED\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n"],"file":"accessor.js"}