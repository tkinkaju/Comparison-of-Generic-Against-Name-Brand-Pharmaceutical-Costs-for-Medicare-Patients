{"version":3,"sources":["../../../src/classes/vertex-array-object.js"],"names":["ERR_ELEMENTS","VertexArrayObject","gl","opts","id","program","Object","assign","buffer","bufferValue","isDefaultArray","gl2","initialize","seal","delete","getMaxAttributes","props","setProps","elementBuffer","target","bind","bindBuffer","handle","location","accessor","setElementBuffer","size","type","stride","offset","normalized","integer","divisor","Number","vertexAttribIPointer","vertexAttribPointer","enableVertexAttribArray","vertexAttribDivisor","enable","disablingAttributeZero","isSupported","constantAttributeZero","disableVertexAttribArray","elementCount","value","constantValue","_normalizeConstantArrayValue","byteLength","length","updateNeeded","Buffer","reallocate","_compareConstantArrayValues","typedArray","constructor","source","start","count","subData","arrayValue","Array","isArray","Float32Array","v1","v2","i","createVertexArray","deleteVertexArray","elements","bindVertexArray","pname","isFinite","getVertexAttribOffset","getVertexAttrib","options","luma","defaultVertexArray","MAX_ATTRIBUTES","getParameter","array","_setConstantFloatArray","Int32Array","_setConstantIntArray","Uint32Array","_setConstantUintArray","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI1iv","vertexAttribI2iv","vertexAttribI3iv","vertexAttribI4iv","vertexAttribI1uiv","vertexAttribI2uiv","vertexAttribI3uiv","vertexAttribI4uiv","Resource","Symbol","toStringTag"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils/assert';\nimport {getBrowser} from '@probe.gl/env';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'VertexArrayObject';\n  }\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return true;\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  // TODO(Tarek): VAOs are now polyfilled. Deprecate this in 9.0\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null, isDefaultArray: true});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    // @ts-ignore\n    VertexArrayObject.MAX_ATTRIBUTES =\n      // @ts-ignore\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    // @ts-ignore\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.buffer = null;\n    this.bufferValue = null;\n    this.isDefaultArray = opts.isDefaultArray || false;\n\n    /** @type {WebGL2RenderingContext} */\n    this.gl2 = gl;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n    return this;\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl, gl2} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl2.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl2.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    /** @type {WebGL2RenderingContext} */\n    // @ts-ignore\n    const gl2 = this.gl;\n    return gl2.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.gl2.deleteVertexArray(handle);\n    // @ts-ignore\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    this.gl2.bindVertexArray(handle);\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n}\n"],"file":"vertex-array-object.js"}