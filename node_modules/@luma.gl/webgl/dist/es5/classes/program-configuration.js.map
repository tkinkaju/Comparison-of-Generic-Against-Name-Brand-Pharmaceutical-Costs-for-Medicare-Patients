{"version":3,"sources":["../../../src/classes/program-configuration.js"],"names":["ProgramConfiguration","program","id","attributeInfos","attributeInfosByName","attributeInfosByLocation","varyingInfos","varyingInfosByName","Object","seal","_readAttributesFromProgram","_readVaryingsFromProgram","locationOrName","location","Number","isFinite","attributeInfo","getAttributeInfo","accessor","varying","getVaryingInfo","gl","count","getProgramParameter","handle","index","getActiveAttrib","name","type","size","getAttribLocation","_addAttribute","sort","a","b","getTransformFeedbackVarying","_addVarying","compositeType","components","_inferProperties","Accessor","push","test","divisor"],"mappings":"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","sourcesContent":["// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport Accessor from './accessor';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport default class ProgramConfiguration {\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n\n    // Locations may not be contiguous the case of matrix attributes\n    // so keep a separate location->attribute map.\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfosByLocation[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  // Resolves an attribute name or index to an index\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  // PRIVATE METHODS\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      // Add only user provided attributes, for built-in attributes like\n      // `gl_InstanceID` locaiton will be < 0\n      if (location >= 0) {\n        this._addAttribute(location, name, type, size);\n      }\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = {type, size: size * components};\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {location, name, accessor: new Accessor(accessor)}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByLocation[location] = attributeInfo; // For quick location based lookup\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if (/instance/i.test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying; // For quick name based lookup\n  }\n}\n"],"file":"program-configuration.js"}