{"version":3,"sources":["../../../src/classes/resource.js"],"names":["ERR_RESOURCE_METHOD_UNDEFINED","Resource","gl","opts","id","userData","gl2","Symbol","toStringTag","_bound","_handle","handle","undefined","_createHandle","byteLength","_addStats","constructor","name","deleteChildren","children","_deleteHandle","_removeStats","filter","Boolean","forEach","child","delete","funcOrHandle","_bindHandle","value","bind","pname","parameters","PARAMETERS","parameter","isWebgl2","parameterAvailable","getExtension","extension","webgl1Default","webgl1","webgl2Default","webgl2","defaultValue","_getParameter","options","keys","values","parameterKeys","Object","key","getParameter","type","Error","_setParameter","setParameter","className","version","methodNames","luma","stats","lumaStats","get","incrementCount","decrementCount","bytes","_trackAllocatedMemoryForContext","canvas","addCount","_trackDeallocatedMemoryForContext","subtractCount"],"mappings":"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","sourcesContent":["import {isWebGL2, assertWebGLContext} from '@luma.gl/gltools';\nimport {lumaStats} from '../init';\nimport {getKey, getKeyValue} from '../webgl-utils/constants-to-keys';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\nimport {stubRemovedMethods} from '../utils/stub-methods';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n// TODO - Handle context loss\n// function glGetContextLossCount(gl) {\n//   return (gl.luma && gl.luma.glCount) || 0;\n// }\n\nexport default class Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Resource';\n  }\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    const {id, userData = {}} = opts;\n    this.gl = gl;\n    // @ts-ignore\n    this.gl2 = gl;\n    // this.ext = polyfillContext(gl);\n    this.id = id || uid(this[Symbol.toStringTag]);\n    this.userData = userData;\n    this._bound = false;\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    // Only meaningful for resources that allocate GPU memory\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this[Symbol.toStringTag] || this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.opts);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.opts);\n    // }\n    return this._handle;\n  }\n\n  delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    // @ts-ignore\n    const children = this._handle && this._deleteHandle(this._handle);\n    if (this._handle) {\n      this._removeStats();\n    }\n    this._handle = null;\n\n    // Optionally, recursively delete the children\n    // @ts-ignore\n    if (children && deleteChildren) {\n      // @ts-ignore\n      children.filter(Boolean).forEach(child => child.delete());\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this._bound = false;\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param {GLenum} pname\n   * @return {GLint|GLfloat|GLenum} param\n   */\n  getParameter(pname, opts = {}) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    // @ts-ignore\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, opts);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  // eslint-disable-next-line complexity\n  getParameters(options = {}) {\n    const {parameters, keys} = options;\n\n    // Get parameter definitions for this Resource\n    // @ts-ignore\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, options);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param {string} pname - parameter (GL constant, value or key)\n   * @param {GLint|GLfloat|GLenum} value\n   * @return {Resource} returns self to enable chaining\n   */\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    // @ts-ignore\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // Install stubs for removed methods\n  stubRemovedMethods(className, version, methodNames) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(opts) {}\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle(handle) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  /** @returns {number} */\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this[Symbol.toStringTag];\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this[Symbol.toStringTag];\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  /**\n   * Track common allocated memory and memory based on particular gl context.\n   * @param {number} bytes\n   * @param {string} name\n   */\n  _trackAllocatedMemory(bytes, name = this[Symbol.toStringTag]) {\n    this._trackAllocatedMemoryForContext(bytes, name);\n    this._trackAllocatedMemoryForContext(bytes, name, this.gl.canvas && this.gl.canvas.id);\n    this.byteLength = bytes;\n  }\n\n  _trackAllocatedMemoryForContext(bytes, name = this[Symbol.toStringTag], id = '') {\n    const stats = lumaStats.get(`Memory Usage${id}`);\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n  }\n\n  /**\n   * Deallocate memory for common statistic and for each gl context as well.\n   * @param {string} name\n   */\n  _trackDeallocatedMemory(name = this[Symbol.toStringTag]) {\n    this._trackDeallocatedMemoryForContext(name);\n    this._trackDeallocatedMemoryForContext(name, this.gl.canvas && this.gl.canvas.id);\n    this.byteLength = 0;\n  }\n\n  _trackDeallocatedMemoryForContext(name = this[Symbol.toStringTag], id = '') {\n    const stats = lumaStats.get(`Memory Usage${id}`);\n\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n  }\n}\n"],"file":"resource.js"}