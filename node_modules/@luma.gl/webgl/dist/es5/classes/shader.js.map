{"version":3,"sources":["../../../src/classes/shader.js"],"names":["ERR_SOURCE","Shader","gl","props","source","id","getTypeName","shaderType","initialize","shaderName","_compile","pname","getShaderParameter","handle","getShaderSource","extension","getExtension","getTranslatedShaderSource","startsWith","shaderSource","compileShader","compileStatus","getParameter","infoLog","getShaderInfoLog","errors","warnings","log","error","warn","Error","deleteShader","type","getSource","Resource","Symbol","toStringTag","VertexShader","Object","assign","createShader","FragmentShader"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {assertWebGLContext, log} from '@luma.gl/gltools';\nimport {parseGLSLCompilerError, getShaderName} from '../glsl-utils';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\nimport Resource from './resource';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\n// For now this is an internal class\nexport class Shader extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Shader';\n  }\n\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case GL.VERTEX_SHADER:\n        return 'vertex-shader';\n      case GL.FRAGMENT_SHADER:\n        return 'fragment-shader';\n      default:\n        assert(false);\n        return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${Shader.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension\n      ? extension.getTranslatedShaderSource(this.handle)\n      : 'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile(source = this.source) {\n    if (!source.startsWith('#version ')) {\n      source = `#version 100\\n${source}`;\n    }\n    this.source = source;\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL.COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} = parseGLSLCompilerError(\n        infoLog,\n        this.source,\n        this.shaderType,\n        this.id\n      );\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL.SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'VertexShader';\n  }\n\n  constructor(gl, props) {\n    // Signature: new VertexShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL.VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'FragmentShader';\n  }\n  constructor(gl, props) {\n    // Signature: new FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL.FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.FRAGMENT_SHADER);\n  }\n}\n"],"file":"shader.js"}