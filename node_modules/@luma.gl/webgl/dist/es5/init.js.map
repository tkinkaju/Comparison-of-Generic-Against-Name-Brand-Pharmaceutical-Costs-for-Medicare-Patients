{"version":3,"sources":["../../src/init.js"],"names":["VERSION","STARTUP_MESSAGE","StatsManager","stats","Map","name","has","set","Stats","id","get","lumaStats","globalThis","luma","Error","log","version","globals","modules","nodeIO"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAKA,IAAMA,OAAO,GAAG,oBAAuB,WAAvB,cAAmD,qBAAnE;AAEA,IAAMC,eAAe,GAAG,qDAAxB;;IAKaC,Y;AACX,0BAAc;AAAA;AACZ,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACD;;;;WAED,aAAIC,IAAJ,EAAU;AACR,UAAI,CAAC,KAAKF,KAAL,CAAWG,GAAX,CAAeD,IAAf,CAAL,EAA2B;AACzB,aAAKF,KAAL,CAAWI,GAAX,CAAeF,IAAf,EAAqB,IAAIG,YAAJ,CAAU;AAACC,UAAAA,EAAE,EAAEJ;AAAL,SAAV,CAArB;AACD;;AAED,aAAO,KAAKF,KAAL,CAAWO,GAAX,CAAeL,IAAf,CAAP;AACD;;;;;;AAGH,IAAMM,SAAS,GAAG,IAAIT,YAAJ,EAAlB;;;AAEA,IAAIU,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACC,IAAX,CAAgBb,OAAhB,KAA4BA,OAAnD,EAA4D;AAC1D,QAAM,IAAIc,KAAJ,iDAAmDF,UAAU,CAACC,IAAX,CAAgBb,OAAnE,iBAAiFA,OAAjF,EAAN;AACD;;AAED,IAAI,CAACY,UAAU,CAACC,IAAhB,EAAsB;AACpB,MAAI,qBAAJ,EAAiB;AACfE,iBAAIA,GAAJ,CAAQ,CAAR,oBAAsBf,OAAtB,gBAAmCC,eAAnC;AACD;;AAEDW,EAAAA,UAAU,CAACC,IAAX,GAAkBD,UAAU,CAACC,IAAX,IAAmB;AACnCb,IAAAA,OAAO,EAAPA,OADmC;AAEnCgB,IAAAA,OAAO,EAAEhB,OAF0B;AAGnCe,IAAAA,GAAG,EAAHA,YAHmC;AAOnCZ,IAAAA,KAAK,EAAEQ,SAP4B;AAcnCM,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,EADF;AAEPC,MAAAA,MAAM,EAAE;AAFD;AAd0B,GAArC;AAmBD;;eAGcP,UAAU,CAACC,I","sourcesContent":["import {log} from '@luma.gl/gltools';\nimport {Stats} from '@probe.gl/stats';\nimport {isBrowser} from '@probe.gl/env';\n\n// Version detection using babel plugin\n/* global __VERSION__ */\n// @ts-ignore\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nconst STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\n// Assign luma.log.level in console to control logging: \\\n// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nexport class StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({id: name}));\n    }\n\n    return this.stats.get(name);\n  }\n}\n\nconst lumaStats = new StatsManager();\n\nif (globalThis.luma && globalThis.luma.VERSION !== VERSION) {\n  throw new Error(`luma.gl - multiple VERSIONs detected: ${globalThis.luma.VERSION} vs ${VERSION}`);\n}\n\nif (!globalThis.luma) {\n  if (isBrowser()) {\n    log.log(1, `luma.gl ${VERSION} - ${STARTUP_MESSAGE}`)();\n  }\n\n  globalThis.luma = globalThis.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: lumaStats,\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {lumaStats};\nexport default globalThis.luma;\n"],"file":"init.js"}