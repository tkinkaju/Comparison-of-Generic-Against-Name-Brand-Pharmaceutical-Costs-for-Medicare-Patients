{"version":3,"sources":["../../../src/classes/program.js"],"names":["Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","ProgramConfiguration","copyUniform","checkUniformValues","isWebGL2","assertWebGL2Context","withParameters","log","getKey","getPrimitiveDrawMode","assert","uid","LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","V6_DEPRECATED_METHODS","Program","Symbol","toStringTag","constructor","gl","props","stubRemovedMethods","_isCached","initialize","Object","seal","_setId","id","hash","vs","fs","varyings","bufferMode","source","uniforms","_textureUniforms","length","gl2","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","setProps","delete","options","setUniforms","draw","logPriority","drawMode","vertexCount","offset","start","end","isIndexed","indexType","instanceCount","isInstanced","vertexArray","transformFeedback","framebuffer","parameters","samplers","deprecated","priority","fb","message","useProgram","_areTexturesRenderable","bindForDraw","undefined","assign","primitiveMode","begin","_bindTextures","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","_uniformSetters","uniformName","uniform","uniformSetter","value","textureUpdate","texture","textureIndex","_textureIndexCounter","bind","texturesRenderable","update","loaded","_createHandle","createProgram","_deleteHandle","deleteProgram","_getOptionsFromHandle","shaderHandles","getAttachedShaders","opts","shaderHandle","type","getShaderParameter","_getParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","level","linked","Error","getProgramInfoLog","validateProgram","validated","_uniformCount","i","info","getActiveUniform","name","location","getUniformLocation","size","l","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {copyUniform, checkUniformValues} from './uniforms';\n\nimport {isWebGL2, assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Program';\n  }\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {hash, vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n\n    this.hash = hash || ''; // Used by ProgramManager\n\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    this._textureUniforms = {};\n\n    // Setup varyings if supplied\n    if (varyings && varyings.length > 0) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl2.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    instanceCount = 0,\n    isInstanced = instanceCount > 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (log.priority >= logPriority) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    if (\n      // Note: async textures set as uniforms might still be loading.\n      // Now that all uniforms have been updated, check if any texture\n      // in the uniforms is not yet initialized, then we don't draw\n      !this._areTexturesRenderable() ||\n      // Avoid WebGL draw call when not rendering any data\n      vertexCount === 0 ||\n      (isInstanced && instanceCount === 0)\n    ) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl2.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl2.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl2.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}) {\n    if (log.priority >= 2) {\n      checkUniformValues(uniforms, this.id, this._uniformSetters);\n    }\n\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        let value = uniform;\n        let textureUpdate = false;\n\n        if (value instanceof Framebuffer) {\n          value = value.texture;\n        }\n        if (value instanceof Texture) {\n          textureUpdate = this.uniforms[uniformName] !== uniform;\n\n          if (textureUpdate) {\n            // eslint-disable-next-line max-depth\n            if (uniformSetter.textureIndex === undefined) {\n              uniformSetter.textureIndex = this._textureIndexCounter++;\n            }\n\n            // Bind texture to index\n            const texture = value;\n            const {textureIndex} = uniformSetter;\n\n            texture.bind(textureIndex);\n            value = textureIndex;\n\n            this._textureUniforms[uniformName] = texture;\n          } else {\n            value = uniformSetter.textureIndex;\n          }\n        } else if (this._textureUniforms[uniformName]) {\n          delete this._textureUniforms[uniformName];\n        }\n\n        // NOTE(Tarek): uniformSetter returns whether\n        //   value had to be updated or not.\n        if (uniformSetter(value) || textureUpdate) {\n          copyUniform(this.uniforms, uniformName, uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Update a texture if needed (e.g. from video)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this._textureUniforms) {\n      const texture = this._textureUniforms[uniformName];\n      texture.update();\n      texturesRenderable = texturesRenderable && texture.loaded;\n    }\n\n    return texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this._textureUniforms) {\n      const textureIndex = this._uniformSetters[uniformName].textureIndex;\n      this._textureUniforms[uniformName].bind(textureIndex);\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          // @ts-ignore\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          // @ts-ignore\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    // @ts-ignore\n    if (gl.debug || log.level > 0) {\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n\n      gl.validateProgram(this.handle);\n      const validated = gl.getProgramParameter(this.handle, gl.VALIDATE_STATUS);\n      if (!validated) {\n        throw new Error(`Error validating: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name} = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info);\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, `${name}[${l}]`);\n          this._uniformSetters[`${name}[${l}]`] = getUniformSetter(gl, location, info);\n        }\n      }\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl2.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl2.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl2.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl2.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"file":"program.js"}