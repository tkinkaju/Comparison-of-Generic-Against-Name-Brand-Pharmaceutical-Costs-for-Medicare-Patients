{"version":3,"sources":["../../../src/animation/timeline.js"],"names":["channelHandles","animationHandles","Timeline","time","channels","Map","animations","playing","lastEngineTime","props","delay","duration","Number","POSITIVE_INFINITY","rate","repeat","handle","channel","_setChannelTime","set","delete","animationHandle","animation","detachAnimation","get","undefined","Math","max","values","animationData","setTime","getTime","channelHandle","engineTime","offsetTime","totalDuration"],"mappings":"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","sourcesContent":["let channelHandles = 1;\nlet animationHandles = 1;\n\nexport class Timeline {\n  constructor() {\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  addChannel(props) {\n    const {delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1} = props;\n\n    const handle = channelHandles++;\n    const channel = {\n      time: 0,\n      delay,\n      duration,\n      rate,\n      repeat\n    };\n    this._setChannelTime(channel, this.time);\n    this.channels.set(handle, channel);\n\n    return handle;\n  }\n\n  removeChannel(handle) {\n    this.channels.delete(handle);\n\n    for (const [animationHandle, animation] of this.animations) {\n      if (animation.channel === handle) {\n        this.detachAnimation(animationHandle);\n      }\n    }\n  }\n\n  isFinished(handle) {\n    const channel = this.channels.get(handle);\n    if (channel === undefined) {\n      return false;\n    }\n\n    return this.time >= channel.delay + channel.duration * channel.repeat;\n  }\n\n  getTime(handle) {\n    if (handle === undefined) {\n      return this.time;\n    }\n\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return -1;\n    }\n\n    return channel.time;\n  }\n\n  setTime(time) {\n    this.time = Math.max(0, time);\n\n    const channels = this.channels.values();\n    for (const channel of channels) {\n      this._setChannelTime(channel, this.time);\n    }\n\n    const animations = this.animations.values();\n    for (const animationData of animations) {\n      const {animation, channel} = animationData;\n      animation.setTime(this.getTime(channel));\n    }\n  }\n\n  play() {\n    this.playing = true;\n  }\n\n  pause() {\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  reset() {\n    this.setTime(0);\n  }\n\n  attachAnimation(animation, channelHandle) {\n    const animationHandle = animationHandles++;\n\n    this.animations.set(animationHandle, {\n      animation,\n      channel: channelHandle\n    });\n\n    animation.setTime(this.getTime(channelHandle));\n\n    return animationHandle;\n  }\n\n  detachAnimation(handle) {\n    this.animations.delete(handle);\n  }\n\n  update(engineTime) {\n    if (this.playing) {\n      if (this.lastEngineTime === -1) {\n        this.lastEngineTime = engineTime;\n      }\n      this.setTime(this.time + (engineTime - this.lastEngineTime));\n      this.lastEngineTime = engineTime;\n    }\n  }\n\n  _setChannelTime(channel, time) {\n    const offsetTime = time - channel.delay;\n    const totalDuration = channel.duration * channel.repeat;\n    // Note(Tarek): Don't loop on final repeat.\n    if (offsetTime >= totalDuration) {\n      channel.time = channel.duration * channel.rate;\n    } else {\n      channel.time = Math.max(0, offsetTime) % channel.duration;\n      channel.time *= channel.rate;\n    }\n  }\n}\n"],"file":"timeline.js"}