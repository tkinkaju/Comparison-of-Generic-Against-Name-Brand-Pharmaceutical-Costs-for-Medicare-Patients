{"version":3,"sources":["../../../src/webvr/vr-display.js"],"names":["VRDisplay","props","_vrSupported","isSupported","vrFrameData","window","VRFrameData","vrPresenting","vrFrame","addEventListener","_vrDisplayPresentChange","bind","_removeVRButton","options","_addVRButton","vrDisplay","getFrameData","leftProjectionMatrix","leftViewMatrix","rightProjectionMatrix","rightViewMatrix","width","height","displayEye","projectionMatrix","viewMatrix","params","viewport","scissor","scissorTest","submitFrame","renderFrame","requestAnimationFrame","vrButton","canvas","_getCanvas","navigator","getVRDisplays","displays","length","log","info","title","displayName","onclick","_startDisplay","animationLoop","gl","requestPresent","source","isPresenting","style","display","Display"],"mappings":"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","sourcesContent":["import {log} from '@luma.gl/webgl';\nimport Display from './display';\nimport {createEnterVRButton} from './vr-button';\n\nexport default class VRDisplay extends Display {\n  static isSupported() {\n    return (\n      typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window\n    );\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._vrSupported = VRDisplay.isSupported();\n    if (this._vrSupported) {\n      // @ts-expect-error\n      this.vrFrameData = new window.VRFrameData();\n      this.vrPresenting = false;\n      this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', this._vrDisplayPresentChange.bind(this));\n    }\n  }\n\n  delete() {\n    super.delete();\n    this._removeVRButton();\n  }\n\n  getViews(options) {\n    if (this._vrSupported) {\n      this._addVRButton();\n    }\n\n    // Need both vrPresenting and vrFrame\n    // to avoid race conditions when we exit VR\n    // after we schedule an animation frame\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.getFrameData(this.vrFrameData);\n\n      const {\n        leftProjectionMatrix,\n        leftViewMatrix,\n        rightProjectionMatrix,\n        rightViewMatrix\n      } = this.vrFrameData;\n\n      const {width, height} = options;\n\n      return [\n        {\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        },\n        {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }\n      ];\n    }\n\n    return super.getViews(options);\n  }\n\n  submitFrame() {\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.submitFrame();\n      return true;\n    }\n\n    return false;\n  }\n\n  requestAnimationFrame(renderFrame) {\n    if (this.vrPresenting) {\n      this.vrDisplay.requestAnimationFrame(() => {\n        this.vrFrame = true;\n        renderFrame();\n        this.vrFrame = false;\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // PRIVATE\n\n  // TODO: Consider resizing canvas to match vrDisplay.getEyeParameters()\n  // TODO: Maybe allow to select display?\n  async _addVRButton() {\n    if (this.vrButton) {\n      return;\n    }\n\n    const canvas = this._getCanvas();\n    if (!canvas) {\n      return;\n    }\n\n    // @ts-expect-error\n    const displays = await navigator.getVRDisplays();\n    if (displays && displays.length) {\n      log.info(2, 'Found VR Displays', displays)();\n\n      this.vrDisplay = displays[0];\n      this.vrButton = createEnterVRButton({\n        canvas,\n        title: `Enter VR (${this.vrDisplay.displayName})`\n      });\n      this.vrButton.onclick = () => this._startDisplay();\n    }\n  }\n\n  _getCanvas() {\n    return this.animationLoop.canvas || (this.animationLoop.gl && this.animationLoop.gl.canvas);\n  }\n\n  _removeVRButton() {\n    if (this.vrButton) {\n      // TODO\n    }\n  }\n\n  _startDisplay() {\n    // @ts-ignore\n    this.vrDisplay.requestPresent([\n      {\n        source: this._getCanvas()\n      }\n    ]);\n  }\n\n  _vrDisplayPresentChange() {\n    if (this.vrDisplay.isPresenting) {\n      log.info(2, 'Entering VR')();\n\n      this.vrPresenting = true;\n      this.vrButton.style.display = 'none';\n    } else {\n      log.info(2, 'Exiting VR')();\n\n      this.vrPresenting = false;\n      this.vrButton.style.display = 'block';\n    }\n  }\n}\n"],"file":"vr-display.js"}