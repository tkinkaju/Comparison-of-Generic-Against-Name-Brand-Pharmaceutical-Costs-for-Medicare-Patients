{"version":3,"sources":["../../../src/scenegraph/group-node.js"],"names":["GroupNode","props","Array","isArray","children","log","assert","every","child","ScenegraphNode","add","push","indexOf","splice","forEach","delete","removeAll","result","Infinity","traverse","node","worldMatrix","bounds","getBounds","min","max","center","Vector3","divide","transformAsPoint","halfSize","subtract","transformAsVector","v","position","multiply","i","Math","Number","isFinite","visitor","Matrix4","modelMatrix","multiplyRight","matrix"],"mappings":"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","sourcesContent":["import {Matrix4, Vector3} from '@math.gl/core';\nimport {log} from '@luma.gl/webgl';\nimport ScenegraphNode from './scenegraph-node';\n\nexport default class GroupNode extends ScenegraphNode {\n  constructor(props = {}) {\n    props = Array.isArray(props) ? {children: props} : props;\n    const {children = []} = props;\n    log.assert(\n      children.every(child => child instanceof ScenegraphNode),\n      'every child must an instance of ScenegraphNode'\n    );\n    super(props);\n    this.children = children;\n  }\n\n  // Unpacks arrays and nested arrays of children\n  add(...children) {\n    for (const child of children) {\n      if (Array.isArray(child)) {\n        this.add(...child);\n      } else {\n        this.children.push(child);\n      }\n    }\n    return this;\n  }\n\n  remove(child) {\n    const children = this.children;\n    const indexOf = children.indexOf(child);\n    if (indexOf > -1) {\n      children.splice(indexOf, 1);\n    }\n    return this;\n  }\n\n  removeAll() {\n    this.children = [];\n    return this;\n  }\n\n  delete() {\n    this.children.forEach(child => child.delete());\n    this.removeAll();\n    super.delete();\n  }\n\n  getBounds() {\n    /** @type [number[], number[]] */\n    const result = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n\n    this.traverse((node, {worldMatrix}) => {\n      const bounds = node.getBounds();\n      if (!bounds) {\n        return;\n      }\n      const [min, max] = bounds;\n      const center = new Vector3(min).add(max).divide([2, 2, 2]);\n      worldMatrix.transformAsPoint(center, center);\n      const halfSize = new Vector3(max).subtract(min).divide([2, 2, 2]);\n      worldMatrix.transformAsVector(halfSize, halfSize);\n\n      for (let v = 0; v < 8; v++) {\n        // Test all 8 corners of the box\n        const position = new Vector3(v & 0b001 ? -1 : 1, v & 0b010 ? -1 : 1, v & 0b100 ? -1 : 1)\n          .multiply(halfSize)\n          .add(center);\n\n        for (let i = 0; i < 3; i++) {\n          result[0][i] = Math.min(result[0][i], position[i]);\n          result[1][i] = Math.max(result[1][i], position[i]);\n        }\n      }\n    });\n    if (!Number.isFinite(result[0][0])) {\n      return null;\n    }\n    return result;\n  }\n\n  traverse(visitor, {worldMatrix = new Matrix4()} = {}) {\n    const modelMatrix = new Matrix4(worldMatrix).multiplyRight(this.matrix);\n\n    for (const child of this.children) {\n      if (child instanceof GroupNode) {\n        child.traverse(visitor, {worldMatrix: modelMatrix});\n      } else {\n        visitor(child, {worldMatrix: modelMatrix});\n      }\n    }\n  }\n}\n"],"file":"group-node.js"}