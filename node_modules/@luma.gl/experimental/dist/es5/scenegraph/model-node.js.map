{"version":3,"sources":["../../../src/scenegraph/model-node.js"],"names":["ModelNode","gl","props","onBeforeRender","AfterRender","Model","model","_setModelNodeProps","bounds","managedResources","delete","forEach","resource","draw","setUniforms","setAttributes","updateModuleSettings","setProps","ScenegraphNode"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;IAEqBA,S;;;;;AACnB,qBAAYC,EAAZ,EAA4B;AAAA;;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AAAA;AAC1B,8BAAMA,KAAN;AAGA,UAAKC,cAAL,GAAsB,IAAtB;AACA,UAAKC,WAAL,GAAmB,IAAnB;;AAGA,QAAIH,EAAE,YAAYI,aAAlB,EAAyB;AACvB,YAAKC,KAAL,GAAaL,EAAb;;AACA,YAAKM,kBAAL,CAAwBL,KAAxB;AACD,KAHD,MAGO;AACL,YAAKI,KAAL,GAAa,IAAID,aAAJ,CAAUJ,EAAV,EAAcC,KAAd,CAAb;AACD;;AAED,UAAKM,MAAL,GAAc,IAAd;AACA,UAAKC,gBAAL,GAAwBP,KAAK,CAACO,gBAAN,IAA0B,EAAlD;AAhB0B;AAiB3B;;;;WAED,kBAASP,KAAT,EAAgB;AACd,0GAAeA,KAAf;;AACA,WAAKK,kBAAL,CAAwBL,KAAxB;;AACA,aAAO,IAAP;AACD;;;WAED,qBAAY;AACV,aAAO,KAAKM,MAAZ;AACD;;;WAED,mBAAS;AACP,UAAI,KAAKF,KAAT,EAAgB;AACd,aAAKA,KAAL,CAAWI,MAAX;AACA,aAAKJ,KAAL,GAAa,IAAb;AACD;;AAED,WAAKG,gBAAL,CAAsBE,OAAtB,CAA8B,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACF,MAAT,EAAJ;AAAA,OAAtC;AACA,WAAKD,gBAAL,GAAwB,EAAxB;AACD;;;WAGD,gBAAc;AAAA;;AAEZ,aAAO,oBAAKH,KAAL,EAAWO,IAAX,8BAAP;AACD;;;WAED,uBAAqB;AAAA;;AACnB,2BAAKP,KAAL,EAAWQ,WAAX;;AACA,aAAO,IAAP;AACD;;;WAED,yBAAuB;AAAA;;AACrB,2BAAKR,KAAL,EAAWS,aAAX;;AACA,aAAO,IAAP;AACD;;;WAED,gCAA8B;AAAA;;AAC5B,2BAAKT,KAAL,EAAWU,oBAAX;;AACA,aAAO,IAAP;AACD;;;WAID,4BAAmBd,KAAnB,EAA0B;AACxB,WAAKI,KAAL,CAAWW,QAAX,CAAoBf,KAApB;AACD;;;EAjEoCgB,uB","sourcesContent":["import {Model} from '@luma.gl/engine';\nimport ScenegraphNode from './scenegraph-node';\n\nexport default class ModelNode extends ScenegraphNode {\n  constructor(gl, props = {}) {\n    super(props);\n\n    // pverride callbacks to make sure we call them with this\n    this.onBeforeRender = null;\n    this.AfterRender = null;\n\n    // Create new Model or used supplied Model\n    if (gl instanceof Model) {\n      this.model = gl;\n      this._setModelNodeProps(props);\n    } else {\n      this.model = new Model(gl, props);\n    }\n\n    this.bounds = null;\n    this.managedResources = props.managedResources || [];\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this._setModelNodeProps(props);\n    return this;\n  }\n\n  getBounds() {\n    return this.bounds;\n  }\n\n  delete() {\n    if (this.model) {\n      this.model.delete();\n      this.model = null;\n    }\n\n    this.managedResources.forEach(resource => resource.delete());\n    this.managedResources = [];\n  }\n\n  // Forward node methods\n  draw(...args) {\n    // Return value indicates if something was actually drawn\n    return this.model.draw(...args);\n  }\n\n  setUniforms(...args) {\n    this.model.setUniforms(...args);\n    return this;\n  }\n\n  setAttributes(...args) {\n    this.model.setAttributes(...args);\n    return this;\n  }\n\n  updateModuleSettings(...args) {\n    this.model.updateModuleSettings(...args);\n    return this;\n  }\n\n  // PRIVATE\n\n  _setModelNodeProps(props) {\n    this.model.setProps(props);\n  }\n}\n"],"file":"model-node.js"}