{"version":3,"sources":["../../../src/polyfill/polyfill-context.js"],"names":["polyfillContext","gl","luma","polyfilled","initializeExtensions","installPolyfills","WEBGL2_CONTEXT_POLYFILLS","installOverrides","target","target2","globalThis","extensions","EXTENSIONS","getSupportedExtensions","extension","getExtension","Object","keys","WEBGL2_CONTEXT_OVERRIDES","forEach","key","originalFunc","bind","polyfill","polyfills","getOwnPropertyNames","polyfillExtension","defaults","meta","suffix","ext","extKey"],"mappings":"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","sourcesContent":["// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/** @typedef {import('./polyfill-context')} types */\n\nimport {polyfillVertexArrayObject} from './polyfill-vertex-array-object';\nimport {assert} from '../utils/assert';\n\nimport {WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES} from './polyfill-table';\n\n/** @type {types['polyfillContext']} */\nexport function polyfillContext(gl) {\n  // @ts-ignore\n  gl.luma = gl.luma || {};\n  // @ts-ignore\n  const {luma} = gl;\n\n  if (!luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {target: luma, target2: gl});\n    luma.polyfilled = true;\n  }\n\n  // TODO - only supporting a few members\n  /** @type {WebGL2RenderingContext} */\n  // @ts-ignore\n  return gl;\n}\n\n// TODO - is this still required?\n// @ts-ignore\nglobalThis.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  // `getSupportedExtensions` can return null when context is lost.\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n    }\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n"],"file":"polyfill-context.js"}