import { default as ActionTypes } from './action-types';
import { InputStyle, MapStyles, Merge, RGBColor, MapState, VisibleLayerGroups } from '@kepler.gl/types';
/**
 * Add map style from user input to reducer and set it to current style
 * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.
 * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.
 * param {void}
 * @memberof mapStyleActions
 * @public
 */
export declare const addCustomMapStyle: () => {
    type: typeof ActionTypes.ADD_CUSTOM_MAP_STYLE;
};
/** INPUT_MAP_STYLE */
export declare type InputMapStyleUpdaterAction = {
    payload: {
        inputStyle: Partial<InputStyle>;
        mapState?: MapState;
    };
};
/**
 * Input a custom map style object
 * @memberof mapStyleActions
 * @param inputStyle
 * @param inputStyle.url - style url e.g. `'mapbox://styles/heshan/xxxxxyyyyzzz'`
 * @param inputStyle.id - style id e.g. `'custom_style_1'`
 * @param inputStyle.style - actual mapbox style json
 * @param inputStyle.label - style name
 * @param inputStyle.accessToken - mapbox access token
 * @param inputStyle.icon - icon image data url
 * @param [mapState] - mapState is optional
 * @public
 */
export declare const inputMapStyle: (inputStyle: InputMapStyleUpdaterAction['payload']['inputStyle'], mapState?: InputMapStyleUpdaterAction['payload']['mapState']) => Merge<InputMapStyleUpdaterAction, {
    type: typeof ActionTypes.INPUT_MAP_STYLE;
}>;
/** MAP_CONFIG_CHANGE */
export declare type MapConfigChangeUpdaterAction = {
    payload: {
        visibleLayerGroups?: VisibleLayerGroups;
        topLayerGroups?: VisibleLayerGroups;
    };
};
/**
 * Update `visibleLayerGroups`to change layer group visibility
 * @memberof mapStyleActions
 * @param mapStyle new config `{visibleLayerGroups: {label: false, road: true, background: true}}`
 * @public
 */
export declare const mapConfigChange: (mapStyle: MapConfigChangeUpdaterAction['payload']) => Merge<MapConfigChangeUpdaterAction, {
    type: typeof ActionTypes.MAP_CONFIG_CHANGE;
}>;
/** REQUEST_MAP_STYLES */
export declare type RequestMapStylesUpdaterAction = {
    payload: {
        [key: string]: {
            id: string;
            label?: string;
            url: string;
            icon?: string;
            layerGroups?: string;
        };
    };
};
/**
 * Request map style style object based on style.url.
 * @memberof mapStyleActions
 * @public
 */
export declare const requestMapStyles: (mapStyles: RequestMapStylesUpdaterAction['payload']) => Merge<RequestMapStylesUpdaterAction, {
    type: typeof ActionTypes.REQUEST_MAP_STYLES;
}>;
/** LOAD_MAP_STYLES */
export declare type LoadMapStylesUpdaterAction = {
    payload: MapStyles;
};
/**
 * Callback when load map style success
 * @memberof mapStyleActions
 * @param newStyles a `{[id]: style}` mapping
 * @public
 */
export declare const loadMapStyles: (newStyles: LoadMapStylesUpdaterAction['payload']) => Merge<LoadMapStylesUpdaterAction, {
    type: typeof ActionTypes.LOAD_MAP_STYLES;
}>;
/** LOAD_MAP_STYLE_ERR */
export declare type LoadMapStyleErrUpdaterAction = {
    payload: Error;
};
/**
 * Callback when load map style error
 * @memberof mapStyleActions
 * @param error
 * @public
 */
export declare const loadMapStyleErr: (error: LoadMapStyleErrUpdaterAction['payload']) => Merge<LoadMapStyleErrUpdaterAction, {
    type: typeof ActionTypes.LOAD_MAP_STYLE_ERR;
}>;
/** MAP_STYLE_CHANGE */
export declare type MapStyleChangeUpdaterAction = {
    payload: string;
};
/**
 * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`
 * @memberof mapStyleActions
 * @param styleType the style to change to
 * @public
 */
export declare const mapStyleChange: (styleType: MapStyleChangeUpdaterAction['payload']) => Merge<MapStyleChangeUpdaterAction, {
    type: typeof ActionTypes.MAP_STYLE_CHANGE;
}>;
/** LOAD_CUSTOM_MAP_STYLE */
export declare type LoadCustomMapStyleUpdaterAction = {
    payload: {
        icon?: string;
        style?: object;
        error?: Error;
    };
};
/**
 * Callback when a custom map style object is received
 * @memberof mapStyleActions
 * @param customMapStyle
 * @param customMapStyle.icon
 * @param customMapStyle.style
 * @param customMapStyle.error
 * @public
 */
export declare const loadCustomMapStyle: (customMapStyle: LoadCustomMapStyleUpdaterAction['payload']) => Merge<LoadCustomMapStyleUpdaterAction, {
    type: typeof ActionTypes.LOAD_CUSTOM_MAP_STYLE;
}>;
/** SET_3D_BUILDING_COLOR */
export declare type Set3dBuildingColorUpdaterAction = {
    payload: RGBColor;
};
/**
 * Set 3d building layer group color
 * @memberof mapStyleActions
 * @param color - [r, g, b]
 * @public
 */
export declare const set3dBuildingColor: (color: Set3dBuildingColorUpdaterAction['payload']) => Merge<Set3dBuildingColorUpdaterAction, {
    type: typeof ActionTypes.SET_3D_BUILDING_COLOR;
}>;
