// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNewDatasetColor = getNewDatasetColor;
exports.createNewDataEntry = createNewDataEntry;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _lodash = _interopRequireDefault(require("lodash.uniq"));

var _keplerTable = _interopRequireDefault(require("./kepler-table"));

var _utils = require("@kepler.gl/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// apply a color for each dataset
// to use as label colors
var datasetColors = ['#8F2FBF', '#005CFF', '#C06C84', '#F8B195', '#547A82', '#3EACA8', '#A2D4AB'].map(_utils.hexToRgb);
/** @type {typeof import('./dataset-utils').getNewDatasetColor} */

function getNewDatasetColor(datasets) {
  var presetColors = datasetColors.map(String);
  var usedColors = (0, _lodash["default"])(Object.values(datasets).map(function (d) {
    return String(d.color);
  })).filter(function (c) {
    return presetColors.includes(c);
  });

  if (usedColors.length === presetColors.length) {
    // if we already depleted the pool of color
    return _utils.datasetColorMaker.next().value;
  }

  var color = _utils.datasetColorMaker.next().value;

  while (usedColors.includes(String(color))) {
    color = _utils.datasetColorMaker.next().value;
  }

  return color;
}
/**
 * Take datasets payload from addDataToMap, create datasets entry save to visState
 */


function createNewDataEntry(_ref) {
  var info = _ref.info,
      data = _ref.data,
      opts = (0, _objectWithoutProperties2["default"])(_ref, ["info", "data"]);
  var datasets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var validatedData = (0, _utils.validateInputData)(data);

  if (!validatedData) {
    return {};
  }

  info = info || {};
  var color = info.color || getNewDatasetColor(datasets);
  var keplerTable = new _keplerTable["default"](_objectSpread({
    info: info,
    data: validatedData,
    color: color
  }, opts));
  return (0, _defineProperty2["default"])({}, keplerTable.id, keplerTable);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhc2V0LXV0aWxzLnRzIl0sIm5hbWVzIjpbImRhdGFzZXRDb2xvcnMiLCJtYXAiLCJoZXhUb1JnYiIsImdldE5ld0RhdGFzZXRDb2xvciIsImRhdGFzZXRzIiwicHJlc2V0Q29sb3JzIiwiU3RyaW5nIiwidXNlZENvbG9ycyIsIk9iamVjdCIsInZhbHVlcyIsImQiLCJjb2xvciIsImZpbHRlciIsImMiLCJpbmNsdWRlcyIsImxlbmd0aCIsImRhdGFzZXRDb2xvck1ha2VyIiwibmV4dCIsInZhbHVlIiwiY3JlYXRlTmV3RGF0YUVudHJ5IiwiaW5mbyIsImRhdGEiLCJvcHRzIiwidmFsaWRhdGVkRGF0YSIsImtlcGxlclRhYmxlIiwiS2VwbGVyVGFibGUiLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBR0E7Ozs7OztBQUVBO0FBQ0E7QUFDQSxJQUFNQSxhQUFhLEdBQUcsQ0FDcEIsU0FEb0IsRUFFcEIsU0FGb0IsRUFHcEIsU0FIb0IsRUFJcEIsU0FKb0IsRUFLcEIsU0FMb0IsRUFNcEIsU0FOb0IsRUFPcEIsU0FQb0IsRUFRcEJDLEdBUm9CLENBUWhCQyxlQVJnQixDQUF0QjtBQVVBOztBQUNPLFNBQVNDLGtCQUFULENBQTRCQyxRQUE1QixFQUEwRDtBQUMvRCxNQUFNQyxZQUFZLEdBQUdMLGFBQWEsQ0FBQ0MsR0FBZCxDQUFrQkssTUFBbEIsQ0FBckI7QUFDQSxNQUFNQyxVQUFVLEdBQUcsd0JBQUtDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjTCxRQUFkLEVBQXdCSCxHQUF4QixDQUE0QixVQUFBUyxDQUFDO0FBQUEsV0FBSUosTUFBTSxDQUFDSSxDQUFDLENBQUNDLEtBQUgsQ0FBVjtBQUFBLEdBQTdCLENBQUwsRUFBd0RDLE1BQXhELENBQStELFVBQUFDLENBQUM7QUFBQSxXQUNqRlIsWUFBWSxDQUFDUyxRQUFiLENBQXNCRCxDQUF0QixDQURpRjtBQUFBLEdBQWhFLENBQW5COztBQUlBLE1BQUlOLFVBQVUsQ0FBQ1EsTUFBWCxLQUFzQlYsWUFBWSxDQUFDVSxNQUF2QyxFQUErQztBQUM3QztBQUNBLFdBQU9DLHlCQUFrQkMsSUFBbEIsR0FBeUJDLEtBQWhDO0FBQ0Q7O0FBRUQsTUFBSVAsS0FBSyxHQUFHSyx5QkFBa0JDLElBQWxCLEdBQXlCQyxLQUFyQzs7QUFDQSxTQUFPWCxVQUFVLENBQUNPLFFBQVgsQ0FBb0JSLE1BQU0sQ0FBQ0ssS0FBRCxDQUExQixDQUFQLEVBQTJDO0FBQ3pDQSxJQUFBQSxLQUFLLEdBQUdLLHlCQUFrQkMsSUFBbEIsR0FBeUJDLEtBQWpDO0FBQ0Q7O0FBRUQsU0FBT1AsS0FBUDtBQUNEO0FBRUQ7QUFDQTtBQUNBOzs7QUFDTyxTQUFTUSxrQkFBVCxPQUdLO0FBQUEsTUFGVEMsSUFFUyxRQUZUQSxJQUVTO0FBQUEsTUFGSEMsSUFFRyxRQUZIQSxJQUVHO0FBQUEsTUFGTUMsSUFFTjtBQUFBLE1BRFZsQixRQUNVLHVFQURXLEVBQ1g7QUFDVixNQUFNbUIsYUFBYSxHQUFHLDhCQUFrQkYsSUFBbEIsQ0FBdEI7O0FBQ0EsTUFBSSxDQUFDRSxhQUFMLEVBQW9CO0FBQ2xCLFdBQU8sRUFBUDtBQUNEOztBQUVESCxFQUFBQSxJQUFJLEdBQUdBLElBQUksSUFBSSxFQUFmO0FBQ0EsTUFBTVQsS0FBSyxHQUFHUyxJQUFJLENBQUNULEtBQUwsSUFBY1Isa0JBQWtCLENBQUNDLFFBQUQsQ0FBOUM7QUFFQSxNQUFNb0IsV0FBVyxHQUFHLElBQUlDLHVCQUFKO0FBQWlCTCxJQUFBQSxJQUFJLEVBQUpBLElBQWpCO0FBQXVCQyxJQUFBQSxJQUFJLEVBQUVFLGFBQTdCO0FBQTRDWixJQUFBQSxLQUFLLEVBQUxBO0FBQTVDLEtBQXNEVyxJQUF0RCxFQUFwQjtBQUNBLDhDQUNHRSxXQUFXLENBQUNFLEVBRGYsRUFDb0JGLFdBRHBCO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjIgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgdW5pcSBmcm9tICdsb2Rhc2gudW5pcSc7XG5pbXBvcnQgS2VwbGVyVGFibGUsIHtEYXRhc2V0c30gZnJvbSAnLi9rZXBsZXItdGFibGUnO1xuaW1wb3J0IHtQcm90b0RhdGFzZXQsIFJHQkNvbG9yfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcblxuaW1wb3J0IHtoZXhUb1JnYiwgdmFsaWRhdGVJbnB1dERhdGEsIGRhdGFzZXRDb2xvck1ha2VyfSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcblxuLy8gYXBwbHkgYSBjb2xvciBmb3IgZWFjaCBkYXRhc2V0XG4vLyB0byB1c2UgYXMgbGFiZWwgY29sb3JzXG5jb25zdCBkYXRhc2V0Q29sb3JzID0gW1xuICAnIzhGMkZCRicsXG4gICcjMDA1Q0ZGJyxcbiAgJyNDMDZDODQnLFxuICAnI0Y4QjE5NScsXG4gICcjNTQ3QTgyJyxcbiAgJyMzRUFDQTgnLFxuICAnI0EyRDRBQidcbl0ubWFwKGhleFRvUmdiKTtcblxuLyoqIEB0eXBlIHt0eXBlb2YgaW1wb3J0KCcuL2RhdGFzZXQtdXRpbHMnKS5nZXROZXdEYXRhc2V0Q29sb3J9ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV3RGF0YXNldENvbG9yKGRhdGFzZXRzOiBEYXRhc2V0cyk6IFJHQkNvbG9yIHtcbiAgY29uc3QgcHJlc2V0Q29sb3JzID0gZGF0YXNldENvbG9ycy5tYXAoU3RyaW5nKTtcbiAgY29uc3QgdXNlZENvbG9ycyA9IHVuaXEoT2JqZWN0LnZhbHVlcyhkYXRhc2V0cykubWFwKGQgPT4gU3RyaW5nKGQuY29sb3IpKSkuZmlsdGVyKGMgPT5cbiAgICBwcmVzZXRDb2xvcnMuaW5jbHVkZXMoYylcbiAgKTtcblxuICBpZiAodXNlZENvbG9ycy5sZW5ndGggPT09IHByZXNldENvbG9ycy5sZW5ndGgpIHtcbiAgICAvLyBpZiB3ZSBhbHJlYWR5IGRlcGxldGVkIHRoZSBwb29sIG9mIGNvbG9yXG4gICAgcmV0dXJuIGRhdGFzZXRDb2xvck1ha2VyLm5leHQoKS52YWx1ZTtcbiAgfVxuXG4gIGxldCBjb2xvciA9IGRhdGFzZXRDb2xvck1ha2VyLm5leHQoKS52YWx1ZTtcbiAgd2hpbGUgKHVzZWRDb2xvcnMuaW5jbHVkZXMoU3RyaW5nKGNvbG9yKSkpIHtcbiAgICBjb2xvciA9IGRhdGFzZXRDb2xvck1ha2VyLm5leHQoKS52YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBjb2xvcjtcbn1cblxuLyoqXG4gKiBUYWtlIGRhdGFzZXRzIHBheWxvYWQgZnJvbSBhZGREYXRhVG9NYXAsIGNyZWF0ZSBkYXRhc2V0cyBlbnRyeSBzYXZlIHRvIHZpc1N0YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZXdEYXRhRW50cnkoXG4gIHtpbmZvLCBkYXRhLCAuLi5vcHRzfTogUHJvdG9EYXRhc2V0LFxuICBkYXRhc2V0czogRGF0YXNldHMgPSB7fVxuKTogRGF0YXNldHMge1xuICBjb25zdCB2YWxpZGF0ZWREYXRhID0gdmFsaWRhdGVJbnB1dERhdGEoZGF0YSk7XG4gIGlmICghdmFsaWRhdGVkRGF0YSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGluZm8gPSBpbmZvIHx8IHt9O1xuICBjb25zdCBjb2xvciA9IGluZm8uY29sb3IgfHwgZ2V0TmV3RGF0YXNldENvbG9yKGRhdGFzZXRzKTtcblxuICBjb25zdCBrZXBsZXJUYWJsZSA9IG5ldyBLZXBsZXJUYWJsZSh7aW5mbywgZGF0YTogdmFsaWRhdGVkRGF0YSwgY29sb3IsIC4uLm9wdHN9KTtcbiAgcmV0dXJuIHtcbiAgICBba2VwbGVyVGFibGUuaWRdOiBrZXBsZXJUYWJsZVxuICB9O1xufVxuIl19