// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diffUpdateTriggers = diffUpdateTriggers;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));/* eslint-disable guard-for-in */

/**
 *
 * @param {Object} updateTriggers {getPosition: {column}, getData: {filteredIndex}}
 * @param {Object} oldUpdateTriggers
 * @returns {boolean|object} `false` if nothing changed, or `triggerChanged` as an object
 */
function diffUpdateTriggers(updateTriggers) {
  var oldUpdateTriggers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var triggerChanged = {};
  var reason = false;

  for (var triggerName in updateTriggers) {
    var newTriggers = updateTriggers[triggerName] || {};
    var oldTriggers = oldUpdateTriggers[triggerName] || {};
    var diffReason = compareUpdateTrigger(newTriggers, oldTriggers, triggerName);

    if (diffReason) {
      triggerChanged[triggerName] = true;
      reason = triggerChanged;
    }
  }

  return reason;
}

function compareUpdateTrigger(newTriggers, oldTriggers, triggerName) {
  if ((0, _typeof2["default"])(oldTriggers) !== 'object') {
    return oldTriggers === newTriggers ? null : "".concat(triggerName, " changed shallowly");
  }

  for (var _key in oldTriggers) {
    if (!(_key in newTriggers)) {
      return "".concat(triggerName, ".").concat(_key, " deleted");
    } // shallow compare


    if (oldTriggers[_key] !== newTriggers[_key]) {
      return "".concat(triggerName, ".").concat(_key, " changed shallowly");
    }
  }

  for (var _key2 in newTriggers) {
    if (!(_key2 in oldTriggers)) {
      return "".concat(triggerName, ".").concat(_key2, " added");
    }
  }

  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sYXllci11cGRhdGUudHMiXSwibmFtZXMiOlsiZGlmZlVwZGF0ZVRyaWdnZXJzIiwidXBkYXRlVHJpZ2dlcnMiLCJvbGRVcGRhdGVUcmlnZ2VycyIsInRyaWdnZXJDaGFuZ2VkIiwicmVhc29uIiwidHJpZ2dlck5hbWUiLCJuZXdUcmlnZ2VycyIsIm9sZFRyaWdnZXJzIiwiZGlmZlJlYXNvbiIsImNvbXBhcmVVcGRhdGVUcmlnZ2VyIiwia2V5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLGtCQUFULENBQTRCQyxjQUE1QixFQUFvRTtBQUFBLE1BQXhCQyxpQkFBd0IsdUVBQUosRUFBSTtBQUN6RSxNQUFNQyxjQUFxQyxHQUFHLEVBQTlDO0FBQ0EsTUFBSUMsTUFBdUMsR0FBRyxLQUE5Qzs7QUFFQSxPQUFLLElBQU1DLFdBQVgsSUFBMEJKLGNBQTFCLEVBQTBDO0FBQ3hDLFFBQU1LLFdBQVcsR0FBR0wsY0FBYyxDQUFDSSxXQUFELENBQWQsSUFBK0IsRUFBbkQ7QUFDQSxRQUFNRSxXQUFXLEdBQUdMLGlCQUFpQixDQUFDRyxXQUFELENBQWpCLElBQWtDLEVBQXREO0FBQ0EsUUFBTUcsVUFBVSxHQUFHQyxvQkFBb0IsQ0FBQ0gsV0FBRCxFQUFjQyxXQUFkLEVBQTJCRixXQUEzQixDQUF2Qzs7QUFFQSxRQUFJRyxVQUFKLEVBQWdCO0FBQ2RMLE1BQUFBLGNBQWMsQ0FBQ0UsV0FBRCxDQUFkLEdBQThCLElBQTlCO0FBQ0FELE1BQUFBLE1BQU0sR0FBR0QsY0FBVDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0MsTUFBUDtBQUNEOztBQUVELFNBQVNLLG9CQUFULENBQThCSCxXQUE5QixFQUEyQ0MsV0FBM0MsRUFBd0RGLFdBQXhELEVBQXFFO0FBQ25FLE1BQUkseUJBQU9FLFdBQVAsTUFBdUIsUUFBM0IsRUFBcUM7QUFDbkMsV0FBT0EsV0FBVyxLQUFLRCxXQUFoQixHQUE4QixJQUE5QixhQUF3Q0QsV0FBeEMsdUJBQVA7QUFDRDs7QUFFRCxPQUFLLElBQU1LLElBQVgsSUFBa0JILFdBQWxCLEVBQStCO0FBQzdCLFFBQUksRUFBRUcsSUFBRyxJQUFJSixXQUFULENBQUosRUFBMkI7QUFDekIsdUJBQVVELFdBQVYsY0FBeUJLLElBQXpCO0FBQ0QsS0FINEIsQ0FLN0I7OztBQUNBLFFBQUlILFdBQVcsQ0FBQ0csSUFBRCxDQUFYLEtBQXFCSixXQUFXLENBQUNJLElBQUQsQ0FBcEMsRUFBMkM7QUFDekMsdUJBQVVMLFdBQVYsY0FBeUJLLElBQXpCO0FBQ0Q7QUFDRjs7QUFFRCxPQUFLLElBQU1BLEtBQVgsSUFBa0JKLFdBQWxCLEVBQStCO0FBQzdCLFFBQUksRUFBRUksS0FBRyxJQUFJSCxXQUFULENBQUosRUFBMkI7QUFDekIsdUJBQVVGLFdBQVYsY0FBeUJLLEtBQXpCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLElBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMiBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbi8qIGVzbGludC1kaXNhYmxlIGd1YXJkLWZvci1pbiAqL1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdXBkYXRlVHJpZ2dlcnMge2dldFBvc2l0aW9uOiB7Y29sdW1ufSwgZ2V0RGF0YToge2ZpbHRlcmVkSW5kZXh9fVxuICogQHBhcmFtIHtPYmplY3R9IG9sZFVwZGF0ZVRyaWdnZXJzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbnxvYmplY3R9IGBmYWxzZWAgaWYgbm90aGluZyBjaGFuZ2VkLCBvciBgdHJpZ2dlckNoYW5nZWRgIGFzIGFuIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZlVwZGF0ZVRyaWdnZXJzKHVwZGF0ZVRyaWdnZXJzLCBvbGRVcGRhdGVUcmlnZ2VycyA9IHt9KSB7XG4gIGNvbnN0IHRyaWdnZXJDaGFuZ2VkOiB7W2tleTogc3RyaW5nXTogdHJ1ZX0gPSB7fTtcbiAgbGV0IHJlYXNvbjogYm9vbGVhbiB8IHtba2V5OiBzdHJpbmddOiB0cnVlfSA9IGZhbHNlO1xuXG4gIGZvciAoY29uc3QgdHJpZ2dlck5hbWUgaW4gdXBkYXRlVHJpZ2dlcnMpIHtcbiAgICBjb25zdCBuZXdUcmlnZ2VycyA9IHVwZGF0ZVRyaWdnZXJzW3RyaWdnZXJOYW1lXSB8fCB7fTtcbiAgICBjb25zdCBvbGRUcmlnZ2VycyA9IG9sZFVwZGF0ZVRyaWdnZXJzW3RyaWdnZXJOYW1lXSB8fCB7fTtcbiAgICBjb25zdCBkaWZmUmVhc29uID0gY29tcGFyZVVwZGF0ZVRyaWdnZXIobmV3VHJpZ2dlcnMsIG9sZFRyaWdnZXJzLCB0cmlnZ2VyTmFtZSk7XG5cbiAgICBpZiAoZGlmZlJlYXNvbikge1xuICAgICAgdHJpZ2dlckNoYW5nZWRbdHJpZ2dlck5hbWVdID0gdHJ1ZTtcbiAgICAgIHJlYXNvbiA9IHRyaWdnZXJDaGFuZ2VkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWFzb247XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVVcGRhdGVUcmlnZ2VyKG5ld1RyaWdnZXJzLCBvbGRUcmlnZ2VycywgdHJpZ2dlck5hbWUpIHtcbiAgaWYgKHR5cGVvZiBvbGRUcmlnZ2VycyAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb2xkVHJpZ2dlcnMgPT09IG5ld1RyaWdnZXJzID8gbnVsbCA6IGAke3RyaWdnZXJOYW1lfSBjaGFuZ2VkIHNoYWxsb3dseWA7XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBpbiBvbGRUcmlnZ2Vycykge1xuICAgIGlmICghKGtleSBpbiBuZXdUcmlnZ2VycykpIHtcbiAgICAgIHJldHVybiBgJHt0cmlnZ2VyTmFtZX0uJHtrZXl9IGRlbGV0ZWRgO1xuICAgIH1cblxuICAgIC8vIHNoYWxsb3cgY29tcGFyZVxuICAgIGlmIChvbGRUcmlnZ2Vyc1trZXldICE9PSBuZXdUcmlnZ2Vyc1trZXldKSB7XG4gICAgICByZXR1cm4gYCR7dHJpZ2dlck5hbWV9LiR7a2V5fSBjaGFuZ2VkIHNoYWxsb3dseWA7XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBrZXkgaW4gbmV3VHJpZ2dlcnMpIHtcbiAgICBpZiAoIShrZXkgaW4gb2xkVHJpZ2dlcnMpKSB7XG4gICAgICByZXR1cm4gYCR7dHJpZ2dlck5hbWV9LiR7a2V5fSBhZGRlZGA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iXX0=