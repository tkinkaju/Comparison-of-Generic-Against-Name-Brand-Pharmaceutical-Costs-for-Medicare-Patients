import Layer, { LayerBaseConfig, LayerColorConfig, LayerColumn, LayerSizeConfig, LayerStrokeColorConfig } from '../base-layer';
import { default as KeplerTable } from '@kepler.gl/table';
import PointLayerIcon from './point-layer-icon';
import { ColorRange } from '@kepler.gl/constants';
import { Merge, RGBColor, VisConfigBoolean, VisConfigColorRange, VisConfigColorSelect, VisConfigNumber, VisConfigRange } from '@kepler.gl/types';
export declare type PointLayerVisConfigSettings = {
    radius: VisConfigNumber;
    fixedRadius: VisConfigBoolean;
    opacity: VisConfigNumber;
    outline: VisConfigBoolean;
    thickness: VisConfigNumber;
    strokeColor: VisConfigColorSelect;
    colorRange: VisConfigColorRange;
    strokeColorRange: VisConfigColorRange;
    radiusRange: VisConfigRange;
    filled: VisConfigBoolean;
};
export declare type PointLayerColumnsConfig = {
    lat: LayerColumn;
    lng: LayerColumn;
    altitude?: LayerColumn;
};
export declare type PointLayerVisConfig = {
    radius: number;
    fixedRadius: boolean;
    opacity: number;
    outline: boolean;
    thickness: number;
    strokeColor: RGBColor;
    colorRange: ColorRange;
    strokeColorRange: ColorRange;
    radiusRange: [number, number];
    filled: boolean;
};
export declare type PointLayerVisualChannelConfig = LayerColorConfig & LayerSizeConfig & LayerStrokeColorConfig;
export declare type PointLayerConfig = Merge<LayerBaseConfig, {
    columns: PointLayerColumnsConfig;
    visConfig: PointLayerVisConfig;
}> & PointLayerVisualChannelConfig;
export declare type PointLayerData = {
    position: number[];
    index: number;
};
export declare const pointPosAccessor: ({ lat, lng, altitude }: PointLayerColumnsConfig) => (dc: any) => (d: any) => any[];
export declare const pointRequiredColumns: ['lat', 'lng'];
export declare const pointOptionalColumns: ['altitude'];
export declare const pointVisConfigs: {
    radius: 'radius';
    fixedRadius: 'fixedRadius';
    opacity: 'opacity';
    outline: 'outline';
    thickness: 'thickness';
    strokeColor: 'strokeColor';
    colorRange: 'colorRange';
    strokeColorRange: 'strokeColorRange';
    radiusRange: 'radiusRange';
    filled: VisConfigBoolean;
};
export default class PointLayer extends Layer {
    config: PointLayerConfig;
    visConfigSettings: PointLayerVisConfigSettings;
    constructor(props: any);
    get type(): 'point';
    get isAggregated(): false;
    get layerIcon(): typeof PointLayerIcon;
    get requiredLayerColumns(): ["lat", "lng"];
    get optionalColumns(): ["altitude"];
    get columnPairs(): import("../base-layer").ColumnPairs;
    get noneLayerDataAffectingProps(): string[];
    get visualChannels(): {
        color: {
            accessor: string;
            condition: (config: any) => any;
            defaultValue: (config: any) => any;
            property: string;
            field: string;
            scale: string;
            domain: string;
            range: string;
            key: string;
            channelScaleType: string;
            nullValue?: any;
            defaultMeasure?: any;
            getAttributeValue?: ((config: any) => (d: any) => any) | undefined;
            fixed?: any;
            supportedFieldTypes?: ("string" | "boolean" | "date" | "point" | "geojson" | "integer" | "real" | "timestamp")[] | undefined;
            aggregation?: import("../base-layer").VisualChannelAggregation | undefined;
        };
        strokeColor: {
            property: string;
            key: string;
            field: string;
            scale: string;
            domain: string;
            range: string;
            channelScaleType: "color";
            accessor: string;
            condition: (config: any) => any;
            defaultValue: (config: any) => any;
        };
        size: {
            property: string;
            range: string;
            fixed: string;
            channelScaleType: string;
            accessor: string;
            defaultValue: number;
            field: string;
            scale: string;
            domain: string;
            key: string;
            nullValue?: any;
            defaultMeasure?: any;
            condition?: ((config: any) => boolean) | undefined;
            getAttributeValue?: ((config: any) => (d: any) => any) | undefined;
            supportedFieldTypes?: ("string" | "boolean" | "date" | "point" | "geojson" | "integer" | "real" | "timestamp")[] | undefined;
            aggregation?: import("../base-layer").VisualChannelAggregation | undefined;
        };
    };
    setInitialLayerConfig(dataset: any): this;
    static findDefaultLayerProps({ fieldPairs }: KeplerTable): {
        props: {
            label: string;
            color?: RGBColor | undefined;
            isVisible?: boolean | undefined;
            columns?: PointLayerColumnsConfig | undefined;
        }[];
    };
    getDefaultLayerConfig(props?: {}): {
        strokeColorField: null;
        strokeColorDomain: number[];
        strokeColorScale: string;
        dataId: string | null;
        label: string;
        color: RGBColor;
        columns: import("../base-layer").LayerColumns;
        isVisible: boolean;
        isConfigActive: boolean;
        highlightColor: RGBColor | import("@kepler.gl/types").RGBAColor;
        hidden: boolean;
        visConfig: import("@kepler.gl/types").LayerVisConfig;
        textLabel: import("@kepler.gl/types").LayerTextLabel[];
        colorUI: {
            color: import("@kepler.gl/types").ColorUI;
            colorRange: import("@kepler.gl/types").ColorUI;
        };
        animation: {
            enabled: boolean;
            domain?: null | undefined;
        };
        colorField?: import("../base-layer").VisualChannelField | undefined;
        colorDomain?: import("../base-layer").VisualChannelDomain | undefined;
        colorScale?: "ordinal" | "quantile" | "quantize" | "linear" | "sqrt" | "log" | "point" | undefined;
        sizeDomain?: import("../base-layer").VisualChannelDomain | undefined;
        sizeScale?: "ordinal" | "quantile" | "quantize" | "linear" | "sqrt" | "log" | "point" | undefined;
        sizeField?: import("../base-layer").VisualChannelField | undefined;
    };
    calculateDataAttribute({ filteredIndex }: KeplerTable, getPosition: any): PointLayerData[];
    formatLayerData(datasets: any, oldLayerData: any): {};
    updateLayerMeta(dataContainer: any): void;
    renderLayer(opts: any): any[];
}
