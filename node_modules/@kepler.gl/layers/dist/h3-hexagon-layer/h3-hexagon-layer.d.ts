/// <reference types="deck.gl" />
/// <reference types="@danmarshall/deckgl-typings/deck.gl__geo-layers" />
import Layer, { LayerBaseConfig, LayerColorConfig, LayerColumn, LayerCoverageConfig, LayerSizeConfig } from '../base-layer';
import { GeoJsonLayer } from '@deck.gl/layers';
import { H3HexagonLayer } from '@deck.gl/geo-layers';
import { Centroid, DataContainerInterface } from '@kepler.gl/utils';
import H3HexagonLayerIcon from './h3-hexagon-layer-icon';
import { ColorRange } from '@kepler.gl/constants';
import { VisConfigBoolean, VisConfigColorRange, VisConfigNumber, VisConfigRange, Merge } from '@kepler.gl/types';
import { KeplerTable } from '@kepler.gl/table';
export declare type HexagonIdLayerColumnsConfig = {
    hex_id: LayerColumn;
};
export declare type HexagonIdLayerVisConfigSettings = {
    opacity: VisConfigNumber;
    colorRange: VisConfigColorRange;
    coverage: VisConfigNumber;
    enable3d: VisConfigBoolean;
    sizeRange: VisConfigRange;
    coverageRange: VisConfigRange;
    elevationScale: VisConfigNumber;
    enableElevationZoomFactor: VisConfigBoolean;
};
export declare type HexagonIdLayerVisConfig = {
    opacity: number;
    colorRange: ColorRange;
    coverage: number;
    enable3d: boolean;
    sizeRange: [number, number];
    coverageRange: [number, number];
    elevationScale: number;
    enableElevationZoomFactor: boolean;
};
export declare type HexagonIdLayerVisualChannelConfig = LayerColorConfig & LayerSizeConfig & LayerCoverageConfig;
export declare type HexagonIdLayerConfig = Merge<LayerBaseConfig, {
    columns: HexagonIdLayerColumnsConfig;
    visConfig: HexagonIdLayerVisConfig;
}> & HexagonIdLayerVisualChannelConfig;
export declare type HexagonIdLayerData = {
    index: number;
    id: any;
    centroid: Centroid;
};
export declare const hexIdRequiredColumns: ['hex_id'];
export declare const hexIdAccessor: ({ hex_id }: HexagonIdLayerColumnsConfig) => (dc: DataContainerInterface) => (d: any) => any;
export declare const defaultElevation = 500;
export declare const defaultCoverage = 1;
export declare const HexagonIdVisConfigs: {
    opacity: 'opacity';
    colorRange: 'colorRange';
    coverage: 'coverage';
    enable3d: 'enable3d';
    sizeRange: 'elevationRange';
    coverageRange: 'coverageRange';
    elevationScale: 'elevationScale';
    enableElevationZoomFactor: 'enableElevationZoomFactor';
};
export default class HexagonIdLayer extends Layer {
    dataToFeature: {
        centroids: Centroid[];
    };
    config: HexagonIdLayerConfig;
    visConfigSettings: HexagonIdLayerVisConfigSettings;
    constructor(props: any);
    get type(): 'hexagonId';
    get name(): 'H3';
    get requiredLayerColumns(): ["hex_id"];
    get layerIcon(): typeof H3HexagonLayerIcon;
    get visualChannels(): {
        color: {
            accessor: string;
            property: string;
            field: string;
            scale: string;
            domain: string;
            range: string;
            key: string;
            channelScaleType: string;
            nullValue?: any;
            defaultMeasure?: any;
            condition?: ((config: any) => boolean) | undefined;
            getAttributeValue?: ((config: any) => (d: any) => any) | undefined;
            defaultValue?: any;
            fixed?: any;
            supportedFieldTypes?: ("string" | "boolean" | "date" | "point" | "geojson" | "integer" | "real" | "timestamp")[] | undefined;
            aggregation?: import("../base-layer").VisualChannelAggregation | undefined;
        };
        size: {
            property: string;
            accessor: string;
            nullValue: number;
            condition: (config: any) => any;
            defaultValue: number;
            field: string;
            scale: string;
            domain: string;
            range: string;
            key: string;
            channelScaleType: string;
            defaultMeasure?: any;
            getAttributeValue?: ((config: any) => (d: any) => any) | undefined;
            fixed?: any;
            supportedFieldTypes?: ("string" | "boolean" | "date" | "point" | "geojson" | "integer" | "real" | "timestamp")[] | undefined;
            aggregation?: import("../base-layer").VisualChannelAggregation | undefined;
        };
        coverage: {
            property: string;
            field: string;
            scale: string;
            domain: string;
            range: string;
            key: string;
            channelScaleType: "radius";
            accessor: string;
            nullValue: number;
            defaultValue: number;
        };
    };
    setInitialLayerConfig(dataset: any): this;
    static findDefaultLayerProps({ fields, dataContainer }: KeplerTable): {
        props: any;
    };
    getDefaultLayerConfig(props?: {}): {
        coverageField: null;
        coverageDomain: number[];
        coverageScale: string;
        dataId: string | null;
        label: string;
        color: import("@kepler.gl/types").RGBColor;
        columns: import("../base-layer").LayerColumns;
        isVisible: boolean;
        isConfigActive: boolean;
        highlightColor: import("@kepler.gl/types").RGBColor | import("@kepler.gl/types").RGBAColor;
        hidden: boolean;
        visConfig: import("@kepler.gl/types").LayerVisConfig;
        textLabel: import("@kepler.gl/types").LayerTextLabel[];
        colorUI: {
            color: import("@kepler.gl/types").ColorUI;
            colorRange: import("@kepler.gl/types").ColorUI;
        };
        animation: {
            enabled: boolean;
            domain?: null | undefined;
        };
        colorField?: import("../base-layer").VisualChannelField | undefined;
        colorDomain?: import("../base-layer").VisualChannelDomain | undefined;
        colorScale?: "ordinal" | "quantile" | "quantize" | "linear" | "sqrt" | "log" | "point" | undefined;
        sizeDomain?: import("../base-layer").VisualChannelDomain | undefined;
        sizeScale?: "ordinal" | "quantile" | "quantize" | "linear" | "sqrt" | "log" | "point" | undefined;
        sizeField?: import("../base-layer").VisualChannelField | undefined;
    };
    calculateDataAttribute({ dataContainer, filteredIndex }: KeplerTable, getHexId: any): HexagonIdLayerData[];
    formatLayerData(datasets: any, oldLayerData: any, opt?: {}): {};
    updateLayerMeta(dataContainer: any, getHexId: any): void;
    renderLayer(opts: any): (H3HexagonLayer<unknown, import("@deck.gl/geo-layers/h3-layers/h3-hexagon-layer").H3HexagonLayerProps<unknown>> | GeoJsonLayer<unknown, {
        data: ({
            geometry: {
                coordinates: number[][];
                type: string;
            };
            properties: any;
        } | null)[];
        getLineColor: import("@kepler.gl/types").RGBColor | import("@kepler.gl/types").RGBAColor;
        lineWidthScale: number;
        wrapLongitude: false;
        id: string;
        pickable: boolean;
        coordinateSystem: number;
    }>)[];
}
