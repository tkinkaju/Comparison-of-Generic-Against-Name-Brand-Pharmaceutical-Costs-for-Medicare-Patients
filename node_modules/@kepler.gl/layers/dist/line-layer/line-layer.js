// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.lineVisConfigs = exports.lineColumnLabels = exports.lineOptionalColumns = exports.lineRequiredColumns = exports.linePosAccessor = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extensions = require("@deck.gl/extensions");

var _deckglLayers = require("@kepler.gl/deckgl-layers");

var _lineLayerIcon = _interopRequireDefault(require("./line-layer-icon"));

var _arcLayer = _interopRequireDefault(require("../arc-layer/arc-layer"));

var _constants = require("@kepler.gl/constants");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var linePosAccessor = function linePosAccessor(_ref) {
  var lat0 = _ref.lat0,
      lng0 = _ref.lng0,
      lat1 = _ref.lat1,
      lng1 = _ref.lng1,
      alt0 = _ref.alt0,
      alt1 = _ref.alt1;
  return function (dc) {
    return function (d) {
      return [dc.valueAt(d.index, lng0.fieldIdx), dc.valueAt(d.index, lat0.fieldIdx), alt0 && alt0.fieldIdx > -1 ? dc.valueAt(d.index, alt0.fieldIdx) : 0, dc.valueAt(d.index, lng1.fieldIdx), dc.valueAt(d.index, lat1.fieldIdx), alt1 && (alt1 === null || alt1 === void 0 ? void 0 : alt1.fieldIdx) > -1 ? dc.valueAt(d.index, alt1.fieldIdx) : 0];
    };
  };
};

exports.linePosAccessor = linePosAccessor;
var lineRequiredColumns = ['lat0', 'lng0', 'lat1', 'lng1'];
exports.lineRequiredColumns = lineRequiredColumns;
var lineOptionalColumns = ['alt0', 'alt1'];
exports.lineOptionalColumns = lineOptionalColumns;
var lineColumnLabels = {
  lat0: 'arc.lat0',
  lng0: 'arc.lng0',
  lat1: 'arc.lat1',
  lng1: 'arc.lng1',
  alt0: 'line.alt0',
  alt1: 'line.alt1'
};
exports.lineColumnLabels = lineColumnLabels;
var lineVisConfigs = {
  opacity: 'opacity',
  thickness: 'thickness',
  colorRange: 'colorRange',
  sizeRange: 'strokeWidthRange',
  targetColor: 'targetColor',
  elevationScale: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.elevationScale), {}, {
    defaultValue: 1
  })
};
exports.lineVisConfigs = lineVisConfigs;

var LineLayer = /*#__PURE__*/function (_ArcLayer) {
  (0, _inherits2["default"])(LineLayer, _ArcLayer);

  var _super = _createSuper(LineLayer);

  function LineLayer(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, LineLayer);
    _this = _super.call(this, props);

    _this.registerVisConfig(lineVisConfigs);

    _this.getPositionAccessor = function (dataContainer) {
      return linePosAccessor(_this.config.columns)(dataContainer);
    };

    return _this;
  }

  (0, _createClass2["default"])(LineLayer, [{
    key: "type",
    get: function get() {
      return 'line';
    }
  }, {
    key: "layerIcon",
    get: function get() {
      return _lineLayerIcon["default"];
    }
  }, {
    key: "requiredLayerColumns",
    get: function get() {
      return lineRequiredColumns;
    }
  }, {
    key: "optionalColumns",
    get: function get() {
      return lineOptionalColumns;
    }
  }, {
    key: "columnLabels",
    get: function get() {
      return lineColumnLabels;
    }
  }, {
    key: "visualChannels",
    get: function get() {
      var visualChannels = (0, _get2["default"])((0, _getPrototypeOf2["default"])(LineLayer.prototype), "visualChannels", this);
      return _objectSpread(_objectSpread({}, visualChannels), {}, {
        sourceColor: _objectSpread(_objectSpread({}, visualChannels.sourceColor), {}, {
          accessor: 'getColor'
        })
      });
    }
  }, {
    key: "renderLayer",
    value: function renderLayer(opts) {
      var data = opts.data,
          gpuFilter = opts.gpuFilter,
          objectHovered = opts.objectHovered,
          interactionConfig = opts.interactionConfig;
      var layerProps = {
        widthScale: this.config.visConfig.thickness * _constants.PROJECTED_PIXEL_SIZE_MULTIPLIER,
        elevationScale: this.config.visConfig.elevationScale
      };

      var updateTriggers = _objectSpread({
        getPosition: this.config.columns,
        getFilterValue: gpuFilter.filterValueUpdateTriggers
      }, this.getVisualChannelUpdateTriggers());

      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);
      var hoveredObject = this.hasHoveredObject(objectHovered);
      return [// base layer
      new _deckglLayers.EnhancedLineLayer(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), this.getBrushingExtensionProps(interactionConfig, 'source_target')), data), layerProps), {}, {
        updateTriggers: updateTriggers,
        extensions: [].concat((0, _toConsumableArray2["default"])(defaultLayerProps.extensions), [new _extensions.BrushingExtension()])
      }))].concat((0, _toConsumableArray2["default"])(hoveredObject ? [new _deckglLayers.EnhancedLineLayer(_objectSpread(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), layerProps), {}, {
        data: [hoveredObject],
        getColor: this.config.highlightColor,
        getTargetColor: this.config.highlightColor,
        getWidth: data.getWidth
      }))] : []));
    }
  }], [{
    key: "findDefaultLayerProps",
    value: function findDefaultLayerProps(_ref2) {
      var _ref2$fieldPairs = _ref2.fieldPairs,
          fieldPairs = _ref2$fieldPairs === void 0 ? [] : _ref2$fieldPairs;

      if (fieldPairs.length < 2) {
        return {
          props: []
        };
      }

      var props = {
        // connect the first two point layer with line
        columns: {
          lat0: fieldPairs[0].pair.lat,
          lng0: fieldPairs[0].pair.lng,
          alt0: {
            value: null,
            fieldIdx: -1,
            optional: true
          },
          lat1: fieldPairs[1].pair.lat,
          lng1: fieldPairs[1].pair.lng,
          alt1: {
            value: null,
            fieldIdx: -1,
            optional: true
          }
        },
        label: "".concat(fieldPairs[0].defaultName, " -> ").concat(fieldPairs[1].defaultName, " line")
      };
      return {
        props: [props]
      };
    }
  }]);
  return LineLayer;
}(_arcLayer["default"]);

exports["default"] = LineLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saW5lLWxheWVyL2xpbmUtbGF5ZXIudHMiXSwibmFtZXMiOlsibGluZVBvc0FjY2Vzc29yIiwibGF0MCIsImxuZzAiLCJsYXQxIiwibG5nMSIsImFsdDAiLCJhbHQxIiwiZGMiLCJkIiwidmFsdWVBdCIsImluZGV4IiwiZmllbGRJZHgiLCJsaW5lUmVxdWlyZWRDb2x1bW5zIiwibGluZU9wdGlvbmFsQ29sdW1ucyIsImxpbmVDb2x1bW5MYWJlbHMiLCJsaW5lVmlzQ29uZmlncyIsIm9wYWNpdHkiLCJ0aGlja25lc3MiLCJjb2xvclJhbmdlIiwic2l6ZVJhbmdlIiwidGFyZ2V0Q29sb3IiLCJlbGV2YXRpb25TY2FsZSIsIkxBWUVSX1ZJU19DT05GSUdTIiwiZGVmYXVsdFZhbHVlIiwiTGluZUxheWVyIiwicHJvcHMiLCJyZWdpc3RlclZpc0NvbmZpZyIsImdldFBvc2l0aW9uQWNjZXNzb3IiLCJkYXRhQ29udGFpbmVyIiwiY29uZmlnIiwiY29sdW1ucyIsIkxpbmVMYXllckljb24iLCJ2aXN1YWxDaGFubmVscyIsInNvdXJjZUNvbG9yIiwiYWNjZXNzb3IiLCJvcHRzIiwiZGF0YSIsImdwdUZpbHRlciIsIm9iamVjdEhvdmVyZWQiLCJpbnRlcmFjdGlvbkNvbmZpZyIsImxheWVyUHJvcHMiLCJ3aWR0aFNjYWxlIiwidmlzQ29uZmlnIiwiUFJPSkVDVEVEX1BJWEVMX1NJWkVfTVVMVElQTElFUiIsInVwZGF0ZVRyaWdnZXJzIiwiZ2V0UG9zaXRpb24iLCJnZXRGaWx0ZXJWYWx1ZSIsImZpbHRlclZhbHVlVXBkYXRlVHJpZ2dlcnMiLCJnZXRWaXN1YWxDaGFubmVsVXBkYXRlVHJpZ2dlcnMiLCJkZWZhdWx0TGF5ZXJQcm9wcyIsImdldERlZmF1bHREZWNrTGF5ZXJQcm9wcyIsImhvdmVyZWRPYmplY3QiLCJoYXNIb3ZlcmVkT2JqZWN0IiwiRW5oYW5jZWRMaW5lTGF5ZXIiLCJnZXRCcnVzaGluZ0V4dGVuc2lvblByb3BzIiwiZXh0ZW5zaW9ucyIsIkJydXNoaW5nRXh0ZW5zaW9uIiwiZ2V0RGVmYXVsdEhvdmVyTGF5ZXJQcm9wcyIsImdldENvbG9yIiwiaGlnaGxpZ2h0Q29sb3IiLCJnZXRUYXJnZXRDb2xvciIsImdldFdpZHRoIiwiZmllbGRQYWlycyIsImxlbmd0aCIsInBhaXIiLCJsYXQiLCJsbmciLCJ2YWx1ZSIsIm9wdGlvbmFsIiwibGFiZWwiLCJkZWZhdWx0TmFtZSIsIkFyY0xheWVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7Ozs7O0FBZ0RPLElBQU1BLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0I7QUFBQSxNQUFFQyxJQUFGLFFBQUVBLElBQUY7QUFBQSxNQUFRQyxJQUFSLFFBQVFBLElBQVI7QUFBQSxNQUFjQyxJQUFkLFFBQWNBLElBQWQ7QUFBQSxNQUFvQkMsSUFBcEIsUUFBb0JBLElBQXBCO0FBQUEsTUFBMEJDLElBQTFCLFFBQTBCQSxJQUExQjtBQUFBLE1BQWdDQyxJQUFoQyxRQUFnQ0EsSUFBaEM7QUFBQSxTQUFrRSxVQUMvRkMsRUFEK0Y7QUFBQSxXQUU1RixVQUFBQyxDQUFDO0FBQUEsYUFBSSxDQUNSRCxFQUFFLENBQUNFLE9BQUgsQ0FBV0QsQ0FBQyxDQUFDRSxLQUFiLEVBQW9CUixJQUFJLENBQUNTLFFBQXpCLENBRFEsRUFFUkosRUFBRSxDQUFDRSxPQUFILENBQVdELENBQUMsQ0FBQ0UsS0FBYixFQUFvQlQsSUFBSSxDQUFDVSxRQUF6QixDQUZRLEVBR1JOLElBQUksSUFBSUEsSUFBSSxDQUFDTSxRQUFMLEdBQWdCLENBQUMsQ0FBekIsR0FBNkJKLEVBQUUsQ0FBQ0UsT0FBSCxDQUFXRCxDQUFDLENBQUNFLEtBQWIsRUFBb0JMLElBQUksQ0FBQ00sUUFBekIsQ0FBN0IsR0FBa0UsQ0FIMUQsRUFJUkosRUFBRSxDQUFDRSxPQUFILENBQVdELENBQUMsQ0FBQ0UsS0FBYixFQUFvQk4sSUFBSSxDQUFDTyxRQUF6QixDQUpRLEVB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RCxVQUFVLENBQUMsQ0FBRCxDQUFWLENBQWNFLElBQWQsQ0FBbUJDLEdBRGxCO0FBRVAvRCxVQUFBQSxJQUFJLEVBQUU0RCxVQUFVLENBQUMsQ0FBRCxDQUFWLENBQWNFLElBQWQsQ0FBbUJFLEdBRmxCO0FBR1A3RCxVQUFBQSxJQUFJLEVBQUU7QUFBQzhELFlBQUFBLEtBQUssRUFBRSxJQUFSO0FBQWN4RCxZQUFBQSxRQUFRLEVBQUUsQ0FBQyxDQUF6QjtBQUE0QnlELFlBQUFBLFFBQVEsRUFBRTtBQUF0QyxXQUhDO0FBSVBqRSxVQUFBQSxJQUFJLEVBQUUyRCxVQUFVLENBQUMsQ0FBRCxDQUFWLENBQWNFLElBQWQsQ0FBbUJDLEdBSmxCO0FBS1A3RCxVQUFBQSxJQUFJLEVBQUUwRCxVQUFVLENBQUMsQ0FBRCxDQUFWLENBQWNFLElBQWQsQ0FBbUJFLEdBTGxCO0FBTVA1RCxVQUFBQSxJQUFJLEVBQUU7QUFBQzZELFlBQUFBLEtBQUssRUFBRSxJQUFSO0FBQWN4RCxZQUFBQSxRQUFRLEVBQUUsQ0FBQyxDQUF6QjtBQUE0QnlELFlBQUFBLFFBQVEsRUFBRTtBQUF0QztBQU5DLFNBRnFEO0FBVTlEQyxRQUFBQSxLQUFLLFlBQUtQLFVBQVUsQ0FBQyxDQUFELENBQVYsQ0FBY1EsV0FBbkIsaUJBQXFDUixVQUFVLENBQUMsQ0FBRCxDQUFWLENBQWNRLFdBQW5EO0FBVnlELE9BQWhFO0FBYUEsYUFBTztBQUFDN0MsUUFBQUEsS0FBSyxFQUFFLENBQUNBLEtBQUQ7QUFBUixPQUFQO0FBQ0Q7OztFQTdEb0M4QyxvQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMiBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7QnJ1c2hpbmdFeHRlbnNpb259IGZyb20gJ0BkZWNrLmdsL2V4dGVuc2lvbnMnO1xuXG5pbXBvcnQge0VuaGFuY2VkTGluZUxheWVyfSBmcm9tICdAa2VwbGVyLmdsL2RlY2tnbC1sYXllcnMnO1xuaW1wb3J0IExpbmVMYXllckljb24gZnJvbSAnLi9saW5lLWxheWVyLWljb24nO1xuaW1wb3J0IEFyY0xheWVyLCB7QXJjTGF5ZXJDb25maWd9IGZyb20gJy4uL2FyYy1sYXllci9hcmMtbGF5ZXInO1xuaW1wb3J0IHtMYXllckNvbHVtbn0gZnJvbSAnLi4vYmFzZS1sYXllcic7XG5pbXBvcnQge1xuICBMQVlFUl9WSVNfQ09ORklHUyxcbiAgQ29sb3JSYW5nZSxcbiAgUFJPSkVDVEVEX1BJWEVMX1NJWkVfTVVMVElQTElFUlxufSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge1xuICBNZXJnZSxcbiAgUkdCQ29sb3IsXG4gIFZpc0NvbmZpZ0NvbG9yUmFuZ2UsXG4gIFZpc0NvbmZpZ0NvbG9yU2VsZWN0LFxuICBWaXNDb25maWdOdW1iZXIsXG4gIFZpc0NvbmZpZ1JhbmdlXG59IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IHtkZWZhdWx0IGFzIEtlcGxlclRhYmxlfSBmcm9tICdAa2VwbGVyLmdsL3RhYmxlJztcbmltcG9ydCB7RGF0YUNvbnRhaW5lckludGVyZmFjZX0gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5cbmV4cG9ydCB0eXBlIExpbmVMYXllclZpc0NvbmZpZ1NldHRpbmdzID0ge1xuICBvcGFjaXR5OiBWaXNDb25maWdOdW1iZXI7XG4gIHRoaWNrbmVzczogVmlzQ29uZmlnTnVtYmVyO1xuICBjb2xvclJhbmdlOiBWaXNDb25maWdDb2xvclJhbmdlO1xuICBzaXplUmFuZ2U6IFZpc0NvbmZpZ1JhbmdlO1xuICB0YXJnZXRDb2xvcjogVmlzQ29uZmlnQ29sb3JTZWxlY3Q7XG4gIGVsZXZhdGlvblNjYWxlOiBWaXNDb25maWdOdW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBMaW5lTGF5ZXJDb2x1bW5zQ29uZmlnID0ge1xuICBsYXQwOiBMYXllckNvbHVtbjtcbiAgbG5nMDogTGF5ZXJDb2x1bW47XG4gIGxhdDE6IExheWVyQ29sdW1uO1xuICBsbmcxOiBMYXllckNvbHVtbjtcbiAgYWx0MD86IExheWVyQ29sdW1uO1xuICBhbHQxPzogTGF5ZXJDb2x1bW47XG59O1xuXG5leHBvcnQgdHlwZSBMaW5lTGF5ZXJWaXNDb25maWcgPSB7XG4gIGNvbG9yUmFuZ2U6IENvbG9yUmFuZ2U7XG4gIG9wYWNpdHk6IG51bWJlcjtcbiAgc2l6ZVJhbmdlOiBbbnVtYmVyLCBudW1iZXJdO1xuICB0YXJnZXRDb2xvcjogUkdCQ29sb3I7XG4gIHRoaWNrbmVzczogbnVtYmVyO1xuICBlbGV2YXRpb25TY2FsZTogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgTGluZUxheWVyQ29uZmlnID0gTWVyZ2U8XG4gIEFyY0xheWVyQ29uZmlnLFxuICB7Y29sdW1uczogTGluZUxheWVyQ29sdW1uc0NvbmZpZzsgdmlzQ29uZmlnOiBMaW5lTGF5ZXJWaXNDb25maWd9XG4+O1xuXG5leHBvcnQgY29uc3QgbGluZVBvc0FjY2Vzc29yID0gKHtsYXQwLCBsbmcwLCBsYXQxLCBsbmcxLCBhbHQwLCBhbHQxfTogTGluZUxheWVyQ29sdW1uc0NvbmZpZykgPT4gKFxuICBkYzogRGF0YUNvbnRhaW5lckludGVyZmFjZVxuKSA9PiBkID0+IFtcbiAgZGMudmFsdWVBdChkLmluZGV4LCBsbmcwLmZpZWxkSWR4KSxcbiAgZGMudmFsdWVBdChkLmluZGV4LCBsYXQwLmZpZWxkSWR4KSxcbiAgYWx0MCAmJiBhbHQwLmZpZWxkSWR4ID4gLTEgPyBkYy52YWx1ZUF0KGQuaW5kZXgsIGFsdDAuZmllbGRJZHgpIDogMCxcbiAgZGMudmFsdWVBdChkLmluZGV4LCBsbmcxLmZpZWxkSWR4KSxcbiAgZGMudmFsdWVBdChkLmluZGV4LCBsYXQxLmZpZWxkSWR4KSxcbiAgYWx0MSAmJiBhbHQxPy5maWVsZElkeCA+IC0xID8gZGMudmFsdWVBdChkLmluZGV4LCBhbHQxLmZpZWxkSWR4KSA6IDBcbl07XG5cbmV4cG9ydCBjb25zdCBsaW5lUmVxdWlyZWRDb2x1bW5zOiBbJ2xhdDAnLCAnbG5nMCcsICdsYXQxJywgJ2xuZzEnXSA9IFtcbiAgJ2xhdDAnLFxuICAnbG5nMCcsXG4gICdsYXQxJyxcbiAgJ2xuZzEnXG5dO1xuZXhwb3J0IGNvbnN0IGxpbmVPcHRpb25hbENvbHVtbnM6IFsnYWx0MCcsICdhbHQxJ10gPSBbJ2FsdDAnLCAnYWx0MSddO1xuXG5leHBvcnQgY29uc3QgbGluZUNvbHVtbkxhYmVscyA9IHtcbiAgbGF0MDogJ2FyYy5sYXQwJyxcbiAgbG5nMDogJ2FyYy5sbmcwJyxcbiAgbGF0MTogJ2FyYy5sYXQxJyxcbiAgbG5nMTogJ2FyYy5sbmcxJyxcbiAgYWx0MDogJ2xpbmUuYWx0MCcsXG4gIGFsdDE6ICdsaW5lLmFsdDEnXG59O1xuXG5leHBvcnQgY29uc3QgbGluZVZpc0NvbmZpZ3M6IHtcbiAgb3BhY2l0eTogJ29wYWNpdHknO1xuICB0aGlja25lc3M6ICd0aGlja25lc3MnO1xuICBjb2xvclJhbmdlOiAnY29sb3JSYW5nZSc7XG4gIHNpemVSYW5nZTogJ3N0cm9rZVdpZHRoUmFuZ2UnO1xuICB0YXJnZXRDb2xvcjogJ3RhcmdldENvbG9yJztcbiAgZWxldmF0aW9uU2NhbGU6IFZpc0NvbmZpZ051bWJlcjtcbn0gPSB7XG4gIG9wYWNpdHk6ICdvcGFjaXR5JyxcbiAgdGhpY2tuZXNzOiAndGhpY2tuZXNzJyxcbiAgY29sb3JSYW5nZTogJ2NvbG9yUmFuZ2UnLFxuICBzaXplUmFuZ2U6ICdzdHJva2VXaWR0aFJhbmdlJyxcbiAgdGFyZ2V0Q29sb3I6ICd0YXJnZXRDb2xvcicsXG4gIGVsZXZhdGlvblNjYWxlOiB7XG4gICAgLi4uTEFZRVJfVklTX0NPTkZJR1MuZWxldmF0aW9uU2NhbGUsXG4gICAgZGVmYXVsdFZhbHVlOiAxXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmVMYXllciBleHRlbmRzIEFyY0xheWVyIHtcbiAgZGVjbGFyZSB2aXNDb25maWdTZXR0aW5nczogTGluZUxheWVyVmlzQ29uZmlnU2V0dGluZ3M7XG4gIGRlY2xhcmUgY29uZmlnOiBMaW5lTGF5ZXJDb25maWc7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyVmlzQ29uZmlnKGxpbmVWaXNDb25maWdzKTtcbiAgICB0aGlzLmdldFBvc2l0aW9uQWNjZXNzb3IgPSAoZGF0YUNvbnRhaW5lcjogRGF0YUNvbnRhaW5lckludGVyZmFjZSkgPT5cbiAgICAgIGxpbmVQb3NBY2Nlc3Nvcih0aGlzLmNvbmZpZy5jb2x1bW5zKShkYXRhQ29udGFpbmVyKTtcbiAgfVxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiAnbGluZSc7XG4gIH1cblxuICBnZXQgbGF5ZXJJY29uKCkge1xuICAgIHJldHVybiBMaW5lTGF5ZXJJY29uO1xuICB9XG5cbiAgZ2V0IHJlcXVpcmVkTGF5ZXJDb2x1bW5zKCkge1xuICAgIHJldHVybiBsaW5lUmVxdWlyZWRDb2x1bW5zO1xuICB9XG5cbiAgZ2V0IG9wdGlvbmFsQ29sdW1ucygpIHtcbiAgICByZXR1cm4gbGluZU9wdGlvbmFsQ29sdW1ucztcbiAgfVxuXG4gIGdldCBjb2x1bW5MYWJlbHMoKSB7XG4gICAgcmV0dXJuIGxpbmVDb2x1bW5MYWJlbHM7XG4gIH1cblxuICBnZXQgdmlzdWFsQ2hhbm5lbHMoKSB7XG4gICAgY29uc3QgdmlzdWFsQ2hhbm5lbHMgPSBzdXBlci52aXN1YWxDaGFubmVscztcbiAgICByZXR1cm4ge1xuICAgICAgLi4udmlzdWFsQ2hhbm5lbHMsXG4gICAgICBzb3VyY2VDb2xvcjoge1xuICAgICAgICAuLi52aXN1YWxDaGFubmVscy5zb3VyY2VDb2xvcixcbiAgICAgICAgYWNjZXNzb3I6ICdnZXRDb2xvcidcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGZpbmREZWZhdWx0TGF5ZXJQcm9wcyh7ZmllbGRQYWlycyA9IFtdfTogS2VwbGVyVGFibGUpIHtcbiAgICBpZiAoZmllbGRQYWlycy5sZW5ndGggPCAyKSB7XG4gICAgICByZXR1cm4ge3Byb3BzOiBbXX07XG4gICAgfVxuICAgIGNvbnN0IHByb3BzOiB7Y29sdW1uczogTGluZUxheWVyQ29sdW1uc0NvbmZpZzsgbGFiZWw6IHN0cmluZ30gPSB7XG4gICAgICAvLyBjb25uZWN0IHRoZSBmaXJzdCB0d28gcG9pbnQgbGF5ZXIgd2l0aCBsaW5lXG4gICAgICBjb2x1bW5zOiB7XG4gICAgICAgIGxhdDA6IGZpZWxkUGFpcnNbMF0ucGFpci5sYXQsXG4gICAgICAgIGxuZzA6IGZpZWxkUGFpcnNbMF0ucGFpci5sbmcsXG4gICAgICAgIGFsdDA6IHt2YWx1ZTogbnVsbCwgZmllbGRJZHg6IC0xLCBvcHRpb25hbDogdHJ1ZX0sXG4gICAgICAgIGxhdDE6IGZpZWxkUGFpcnNbMV0ucGFpci5sYXQsXG4gICAgICAgIGxuZzE6IGZpZWxkUGFpcnNbMV0ucGFpci5sbmcsXG4gICAgICAgIGFsdDE6IHt2YWx1ZTogbnVsbCwgZmllbGRJZHg6IC0xLCBvcHRpb25hbDogdHJ1ZX1cbiAgICAgIH0sXG4gICAgICBsYWJlbDogYCR7ZmllbGRQYWlyc1swXS5kZWZhdWx0TmFtZX0gLT4gJHtmaWVsZFBhaXJzWzFdLmRlZmF1bHROYW1lfSBsaW5lYFxuICAgIH07XG5cbiAgICByZXR1cm4ge3Byb3BzOiBbcHJvcHNdfTtcbiAgfVxuXG4gIHJlbmRlckxheWVyKG9wdHMpIHtcbiAgICBjb25zdCB7ZGF0YSwgZ3B1RmlsdGVyLCBvYmplY3RIb3ZlcmVkLCBpbnRlcmFjdGlvbkNvbmZpZ30gPSBvcHRzO1xuXG4gICAgY29uc3QgbGF5ZXJQcm9wcyA9IHtcbiAgICAgIHdpZHRoU2NhbGU6IHRoaXMuY29uZmlnLnZpc0NvbmZpZy50aGlja25lc3MgKiBQUk9KRUNURURfUElYRUxfU0laRV9NVUxUSVBMSUVSLFxuICAgICAgZWxldmF0aW9uU2NhbGU6IHRoaXMuY29uZmlnLnZpc0NvbmZpZy5lbGV2YXRpb25TY2FsZVxuICAgIH07XG5cbiAgICBjb25zdCB1cGRhdGVUcmlnZ2VycyA9IHtcbiAgICAgIGdldFBvc2l0aW9uOiB0aGlzLmNvbmZpZy5jb2x1bW5zLFxuICAgICAgZ2V0RmlsdGVyVmFsdWU6IGdwdUZpbHRlci5maWx0ZXJWYWx1ZVVwZGF0ZVRyaWdnZXJzLFxuICAgICAgLi4udGhpcy5nZXRWaXN1YWxDaGFubmVsVXBkYXRlVHJpZ2dlcnMoKVxuICAgIH07XG4gICAgY29uc3QgZGVmYXVsdExheWVyUHJvcHMgPSB0aGlzLmdldERlZmF1bHREZWNrTGF5ZXJQcm9wcyhvcHRzKTtcbiAgICBjb25zdCBob3ZlcmVkT2JqZWN0ID0gdGhpcy5oYXNIb3ZlcmVkT2JqZWN0KG9iamVjdEhvdmVyZWQpO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIC8vIGJhc2UgbGF5ZXJcbiAgICAgIG5ldyBFbmhhbmNlZExpbmVMYXllcih7XG4gICAgICAgIC4uLmRlZmF1bHRMYXllclByb3BzLFxuICAgICAgICAuLi50aGlzLmdldEJydXNoaW5nRXh0ZW5zaW9uUHJvcHMoaW50ZXJhY3Rpb25Db25maWcsICdzb3VyY2VfdGFyZ2V0JyksXG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIC4uLmxheWVyUHJvcHMsXG4gICAgICAgIHVwZGF0ZVRyaWdnZXJzLFxuICAgICAgICBleHRlbnNpb25zOiBbLi4uZGVmYXVsdExheWVyUHJvcHMuZXh0ZW5zaW9ucywgbmV3IEJydXNoaW5nRXh0ZW5zaW9uKCldXG4gICAgICB9KSxcbiAgICAgIC8vIGhvdmVyIGxheWVyXG4gICAgICAuLi4oaG92ZXJlZE9iamVjdFxuICAgICAgICA/IFtcbiAgICAgICAgICAgIG5ldyBFbmhhbmNlZExpbmVMYXllcih7XG4gICAgICAgICAgICAgIC4uLnRoaXMuZ2V0RGVmYXVsdEhvdmVyTGF5ZXJQcm9wcygpLFxuICAgICAgICAgICAgICAuLi5sYXllclByb3BzLFxuICAgICAgICAgICAgICBkYXRhOiBbaG92ZXJlZE9iamVjdF0sXG4gICAgICAgICAgICAgIGdldENvbG9yOiB0aGlzLmNvbmZpZy5oaWdobGlnaHRDb2xvcixcbiAgICAgICAgICAgICAgZ2V0VGFyZ2V0Q29sb3I6IHRoaXMuY29uZmlnLmhpZ2hsaWdodENvbG9yLFxuICAgICAgICAgICAgICBnZXRXaWR0aDogZGF0YS5nZXRXaWR0aFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdXG4gICAgICAgIDogW10pXG4gICAgXTtcbiAgfVxufVxuIl19