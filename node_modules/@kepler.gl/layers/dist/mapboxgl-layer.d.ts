import Layer, { LayerBaseConfig, LayerColumn, VisualChannels } from './base-layer';
import { default as KeplerTable } from '@kepler.gl/table';
import { Merge } from '@kepler.gl/types';
declare type MapboxLayerGLColumns = {
    lat: LayerColumn;
    lng: LayerColumn;
};
export declare type MapboxLayerGLConfig = Merge<LayerBaseConfig, {
    columns: MapboxLayerGLColumns;
}>;
export declare const mapboxRequiredColumns: ['lat', 'lng'];
export declare const pointColResolver: ({ lat, lng }: MapboxLayerGLColumns) => string;
declare class MapboxLayerGL extends Layer {
    config: MapboxLayerGLConfig;
    get overlayType(): "mapboxgl";
    get type(): string | null;
    get isAggregated(): true;
    get requiredLayerColumns(): ["lat", "lng"];
    get columnPairs(): import("./base-layer").ColumnPairs;
    get noneLayerDataAffectingProps(): never[];
    get visualChannels(): VisualChannels;
    datasetSelector: (config: MapboxLayerGLConfig) => string | null;
    gpuFilterSelector: (config: MapboxLayerGLConfig, datasets: any) => any;
    columnsSelector: (config: MapboxLayerGLConfig) => string;
    sourceSelector: import("reselect").OutputSelector<{
        dataId: string | null;
        label: string;
        color: import("@kepler.gl/types").RGBColor;
        columns: MapboxLayerGLColumns;
        isVisible: boolean;
        isConfigActive: boolean;
        highlightColor: import("@kepler.gl/types").RGBColor | import("@kepler.gl/types").RGBAColor;
        hidden: boolean;
        visConfig: import("@kepler.gl/types").LayerVisConfig;
        textLabel: import("@kepler.gl/types").LayerTextLabel[];
        colorUI: {
            color: import("@kepler.gl/types").ColorUI;
            colorRange: import("@kepler.gl/types").ColorUI;
        };
        animation: {
            enabled: boolean;
            domain?: null | undefined;
        };
    }, string, (res1: string | null, res2: string) => string>;
    filterSelector: import("reselect").OutputParametricSelector<{
        dataId: string | null;
        label: string;
        color: import("@kepler.gl/types").RGBColor;
        columns: MapboxLayerGLColumns;
        isVisible: boolean;
        isConfigActive: boolean;
        highlightColor: import("@kepler.gl/types").RGBColor | import("@kepler.gl/types").RGBAColor;
        hidden: boolean;
        visConfig: import("@kepler.gl/types").LayerVisConfig;
        textLabel: import("@kepler.gl/types").LayerTextLabel[];
        colorUI: {
            color: import("@kepler.gl/types").ColorUI;
            colorRange: import("@kepler.gl/types").ColorUI;
        };
        animation: {
            enabled: boolean;
            domain?: null | undefined;
        };
    }, any, any[] | null, (res: any) => any[] | null>;
    isValidFilter(filter: any): number | false;
    getDataUpdateTriggers({ filteredIndex, gpuFilter, id }: KeplerTable): any;
    getGeometry(position: any): {
        type: string;
        coordinates: any;
    } | null;
    calculateDataAttribute({ dataContainer, filteredIndex, gpuFilter }: KeplerTable, getPosition: any): {
        type: string;
        features: import("geojson").Feature<import("geojson").Geometry, import("geojson").GeoJsonProperties>[];
    };
    shouldRenderLayer(): boolean;
}
export default MapboxLayerGL;
