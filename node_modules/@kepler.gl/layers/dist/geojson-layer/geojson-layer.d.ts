/// <reference types="deck.gl" />
import Layer, { LayerBaseConfig, LayerColorConfig, LayerColumn, LayerHeightConfig, LayerRadiusConfig, LayerSizeConfig, LayerStrokeColorConfig } from '../base-layer';
import { GeoJsonLayer as DeckGLGeoJsonLayer } from '@deck.gl/layers';
import { GeojsonDataMaps } from './geojson-utils';
import GeojsonLayerIcon from './geojson-layer-icon';
import { ColorRange } from '@kepler.gl/constants';
import { VisConfigNumber, VisConfigColorSelect, VisConfigColorRange, VisConfigRange, VisConfigBoolean, Merge, RGBColor } from '@kepler.gl/types';
import { KeplerTable } from '@kepler.gl/table';
import { DataContainerInterface } from '@kepler.gl/utils';
export declare const geojsonVisConfigs: {
    opacity: 'opacity';
    strokeOpacity: VisConfigNumber;
    thickness: VisConfigNumber;
    strokeColor: 'strokeColor';
    colorRange: 'colorRange';
    strokeColorRange: 'strokeColorRange';
    radius: 'radius';
    sizeRange: 'strokeWidthRange';
    radiusRange: 'radiusRange';
    heightRange: 'elevationRange';
    elevationScale: 'elevationScale';
    enableElevationZoomFactor: 'enableElevationZoomFactor';
    stroked: 'stroked';
    filled: 'filled';
    enable3d: 'enable3d';
    wireframe: 'wireframe';
};
export declare type GeoJsonVisConfigSettings = {
    opacity: VisConfigNumber;
    strokeOpacity: VisConfigNumber;
    thickness: VisConfigNumber;
    strokeColor: VisConfigColorSelect;
    colorRange: VisConfigColorRange;
    strokeColorRange: VisConfigColorRange;
    radius: VisConfigNumber;
    sizeRange: VisConfigRange;
    radiusRange: VisConfigRange;
    heightRange: VisConfigRange;
    elevationScale: VisConfigNumber;
    enableElevationZoomFactor: VisConfigBoolean;
    stroked: VisConfigBoolean;
    filled: VisConfigBoolean;
    enable3d: VisConfigBoolean;
    wireframe: VisConfigBoolean;
};
export declare type GeoJsonLayerColumnsConfig = {
    geojson: LayerColumn;
};
export declare type GeoJsonLayerVisConfig = {
    opacity: number;
    strokeOpacity: number;
    thickness: number;
    strokeColor: RGBColor;
    colorRange: ColorRange;
    strokeColorRange: ColorRange;
    radius: number;
    sizeRange: [number, number];
    radiusRange: [number, number];
    heightRange: [number, number];
    elevationScale: number;
    enableElevationZoomFactor: boolean;
    stroked: boolean;
    filled: boolean;
    enable3d: boolean;
    wireframe: boolean;
};
declare type GeoJsonLayerVisualChannelConfig = LayerColorConfig & LayerStrokeColorConfig & LayerSizeConfig & LayerHeightConfig & LayerRadiusConfig;
export declare type GeoJsonLayerConfig = Merge<LayerBaseConfig, {
    columns: GeoJsonLayerColumnsConfig;
    visConfig: GeoJsonLayerVisConfig;
}> & GeoJsonLayerVisualChannelConfig;
export declare type GeoJsonLayerMeta = {
    featureTypes?: {
        polygon: boolean;
        point: boolean;
        line: boolean;
    };
    fixedRadius?: boolean;
};
export declare const geoJsonRequiredColumns: ['geojson'];
export declare const featureAccessor: ({ geojson }: GeoJsonLayerColumnsConfig) => (dc: DataContainerInterface) => (d: any) => any;
export declare const defaultElevation = 500;
export declare const defaultLineWidth = 1;
export declare const defaultRadius = 1;
export default class GeoJsonLayer extends Layer {
    config: GeoJsonLayerConfig;
    visConfigSettings: GeoJsonVisConfigSettings;
    meta: GeoJsonLayerMeta;
    dataToFeature: GeojsonDataMaps;
    constructor(props: any);
    get type(): "geojson";
    static get type(): 'geojson';
    get name(): 'Polygon';
    get layerIcon(): typeof GeojsonLayerIcon;
    get requiredLayerColumns(): ["geojson"];
    get visualChannels(): {
        color: {
            accessor: string;
            condition: (config: any) => any;
            nullValue: any;
            getAttributeValue: (config: any) => (d: any) => any;
            defaultValue: (config: any) => any;
            property: string;
            field: string;
            scale: string;
            domain: string;
            range: string;
            key: string;
            channelScaleType: string;
            defaultMeasure?: any;
            fixed?: any;
            supportedFieldTypes?: ("string" | "boolean" | "date" | "point" | "geojson" | "integer" | "real" | "timestamp")[] | undefined;
            aggregation?: import("../base-layer").VisualChannelAggregation | undefined;
        };
        strokeColor: {
            property: string;
            field: string;
            scale: string;
            domain: string;
            range: string;
            key: string;
            channelScaleType: "color";
            accessor: string;
            condition: (config: any) => any;
            nullValue: any;
            getAttributeValue: (config: any) => (d: any) => any;
            defaultValue: (config: any) => any;
        };
        size: {
            property: string;
            accessor: string;
            condition: (config: any) => any;
            nullValue: number;
            getAttributeValue: () => (d: any) => any;
            field: string;
            scale: string;
            domain: string;
            range: string;
            key: string;
            channelScaleType: string;
            defaultMeasure?: any;
            defaultValue?: any;
            fixed?: any;
            supportedFieldTypes?: ("string" | "boolean" | "date" | "point" | "geojson" | "integer" | "real" | "timestamp")[] | undefined;
            aggregation?: import("../base-layer").VisualChannelAggregation | undefined;
        };
        height: {
            property: string;
            field: string;
            scale: string;
            domain: string;
            range: string;
            key: string;
            channelScaleType: "size";
            accessor: string;
            condition: (config: any) => any;
            nullValue: number;
            getAttributeValue: () => (d: any) => any;
        };
        radius: {
            property: string;
            field: string;
            scale: string;
            domain: string;
            range: string;
            key: string;
            channelScaleType: "radius";
            accessor: string;
            nullValue: number;
            getAttributeValue: () => (d: any) => any;
        };
    };
    static findDefaultLayerProps({ label, fields }: KeplerTable): {
        props: {
            label: string;
            columns: any;
            isVisible: boolean;
        }[];
    };
    getDefaultLayerConfig(props?: {}): {
        heightField: null;
        heightDomain: number[];
        heightScale: string;
        radiusField: null;
        radiusDomain: number[];
        radiusScale: string;
        strokeColorField: null;
        strokeColorDomain: number[];
        strokeColorScale: string;
        dataId: string | null;
        label: string;
        color: RGBColor;
        columns: import("../base-layer").LayerColumns;
        isVisible: boolean;
        isConfigActive: boolean;
        highlightColor: RGBColor | import("@kepler.gl/types").RGBAColor;
        hidden: boolean;
        visConfig: import("@kepler.gl/types").LayerVisConfig;
        textLabel: import("@kepler.gl/types").LayerTextLabel[];
        colorUI: {
            color: import("@kepler.gl/types").ColorUI;
            colorRange: import("@kepler.gl/types").ColorUI;
        };
        animation: {
            enabled: boolean;
            domain?: null | undefined;
        };
        colorField?: import("../base-layer").VisualChannelField | undefined;
        colorDomain?: import("../base-layer").VisualChannelDomain | undefined;
        colorScale?: "ordinal" | "quantile" | "quantize" | "linear" | "sqrt" | "log" | "point" | undefined;
        sizeDomain?: import("../base-layer").VisualChannelDomain | undefined;
        sizeScale?: "ordinal" | "quantile" | "quantize" | "linear" | "sqrt" | "log" | "point" | undefined;
        sizeField?: import("../base-layer").VisualChannelField | undefined;
    };
    getHoverData(object: any, dataContainer: any): any;
    calculateDataAttribute({ dataContainer, filteredIndex }: {
        dataContainer: any;
        filteredIndex: any;
    }, getPosition: any): any;
    formatLayerData(datasets: any, oldLayerData: any): {};
    updateLayerMeta(dataContainer: any): void;
    setInitialLayerConfig({ dataContainer }: {
        dataContainer: any;
    }): this;
    renderLayer(opts: any): DeckGLGeoJsonLayer<unknown, any>[];
}
export {};
