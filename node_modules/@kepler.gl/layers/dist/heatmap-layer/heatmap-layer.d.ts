import { ColorRange } from '@kepler.gl/constants';
import MapboxGLLayer, { MapboxLayerGLConfig } from '../mapboxgl-layer';
import HeatmapLayerIcon from './heatmap-layer-icon';
import { LayerColumn, LayerWeightConfig, VisualChannels } from '../base-layer';
import { VisConfigColorRange, VisConfigNumber, Merge } from '@kepler.gl/types';
import { DataContainerInterface } from '@kepler.gl/utils';
export declare type HeatmapLayerVisConfigSettings = {
    opacity: VisConfigNumber;
    colorRange: VisConfigColorRange;
    radius: VisConfigNumber;
};
export declare type HeatmapLayerColumnsConfig = {
    lat: LayerColumn;
    lng: LayerColumn;
};
export declare type HeatmapLayerVisConfig = {
    opacity: number;
    colorRange: ColorRange;
    radius: number;
};
export declare type HeatmapLayerVisualChannelConfig = LayerWeightConfig;
export declare type HeatmapLayerConfig = Merge<MapboxLayerGLConfig, {
    columns: HeatmapLayerColumnsConfig;
    visConfig: HeatmapLayerVisConfig;
}> & HeatmapLayerVisualChannelConfig;
export declare const MAX_ZOOM_LEVEL = 18;
export declare const pointPosAccessor: ({ lat, lng }: HeatmapLayerColumnsConfig) => (dc: DataContainerInterface) => (d: any) => any[];
export declare const pointColResolver: ({ lat, lng }: HeatmapLayerColumnsConfig) => string;
export declare const heatmapVisConfigs: {
    opacity: 'opacity';
    colorRange: 'colorRange';
    radius: 'heatmapRadius';
};
declare class HeatmapLayer extends MapboxGLLayer {
    visConfigSettings: HeatmapLayerVisConfigSettings;
    config: HeatmapLayerConfig;
    getPosition: (config: HeatmapLayerColumnsConfig) => any;
    constructor(props: any);
    get type(): 'heatmap';
    get visualChannels(): VisualChannels;
    get layerIcon(): typeof HeatmapLayerIcon;
    getVisualChannelDescription(channel: any): {
        label: string;
        measure: string;
    };
    getDefaultLayerConfig(props?: {}): HeatmapLayerConfig;
    getPositionAccessor(dataContainer: any): any;
    updateLayerMeta(dataContainer: any): void;
    columnsSelector: (config: any) => string;
    visConfigSelector: (config: any) => any;
    weightFieldSelector: (config: any) => any;
    weightDomainSelector: (config: any) => any;
    paintSelector: import("reselect").OutputSelector<any, {
        'heatmap-weight': number | any[];
        'heatmap-intensity': (string | number | string[])[];
        'heatmap-color': (string | number | string[])[];
        'heatmap-radius': any[];
        'heatmap-opacity': any;
    }, (res1: any, res2: any, res3: any) => {
        'heatmap-weight': number | any[];
        'heatmap-intensity': (string | number | string[])[];
        'heatmap-color': (string | number | string[])[];
        'heatmap-radius': any[];
        'heatmap-opacity': any;
    }>;
    computeHeatmapConfiguration: import("reselect").OutputParametricSelector<{
        dataId: string | null;
        label: string;
        color: import("@kepler.gl/types").RGBColor;
        columns: {
            lat: LayerColumn;
            lng: LayerColumn;
        };
        isVisible: boolean;
        isConfigActive: boolean;
        highlightColor: import("@kepler.gl/types").RGBColor | import("@kepler.gl/types").RGBAColor;
        hidden: boolean;
        visConfig: import("@kepler.gl/types").LayerVisConfig;
        textLabel: import("@kepler.gl/types").LayerTextLabel[];
        colorUI: {
            color: import("@kepler.gl/types").ColorUI;
            colorRange: import("@kepler.gl/types").ColorUI;
        };
        animation: {
            enabled: boolean;
            domain?: null | undefined;
        };
    }, any, {
        filter?: any[] | null | undefined;
        type: string;
        id: string;
        source: string;
        layout: {
            visibility: string;
        };
        paint: {
            'heatmap-weight': number | any[];
            'heatmap-intensity': (string | number | string[])[];
            'heatmap-color': (string | number | string[])[];
            'heatmap-radius': any[];
            'heatmap-opacity': any;
        };
    }, (res1: string, res2: any[] | null, res3: {
        'heatmap-weight': number | any[];
        'heatmap-intensity': (string | number | string[])[];
        'heatmap-color': (string | number | string[])[];
        'heatmap-radius': any[];
        'heatmap-opacity': any;
    }) => {
        filter?: any[] | null | undefined;
        type: string;
        id: string;
        source: string;
        layout: {
            visibility: string;
        };
        paint: {
            'heatmap-weight': number | any[];
            'heatmap-intensity': (string | number | string[])[];
            'heatmap-color': (string | number | string[])[];
            'heatmap-radius': any[];
            'heatmap-opacity': any;
        };
    }>;
    formatLayerData(datasets: any, oldLayerData: any): {
        columns?: undefined;
        config?: undefined;
        data?: undefined;
        weightField?: undefined;
        getPosition?: undefined;
    } | {
        columns: HeatmapLayerColumnsConfig;
        config: {
            filter?: any[] | null | undefined;
            type: string;
            id: string;
            source: string;
            layout: {
                visibility: string;
            };
            paint: {
                'heatmap-weight': number | any[];
                'heatmap-intensity': (string | number | string[])[];
                'heatmap-color': (string | number | string[])[];
                'heatmap-radius': any[];
                'heatmap-opacity': any;
            };
        };
        data: never[] | undefined;
        weightField: import("../base-layer").VisualChannelField;
        getPosition: any;
    };
}
export default HeatmapLayer;
