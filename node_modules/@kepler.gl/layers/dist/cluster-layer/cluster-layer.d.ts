/// <reference types="deck.gl" />
/// <reference types="@danmarshall/deckgl-typings/deck.gl__layers" />
import AggregationLayer, { AggregationLayerConfig } from '../aggregation-layer';
import { ScatterplotLayer } from '@deck.gl/layers';
import { DeckGLClusterLayer } from '@kepler.gl/deckgl-layers';
import ClusterLayerIcon from './cluster-layer-icon';
import { VisConfigColorRange, VisConfigNumber, VisConfigRange, VisConfigSelection, Merge } from '@kepler.gl/types';
import { AggregationTypes, ColorRange } from '@kepler.gl/constants';
import { VisualChannels } from '../base-layer';
export declare type ClusterLayerVisConfigSettings = {
    opacity: VisConfigNumber;
    clusterRadius: VisConfigNumber;
    colorRange: VisConfigColorRange;
    radiusRange: VisConfigRange;
    colorAggregation: VisConfigSelection;
};
export declare type ClusterLayerVisConfig = {
    opacity: number;
    clusterRadius: number;
    colorRange: ColorRange;
    radiusRange: [number, number];
    colorAggregation: AggregationTypes;
};
export declare type ClusterLayerConfig = Merge<AggregationLayerConfig, {
    visConfig: ClusterLayerVisConfig;
}>;
export declare const clusterVisConfigs: {
    opacity: 'opacity';
    clusterRadius: 'clusterRadius';
    colorRange: 'colorRange';
    radiusRange: 'clusterRadiusRange';
    colorAggregation: 'colorAggregation';
};
export default class ClusterLayer extends AggregationLayer {
    visConfigSettings: ClusterLayerVisConfigSettings;
    config: ClusterLayerConfig;
    constructor(props: any);
    get type(): 'cluster';
    get layerIcon(): typeof ClusterLayerIcon;
    get visualChannels(): VisualChannels;
    renderLayer(opts: any): (DeckGLClusterLayer | ScatterplotLayer<{
        radius: number;
    }, import("@deck.gl/layers").ScatterplotLayerProps<{
        radius: number;
    }>>)[];
}
