import { Field } from '@kepler.gl/types';
import { DataContainerInterface } from '@kepler.gl/utils';
/**
 * Parse geojson from string
 * @param {array} samples feature object values
 * @returns whether the geometry coordinates has length of 4
 */
export declare function coordHasLength4(samples: any): boolean;
/**
 * Check whether geojson linestring's 4th coordinate is 1) not timestamp 2) unix time stamp 3) real date time
 * @param timestamps array to be tested if its elements are timestamp
 * @returns the type of timestamp: unix/datetime/invalid(not timestamp)
 */
export declare function containValidTime(timestamps: string[]): Field | null;
/**
 * Check if geojson features are trip layer animatable by meeting 3 conditions
 * @param dataContainer geojson feature objects container
 * @param {object} field array of geojson feature objects
 * @returns whether it is trip layer animatable
 */
export declare function isTripGeoJsonField(dataContainer: DataContainerInterface, field: any): boolean;
/**
 * Get unix timestamp from animatable geojson for deck.gl trip layer
 * @param dataToFeature array of geojson feature objects, can be null
 * @returns
 */
export declare function parseTripGeoJsonTimestamp(dataToFeature: any[]): {
    dataToTimeStamp: never[];
    animationDomain: null;
} | {
    dataToTimeStamp: number[][];
    animationDomain: [number, number];
};
export declare function getAnimationDomainFromTimestamps(dataToTimeStamp?: number[][]): [number, number];
