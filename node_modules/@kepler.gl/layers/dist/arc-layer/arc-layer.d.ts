/// <reference types="deck.gl" />
import Layer, { LayerColumn, LayerBaseConfig, LayerColorConfig, LayerSizeConfig, LayerBounds } from '../base-layer';
import { ArcLayer as DeckArcLayer } from '@deck.gl/layers';
import { DataContainerInterface } from '@kepler.gl/utils';
import ArcLayerIcon from './arc-layer-icon';
import { ColorRange } from '@kepler.gl/constants';
import { RGBColor, Merge, VisConfigColorRange, VisConfigColorSelect, VisConfigNumber, VisConfigRange } from '@kepler.gl/types';
import { KeplerTable } from '@kepler.gl/table';
export declare type ArcLayerVisConfigSettings = {
    opacity: VisConfigNumber;
    thickness: VisConfigNumber;
    colorRange: VisConfigColorRange;
    sizeRange: VisConfigRange;
    targetColor: VisConfigColorSelect;
};
export declare type ArcLayerColumnsConfig = {
    lat0: LayerColumn;
    lat1: LayerColumn;
    lng0: LayerColumn;
    lng1: LayerColumn;
};
export declare type ArcLayerVisConfig = {
    colorRange: ColorRange;
    opacity: number;
    sizeRange: [number, number];
    targetColor: RGBColor;
    thickness: number;
};
export declare type ArcLayerVisualChannelConfig = LayerColorConfig & LayerSizeConfig;
export declare type ArcLayerConfig = Merge<LayerBaseConfig, {
    columns: ArcLayerColumnsConfig;
    visConfig: ArcLayerVisConfig;
}> & ArcLayerVisualChannelConfig;
export declare type ArcLayerData = {
    index: number;
    sourcePosition: [number, number, number];
    targetPosition: [number, number, number];
};
export declare type ArcLayerMeta = {
    bounds: LayerBounds;
};
export declare const arcPosAccessor: ({ lat0, lng0, lat1, lng1 }: ArcLayerColumnsConfig) => (dc: DataContainerInterface) => (d: any) => any[];
export declare const arcRequiredColumns: string[];
export declare const arcColumnLabels: {
    lat0: string;
    lng0: string;
    lat1: string;
    lng1: string;
};
export declare const arcVisConfigs: {
    opacity: 'opacity';
    thickness: 'thickness';
    colorRange: 'colorRange';
    sizeRange: 'strokeWidthRange';
    targetColor: 'targetColor';
};
export default class ArcLayer extends Layer {
    visConfigSettings: ArcLayerVisConfigSettings;
    config: ArcLayerConfig;
    meta: ArcLayerMeta;
    constructor(props: any);
    get type(): string;
    get isAggregated(): boolean;
    get layerIcon(): typeof ArcLayerIcon;
    get requiredLayerColumns(): string[];
    get columnLabels(): {
        lat0: string;
        lng0: string;
        lat1: string;
        lng1: string;
    };
    get columnPairs(): import("../base-layer").ColumnPairs;
    get visualChannels(): {
        sourceColor: {
            property: string;
            key: string;
            accessor: string;
            defaultValue: (config: any) => any;
            field: string;
            scale: string;
            domain: string;
            range: string;
            channelScaleType: string;
            nullValue?: any;
            defaultMeasure?: any;
            condition?: ((config: any) => boolean) | undefined;
            getAttributeValue?: ((config: any) => (d: any) => any) | undefined;
            fixed?: any;
            supportedFieldTypes?: ("string" | "boolean" | "date" | "point" | "geojson" | "integer" | "real" | "timestamp")[] | undefined;
            aggregation?: import("../base-layer").VisualChannelAggregation | undefined;
        };
        targetColor: {
            property: string;
            key: string;
            accessor: string;
            defaultValue: (config: any) => any;
            field: string;
            scale: string;
            domain: string;
            range: string;
            channelScaleType: string;
            nullValue?: any;
            defaultMeasure?: any;
            condition?: ((config: any) => boolean) | undefined;
            getAttributeValue?: ((config: any) => (d: any) => any) | undefined;
            fixed?: any;
            supportedFieldTypes?: ("string" | "boolean" | "date" | "point" | "geojson" | "integer" | "real" | "timestamp")[] | undefined;
            aggregation?: import("../base-layer").VisualChannelAggregation | undefined;
        };
        size: {
            accessor: string;
            property: string;
            field: string;
            scale: string;
            domain: string;
            range: string;
            key: string;
            channelScaleType: string;
            nullValue?: any;
            defaultMeasure?: any;
            condition?: ((config: any) => boolean) | undefined;
            getAttributeValue?: ((config: any) => (d: any) => any) | undefined;
            defaultValue?: any;
            fixed?: any;
            supportedFieldTypes?: ("string" | "boolean" | "date" | "point" | "geojson" | "integer" | "real" | "timestamp")[] | undefined;
            aggregation?: import("../base-layer").VisualChannelAggregation | undefined;
        };
    };
    static findDefaultLayerProps({ fieldPairs }: KeplerTable): {
        props: {
            color?: RGBColor;
            columns: ArcLayerColumnsConfig;
            label: string;
        }[];
    };
    calculateDataAttribute({ dataContainer, filteredIndex }: {
        dataContainer: any;
        filteredIndex: any;
    }, getPosition: any): ArcLayerData[];
    formatLayerData(datasets: any, oldLayerData: any): {};
    updateLayerMeta(dataContainer: any): void;
    renderLayer(opts: any): DeckArcLayer<unknown, any>[];
}
