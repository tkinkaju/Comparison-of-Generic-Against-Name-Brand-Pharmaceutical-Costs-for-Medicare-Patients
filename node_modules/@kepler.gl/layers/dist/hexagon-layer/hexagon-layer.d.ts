/// <reference types="deck.gl" />
import { GeoJsonLayer } from '@deck.gl/layers';
import AggregationLayer, { AggregationLayerConfig } from '../aggregation-layer';
import { EnhancedHexagonLayer } from '@kepler.gl/deckgl-layers';
import HexagonLayerIcon from './hexagon-layer-icon';
import { VisConfigBoolean, VisConfigColorRange, VisConfigNumber, VisConfigRange, VisConfigSelection, Merge } from '@kepler.gl/types';
import { AggregationTypes, ColorRange } from '@kepler.gl/constants';
export declare type HexagonLayerVisConfigSettings = {
    opacity: VisConfigNumber;
    worldUnitSize: VisConfigNumber;
    resolution: VisConfigNumber;
    colorRange: VisConfigColorRange;
    coverage: VisConfigNumber;
    sizeRange: VisConfigRange;
    percentile: VisConfigRange;
    elevationPercentile: VisConfigRange;
    elevationScale: VisConfigNumber;
    enableElevationZoomFactor: VisConfigBoolean;
    colorAggregation: VisConfigSelection;
    sizeAggregation: VisConfigSelection;
    enable3d: VisConfigBoolean;
};
export declare type HexagonLayerVisConfig = {
    opacity: number;
    worldUnitSize: number;
    resolution: number;
    colorRange: ColorRange;
    coverage: number;
    sizeRange: [number, number];
    percentile: [number, number];
    elevationPercentile: [number, number];
    elevationScale: number;
    enableElevationZoomFactor: boolean;
    colorAggregation: AggregationTypes;
    sizeAggregation: AggregationTypes;
    enable3d: boolean;
};
export declare type HexagonLayerConfig = Merge<AggregationLayerConfig, {
    visConfig: HexagonLayerVisConfig;
}>;
export declare const hexagonVisConfigs: {
    opacity: 'opacity';
    worldUnitSize: 'worldUnitSize';
    resolution: 'resolution';
    colorRange: 'colorRange';
    coverage: 'coverage';
    sizeRange: 'elevationRange';
    percentile: 'percentile';
    elevationPercentile: 'elevationPercentile';
    elevationScale: 'elevationScale';
    enableElevationZoomFactor: 'enableElevationZoomFactor';
    colorAggregation: 'colorAggregation';
    sizeAggregation: 'sizeAggregation';
    enable3d: 'enable3d';
};
export default class HexagonLayer extends AggregationLayer {
    visConfigSettings: HexagonLayerVisConfigSettings;
    config: HexagonLayerConfig;
    constructor(props: any);
    get type(): 'hexagon';
    get name(): 'Hexbin';
    get layerIcon(): typeof HexagonLayerIcon;
    renderLayer(opts: any): (EnhancedHexagonLayer | GeoJsonLayer<unknown, {
        wrapLongitude: false;
        data: ({
            geometry: {
                coordinates: any[];
                type: string;
            };
            properties: any;
        } | null)[];
        getLineColor: import("@kepler.gl/types").RGBColor | import("@kepler.gl/types").RGBAColor;
        lineWidthScale: number;
        id: string;
        pickable: boolean;
        coordinateSystem: number;
    }>)[];
}
