// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SidePanelFactory;
exports.StyledSidePanelContent = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _localization = require("@kepler.gl/localization");

var _constants = require("@kepler.gl/constants");

var _icons = require("./common/icons");

var _sideBar = _interopRequireDefault(require("./side-panel/side-bar"));

var _panelHeader = _interopRequireDefault(require("./side-panel/panel-header"));

var _panelToggle = _interopRequireDefault(require("./side-panel/panel-toggle"));

var _layerManager = _interopRequireDefault(require("./side-panel/layer-manager"));

var _filterManager = _interopRequireDefault(require("./side-panel/filter-manager"));

var _interactionManager = _interopRequireDefault(require("./side-panel/interaction-manager"));

var _mapManager = _interopRequireDefault(require("./side-panel/map-manager"));

var _customPanel = _interopRequireDefault(require("./side-panel/custom-panel"));

var _panelTitle = _interopRequireDefault(require("./side-panel/panel-title"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _lodash = _interopRequireDefault(require("lodash.get"));

var _templateObject;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var StyledSidePanelContent = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  ", ";\n  flex-grow: 1;\n  padding: ", "px;\n  overflow-y: scroll;\n  overflow-x: hidden;\n\n  .side-panel__content__inner {\n    display: flex;\n    height: 100%;\n    flex-direction: column;\n  }\n"])), function (props) {
  return props.theme.sidePanelScrollBar;
}, function (props) {
  return props.theme.sidePanelInnerPadding;
});

exports.StyledSidePanelContent = StyledSidePanelContent;
SidePanelFactory.deps = [_sideBar["default"], _panelHeader["default"], _panelToggle["default"], _panelTitle["default"], _layerManager["default"], _filterManager["default"], _interactionManager["default"], _mapManager["default"], _customPanel["default"]];
/**
 * Vertical sidebar containing input components for the rendering layers
 */

function SidePanelFactory(Sidebar, PanelHeader, PanelToggle, PanelTitle, LayerManager, FilterManager, InteractionManager, MapManager, CustomPanels) {
  // inject components
  var SIDEBAR_COMPONENTS = {
    layer: LayerManager,
    filter: FilterManager,
    interaction: InteractionManager,
    map: MapManager
  };
  var SIDEBAR_ICONS = {
    layer: _icons.Layers,
    filter: _icons.FilterFunnel,
    interaction: _icons.Settings,
    map: _icons.CursorClick
  }; // We should defined sidebar panels here but keeping them for backward compatible

  var fullPanels = _constants.SIDEBAR_PANELS.map(function (component) {
    return _objectSpread(_objectSpread({}, component), {}, {
      component: SIDEBAR_COMPONENTS[component.id],
      iconComponent: SIDEBAR_ICONS[component.id]
    });
  });

  var getCustomPanelProps = (0, _lodash["default"])(CustomPanels, ['defaultProps', 'getProps']) || function () {
    return {};
  }; // eslint-disable-next-line max-statements


  var SidePanel = function SidePanel(props) {
    var appName = props.appName,
        appWebsite = props.appWebsite,
        availableProviders = props.availableProviders,
        datasets = props.datasets,
        filters = props.filters,
        layers = props.layers,
        layerBlending = props.layerBlending,
        layerClasses = props.layerClasses,
        layerOrder = props.layerOrder,
        interactionConfig = props.interactionConfig,
        panels = props.panels,
        mapInfo = props.mapInfo,
        mapSaved = props.mapSaved,
        mapStateActions = props.mapStateActions,
        mapStyle = props.mapStyle,
        mapStyleActions = props.mapStyleActions,
        onSaveMap = props.onSaveMap,
        uiState = props.uiState,
        uiStateActions = props.uiStateActions,
        visStateActions = props.visStateActions,
        version = props.version,
        width = props.width;
    var openDeleteModal = uiStateActions.openDeleteModal,
        toggleModal = uiStateActions.toggleModal,
        toggleSidePanel = uiStateActions.toggleSidePanel;
    var activeSidePanel = uiState.activeSidePanel;
    var setMapInfo = visStateActions.setMapInfo,
        showDatasetTable = visStateActions.showDatasetTable,
        updateTableColor = visStateActions.updateTableColor;
    var hasShare = availableProviders.hasShare,
        hasStorage = availableProviders.hasStorage;
    var title = mapInfo.title;
    var isOpen = Boolean(activeSidePanel);

    var _onOpenOrClose = (0, _react.useCallback)(function () {
      return toggleSidePanel(activeSidePanel ? '' : 'layer');
    }, [activeSidePanel, toggleSidePanel]);

    var onClickExportImage = (0, _react.useCallback)(function () {
      return toggleModal(_constants.EXPORT_IMAGE_ID);
    }, [toggleModal]);
    var onClickExportData = (0, _react.useCallback)(function () {
      return toggleModal(_constants.EXPORT_DATA_ID);
    }, [toggleModal]);
    var onClickExportMap = (0, _react.useCallback)(function () {
      return toggleModal(_constants.EXPORT_MAP_ID);
    }, [toggleModal]);
    var onClickSaveToStorage = (0, _react.useCallback)(function () {
      return toggleModal(mapSaved ? _constants.OVERWRITE_MAP_ID : _constants.SAVE_MAP_ID);
    }, [mapSaved, toggleModal]);
    var onClickSaveAsToStorage = (0, _react.useCallback)(function () {
      setMapInfo({
        title: "".concat(title || 'Kepler.gl', " (Copy)")
      });
      toggleModal(_constants.SAVE_MAP_ID);
    }, [title, setMapInfo, toggleModal]);
    var onClickShareMap = (0, _react.useCallback)(function () {
      return toggleModal(_constants.SHARE_MAP_ID);
    }, [toggleModal]);
    var onShowDatasetTable = (0, _react.useCallback)(function (dataId) {
      return showDatasetTable(dataId);
    }, [showDatasetTable]);
    var onUpdateTableColor = (0, _react.useCallback)(function (dataId, newColor) {
      return updateTableColor(dataId, newColor);
    }, [updateTableColor]);
    var onShowAddDataModal = (0, _react.useCallback)(function () {
      return toggleModal(_constants.ADD_DATA_ID);
    }, [toggleModal]);
    var onShowAddMapStyleModal = (0, _react.useCallback)(function () {
      return toggleModal(_constants.ADD_MAP_STYLE_ID);
    }, [toggleModal]);
    var onRemoveDataset = (0, _react.useCallback)(function (dataId) {
      return openDeleteModal(dataId);
    }, [openDeleteModal]);
    var onSaveToStorage = (0, _react.useMemo)(function () {
      return hasStorage ? onClickSaveToStorage : null;
    }, [hasStorage, onClickSaveToStorage]);
    var onSaveAsToStorage = (0, _react.useMemo)(function () {
      return hasStorage && mapSaved ? onClickSaveAsToStorage : null;
    }, [hasStorage, mapSaved, onClickSaveAsToStorage]);
    var currentPanel = (0, _react.useMemo)(function () {
      return panels.find(function (_ref) {
        var id = _ref.id;
        return id === activeSidePanel;
      });
    }, [activeSidePanel, panels]);
    var onShareMap = (0, _react.useMemo)(function () {
      return hasShare ? onClickShareMap : null;
    }, [hasShare, onClickShareMap]);
    var customPanelProps = (0, _react.useMemo)(function () {
      return getCustomPanelProps(props);
    }, [props]);
    var PanelComponent = currentPanel === null || currentPanel === void 0 ? void 0 : currentPanel.component;
    return /*#__PURE__*/_react["default"].createElement(Sidebar, {
      width: width,
      isOpen: isOpen,
      minifiedWidth: 0,
      onOpenOrClose: _onOpenOrClose
    }, /*#__PURE__*/_react["default"].createElement(PanelHeader, {
      appName: appName,
      version: version,
      appWebsite: appWebsite,
      visibleDropdown: uiState.visibleDropdown,
      showExportDropdown: uiStateActions.showExportDropdown,
      hideExportDropdown: uiStateActions.hideExportDropdown,
      onExportImage: onClickExportImage,
      onExportData: onClickExportData,
      onExportMap: onClickExportMap,
      onSaveMap: onSaveMap,
      onSaveToStorage: onSaveToStorage,
      onSaveAsToStorage: onSaveAsToStorage,
      onShareMap: onShareMap
    }), /*#__PURE__*/_react["default"].createElement(PanelToggle, {
      panels: panels,
      activePanel: activeSidePanel,
      togglePanel: uiStateActions.toggleSidePanel
    }), /*#__PURE__*/_react["default"].createElement(StyledSidePanelContent, {
      className: "side-panel__content"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "side-panel__content__inner"
    }, (currentPanel === null || currentPanel === void 0 ? void 0 : currentPanel.id) !== 'layer' ? /*#__PURE__*/_react["default"].createElement(PanelTitle, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: currentPanel === null || currentPanel === void 0 ? void 0 : currentPanel.label
    })) : null, PanelComponent ? /*#__PURE__*/_react["default"].createElement(PanelComponent, {
      datasets: datasets,
      filters: filters,
      layers: layers,
      layerClasses: layerClasses,
      layerOrder: layerOrder,
      layerBlending: layerBlending,
      mapStyle: mapStyle,
      mapStyleActions: mapStyleActions,
      mapStateActions: mapStateActions,
      interactionConfig: interactionConfig,
      removeDataset: onRemoveDataset,
      showDatasetTable: onShowDatasetTable,
      updateTableColor: onUpdateTableColor,
      showAddDataModal: onShowAddDataModal,
      showAddMapStyleModal: onShowAddMapStyleModal,
      uiStateActions: uiStateActions,
      visStateActions: visStateActions,
      panelMetadata: currentPanel,
      layerPanelListView: (currentPanel === null || currentPanel === void 0 ? void 0 : currentPanel.id) === 'layer' && uiState.layerPanelListView
    }) : null, /*#__PURE__*/_react["default"].createElement(CustomPanels, (0, _extends2["default"])({}, customPanelProps, {
      activeSidePanel: activeSidePanel
    })))));
  };

  SidePanel.defaultProps = {
    panels: fullPanels,
    sidebarComponents: SIDEBAR_COMPONENTS,
    uiState: {},
    visStateActions: {},
    mapStyleActions: {},
    uiStateActions: {},
    availableProviders: {},
    mapInfo: {}
  };
  return SidePanel;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zaWRlLXBhbmVsLnRzeCJdLCJuYW1lcyI6WyJTdHlsZWRTaWRlUGFuZWxDb250ZW50Iiwic3R5bGVkIiwiZGl2IiwicHJvcHMiLCJ0aGVtZSIsInNpZGVQYW5lbFNjcm9sbEJhciIsInNpZGVQYW5lbElubmVyUGFkZGluZyIsIlNpZGVQYW5lbEZhY3RvcnkiLCJkZXBzIiwiU2lkZWJhckZhY3RvcnkiLCJQYW5lbEhlYWRlckZhY3RvcnkiLCJQYW5lbFRvZ2dsZUZhY3RvcnkiLCJQYW5lbFRpdGxlRmFjdG9yeSIsIkxheWVyTWFuYWdlckZhY3RvcnkiLCJGaWx0ZXJNYW5hZ2VyRmFjdG9yeSIsIkludGVyYWN0aW9uTWFuYWdlckZhY3RvcnkiLCJNYXBNYW5hZ2VyRmFjdG9yeSIsIkN1c3RvbVBhbmVsc0ZhY3RvcnkiLCJTaWRlYmFyIiwiUGFuZWxIZWFkZXIiLCJQYW5lbFRvZ2dsZSIsIlBhbmVsVGl0bGUiLCJMYXllck1hbmFnZXIiLCJGaWx0ZXJNYW5hZ2VyIiwiSW50ZXJhY3Rpb25NYW5hZ2VyIiwiTWFwTWFuYWdlciIsIkN1c3RvbVBhbmVscyIsIlNJREVCQVJfQ09NUE9ORU5UUyIsImxheWVyIiwiZmlsdGVyIiwiaW50ZXJhY3Rpb24iLCJtYXAiLCJTSURFQkFSX0lDT05TIiwiTGF5ZXJzIiwiRmlsdGVyRnVubmVsIiwiU2V0dGluZ3MiLCJDdXJzb3JDbGljayIsImZ1bGxQYW5lbHMiLCJTSURFQkFSX1BBTkVMUyIsImNvbXBvbmVudCIsImlkIiwiaWNvbkNvbXBvbmVudCIsImdldEN1c3RvbVBhbmVsUHJvcHMiLCJTaWRlUGFuZWwiLCJhcHBOYW1lIiwiYXBwV2Vic2l0ZSIsImF2YWlsYWJsZVByb3ZpZGVycyIsImRhdGFzZXRzIiwiZmlsdGVycyIsImxheWVycyIsImxheWVyQmxlbmRpbmciLCJsYXllckNsYXNzZXMiLCJsYXllck9yZGVyIiwiaW50ZXJhY3Rpb25Db25maWciLCJwYW5lbHMiLCJtYXBJbmZvIiwibWFwU2F2ZWQiLCJtYXBTdGF0ZUFjdGlvbnMiLCJtYXBTdHlsZSIsIm1hcFN0eWxlQWN0aW9ucyIsIm9uU2F2ZU1hcCIsInVpU3RhdGUiLCJ1aVN0YXRlQWN0aW9ucyIsInZpc1N0YXRlQWN0aW9ucyIsInZlcnNpb24iLCJ3aWR0aCIsIm9wZW5EZWxldGVNb2RhbCIsInRvZ2dsZU1vZGFsIiwidG9nZ2xlU2lkZVBhbmVsIiwiYWN0aXZlU2lkZVBhbmVsIiwic2V0TWFwSW5mbyIsInNob3dEYXRhc2V0VGFibGUiLCJ1cGRhdGVUYWJsZUNvbG9yIiwiaGFzU2hhcmUiLCJoYXNTdG9yYWdlIiwidGl0bGUiLCJpc09wZW4iLCJCb29sZWFuIiwiX29uT3Blbk9yQ2xvc2UiLCJvbkNsaWNrRXhwb3J0SW1hZ2UiLCJFWFBPUlRfSU1BR0VfSUQiLCJvbkNsaWNrRXhwb3J0RGF0YSIsIkVYUE9SVF9EQVRBX0lEIiwib25DbGlja0V4cG9ydE1hcCIsIkVYUE9SVF9NQVBfSUQiLCJvbkNsaWNrU2F2ZVRvU3RvcmFnZSIsIk9WRVJXUklURV9NQVBfSUQiLCJTQVZFX01BUF9JRCIsIm9uQ2xpY2tTYXZlQXNUb1N0b3JhZ2UiLCJvbkNsaWNrU2hhcmVNYXAiLCJTSEFSRV9NQVBfSUQiLCJvblNob3dEYXRhc2V0VGFibGUiLCJkYXRhSWQiLCJvblVwZGF0ZVRhYmxlQ29sb3IiLCJuZXdDb2xvciIsIm9uU2hvd0FkZERhdGFNb2RhbCIsIkFERF9EQVRBX0lEIiwib25TaG93QWRkTWFwU3R5bGVNb2RhbCIsIkFERF9NQVBfU1RZTEVfSUQiLCJvblJlbW92ZURhdGFzZXQiLCJvblNhdmVUb1N0b3JhZ2UiLCJvblNhdmVBc1RvU3RvcmFnZSIsImN1cnJlbnRQYW5lbCIsImZpbmQiLCJvblNoYXJlTWFwIiwiY3VzdG9tUGFuZWxQcm9wcyIsIlBhbmVsQ29tcG9uZW50IiwidmlzaWJsZURyb3Bkb3duIiwic2hvd0V4cG9ydERyb3Bkb3duIiwiaGlkZUV4cG9ydERyb3Bkb3duIiwibGFiZWwiLCJsYXllclBhbmVsTGlzdFZpZXciLCJkZWZhdWx0UHJv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RCIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMiBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ0BrZXBsZXIuZ2wvbG9jYWxpemF0aW9uJztcblxuaW1wb3J0IHtcbiAgRVhQT1JUX0RBVEFfSUQsXG4gIEVYUE9SVF9NQVBfSUQsXG4gIFNIQVJFX01BUF9JRCxcbiAgU0lERUJBUl9QQU5FTFMsXG4gIE9WRVJXUklURV9NQVBfSUQsXG4gIFNBVkVfTUFQX0lELFxuICBFWFBPUlRfSU1BR0VfSUQsXG4gIEFERF9EQVRBX0lELFxuICBBRERfTUFQX1NUWUxFX0lEXG59IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcblxuaW1wb3J0IHtDdXJzb3JDbGljaywgTGF5ZXJzLCBGaWx0ZXJGdW5uZWwsIFNldHRpbmdzfSBmcm9tICcuL2NvbW1vbi9pY29ucyc7XG5cbmltcG9ydCBTaWRlYmFyRmFjdG9yeSBmcm9tICcuL3NpZGUtcGFuZWwvc2lkZS1iYXInO1xuaW1wb3J0IFBhbmVsSGVhZGVyRmFjdG9yeSBmcm9tICcuL3NpZGUtcGFuZWwvcGFuZWwtaGVhZGVyJztcbmltcG9ydCBQYW5lbFRvZ2dsZUZhY3RvcnkgZnJvbSAnLi9zaWRlLXBhbmVsL3BhbmVsLXRvZ2dsZSc7XG5pbXBvcnQgTGF5ZXJNYW5hZ2VyRmFjdG9yeSBmcm9tICcuL3NpZGUtcGFuZWwvbGF5ZXItbWFuYWdlcic7XG5pbXBvcnQgRmlsdGVyTWFuYWdlckZhY3RvcnkgZnJvbSAnLi9zaWRlLXBhbmVsL2ZpbHRlci1tYW5hZ2VyJztcbmltcG9ydCBJbnRlcmFjdGlvbk1hbmFnZXJGYWN0b3J5IGZyb20gJy4vc2lkZS1wYW5lbC9pbnRlcmFjdGlvbi1tYW5hZ2VyJztcbmltcG9ydCBNYXBNYW5hZ2VyRmFjdG9yeSBmcm9tICcuL3NpZGUtcGFuZWwvbWFwLW1hbmFnZXInO1xuaW1wb3J0IEN1c3RvbVBhbmVsc0ZhY3RvcnkgZnJvbSAnLi9zaWRlLXBhbmVsL2N1c3RvbS1wYW5lbCc7XG5pbXBvcnQgUGFuZWxUaXRsZUZhY3RvcnkgZnJvbSAnLi9zaWRlLXBhbmVsL3BhbmVsLXRpdGxlJztcblxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC5nZXQnO1xuaW1wb3J0IHtTaWRlUGFuZWxQcm9wc30gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRTaWRlUGFuZWxDb250ZW50ID0gc3R5bGVkLmRpdmBcbiAgJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5zaWRlUGFuZWxTY3JvbGxCYXJ9O1xuICBmbGV4LWdyb3c6IDE7XG4gIHBhZGRpbmc6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuc2lkZVBhbmVsSW5uZXJQYWRkaW5nfXB4O1xuICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcblxuICAuc2lkZS1wYW5lbF9fY29udGVudF9faW5uZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cbmA7XG5cblNpZGVQYW5lbEZhY3RvcnkuZGVwcyA9IFtcbiAgU2lkZWJhckZhY3RvcnksXG4gIFBhbmVsSGVhZGVyRmFjdG9yeSxcbiAgUGFuZWxUb2dnbGVGYWN0b3J5LFxuICBQYW5lbFRpdGxlRmFjdG9yeSxcbiAgTGF5ZXJNYW5hZ2VyRmFjdG9yeSxcbiAgRmlsdGVyTWFuYWdlckZhY3RvcnksXG4gIEludGVyYWN0aW9uTWFuYWdlckZhY3RvcnksXG4gIE1hcE1hbmFnZXJGYWN0b3J5LFxuICBDdXN0b21QYW5lbHNGYWN0b3J5XG5dO1xuXG4vKipcbiAqIFZlcnRpY2FsIHNpZGViYXIgY29udGFpbmluZyBpbnB1dCBjb21wb25lbnRzIGZvciB0aGUgcmVuZGVyaW5nIGxheWVyc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaWRlUGFuZWxGYWN0b3J5KFxuICBTaWRlYmFyOiBSZXR1cm5UeXBlPHR5cGVvZiBTaWRlYmFyRmFjdG9yeT4sXG4gIFBhbmVsSGVhZGVyOiBSZXR1cm5UeXBlPHR5cGVvZiBQYW5lbEhlYWRlckZhY3Rvcnk+LFxuICBQYW5lbFRvZ2dsZTogUmV0dXJuVHlwZTx0eXBlb2YgUGFuZWxUb2dnbGVGYWN0b3J5PixcbiAgUGFuZWxUaXRsZTogUmV0dXJuVHlwZTx0eXBlb2YgUGFuZWxUaXRsZUZhY3Rvcnk+LFxuICBMYXllck1hbmFnZXI6IFJldHVyblR5cGU8dHlwZW9mIExheWVyTWFuYWdlckZhY3Rvcnk+LFxuICBGaWx0ZXJNYW5hZ2VyOiBSZXR1cm5UeXBlPHR5cGVvZiBGaWx0ZXJNYW5hZ2VyRmFjdG9yeT4sXG4gIEludGVyYWN0aW9uTWFuYWdlcjogUmV0dXJuVHlwZTx0eXBlb2YgSW50ZXJhY3Rpb25NYW5hZ2VyRmFjdG9yeT4sXG4gIE1hcE1hbmFnZXI6IFJldHVyblR5cGU8dHlwZW9mIE1hcE1hbmFnZXJGYWN0b3J5PixcbiAgQ3VzdG9tUGFuZWxzOiBSZXR1cm5UeXBlPHR5cGVvZiBDdXN0b21QYW5lbHNGYWN0b3J5PlxuKSB7XG4gIC8vIGluamVjdCBjb21wb25lbnRzXG4gIGNvbnN0IFNJREVCQVJfQ09NUE9ORU5UUyA9IHtcbiAgICBsYXllcjogTGF5ZXJNYW5hZ2VyLFxuICAgIGZpbHRlcjogRmlsdGVyTWFuYWdlcixcbiAgICBpbnRlcmFjdGlvbjogSW50ZXJhY3Rpb25NYW5hZ2VyLFxuICAgIG1hcDogTWFwTWFuYWdlclxuICB9O1xuXG4gIGNvbnN0IFNJREVCQVJfSUNPTlMgPSB7XG4gICAgbGF5ZXI6IExheWVycyxcbiAgICBmaWx0ZXI6IEZpbHRlckZ1bm5lbCxcbiAgICBpbnRlcmFjdGlvbjogU2V0dGluZ3MsXG4gICAgbWFwOiBDdXJzb3JDbGlja1xuICB9O1xuXG4gIC8vIFdlIHNob3VsZCBkZWZpbmVkIHNpZGViYXIgcGFuZWxzIGhlcmUgYnV0IGtlZXBpbmcgdGhlbSBmb3IgYmFja3dhcmQgY29tcGF0aWJsZVxuICBjb25zdCBmdWxsUGFuZWxzID0gU0lERUJBUl9QQU5FTFMubWFwKGNvbXBvbmVudCA9PiAoe1xuICAgIC4uLmNvbXBvbmVudCxcbiAgICBjb21wb25lbnQ6IFNJREVCQVJfQ09NUE9ORU5UU1tjb21wb25lbnQuaWRdLFxuICAgIGljb25Db21wb25lbnQ6IFNJREVCQVJfSUNPTlNbY29tcG9uZW50LmlkXVxuICB9KSk7XG5cbiAgY29uc3QgZ2V0Q3VzdG9tUGFuZWxQcm9wcyA9IGdldChDdXN0b21QYW5lbHMsIFsnZGVmYXVsdFByb3BzJywgJ2dldFByb3BzJ10pIHx8ICgoKSA9PiAoe30pKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgY29uc3QgU2lkZVBhbmVsID0gKHByb3BzOiBTaWRlUGFuZWxQcm9wcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcE5hbWUsXG4gICAgICBhcHBXZWJzaXRlLFxuICAgICAgYXZhaWxhYmxlUHJvdmlkZXJzLFxuICAgICAgZGF0YXNldHMsXG4gICAgICBmaWx0ZXJzLFxuICAgICAgbGF5ZXJzLFxuICAgICAgbGF5ZXJCbGVuZGluZyxcbiAgICAgIGxheWVyQ2xhc3NlcyxcbiAgICAgIGxheWVyT3JkZXIsXG4gICAgICBpbnRlcmFjdGlvbkNvbmZpZyxcbiAgICAgIHBhbmVscyxcbiAgICAgIG1hcEluZm8sXG4gICAgICBtYXBTYXZlZCxcbiAgICAgIG1hcFN0YXRlQWN0aW9ucyxcbiAgICAgIG1hcFN0eWxlLFxuICAgICAgbWFwU3R5bGVBY3Rpb25zLFxuICAgICAgb25TYXZlTWFwLFxuICAgICAgdWlTdGF0ZSxcbiAgICAgIHVpU3RhdGVBY3Rpb25zLFxuICAgICAgdmlzU3RhdGVBY3Rpb25zLFxuICAgICAgdmVyc2lvbixcbiAgICAgIHdpZHRoXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IHtvcGVuRGVsZXRlTW9kYWwsIHRvZ2dsZU1vZGFsLCB0b2dnbGVTaWRlUGFuZWx9ID0gdWlTdGF0ZUFjdGlvbnM7XG4gICAgY29uc3Qge2FjdGl2ZVNpZGVQYW5lbH0gPSB1aVN0YXRlO1xuICAgIGNvbnN0IHtzZXRNYXBJbmZvLCBzaG93RGF0YXNldFRhYmxlLCB1cGRhdGVUYWJsZUNvbG9yfSA9IHZpc1N0YXRlQWN0aW9ucztcbiAgICBjb25zdCB7aGFzU2hhcmUsIGhhc1N0b3JhZ2V9ID0gYXZhaWxhYmxlUHJvdmlkZXJzO1xuXG4gICAgY29uc3Qge3RpdGxlfSA9IG1hcEluZm87XG5cbiAgICBjb25zdCBpc09wZW4gPSBCb29sZWFuKGFjdGl2ZVNpZGVQYW5lbCk7XG5cbiAgICBjb25zdCBfb25PcGVuT3JDbG9zZSA9IHVzZUNhbGxiYWNrKCgpID0+IHRvZ2dsZVNpZGVQYW5lbChhY3RpdmVTaWRlUGFuZWwgPyAnJyA6ICdsYXllcicpLCBbXG4gICAgICBhY3RpdmVTaWRlUGFuZWwsXG4gICAgICB0b2dnbGVTaWRlUGFuZWxcbiAgICBdKTtcblxuICAgIGNvbnN0IG9uQ2xpY2tFeHBvcnRJbWFnZSA9IHVzZUNhbGxiYWNrKCgpID0+IHRvZ2dsZU1vZGFsKEVYUE9SVF9JTUFHRV9JRCksIFt0b2dnbGVNb2RhbF0pO1xuICAgIGNvbnN0IG9uQ2xpY2tFeHBvcnREYXRhID0gdXNlQ2FsbGJhY2soKCkgPT4gdG9nZ2xlTW9kYWwoRVhQT1JUX0RBVEFfSUQpLCBbdG9nZ2xlTW9kYWxdKTtcbiAgICBjb25zdCBvbkNsaWNrRXhwb3J0TWFwID0gdXNlQ2FsbGJhY2soKCkgPT4gdG9nZ2xlTW9kYWwoRVhQT1JUX01BUF9JRCksIFt0b2dnbGVNb2RhbF0pO1xuICAgIGNvbnN0IG9uQ2xpY2tTYXZlVG9TdG9yYWdlID0gdXNlQ2FsbGJhY2soXG4gICAgICAoKSA9PiB0b2dnbGVNb2RhbChtYXBTYXZlZCA/IE9WRVJXUklURV9NQVBfSUQgOiBTQVZFX01BUF9JRCksXG4gICAgICBbbWFwU2F2ZWQsIHRvZ2dsZU1vZGFsXVxuICAgICk7XG4gICAgY29uc3Qgb25DbGlja1NhdmVBc1RvU3RvcmFnZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHNldE1hcEluZm8oe1xuICAgICAgICB0aXRsZTogYCR7dGl0bGUgfHwgJ0tlcGxlci5nbCd9IChDb3B5KWBcbiAgICAgIH0pO1xuXG4gICAgICB0b2dnbGVNb2RhbChTQVZFX01BUF9JRCk7XG4gICAgfSwgW3RpdGxlLCBzZXRNYXBJbmZvLCB0b2dnbGVNb2RhbF0pO1xuICAgIGNvbnN0IG9uQ2xpY2tTaGFyZU1hcCA9IHVzZUNhbGxiYWNrKCgpID0+IHRvZ2dsZU1vZGFsKFNIQVJFX01BUF9JRCksIFt0b2dnbGVNb2RhbF0pO1xuICAgIGNvbnN0IG9uU2hvd0RhdGFzZXRUYWJsZSA9IHVzZUNhbGxiYWNrKGRhdGFJZCA9PiBzaG93RGF0YXNldFRhYmxlKGRhdGFJZCksIFtzaG93RGF0YXNldFRhYmxlXSk7XG4gICAgY29uc3Qgb25VcGRhdGVUYWJsZUNvbG9yID0gdXNlQ2FsbGJhY2soXG4gICAgICAoZGF0YUlkLCBuZXdDb2xvcikgPT4gdXBkYXRlVGFibGVDb2xvcihkYXRhSWQsIG5ld0NvbG9yKSxcbiAgICAgIFt1cGRhdGVUYWJsZUNvbG9yXVxuICAgICk7XG4gICAgY29uc3Qgb25TaG93QWRkRGF0YU1vZGFsID0gdXNlQ2FsbGJhY2soKCkgPT4gdG9nZ2xlTW9kYWwoQUREX0RBVEFfSUQpLCBbdG9nZ2xlTW9kYWxdKTtcbiAgICBjb25zdCBvblNob3dBZGRNYXBTdHlsZU1vZGFsID0gdXNlQ2FsbGJhY2soKCkgPT4gdG9nZ2xlTW9kYWwoQUREX01BUF9TVFlMRV9JRCksIFt0b2dnbGVNb2RhbF0pO1xuICAgIGNvbnN0IG9uUmVtb3ZlRGF0YXNldCA9IHVzZUNhbGxiYWNrKGRhdGFJZCA9PiBvcGVuRGVsZXRlTW9kYWwoZGF0YUlkKSwgW29wZW5EZWxldGVNb2RhbF0pO1xuICAgIGNvbnN0IG9uU2F2ZVRvU3RvcmFnZSA9IHVzZU1lbW8oKCkgPT4gKGhhc1N0b3JhZ2UgPyBvbkNsaWNrU2F2ZVRvU3RvcmFnZSA6IG51bGwpLCBbXG4gICAgICBoYXNTdG9yYWdlLFxuICAgICAgb25DbGlja1NhdmVUb1N0b3JhZ2VcbiAgICBdKTtcbiAgICBjb25zdCBvblNhdmVBc1RvU3RvcmFnZSA9IHVzZU1lbW8oXG4gICAgICAoKSA9PiAoaGFzU3RvcmFnZSAmJiBtYXBTYXZlZCA/IG9uQ2xpY2tTYXZlQXNUb1N0b3JhZ2UgOiBudWxsKSxcbiAgICAgIFtoYXNTdG9yYWdlLCBtYXBTYXZlZCwgb25DbGlja1NhdmVBc1RvU3RvcmFnZV1cbiAgICApO1xuICAgIGNvbnN0IGN1cnJlbnRQYW5lbCA9IHVzZU1lbW8oKCkgPT4gcGFuZWxzLmZpbmQoKHtpZH0pID0+IGlkID09PSBhY3RpdmVTaWRlUGFuZWwpLCBbXG4gICAgICBhY3RpdmVTaWRlUGFuZWwsXG4gICAgICBwYW5lbHNcbiAgICBdKTtcbiAgICBjb25zdCBvblNoYXJlTWFwID0gdXNlTWVtbygoKSA9PiAoaGFzU2hhcmUgPyBvbkNsaWNrU2hhcmVNYXAgOiBudWxsKSwgW1xuICAgICAgaGFzU2hhcmUsXG4gICAgICBvbkNsaWNrU2hhcmVNYXBcbiAgICBdKTtcbiAgICBjb25zdCBjdXN0b21QYW5lbFByb3BzID0gdXNlTWVtbygoKSA9PiBnZXRDdXN0b21QYW5lbFByb3BzKHByb3BzKSwgW3Byb3BzXSk7XG5cbiAgICBjb25zdCBQYW5lbENvbXBvbmVudCA9IGN1cnJlbnRQYW5lbD8uY29tcG9uZW50O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxTaWRlYmFyIHdpZHRoPXt3aWR0aH0gaXNPcGVuPXtpc09wZW59IG1pbmlmaWVkV2lkdGg9ezB9IG9uT3Blbk9yQ2xvc2U9e19vbk9wZW5PckNsb3NlfT5cbiAgICAgICAgPFBhbmVsSGVhZGVyXG4gICAgICAgICAgYXBwTmFtZT17YXBwTmFtZX1cbiAgICAgICAgICB2ZXJzaW9uPXt2ZXJzaW9ufVxuICAgICAgICAgIGFwcFdlYnNpdGU9e2FwcFdlYnNpdGV9XG4gICAgICAgICAgdmlzaWJsZURyb3Bkb3duPXt1aVN0YXRlLnZpc2libGVEcm9wZG93bn1cbiAgICAgICAgICBzaG93RXhwb3J0RHJvcGRvd249e3VpU3RhdGVBY3Rpb25zLnNob3dFeHBvcnREcm9wZG93bn1cbiAgICAgICAgICBoaWRlRXhwb3J0RHJvcGRvd249e3VpU3RhdGVBY3Rpb25zLmhpZGVFeHBvcnREcm9wZG93bn1cbiAgICAgICAgICBvbkV4cG9ydEltYWdlPXtvbkNsaWNrRXhwb3J0SW1hZ2V9XG4gICAgICAgICAgb25FeHBvcnREYXRhPXtvbkNsaWNrRXhwb3J0RGF0YX1cbiAgICAgICAgICBvbkV4cG9ydE1hcD17b25DbGlja0V4cG9ydE1hcH1cbiAgICAgICAgICBvblNhdmVNYXA9e29uU2F2ZU1hcH1cbiAgICAgICAgICBvblNhdmVUb1N0b3JhZ2U9e29uU2F2ZVRvU3RvcmFnZX1cbiAgICAgICAgICBvblNhdmVBc1RvU3RvcmFnZT17b25TYXZlQXNUb1N0b3JhZ2V9XG4gICAgICAgICAgb25TaGFyZU1hcD17b25TaGFyZU1hcH1cbiAgICAgICAgLz5cbiAgICAgICAgey8qIHRoZSBuZXh0IHR3byBjb21wb25lbnRzIHNob3VsZCBiZSBtb3ZlZCBpbnRvIG9uZSAqL31cbiAgICAgICAgey8qIGJ1dCBpIGFtIGtlZXBpbmcgdGhlbSBiZWNhdXNlIG9mIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgKi99XG4gICAgICAgIDxQYW5lbFRvZ2dsZVxuICAgICAgICAgIHBhbmVscz17cGFuZWxzfVxuICAgICAgICAgIGFjdGl2ZVBhbmVsPXthY3RpdmVTaWRlUGFuZWx9XG4gICAgICAgICAgdG9nZ2xlUGFuZWw9e3VpU3RhdGVBY3Rpb25zLnRvZ2dsZVNpZGVQYW5lbH1cbiAgICAgICAgLz5cbiAgICAgICAgPFN0eWxlZFNpZGVQYW5lbENvbnRlbnQgY2xhc3NOYW1lPVwic2lkZS1wYW5lbF9fY29udGVudFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2lkZS1wYW5lbF9fY29udGVudF9faW5uZXJcIj5cbiAgICAgICAgICAgIHtjdXJyZW50UGFuZWw/LmlkICE9PSAnbGF5ZXInID8gKFxuICAgICAgICAgICAgICA8UGFuZWxUaXRsZT5cbiAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD17Y3VycmVudFBhbmVsPy5sYWJlbH0gLz5cbiAgICAgICAgICAgICAgPC9QYW5lbFRpdGxlPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICB7UGFuZWxDb21wb25lbnQgPyAoXG4gICAgICAgICAgICAgIDxQYW5lbENvbXBvbmVudFxuICAgICAgICAgICAgICAgIGRhdGFzZXRzPXtkYXRhc2V0c31cbiAgICAgICAgICAgICAgICBmaWx0ZXJzPXtmaWx0ZXJzfVxuICAgICAgICAgICAgICAgIGxheWVycz17bGF5ZXJzfVxuICAgICAgICAgICAgICAgIGxheWVyQ2xhc3Nlcz17bGF5ZXJDbGFzc2VzfVxuICAgICAgICAgICAgICAgIGxheWVyT3JkZXI9e2xheWVyT3JkZXJ9XG4gICAgICAgICAgICAgICAgbGF5ZXJCbGVuZGluZz17bGF5ZXJCbGVuZGluZ31cbiAgICAgICAgICAgICAgICBtYXBTdHlsZT17bWFwU3R5bGV9XG4gICAgICAgICAgICAgICAgbWFwU3R5bGVBY3Rpb25zPXttYXBTdHlsZUFjdGlvbnN9XG4gICAgICAgICAgICAgICAgbWFwU3RhdGVBY3Rpb25zPXttYXBTdGF0ZUFjdGlvbnN9XG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25Db25maWc9e2ludGVyYWN0aW9uQ29uZmlnfVxuICAgICAgICAgICAgICAgIHJlbW92ZURhdGFzZXQ9e29uUmVtb3ZlRGF0YXNldH1cbiAgICAgICAgICAgICAgICBzaG93RGF0YXNldFRhYmxlPXtvblNob3dEYXRhc2V0VGFibGV9XG4gICAgICAgICAgICAgICAgdXBkYXRlVGFibGVDb2xvcj17b25VcGRhdGVUYWJsZUNvbG9yfVxuICAgICAgICAgICAgICAgIHNob3dBZGREYXRhTW9kYWw9e29uU2hvd0FkZERhdGFNb2RhbH1cbiAgICAgICAgICAgICAgICBzaG93QWRkTWFwU3R5bGVNb2RhbD17b25TaG93QWRkTWFwU3R5bGVNb2RhbH1cbiAgICAgICAgICAgICAgICB1aVN0YXRlQWN0aW9ucz17dWlTdGF0ZUFjdGlvbnN9XG4gICAgICAgICAgICAgICAgdmlzU3RhdGVBY3Rpb25zPXt2aXNTdGF0ZUFjdGlvbnN9XG4gICAgICAgICAgICAgICAgcGFuZWxNZXRhZGF0YT17Y3VycmVudFBhbmVsfVxuICAgICAgICAgICAgICAgIGxheWVyUGFuZWxMaXN0Vmlldz17Y3VycmVudFBhbmVsPy5pZCA9PT0gJ2xheWVyJyAmJiB1aVN0YXRlLmxheWVyUGFuZWxMaXN0Vmlld31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPEN1c3RvbVBhbmVscyB7Li4uY3VzdG9tUGFuZWxQcm9wc30gYWN0aXZlU2lkZVBhbmVsPXthY3RpdmVTaWRlUGFuZWx9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU3R5bGVkU2lkZVBhbmVsQ29udGVudD5cbiAgICAgIDwvU2lkZWJhcj5cbiAgICApO1xuICB9O1xuXG4gIFNpZGVQYW5lbC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcGFuZWxzOiBmdWxsUGFuZWxzLFxuICAgIHNpZGViYXJDb21wb25lbnRzOiBTSURFQkFSX0NPTVBPTkVOVFMsXG4gICAgdWlTdGF0ZToge30sXG4gICAgdmlzU3RhdGVBY3Rpb25zOiB7fSxcbiAgICBtYXBTdHlsZUFjdGlvbnM6IHt9LFxuICAgIHVpU3RhdGVBY3Rpb25zOiB7fSxcbiAgICBhdmFpbGFibGVQcm92aWRlcnM6IHt9LFxuICAgIG1hcEluZm86IHt9XG4gIH07XG5cbiAgcmV0dXJuIFNpZGVQYW5lbDtcbn1cbiJdfQ==