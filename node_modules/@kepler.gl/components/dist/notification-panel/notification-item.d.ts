import React from 'react';
import { ActionHandler, removeNotification as removeNotificationActions } from '@kepler.gl/actions';
interface NotificationItemProps {
    notification: {
        id: string;
        type: string;
        message: string;
    };
    isExpanded?: boolean;
    removeNotification?: ActionHandler<typeof removeNotificationActions>;
    theme?: any;
}
export default function NotificationItemFactory(): {
    new (props: NotificationItemProps | Readonly<NotificationItemProps>): {
        state: {
            isExpanded: boolean;
        };
        componentDidMount(): void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<NotificationItemProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<NotificationItemProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<NotificationItemProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<NotificationItemProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<NotificationItemProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<NotificationItemProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<NotificationItemProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<NotificationItemProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<NotificationItemProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: NotificationItemProps, context: any): {
        state: {
            isExpanded: boolean;
        };
        componentDidMount(): void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<NotificationItemProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<NotificationItemProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<NotificationItemProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<NotificationItemProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<NotificationItemProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<NotificationItemProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<NotificationItemProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<NotificationItemProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<NotificationItemProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export {};
