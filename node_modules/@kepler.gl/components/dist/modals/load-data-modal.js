// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadDataModalFactory = LoadDataModalFactory;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _lodash = _interopRequireDefault(require("lodash.get"));

var _reactIntl = require("react-intl");

var _fileUpload = _interopRequireDefault(require("../common/file-uploader/file-upload"));

var _loadStorageMap = _interopRequireDefault(require("./load-storage-map"));

var _modalTabs = _interopRequireDefault(require("./modal-tabs"));

var _loadingDialog = _interopRequireDefault(require("./loading-dialog"));

var _constants = require("@kepler.gl/constants");

var _templateObject;

/** @typedef {import('./load-data-modal').LoadDataModalProps} LoadDataModalProps */
var StyledLoadDataModal = _styledComponents["default"].div.attrs({
  className: 'load-data-modal'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: ", ";\n  min-height: 440px;\n  display: flex;\n  flex-direction: column;\n"])), function (props) {
  return props.theme.modalPadding;
});

var noop = function noop() {};

var getDefaultMethod = function getDefaultMethod() {
  var methods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return Array.isArray(methods) ? (0, _lodash["default"])(methods, [0]) : null;
};

LoadDataModalFactory.deps = [_modalTabs["default"], _fileUpload["default"], _loadStorageMap["default"]];

function LoadDataModalFactory(ModalTabs, FileUpload, LoadStorageMap) {
  /** @type {React.FunctionComponent<LoadDataModalProps>} */
  var LoadDataModal = function LoadDataModal(props) {
    var intl = (0, _reactIntl.useIntl)();
    var loadingMethods = props.loadingMethods,
        isCloudMapLoading = props.isCloudMapLoading;

    var _useState = (0, _react.useState)(getDefaultMethod(loadingMethods)),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        currentMethod = _useState2[0],
        toggleMethod = _useState2[1];

    var ElementType = currentMethod === null || currentMethod === void 0 ? void 0 : currentMethod.elementType;
    return /*#__PURE__*/_react["default"].createElement(StyledLoadDataModal, null, /*#__PURE__*/_react["default"].createElement(ModalTabs, {
      currentMethod: currentMethod === null || currentMethod === void 0 ? void 0 : currentMethod.id,
      loadingMethods: loadingMethods,
      toggleMethod: toggleMethod
    }), isCloudMapLoading ? /*#__PURE__*/_react["default"].createElement(_loadingDialog["default"], {
      size: 64
    }) : ElementType && /*#__PURE__*/_react["default"].createElement(ElementType, (0, _extends2["default"])({
      key: currentMethod === null || currentMethod === void 0 ? void 0 : currentMethod.id,
      intl: intl
    }, props)));
  };

  LoadDataModal.defaultProps = {
    onFileUpload: noop,
    fileLoading: false,
    loadingMethods: [{
      id: _constants.LOADING_METHODS.upload,
      label: 'modal.loadData.upload',
      elementType: FileUpload
    }, {
      id: _constants.LOADING_METHODS.storage,
      label: 'modal.loadData.storage',
      elementType: LoadStorageMap
    }]
  };
  return LoadDataModal;
}

var _default = LoadDataModalFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,