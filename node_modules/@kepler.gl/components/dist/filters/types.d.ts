import { Filter, MultiSelectFilter, RangeFilter, SelectFilter, TimeRangeFilter } from '@kepler.gl/types';
import { Layer } from '@kepler.gl/layers';
import { ActionHandler, enlargeFilter, setFilterAnimationTime, setFilterAnimationWindow, setFilterPlot, toggleFilterAnimation, updateFilterAnimationSpeed } from '@kepler.gl/actions';
import { Datasets } from '@kepler.gl/table';
export declare type PolygonFilterProps = {
    filter: Filter;
    layers: ReadonlyArray<Layer>;
    setLayers: (ids: ReadonlyArray<string>) => void;
};
export declare type TopSectionWrapperProps = {
    hoverColor?: string;
};
export declare type RangeFilterProps = {
    filter: RangeFilter;
    setFilter: (v: number[]) => void;
};
export declare type TimeRangeFilterProps = {
    filter: TimeRangeFilter;
    isAnimatable: boolean;
    hideTimeTitle: boolean;
    setFilter: (v: number[]) => void;
    toggleAnimation: () => void;
};
export declare type SingleSelectFilterProps = {
    filter: SelectFilter;
    setFilter: (v: string | number | boolean | object | null) => void;
};
export declare type MultiSelectFilterProps = {
    filter: MultiSelectFilter;
    setFilter: (v: ReadonlyArray<string | number | boolean | object> | string | number | boolean | object | null) => void;
};
export declare type TimeWidgetTopProps = {
    filter: Filter;
    readOnly: boolean;
    datasets: Datasets;
    setFilterPlot: ActionHandler<typeof setFilterPlot>;
    index: number;
    onClose: () => void;
};
export declare type TimeWidgetProps = {
    datasets: Datasets;
    filter: TimeRangeFilter;
    index: number;
    readOnly: boolean;
    showTimeDisplay: boolean;
    isAnimatable: boolean;
    resetAnimation: () => void;
    setFilterAnimationTime: ActionHandler<typeof setFilterAnimationTime>;
    updateAnimationSpeed: ActionHandler<typeof updateFilterAnimationSpeed>;
    toggleAnimation: ActionHandler<typeof toggleFilterAnimation>;
    enlargeFilter: ActionHandler<typeof enlargeFilter>;
    setFilterPlot: ActionHandler<typeof setFilterPlot>;
    setFilterAnimationWindow: ActionHandler<typeof setFilterAnimationWindow>;
};
