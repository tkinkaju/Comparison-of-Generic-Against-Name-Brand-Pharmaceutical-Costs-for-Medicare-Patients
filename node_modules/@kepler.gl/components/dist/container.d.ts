import React, { ComponentType } from 'react';
import { ConnectedProps } from 'react-redux';
import KeplerGlFactory from './kepler-gl';
import { KeplerGlState } from '@kepler.gl/reducers';
export declare const ERROR_MSG: {
    noState: string;
};
declare const connector: import("react-redux").InferableComponentEnhancerWithProps<{
    id: string;
    mapboxApiAccessToken: string;
    mapboxApiUrl?: string | undefined;
    mapStylesReplaceDefault?: boolean | undefined;
    initialUiState?: object | undefined;
    width: number;
    mint?: boolean | undefined;
    getState: (state: any) => KeplerGlState;
    state: any;
} & {
    dispatch: React.Dispatch<any>;
}, ContainerProps>;
declare type ContainerProps = {
    id: string;
    mapboxApiAccessToken: string;
    mapboxApiUrl?: string;
    mapStylesReplaceDefault?: boolean;
    initialUiState?: object;
    width: number;
    mint?: boolean;
    getState: (state: any) => KeplerGlState;
};
declare type PropsFromRedux = ConnectedProps<typeof connector> & ContainerProps;
export declare function ContainerFactory(KeplerGl: ReturnType<typeof KeplerGlFactory>): ComponentType<PropsFromRedux>;
export declare namespace ContainerFactory {
    var deps: (typeof KeplerGlFactory)[];
}
export declare const appInjector: import("./injector").InjectorType;
export declare function injectComponents(recipes?: never[]): any;
declare const InjectedContainer: any;
export default InjectedContainer;
