// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUpdateVisDataPayload = getUpdateVisDataPayload;
exports["default"] = GeocoderPanelFactory;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _processors = require("@kepler.gl/processors");

var _core = require("@deck.gl/core");

var _schemas = _interopRequireDefault(require("@kepler.gl/schemas"));

var _utils = require("@kepler.gl/utils");

var _geocoder = _interopRequireDefault(require("./geocoder/geocoder"));

var _constants = require("@kepler.gl/constants");

var _templateObject;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ICON_LAYER = {
  id: _constants.GEOCODER_LAYER_ID,
  type: 'icon',
  config: {
    label: 'Geocoder Layer',
    color: _constants.GEOCODER_ICON_COLOR,
    dataId: _constants.GEOCODER_DATASET_NAME,
    columns: {
      lat: 'lt',
      lng: 'ln',
      icon: 'icon',
      label: 'text'
    },
    isVisible: true,
    hidden: true,
    visConfig: {
      radius: _constants.GEOCODER_ICON_SIZE
    }
  }
};

var PARSED_CONFIG = _schemas["default"].parseSavedConfig({
  version: 'v1',
  config: {
    visState: {
      layers: [ICON_LAYER]
    }
  }
});

var StyledGeocoderPanel = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  top: ", "px;\n  right: ", "px;\n  width: ", "px;\n  box-shadow: ", ";\n  z-index: 100;\n"])), function (props) {
  return props.theme.geocoderTop;
}, function (props) {
  return props.theme.geocoderRight;
}, function (props) {
  return Number.isFinite(props.width) ? props.width : props.theme.geocoderWidth;
}, function (props) {
  return props.theme.boxShadow;
});

function generateGeocoderDataset(lat, lon, text) {
  return {
    data: (0, _processors.processRowObject)([{
      lt: lat,
      ln: lon,
      icon: 'place',
      text: text
    }]),
    id: _constants.GEOCODER_DATASET_NAME,
    info: {
      hidden: true,
      id: _constants.GEOCODER_DATASET_NAME,
      label: _constants.GEOCODER_DATASET_NAME
    }
  };
}

function isValid(key) {
  return /pk\..*\..*/.test(key);
}

function getUpdateVisDataPayload(lat, lon, text) {
  return [[generateGeocoderDataset(lat, lon, text)], {
    keepExistingConfig: true
  }, PARSED_CONFIG];
}

function GeocoderPanelFactory() {
  var GeocoderPanel = /*#__PURE__*/function (_Component) {
    (0, _inherits2["default"])(GeocoderPanel, _Component);

    var _super = _createSuper(GeocoderPanel);

    function GeocoderPanel() {
      var _this;

      (0, _classCallCheck2["default"])(this, GeocoderPanel);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "defaultProps", {
        transitionDuration: 3000
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onSelected", function () {
        var _this$props;

        var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var geoItem = arguments.length > 1 ? arguments[1] : undefined;

        var _geoItem$center = (0, _slicedToArray2["default"])(geoItem.center, 2),
            lon = _geoItem$center[0],
            lat = _geoItem$center[1],
            text = geoItem.text,
            bbox = geoItem.bbox;

        _this.removeGeocoderDataset();

        (_this$props = _this.props).updateVisData.apply(_this$props, (0, _toConsumableArray2["default"])(getUpdateVisDataPayload(lat, lon, text)));

        var bounds = bbox || [lon - _constants.GEOCODER_GEO_OFFSET, lat - _constants.GEOCODER_GEO_OFFSET, lon + _constants.GEOCODER_GEO_OFFSET, lat + _constants.GEOCODER_GEO_OFFSET];
        var centerAndZoom = (0, _utils.getCenterAndZoomFromBounds)(bounds, {
          width: _this.props.mapState.width,
          height: _this.props.mapState.height
        });

        if (!centerAndZoom) {
          // failed to fit bounds
          return;
        }

        _this.props.updateMap(_objectSpread(_objectSpread({
          latitude: centerAndZoom.center[1],
          longitude: centerAndZoom.center[0]
        }, Number.isFinite(centerAndZoom.zoom) ? {
          zoom: centerAndZoom.zoom
        } : {}), {}, {
          pitch: 0,
          bearing: 0,
          transitionDuration: _this.props.transitionDuration,
          transitionInterpolator: new _core.FlyToInterpolator()
        }));
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "removeMarker", function () {
        _this.removeGeocoderDataset();
      });
      return _this;
    }

    (0, _createClass2["default"])(GeocoderPanel, [{
      key: "removeGeocoderDataset",
      value: function removeGeocoderDataset() {
        this.props.removeDataset(_constants.GEOCODER_DATASET_NAME);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            isGeocoderEnabled = _this$props2.isGeocoderEnabled,
            mapboxApiAccessToken = _this$props2.mapboxApiAccessToken,
            width = _this$props2.width;
        return /*#__PURE__*/_react["default"].createElement(StyledGeocoderPanel, {
          className: "geocoder-panel",
          width: width,
          style: {
            display: isGeocoderEnabled ? 'block' : 'none'
          }
        }, isValid(mapboxApiAccessToken) && /*#__PURE__*/_react["default"].createElement(_geocoder["default"], {
          mapboxApiAccessToken: mapboxApiAccessToken,
          onSelected: this.onSelected,
          onDeleteMarker: this.removeMarker,
          width: width
        }));
      }
    }]);
    return GeocoderPanel;
  }(_react.Component);

  return GeocoderPanel;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nZW9jb2Rlci1wYW5lbC50c3giXSwibmFtZXMiOlsiSUNPTl9MQVlFUiIsImlkIiwiR0VPQ09ERVJfTEFZRVJfSUQiLCJ0eXBlIiwiY29uZmlnIiwibGFiZWwiLCJjb2xvciIsIkdFT0NPREVSX0lDT05fQ09MT1IiLCJkYXRhSWQiLCJHRU9DT0RFUl9EQVRBU0VUX05BTUUiLCJjb2x1bW5zIiwibGF0IiwibG5nIiwiaWNvbiIsImlzVmlzaWJsZSIsImhpZGRlbiIsInZpc0NvbmZpZyIsInJhZGl1cyIsIkdFT0NPREVSX0lDT05fU0laRSIsIlBBUlNFRF9DT05GSUciLCJLZXBsZXJHbFNjaGVtYSIsInBhcnNlU2F2ZWRDb25maWciLCJ2ZXJzaW9uIiwidmlzU3RhdGUiLCJsYXllcnMiLCJTdHlsZWRHZW9jb2RlclBhbmVsIiwic3R5bGVkIiwiZGl2IiwicHJvcHMiLCJ0aGVtZSIsImdlb2NvZGVyVG9wIiwiZ2VvY29kZXJSaWdodCIsIk51bWJlciIsImlzRmluaXRlIiwid2lkdGgiLCJnZW9jb2RlcldpZHRoIiwiYm94U2hhZG93IiwiZ2VuZXJhdGVHZW9jb2RlckRhdGFzZXQiLCJsb24iLCJ0ZXh0IiwiZGF0YSIsImx0IiwibG4iLCJpbmZvIiwiaXNWYWxpZCIsImtleSIsInRlc3QiLCJnZXRVcGRhdGVWaXNEYXRhUGF5bG9hZCIsImtlZXBFeGlzdGluZ0NvbmZpZyIsIkdlb2NvZGVyUGFuZWxGYWN0b3J5IiwiR2VvY29kZXJQYW5lbCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInZpZXdwb3J0IiwiZ2VvSXRlbSIsImNlbnRlciIsImJib3giLCJyZW1vdmVHZW9jb2RlckRhdGFzZXQiLCJ1cGRhdGVWaXNEYXRhIiwiYm91bmRzIiwiR0VPQ09ERVJfR0VPX09GRlNFVCIsImNlbnRlckFuZFpvb20iLCJtYXBTdGF0ZSIsImhlaWdodCIsInVwZGF0ZU1hcCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiem9vbSIsInBpdGNoIiwiYmVhcmluZyIsInRyYW5zaXRpb25JbnRlcnBvbGF0b3IiLCJGbHlUb0ludGVycG9sYXRvciIsInJlbW92ZURhdGFzZXQiLCJpc0dlb2NvZGVyRW5hYmxlZCIsIm1hcGJveEFwaUFjY2Vzc1Rva2VuIiwiZGlzcGxheSIsIm9uU2VsZWN0ZWQiLCJyZW1vdmVNYXJrZXIiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOzs7Ozs7Ozs7Ozs7QUFTQSxJQUFNQSxVQUFVLEdBQUc7QUFDakJDLEVBQUFBLEVBQUUsRUFBRUMsNEJBRGE7QUFFakJDLEVBQUFBLElBQUksRUFBRSxNQUZXO0FBR2pCQyxFQUFBQSxNQUFNLEVBQUU7QUFDTkMsSUFBQUEsS0FBSyxFQUFFLGdCQUREO0FBRU5DLElBQUFBLEtBQUssRUFBRUMsOEJBRkQ7QUFHTkMsSUFBQUEsTUFBTSxFQUFFQyxnQ0FIRjtBQUlOQyxJQUFBQSxPQUFPLEVBQUU7QUFDUEMsTUFBQUEsR0FBRyxFQUFFLElBREU7QUFFUEMsTUFBQUEsR0FBRyxFQUFFLElBRkU7QUFHUEMsTUFBQUEsSUFBSSxFQUFFLE1BSEM7QUFJUFIsTUFBQUEsS0FBSyxFQUFFO0FBSkEsS0FKSDtBQVVOUyxJQUFBQSxTQUFTLEVBQUUsSUFWTDtBQVdOQyxJQUFBQSxNQUFNLEVBQUUsSUFYRjtBQVlOQyxJQUFBQSxTQUFTLEVBQUU7QUFDVEMsTUFBQUEsTUFBTSxFQUFFQztBQURDO0FBWkw7QUFIUyxDQUFuQjs7QUFxQkEsSUFBTUMsYUFBYSxHQUFHQyxvQkFBZUMsZ0JBQWYsQ0FBZ0M7QUFDcERDLEVBQUFBLE9BQU8sRUFBRSxJQUQyQztBQUVwRGxCLEVBQUFBLE1BQU0sRUFBRTtBQUNObUIsSUFBQUEsUUFBUSxFQUFFO0FBQ1JDLE1BQUFBLE1BQU0sRUFBRSxDQUFDeEIsVUFBRDtBQURBO0FBREo7QUFGNEMsQ0FBaEMsQ0FBdEI7O0FBYUEsSUFBTXlCLG1CQUFtQixH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RixpQkFBaUIsR0FBRyxPQUFILEdBQWE7QUFBeEM7QUFIVCxXQUtHNUIsT0FBTyxDQUFDNkIsb0JBQUQsQ0FBUCxpQkFDQyxnQ0FBQyxvQkFBRDtBQUNFLFVBQUEsb0JBQW9CLEVBQUVBLG9CQUR4QjtBQUVFLFVBQUEsVUFBVSxFQUFFLEtBQUtFLFVBRm5CO0FBR0UsVUFBQSxjQUFjLEVBQUUsS0FBS0MsWUFIdkI7QUFJRSxVQUFBLEtBQUssRUFBRTFDO0FBSlQsVUFOSixDQURGO0FBZ0JEO0FBckU2RTtBQUFBO0FBQUEsSUFDcEQyQyxnQkFEb0Q7O0FBd0VoRixTQUFPM0IsYUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIyIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50LCBDb21wb25lbnRUeXBlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7cHJvY2Vzc1Jvd09iamVjdH0gZnJvbSAnQGtlcGxlci5nbC9wcm9jZXNzb3JzJztcbmltcG9ydCB7Rmx5VG9JbnRlcnBvbGF0b3J9IGZyb20gJ0BkZWNrLmdsL2NvcmUnO1xuaW1wb3J0IEtlcGxlckdsU2NoZW1hIGZyb20gJ0BrZXBsZXIuZ2wvc2NoZW1hcyc7XG5pbXBvcnQge2dldENlbnRlckFuZFpvb21Gcm9tQm91bmRzfSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcblxuaW1wb3J0IEdlb2NvZGVyLCB7UmVzdWx0fSBmcm9tICcuL2dlb2NvZGVyL2dlb2NvZGVyJztcbmltcG9ydCB7XG4gIEdFT0NPREVSX0RBVEFTRVRfTkFNRSxcbiAgR0VPQ09ERVJfTEFZRVJfSUQsXG4gIEdFT0NPREVSX0dFT19PRkZTRVQsXG4gIEdFT0NPREVSX0lDT05fQ09MT1IsXG4gIEdFT0NPREVSX0lDT05fU0laRVxufSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge01hcFN0YXRlLCBWaWV3cG9ydH0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5cbmNvbnN0IElDT05fTEFZRVIgPSB7XG4gIGlkOiBHRU9DT0RFUl9MQVlFUl9JRCxcbiAgdHlwZTogJ2ljb24nLFxuICBjb25maWc6IHtcbiAgICBsYWJlbDogJ0dlb2NvZGVyIExheWVyJyxcbiAgICBjb2xvcjogR0VPQ09ERVJfSUNPTl9DT0xPUixcbiAgICBkYXRhSWQ6IEdFT0NPREVSX0RBVEFTRVRfTkFNRSxcbiAgICBjb2x1bW5zOiB7XG4gICAgICBsYXQ6ICdsdCcsXG4gICAgICBsbmc6ICdsbicsXG4gICAgICBpY29uOiAnaWNvbicsXG4gICAgICBsYWJlbDogJ3RleHQnXG4gICAgfSxcbiAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgaGlkZGVuOiB0cnVlLFxuICAgIHZpc0NvbmZpZzoge1xuICAgICAgcmFkaXVzOiBHRU9DT0RFUl9JQ09OX1NJWkVcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IFBBUlNFRF9DT05GSUcgPSBLZXBsZXJHbFNjaGVtYS5wYXJzZVNhdmVkQ29uZmlnKHtcbiAgdmVyc2lvbjogJ3YxJyxcbiAgY29uZmlnOiB7XG4gICAgdmlzU3RhdGU6IHtcbiAgICAgIGxheWVyczogW0lDT05fTEFZRVJdXG4gICAgfVxuICB9XG59KTtcblxuaW50ZXJmYWNlIFN0eWxlZEdlb2NvZGVyUGFuZWxQcm9wcyB7XG4gIHdpZHRoPzogbnVtYmVyO1xufVxuXG5jb25zdCBTdHlsZWRHZW9jb2RlclBhbmVsID0gc3R5bGVkLmRpdjxTdHlsZWRHZW9jb2RlclBhbmVsUHJvcHM+YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5nZW9jb2RlclRvcH1weDtcbiAgcmlnaHQ6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuZ2VvY29kZXJSaWdodH1weDtcbiAgd2lkdGg6ICR7cHJvcHMgPT4gKE51bWJlci5pc0Zpbml0ZShwcm9wcy53aWR0aCkgPyBwcm9wcy53aWR0aCA6IHByb3BzLnRoZW1lLmdlb2NvZGVyV2lkdGgpfXB4O1xuICBib3gtc2hhZG93OiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmJveFNoYWRvd307XG4gIHotaW5kZXg6IDEwMDtcbmA7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR2VvY29kZXJEYXRhc2V0KGxhdCwgbG9uLCB0ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgZGF0YTogcHJvY2Vzc1Jvd09iamVjdChbXG4gICAgICB7XG4gICAgICAgIGx0OiBsYXQsXG4gICAgICAgIGxuOiBsb24sXG4gICAgICAgIGljb246ICdwbGFjZScsXG4gICAgICAgIHRleHRcbiAgICAgIH1cbiAgICBdKSxcbiAgICBpZDogR0VPQ09ERVJfREFUQVNFVF9OQU1FLFxuICAgIGluZm86IHtcbiAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICAgIGlkOiBHRU9DT0RFUl9EQVRBU0VUX05BTUUsXG4gICAgICBsYWJlbDogR0VPQ09ERVJfREFUQVNFVF9OQU1FXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkKGtleSkge1xuICByZXR1cm4gL3BrXFwuLipcXC4uKi8udGVzdChrZXkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXBkYXRlVmlzRGF0YVBheWxvYWQobGF0LCBsb24sIHRleHQpIHtcbiAgcmV0dXJuIFtcbiAgICBbZ2VuZXJhdGVHZW9jb2RlckRhdGFzZXQobGF0LCBsb24sIHRleHQpXSxcbiAgICB7XG4gICAgICBrZWVwRXhpc3RpbmdDb25maWc6IHRydWVcbiAgICB9LFxuICAgIFBBUlNFRF9DT05GSUdcbiAgXTtcbn1cblxuaW50ZXJmYWNlIEdlb2NvZGVyUGFuZWxQcm9wcyB7XG4gIGlzR2VvY29kZXJFbmFibGVkOiBib29sZWFuO1xuICBtYXBTdGF0ZTogTWFwU3RhdGU7XG4gIG1hcGJveEFwaUFjY2Vzc1Rva2VuOiBzdHJpbmc7XG4gIHVwZGF0ZVZpc0RhdGE6IEZ1bmN0aW9uO1xuICByZW1vdmVEYXRhc2V0OiBGdW5jdGlvbjtcbiAgdXBkYXRlTWFwOiBGdW5jdGlvbjtcblxuICB0cmFuc2l0aW9uRHVyYXRpb24/OiBudW1iZXI7XG4gIHdpZHRoPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHZW9jb2RlclBhbmVsRmFjdG9yeSgpOiBDb21wb25lbnRUeXBlPEdlb2NvZGVyUGFuZWxQcm9wcz4ge1xuICBjbGFzcyBHZW9jb2RlclBhbmVsIGV4dGVuZHMgQ29tcG9uZW50PEdlb2NvZGVyUGFuZWxQcm9wcz4ge1xuICAgIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogMzAwMFxuICAgIH07XG5cbiAgICByZW1vdmVHZW9jb2RlckRhdGFzZXQoKSB7XG4gICAgICB0aGlzLnByb3BzLnJlbW92ZURhdGFzZXQoR0VPQ09ERVJfREFUQVNFVF9OQU1FKTtcbiAgICB9XG5cbiAgICBvblNlbGVjdGVkID0gKHZpZXdwb3J0OiBWaWV3cG9ydCB8IG51bGwgPSBudWxsLCBnZW9JdGVtOiBSZXN1bHQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2VudGVyOiBbbG9uLCBsYXRdLFxuICAgICAgICB0ZXh0LFxuICAgICAgICBiYm94XG4gICAgICB9ID0gZ2VvSXRlbTtcbiAgICAgIHRoaXMucmVtb3ZlR2VvY29kZXJEYXRhc2V0KCk7XG4gICAgICB0aGlzLnByb3BzLnVwZGF0ZVZpc0RhdGEoLi4uZ2V0VXBkYXRlVmlzRGF0YVBheWxvYWQobGF0LCBsb24sIHRleHQpKTtcbiAgICAgIGNvbnN0IGJvdW5kcyA9IGJib3ggfHwgW1xuICAgICAgICBsb24gLSBHRU9DT0RFUl9HRU9fT0ZGU0VULFxuICAgICAgICBsYXQgLSBHRU9DT0RFUl9HRU9fT0ZGU0VULFxuICAgICAgICBsb24gKyBHRU9DT0RFUl9HRU9fT0ZGU0VULFxuICAgICAgICBsYXQgKyBHRU9DT0RFUl9HRU9fT0ZGU0VUXG4gICAgICBdO1xuICAgICAgY29uc3QgY2VudGVyQW5kWm9vbSA9IGdldENlbnRlckFuZFpvb21Gcm9tQm91bmRzKGJvdW5kcywge1xuICAgICAgICB3aWR0aDogdGhpcy5wcm9wcy5tYXBTdGF0ZS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLnByb3BzLm1hcFN0YXRlLmhlaWdodFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghY2VudGVyQW5kWm9vbSkge1xuICAgICAgICAvLyBmYWlsZWQgdG8gZml0IGJvdW5kc1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMudXBkYXRlTWFwKHtcbiAgICAgICAgbGF0aXR1ZGU6IGNlbnRlckFuZFpvb20uY2VudGVyWzFdLFxuICAgICAgICBsb25naXR1ZGU6IGNlbnRlckFuZFpvb20uY2VudGVyWzBdLFxuICAgICAgICAvLyBGb3IgbWFyZ2luYWwgb3IgaW52YWxpZCBib3VuZHMsIHpvb20gbWF5IGJlIE5hTi4gTWFrZSBzdXJlIHRvIHByb3ZpZGUgYSB2YWxpZCB2YWx1ZSBpbiBvcmRlclxuICAgICAgICAvLyB0byBhdm9pZCBjb3JydXB0IHN0YXRlIGFuZCBwb3RlbnRpYWwgY3Jhc2hlcyBhcyB6b29tIGlzIGV4cGVjdGVkIHRvIGJlIGEgbnVtYmVyXG4gICAgICAgIC4uLihOdW1iZXIuaXNGaW5pdGUoY2VudGVyQW5kWm9vbS56b29tKSA/IHt6b29tOiBjZW50ZXJBbmRab29tLnpvb219IDoge30pLFxuICAgICAgICBwaXRjaDogMCxcbiAgICAgICAgYmVhcmluZzogMCxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0aGlzLnByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgdHJhbnNpdGlvbkludGVycG9sYXRvcjogbmV3IEZseVRvSW50ZXJwb2xhdG9yKClcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZW1vdmVNYXJrZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLnJlbW92ZUdlb2NvZGVyRGF0YXNldCgpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCB7aXNHZW9jb2RlckVuYWJsZWQsIG1hcGJveEFwaUFjY2Vzc1Rva2VuLCB3aWR0aH0gPSB0aGlzLnByb3BzO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFN0eWxlZEdlb2NvZGVyUGFuZWxcbiAgICAgICAgICBjbGFzc05hbWU9XCJnZW9jb2Rlci1wYW5lbFwiXG4gICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgIHN0eWxlPXt7ZGlzcGxheTogaXNHZW9jb2RlckVuYWJsZWQgPyAnYmxvY2snIDogJ25vbmUnfX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpc1ZhbGlkKG1hcGJveEFwaUFjY2Vzc1Rva2VuKSAmJiAoXG4gICAgICAgICAgICA8R2VvY29kZXJcbiAgICAgICAgICAgICAgbWFwYm94QXBpQWNjZXNzVG9rZW49e21hcGJveEFwaUFjY2Vzc1Rva2VufVxuICAgICAgICAgICAgICBvblNlbGVjdGVkPXt0aGlzLm9uU2VsZWN0ZWR9XG4gICAgICAgICAgICAgIG9uRGVsZXRlTWFya2VyPXt0aGlzLnJlbW92ZU1hcmtlcn1cbiAgICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1N0eWxlZEdlb2NvZGVyUGFuZWw+XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBHZW9jb2RlclBhbmVsO1xufVxuIl19