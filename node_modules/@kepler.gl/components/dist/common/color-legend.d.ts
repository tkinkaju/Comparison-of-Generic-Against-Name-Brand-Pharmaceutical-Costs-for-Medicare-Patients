import { Component } from 'react';
declare type RangeType = {
    colorMap?: [string, string][];
    colorLegends?: {
        [key: string]: string;
    };
    colors: string[];
};
interface ColorLegendProps {
    width: number;
    scaleType?: string;
    domain?: any[] | object;
    fieldType?: string | null;
    range?: RangeType;
    labelFormat?: Function;
    displayLabel?: boolean;
}
export default class ColorLegend extends Component<ColorLegendProps> {
    domainSelector: (props: any) => any;
    rangeSelector: (props: any) => any;
    labelFormatSelector: (props: any) => any;
    scaleTypeSelector: (props: any) => any;
    fieldTypeSelector: (props: any) => any;
    legendsSelector: import("reselect").OutputSelector<any, {
        data: any;
        labels: any;
    }, (res1: any, res2: any, res3: any, res4: any, res5: any) => {
        data: any;
        labels: any;
    }>;
    render(): JSX.Element;
}
export declare const LegendRow: ({ label, displayLabel, color, idx }: {
    label?: string | undefined;
    displayLabel: any;
    color: any;
    idx: any;
}) => JSX.Element;
export {};
