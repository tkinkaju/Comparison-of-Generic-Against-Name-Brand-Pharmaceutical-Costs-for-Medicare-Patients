import React, { ComponentType } from 'react';
import { IntlShape } from 'react-intl';
interface StyledDropdownSelectProps {
    inputTheme?: string;
    size?: string;
    className?: string;
}
export declare const StyledDropdownSelect: import("styled-components").StyledComponent<"div", any, {
    className: string;
} & StyledDropdownSelectProps, "className">;
export declare type ItemSelectorProps = {
    selectedItems?: ReadonlyArray<string | number | boolean | object> | string | number | boolean | object | null;
    options: ReadonlyArray<string | number | boolean | object>;
    onChange: (items: ReadonlyArray<string | number | boolean | object> | string | number | boolean | object | null) => void;
    fixedOptions?: ReadonlyArray<string | number | boolean | object> | null;
    erasable?: boolean;
    showArrow?: boolean;
    searchable?: boolean;
    displayOption?: string | ((opt: any) => any);
    getOptionValue?: string | ((opt: any) => any);
    filterOption?: string | ((opt: any) => any);
    placement?: string;
    disabled?: boolean;
    isError?: boolean;
    multiSelect?: boolean;
    inputTheme?: string;
    size?: string;
    onBlur?: () => void;
    placeholder?: string;
    closeOnSelect?: boolean;
    typeaheadPlaceholder?: string;
    DropdownHeaderComponent?: ComponentType<any> | null;
    DropDownRenderComponent?: ComponentType<any>;
    DropDownLineItemRenderComponent?: ComponentType<any>;
    CustomChickletComponent?: ComponentType<any>;
    intl: IntlShape;
    className?: string;
    showDropdownOnMount?: boolean;
};
declare const _default: React.ForwardRefExoticComponent<import("react-intl").Omit<ItemSelectorProps, "intl"> & {
    forwardedRef?: React.Ref<any> | undefined;
} & React.RefAttributes<any>> & {
    WrappedComponent: React.ComponentType<ItemSelectorProps>;
};
export default _default;
