// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _portaled = _interopRequireDefault(require("../portaled"));

var _dropdownList = _interopRequireDefault(require("../item-selector/dropdown-list"));

var _constants = require("@kepler.gl/constants");

var _icons = require("../icons");

var _templateObject;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ListItem = function ListItem(_ref) {
  var value = _ref.value;
  return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(value.icon, {
    height: "13px"
  }), value.display);
};

var StyledOptionsDropdown = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .list-selector {\n    border-top: 0;\n    width: max-content;\n    padding: 8px 0;\n  }\n\n  .list__item > div {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: flex-start;\n    line-height: 18px;\n\n    svg {\n      margin-right: 5px;\n    }\n  }\n"])));

var OptionDropdown = function OptionDropdown(props) {
  var isOpened = props.isOpened,
      column = props.column,
      toggleMoreOptions = props.toggleMoreOptions,
      sortTableColumn = props.sortTableColumn,
      pinTableColumn = props.pinTableColumn,
      copyTableColumn = props.copyTableColumn;
  var onOptionSelected = (0, _react.useCallback)(function (_ref2) {
    var value = _ref2.value;

    switch (value) {
      case _constants.TABLE_OPTION.SORT_ASC:
        sortTableColumn(_constants.SORT_ORDER.ASCENDING);
        break;

      case _constants.TABLE_OPTION.SORT_DES:
        sortTableColumn(_constants.SORT_ORDER.DESCENDING);
        break;

      case _constants.TABLE_OPTION.UNSORT:
        sortTableColumn(_constants.SORT_ORDER.UNSORT);
        break;

      case _constants.TABLE_OPTION.PIN:
        pinTableColumn();
        break;

      case _constants.TABLE_OPTION.UNPIN:
        pinTableColumn();
        break;

      case _constants.TABLE_OPTION.COPY:
        copyTableColumn();
        break;

      default:
        break;
    }

    toggleMoreOptions(column);
  }, [column, sortTableColumn, pinTableColumn, copyTableColumn, toggleMoreOptions]);
  var TABLE_OPTION_LIST_ICONS = {
    Pin: _icons.Pin,
    ArrowDown: _icons.ArrowDown,
    ArrowUp: _icons.ArrowUp,
    Clipboard: _icons.Clipboard,
    Cancel: _icons.Cancel
  };

  var options = _constants.TABLE_OPTION_LIST.filter(function (op) {
    return !op.condition || op.condition(props);
  }).map(function (op) {
    return _objectSpread(_objectSpread({}, op), {}, {
      icon: TABLE_OPTION_LIST_ICONS[op.icon]
    });
  });

  return /*#__PURE__*/_react["default"].createElement(_portaled["default"], {
    right: 120,
    top: 20,
    isOpened: isOpened,
    onClose: function onClose() {
      return toggleMoreOptions(column);
    }
  }, /*#__PURE__*/_react["default"].createElement(StyledOptionsDropdown, {
    className: "more-options"
  }, /*#__PURE__*/_react["default"].createElement(_dropdownList["default"], {
    displayOption: function displayOption(d) {
      return d.display;
    },
    options: options,
    customListItemComponent: ListItem,
    onOptionSelected: onOptionSelected,
    light: true
  })));
};

var _default = OptionDropdown;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,