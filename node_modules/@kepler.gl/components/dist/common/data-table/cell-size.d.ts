import { DataContainerInterface } from '@kepler.gl/utils';
declare type RenderSizeParam = {
    text: {
        dataContainer: DataContainerInterface;
        column: string;
    };
    type?: string;
    colIdx: number;
    numRowsToCalculate?: number;
    fontSize?: number;
    font?: string;
    cellPadding?: number;
    maxCellSize?: number;
    maxHeaderSize?: number;
    minCellSize?: number;
    optionsButton?: number;
};
export declare type CellSizeCache = {
    [key: string]: {
        row: number;
        header: number;
    };
};
/**
 * Measure rows and column content to determine min width for each column
 * @param {RenderSizeParam} param0
 */
export declare function renderedSize({ text: { dataContainer, column }, type, colIdx, numRowsToCalculate, fontSize, font, cellPadding, maxCellSize, maxHeaderSize, minCellSize, optionsButton }: RenderSizeParam): {
    row: number;
    header: number;
};
/**
 * Adjust cell size based on container width
 * @param {number} containerWidth
 * @param {CellSizeCache} cellSizeCache
 * @param {string[]} pinnedColumns
 * @param {string[]} unpinnedColumns
 */
export declare function adjustCellsToContainer(containerWidth: number, cellSizeCache: CellSizeCache, pinnedColumns: string[], unpinnedColumns: string[]): {
    cellSizeCache: CellSizeCache;
    ghost?: number | null;
};
export {};
