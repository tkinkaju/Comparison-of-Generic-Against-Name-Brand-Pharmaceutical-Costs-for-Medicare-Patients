import React from 'react';
import { OnScrollParams, GridProps, Index } from 'react-virtualized';
import { CellSizeCache } from './cell-size';
import HeaderCellFactory from './header-cell';
import { DataContainerInterface } from '@kepler.gl/utils';
export declare const Container: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare type ColMeta = {
    [key: string]: {
        colIdx: number;
        name: string;
        displayName: string;
        type: string;
        format?: string;
        columnStats?: any;
    };
};
export declare type SortColumn = {
    column?: string;
    mode?: string;
};
interface TableSectionProps {
    classList?: {
        header: string;
        rows: string;
    };
    isPinned?: boolean;
    columns: (string & {
        ghost?: boolean;
    })[];
    headerGridProps?: any;
    fixedWidth?: number;
    fixedHeight?: number;
    onScroll?: (params: OnScrollParams) => void;
    scrollTop?: number;
    dataGridProps: {
        rowHeight: number | ((params: Index) => number);
        rowCount: number;
    } & Partial<GridProps>;
    columnWidth?: any;
    setGridRef?: Function;
    headerCellRender?: any;
    dataCellRender?: any;
    scrollLeft?: number;
}
export declare const TableSection: ({ classList, isPinned, columns, headerGridProps, fixedWidth, fixedHeight, onScroll, scrollTop, dataGridProps, columnWidth, setGridRef, headerCellRender, dataCellRender, scrollLeft }: TableSectionProps) => JSX.Element;
export interface DataTableProps {
    dataId?: string;
    showStats?: boolean;
    cellSizeCache?: CellSizeCache;
    pinnedColumns?: string[];
    columns: (string & {
        ghost?: boolean;
    })[];
    fixedWidth?: number;
    theme?: any;
    dataContainer: DataContainerInterface;
    fixedHeight?: number;
    colMeta: ColMeta;
    sortColumn?: SortColumn;
    sortTableColumn: (column: string, mode?: string) => void;
    pinTableColumn: (column: string) => void;
    copyTableColumn: (column: string) => void;
    sortOrder?: number[] | null;
}
declare function DataTableFactory(HeaderCell: ReturnType<typeof HeaderCellFactory>): React.ForwardRefExoticComponent<{
    columns: (string & {
        ghost?: boolean | undefined;
    })[];
    dataId?: string | undefined;
    showStats?: boolean | undefined;
    cellSizeCache?: CellSizeCache | undefined;
    pinnedColumns?: string[] | undefined;
    fixedWidth?: number | undefined;
    dataContainer?: DataContainerInterface | undefined;
    fixedHeight?: number | undefined;
    colMeta?: ColMeta | undefined;
    sortColumn?: SortColumn | undefined;
    sortTableColumn: (column: string, mode?: string | undefined) => void;
    pinTableColumn: (column: string) => void;
    copyTableColumn: (column: string) => void;
    sortOrder?: number[] | null | undefined;
} & {
    theme?: any;
}>;
declare namespace DataTableFactory {
    var deps: {
        (FieldToken: React.FC<import("../field-token").FieldTokenProps>): ({ cellInfo, columns, isPinned, props, toggleMoreOptions, moreOptionsColumn }: {
            cellInfo: {
                columnIndex: number;
                isScrolling: boolean;
                isVisible: boolean;
                key: string;
                parent: any;
                rowIndex: number;
                style: React.CSSProperties;
            };
            columns: (string & {
                ghost?: boolean | undefined;
            })[];
            isPinned?: boolean | undefined;
            props: DataTableProps;
            toggleMoreOptions: (moreOptionsColumn: string) => void;
            moreOptionsColumn: string | null;
        }) => JSX.Element;
        deps: typeof import("../field-token").default[];
    }[];
}
export default DataTableFactory;
