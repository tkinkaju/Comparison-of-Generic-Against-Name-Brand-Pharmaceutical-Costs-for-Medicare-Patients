// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _d3Scale = require("d3-scale");

var _d3Array = require("d3-array");

var _d3Color = require("d3-color");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _templateObject;

var histogramStyle = {
  highlightW: 0.7,
  unHighlightedW: 0.4
};

var HistogramWrapper = _styledComponents["default"].svg(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  overflow: visible;\n"])));

var BarUnmemoized = _styledComponents["default"].rect(function (_ref) {
  var theme = _ref.theme,
      inRange = _ref.inRange,
      color = _ref.color;
  return "\n  ".concat(inRange ? "fill: ".concat(color !== null && color !== void 0 ? color : theme.histogramFillInRange, ";") : "fill: ".concat(color ? (0, _d3Color.hcl)(color).darker() : theme.histogramFillOutRange, ";"), "\n");
});

var Bar = /*#__PURE__*/_react["default"].memo(BarUnmemoized);

Bar.displayName = 'Bar';

function HistogramPlotFactory() {
  var HistogramPlot = function HistogramPlot(_ref2) {
    var width = _ref2.width,
        height = _ref2.height,
        margin = _ref2.margin,
        isRanged = _ref2.isRanged,
        histogram = _ref2.histogram,
        value = _ref2.value,
        brushComponent = _ref2.brushComponent;

    var undefinedToZero = function undefinedToZero(x) {
      return x ? x : 0;
    };

    var domain = (0, _react.useMemo)(function () {
      return [histogram[0].x0, histogram[histogram.length - 1].x1].map(function (item) {
        return undefinedToZero(item);
      });
    }, [histogram]);
    var dataId = Object.keys(histogram[0]).filter(function (k) {
      return k !== 'x0' && k !== 'x1';
    })[0]; // use 1st for now

    var getValue = (0, _react.useMemo)(function () {
      return function (d) {
        return d[dataId];
      };
    }, [dataId]);
    var x = (0, _react.useMemo)(function () {
      return (0, _d3Scale.scaleLinear)().domain(domain).range([0, width]);
    }, [domain, width]);
    var y = (0, _react.useMemo)(function () {
      return (0, _d3Scale.scaleLinear)().domain([0, Number((0, _d3Array.max)(histogram, getValue))]).range([0, height]);
    }, [histogram, height, getValue]);
    var barWidth = width / histogram.length;
    return /*#__PURE__*/_react["default"].createElement(HistogramWrapper, {
      width: width,
      height: height,
      style: {
        marginTop: "".concat(margin.top, "px")
      }
    }, /*#__PURE__*/_react["default"].createElement("g", {
      className: "histogram-bars"
    }, histogram.map(function (bar) {
      var inRange = undefinedToZero(bar.x1) <= value[1] && undefinedToZero(bar.x0) >= value[0];
      var wRatio = inRange ? histogramStyle.highlightW : histogramStyle.unHighlightedW;
      return /*#__PURE__*/_react["default"].createElement(Bar, {
        inRange: inRange,
        key: bar.x0,
        height: y(getValue(bar)),
        width: barWidth * wRatio,
        x: x(undefinedToZero(bar.x0)) + barWidth * (1 - wRatio) / 2,
        rx: 1,
        ry: 1,
        y: height - y(getValue(bar))
      });
    })), /*#__PURE__*/_react["default"].createElement("g", {
      transform: "translate(".concat(isRanged ? 0 : barWidth / 2, ", 0)")
    }, brushComponent));
  };

  var EmpptyOrPlot = function EmpptyOrPlot(props) {
    return !props.histogram || !props.histogram.length ? null : /*#__PURE__*/_react["default"].createElement(HistogramPlot, props);
  };

  return EmpptyOrPlot;
}

var _default = HistogramPlotFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,