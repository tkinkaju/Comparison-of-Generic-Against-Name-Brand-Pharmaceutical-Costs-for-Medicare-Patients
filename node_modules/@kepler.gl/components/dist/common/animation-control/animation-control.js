// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _slider = _interopRequireDefault(require("../slider/slider"));

var _styledComponents2 = require("../styled-components");

var _playbackControls = _interopRequireDefault(require("./playback-controls"));

var _floatingTimeDisplay = _interopRequireDefault(require("./floating-time-display"));

var _utils = require("@kepler.gl/utils");

var _constants = require("@kepler.gl/constants");

var _styles = require("@kepler.gl/styles");

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;

var SLIDER_MARGIN_PALM = 6;

var SliderWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  margin: 0 24px;\n\n  ", "\n"])), _styles.media.palm(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n    margin: 0 ", "px;\n  "])), SLIDER_MARGIN_PALM));

var AnimationWidgetInner = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  .animation-control__time-slider {\n    display: flex;\n    align-items: center;\n    height: 32px;\n    width: 100%;\n  }\n  .playback-controls {\n    margin-left: 16px;\n  }\n\n  ", ";\n"])), _styles.media.palm(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n    flex-direction: column;\n    .playback-controls {\n      margin: 0;\n    }\n    .animation-control__time-slider {\n      width: 100%;\n      position: relative;\n    }\n    .animation-control__time-domain {\n      position: absolute;\n      top: -24px;\n\n      &.domain-start {\n        left: ", "px;\n      }\n      &.domain-end {\n        right: ", "px;\n      }\n    }\n  "])), SLIDER_MARGIN_PALM, SLIDER_MARGIN_PALM));

var StyledDomain = _styledComponents["default"].div.attrs(function (props) {
  return {
    className: (0, _classnames["default"])('animation-control__time-domain', props.className)
  };
})(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  font-weight: 400;\n  font-size: 10px;\n"])), function (props) {
  return props.theme.titleTextColor;
});

AnimationControlFactory.deps = [_playbackControls["default"], _floatingTimeDisplay["default"]];

function AnimationControlFactory(PlaybackControls, FloatingTimeDisplay) {
  var AnimationControl = function AnimationControl(_ref) {
    var isAnimatable = _ref.isAnimatable,
        isAnimating = _ref.isAnimating,
        resetAnimation = _ref.resetAnimation,
        toggleAnimation = _ref.toggleAnimation,
        setLayerAnimationTime = _ref.setLayerAnimationTime,
        updateAnimationSpeed = _ref.updateAnimationSpeed,
        animationConfig = _ref.animationConfig;
    var currentTime = animationConfig.currentTime,
        domain = animationConfig.domain,
        speed = animationConfig.speed,
        step = animationConfig.step,
        timeSteps = animationConfig.timeSteps,
        timeFormat = animationConfig.timeFormat,
        timezone = animationConfig.timezone,
        defaultTimeFormat = animationConfig.defaultTimeFormat;
    var onSlider1Change = (0, _react.useCallback)(function (val) {
      if (Array.isArray(timeSteps)) {
        setLayerAnimationTime((0, _utils.snapToMarks)(val, timeSteps)); // TODO: merge slider in to avoid this step
      } else if (val >= domain[0] && val <= domain[1]) {
        setLayerAnimationTime(val);
      }
    }, [domain, timeSteps, setLayerAnimationTime]);
    var dateFunc = (0, _react.useMemo)(function () {
      var hasUserFormat = typeof timeFormat === 'string';
      var currentFormat = (hasUserFormat ? timeFormat : defaultTimeFormat) || _constants.DEFAULT_TIME_FORMAT;
      return (0, _utils.datetimeFormatter)(timezone)(currentFormat);
    }, [timeFormat, defaultTimeFormat, timezone]);
    var timeStart = (0, _react.useMemo)(function () {
      return domain ? dateFunc(domain[0]) : '';
    }, [domain, dateFunc]);
    var timeEnd = (0, _react.useMemo)(function () {
      return domain ? dateFunc(domain[1]) : '';
    }, [domain, dateFunc]);
    return /*#__PURE__*/_react["default"].createElement(_styledComponents2.BottomWidgetInner, {
      className: "bottom-widget--inner"
    }, /*#__PURE__*/_react["default"].createElement(AnimationWidgetInner, {
      className: "animation-widget--inner"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "animation-control__time-slider"
    }, /*#__PURE__*/_react["default"].createElement(StyledDomain, {
      className: "domain-start"
    }, /*#__PURE__*/_react["default"].createElement("span", null, timeStart)), /*#__PURE__*/_react["default"].createElement(SliderWrapper, {
      className: "animation-control__slider"
    }, /*#__PURE__*/_react["default"].createElement(_slider["default"], {
      isRanged: false,
      step: step,
      minValue: domain ? domain[0] : 0,
      maxValue: domain ? domain[1] : 1,
      value1: currentTime,
      onSlider1Change: onSlider1Change,
      enableBarDrag: true
    })), /*#__PURE__*/_react["default"].createElement(StyledDomain, {
      className: "domain-end"
    }, /*#__PURE__*/_react["default"].createElement("span", null, timeEnd))), /*#__PURE__*/_react["default"].createElement(PlaybackControls, {
      className: "animation-control-playpause",
      startAnimation: toggleAnimation,
      isAnimating: isAnimating,
      pauseAnimation: toggleAnimation,
      resetAnimation: resetAnimation,
      speed: speed,
      isAnimatable: isAnimatable,
      updateAnimationSpeed: updateAnimationSpeed
    })), /*#__PURE__*/_react["default"].createElement(FloatingTimeDisplay, {
      currentTime: currentTime,
      defaultTimeFormat: defaultTimeFormat,
      timeFormat: timeFormat,
      timezone: timezone
    }));
  };

  AnimationControl.defaultProps = {
    toggleAnimation: function toggleAnimation() {},
    updateAnimationSpeed: function updateAnimationSpeed() {},
    animationControlProps: {},
    animationConfig: {}
  };
  return AnimationControl;
}

var _default = AnimationControlFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,