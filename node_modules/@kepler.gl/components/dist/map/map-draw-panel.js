// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("@kepler.gl/constants");

var _icons = require("../common/icons");

var _styledComponents = require("../common/styled-components");

var _toolbarItem = _interopRequireDefault(require("../common/toolbar-item"));

var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));

var _mapControlToolbar = _interopRequireDefault(require("./map-control-toolbar"));MapDrawPanelFactory.deps = [_mapControlTooltip["default"], _mapControlToolbar["default"]];

function MapDrawPanelFactory(MapControlTooltip, MapControlToolbar) {
  var defaultActionIcons = {
    visible: _icons.EyeSeen,
    hidden: _icons.EyeUnseen,
    polygon: _icons.DrawPolygon,
    cursor: _icons.CursorClick,
    innerPolygon: _icons.Polygon,
    rectangle: _icons.Rectangle
  };
  /** @type {import('./map-draw-panel').MapDrawPanelComponent} */

  var MapDrawPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var _mapControls$mapDraw, _mapControls$mapDraw2;

    var editor = _ref.editor,
        mapControls = _ref.mapControls,
        onToggleMapControl = _ref.onToggleMapControl,
        onSetEditorMode = _ref.onSetEditorMode,
        onToggleEditorVisibility = _ref.onToggleEditorVisibility,
        _ref$actionIcons = _ref.actionIcons,
        actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons;
    var isActive = mapControls === null || mapControls === void 0 ? void 0 : (_mapControls$mapDraw = mapControls.mapDraw) === null || _mapControls$mapDraw === void 0 ? void 0 : _mapControls$mapDraw.active;
    var onToggleMenuPanel = (0, _react.useCallback)(function () {
      return onToggleMapControl('mapDraw');
    }, [onToggleMapControl]);

    if (!(mapControls !== null && mapControls !== void 0 && (_mapControls$mapDraw2 = mapControls.mapDraw) !== null && _mapControls$mapDraw2 !== void 0 && _mapControls$mapDraw2.show)) {
      return null;
    }

    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "map-draw-controls",
      style: {
        position: 'relative'
      }
    }, isActive ? /*#__PURE__*/_react["default"].createElement(MapControlToolbar, {
      show: isActive
    }, /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
      className: "edit-feature",
      onClick: function onClick() {
        return onSetEditorMode(_constants.EDITOR_MODES.EDIT);
      },
      label: "toolbar.select",
      icon: actionIcons.cursor,
      active: editor.mode === _constants.EDITOR_MODES.EDIT
    }), /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
      className: "draw-feature",
      onClick: function onClick() {
        return onSetEditorMode(_constants.EDITOR_MODES.DRAW_POLYGON);
      },
      label: "toolbar.polygon",
      icon: actionIcons.innerPolygon,
      active: editor.mode === _constants.EDITOR_MODES.DRAW_POLYGON
    }), /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
      className: "draw-rectangle",
      onClick: function onClick() {
        return onSetEditorMode(_constants.EDITOR_MODES.DRAW_RECTANGLE);
      },
      label: "toolbar.rectangle",
      icon: actionIcons.rectangle,
      active: editor.mode === _constants.EDITOR_MODES.DRAW_RECTANGLE
    }), /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
      className: "toggle-features",
      onClick: onToggleEditorVisibility,
      label: editor.visible ? 'toolbar.hide' : 'toolbar.show',
      icon: editor.visible ? actionIcons.visible : actionIcons.hidden
    })) : null, /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "map-draw",
      message: "tooltip.DrawOnMap"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      className: (0, _classnames["default"])('map-control-button', 'map-draw', {
        isActive: isActive
      }),
      onClick: function onClick(e) {
        e.preventDefault();
        onToggleMenuPanel();
      },
      active: isActive
    }, /*#__PURE__*/_react["default"].createElement(actionIcons.polygon, {
      height: "22px"
    }))));
  });

  MapDrawPanel.displayName = 'MapDrawPanel';
  return MapDrawPanel;
}

var _default = MapDrawPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,