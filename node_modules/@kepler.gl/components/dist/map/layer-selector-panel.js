// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _styledComponents = require("../common/styled-components");

var _icons = require("../common/icons");

var _mapLayerSelector = _interopRequireDefault(require("../common/map-layer-selector"));

var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));

var _mapControlPanel = _interopRequireDefault(require("./map-control-panel"));LayerSelectorPanelFactory.deps = [_mapControlTooltip["default"], _mapControlPanel["default"]];

function LayerSelectorPanelFactory(MapControlTooltip, MapControlPanel) {
  /** @type {import('./layer-selector-panel').LayerSelectorPanelComponent} */
  var LayerSelectorPanel = function LayerSelectorPanel(_ref) {
    var onMapToggleLayer = _ref.onMapToggleLayer,
        onToggleMapControl = _ref.onToggleMapControl,
        layers = _ref.layers,
        layersToRender = _ref.layersToRender,
        isSplit = _ref.isSplit,
        mapControls = _ref.mapControls,
        readOnly = _ref.readOnly;
    var visibleLayers = (mapControls === null || mapControls === void 0 ? void 0 : mapControls.visibleLayers) || {};

    var _ref2 = visibleLayers || {},
        isActive = _ref2.active,
        show = _ref2.show,
        disableClose = _ref2.disableClose;

    var legendLayers = (0, _react.useMemo)(function () {
      return layers.filter(function (_ref3) {
        var config = _ref3.config;
        return config.isVisible;
      }).map(function (_ref4) {
        var id = _ref4.id,
            config = _ref4.config;
        return {
          id: id,
          name: config.label,
          // layer
          isVisible: layersToRender[id]
        };
      });
    }, [layers, layersToRender]);
    var isVisible = (0, _react.useMemo)(function () {
      return isSplit && show && readOnly !== true;
    }, [isSplit, show, readOnly]);
    var onToggleMenuPanel = (0, _react.useCallback)(function (event) {
      event.preventDefault();
      onToggleMapControl('visibleLayers');
    }, [onToggleMapControl]);
    return isVisible ? !isActive ? /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      key: 1,
      onClick: onToggleMenuPanel,
      className: (0, _classnames["default"])('map-control-button', 'toggle-layer', {
        isActive: isActive
      }),
      "data-tip": true,
      "data-for": "toggle-layer"
    }, /*#__PURE__*/_react["default"].createElement(_icons.Layers, {
      height: "22px"
    }), /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "toggle-layer",
      message: isActive ? 'tooltip.hideLayerPanel' : 'tooltip.showLayerPanel'
    })) : /*#__PURE__*/_react["default"].createElement(MapControlPanel, {
      header: "header.visibleLayers",
      onClick: onToggleMenuPanel,
      disableClose: disableClose
    }, /*#__PURE__*/_react["default"].createElement(_mapLayerSelector["default"], {
      layers: legendLayers,
      onMapToggleLayer: onMapToggleLayer
    })) : null;
  };

  LayerSelectorPanel.displayName = 'LayerSelectorPanel';
  return /*#__PURE__*/_react["default"].memo(LayerSelectorPanel);
}

var _default = LayerSelectorPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,