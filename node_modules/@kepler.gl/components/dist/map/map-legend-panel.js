// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _icons = require("../common/icons");

var _styledComponents2 = require("../common/styled-components");

var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));

var _mapControlPanel = _interopRequireDefault(require("./map-control-panel"));

var _mapLegend = _interopRequireDefault(require("./map-legend"));

var _lazyTippy = _interopRequireDefault(require("./lazy-tippy"));

var _reactDom = require("react-dom");

var _constants = require("@kepler.gl/constants");

var _styles = require("@kepler.gl/styles");

var _templateObject, _templateObject2;

MapLegendPanelFactory.deps = [_mapControlTooltip["default"], _mapControlPanel["default"], _mapLegend["default"]];

var PinToBottom = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  bottom: ", "px;\n  right: ", "px;\n  ", ";\n"])), _constants.DIMENSIONS.mapControl.mapLegend.pinned.bottom, _constants.DIMENSIONS.mapControl.mapLegend.pinned.right, _styles.media.portable(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n    bottom: 0px;\n    right: 0px;\n    min-width: ", "px;\n    .map-control-panel {\n      min-height: 215px;\n      margin-bottom: 0px;\n    };\n  "])), _constants.DIMENSIONS.mapControl.width + _constants.DIMENSIONS.mapControl.mapLegend.pinned.right));

function MapLegendPanelFactory(MapControlTooltip, MapControlPanel, MapLegend) {
  var defaultActionIcons = {
    legend: _icons.Legend
  };
  /** @type {import('./map-legend-panel').MapLegendPanelComponent} */

  var MapLegendPanel = function MapLegendPanel(_ref) {
    var layers = _ref.layers,
        mapControls = _ref.mapControls,
        scale = _ref.scale,
        onToggleMapControl = _ref.onToggleMapControl,
        isExport = _ref.isExport,
        logoComponent = _ref.logoComponent,
        _ref$actionIcons = _ref.actionIcons,
        actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons,
        mapHeight = _ref.mapHeight;
    var mapLegend = (mapControls === null || mapControls === void 0 ? void 0 : mapControls.mapLegend) || {};

    var _ref2 = mapLegend || {},
        isPinned = _ref2.active;

    var onClick = function onClick() {
      var _mapControls$mapDraw;

      if (mapControls !== null && mapControls !== void 0 && (_mapControls$mapDraw = mapControls.mapDraw) !== null && _mapControls$mapDraw !== void 0 && _mapControls$mapDraw.active) {
        onToggleMapControl('mapDraw');
      }
    };

    var _useState = (0, _react.useState)(null),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        tippyInstance = _useState2[0],
        setTippyInstance = _useState2[1];

    var onCloseClick = function onCloseClick(e) {
      e.preventDefault();
      onToggleMapControl('mapLegend');
    };

    var onPinClick = function onPinClick(e) {
      e.preventDefault();

      if (tippyInstance) {
        // @ts-ignore
        tippyInstance.hide();
      }

      onToggleMapControl('mapLegend');
    };

    if (!mapLegend.show) {
      return null;
    }

    var mapControlPanel = /*#__PURE__*/_react["default"].createElement(MapControlPanel, (0, _extends2["default"])({
      scale: scale,
      header: 'header.layerLegend',
      isPinned: true
    }, isPinned ? {
      onClick: onCloseClick,
      pinnable: false,
      disableClose: false
    } : {
      onPinClick: onPinClick,
      pinnable: true,
      disableClose: true
    }, {
      isExport: isExport,
      logoComponent: logoComponent
    }), /*#__PURE__*/_react["default"].createElement(MapLegend, {
      layers: layers,
      mapHeight: mapHeight
    }));

    if (isPinned) {
      // Pinned panel is not supported in export mode
      if (isExport) {
        return mapControlPanel;
      }

      var pinnedPanel = /*#__PURE__*/_react["default"].createElement(PinToBottom, null, mapControlPanel);

      return /*#__PURE__*/(0, _reactDom.createPortal)(pinnedPanel, document.body);
    }

    return (
      /*#__PURE__*/
      // The outer div is to prevent an accessibility warning from Tippy
      _react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_lazyTippy["default"], {
        interactive: true,
        trigger: "click",
        placement: "left-start",
        onCreate: setTippyInstance,
        render: function render(attrs) {
          return /*#__PURE__*/_react["default"].createElement("div", attrs, mapControlPanel);
        },
        appendTo: "parent"
      }, /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
        id: "show-legend",
        message: "tooltip.showLegend"
      }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.MapControlButton, {
        className: "map-control-button show-legend",
        onClick: onClick
      }, /*#__PURE__*/_react["default"].createElement(actionIcons.legend, {
        height: "22px"
      }))))))
    );
  };

  MapLegendPanel.displayName = 'MapLegendPanel';
  return MapLegendPanel;
}

var _default = MapLegendPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,