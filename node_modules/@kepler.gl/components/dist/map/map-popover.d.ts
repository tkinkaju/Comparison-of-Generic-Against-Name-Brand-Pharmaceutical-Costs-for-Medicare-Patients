import React from 'react';
import LayerHoverInfoFactory from './layer-hover-info';
import CoordinateInfoFactory from './coordinate-info';
import { IntlShape } from 'react-intl';
import { LayerHoverProp } from '@kepler.gl/reducers';
export declare type MapPopoverProps = {
    x: number;
    y: number;
    frozen?: boolean;
    coordinate: [number, number] | boolean;
    layerHoverProp: LayerHoverProp | null;
    isBase?: boolean;
    zoom: number;
    container?: HTMLElement | null;
    onClose: () => void;
};
declare type IntlProps = {
    intl: IntlShape;
};
declare function MapPopoverFactory(LayerHoverInfo: ReturnType<typeof LayerHoverInfoFactory>, CoordinateInfo: ReturnType<typeof CoordinateInfoFactory>): React.ForwardRefExoticComponent<import("react-intl").Omit<MapPopoverProps & IntlProps, "intl"> & {
    forwardedRef?: React.Ref<any> | undefined;
} & React.RefAttributes<any>> & {
    WrappedComponent: React.ComponentType<MapPopoverProps & IntlProps>;
};
declare namespace MapPopoverFactory {
    var deps: ((() => {
        (props: any): JSX.Element | null;
        propTypes: {
            fields: import("prop-types").Requireable<any[]>;
            fieldsToShow: import("prop-types").Requireable<any[]>;
            layer: import("prop-types").Requireable<object>;
            data: import("prop-types").Requireable<object>;
        };
    }) | (() => React.FC<import("./coordinate-info").CoordinateInfoProps>))[];
}
export default MapPopoverFactory;
