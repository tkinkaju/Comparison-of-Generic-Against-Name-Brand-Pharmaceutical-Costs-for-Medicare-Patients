// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerLegendHeaderFactory = LayerLegendHeaderFactory;
exports.LayerLegendContentFactory = LayerLegendContentFactory;
exports["default"] = exports.LayerColorLegend = exports.SingleColorLegend = exports.LayerSizeLegend = exports.VisualChannelMetric = exports.StyledMapControlLegend = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _d3Color = require("d3-color");

var _colorLegend = _interopRequireDefault(require("../common/color-legend"));

var _constants = require("@kepler.gl/constants");

var _localization = require("@kepler.gl/localization");

var _templateObject;

var StyledMapControlLegend = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 10px ", "px 10px\n    ", "px;\n  font-size: 11px;\n  font-family: ", ";\n  border-bottom-color: ", ";\n  border-bottom-style: solid;\n  border-bottom-width: ", ";\n  width: ", "px;\n  box-sizing: border-box;\n\n  .legend--layer_name {\n    font-size: 12px;\n    padding-right: ", "px;\n    color: ", ";\n    font-weight: 500;\n  }\n  .legend--layer_type {\n    color: ", ";\n    font-weight: 500;\n    font-size: 11px;\n    padding-right: ", "px;\n  }\n\n  .legend--layer__title {\n    padding-right: ", "px;\n  }\n\n  .legend--layer_by {\n    color: ", ";\n  }\n\n  .legend--layer_color_field {\n    color: ", ";\n    font-weight: 500;\n  }\n\n  .legend--layer_color-legend {\n    margin-top: 6px;\n  }\n"])), function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.panelBorderColor;
}, function (props) {
  return props.last ? 0 : '1px';
}, function (props) {
  return props.width;
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.theme.subtextColor;
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.subtextColor;
}, function (props) {
  return props.theme.textColorHl;
});

exports.StyledMapControlLegend = StyledMapControlLegend;

var VisualChannelMetric = function VisualChannelMetric(_ref) {
  var name = _ref.name;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "legend--layer__title"
  }, /*#__PURE__*/_react["default"].createElement("span", {
    className: "legend--layer_color_field"
  }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: name
  })));
};

exports.VisualChannelMetric = VisualChannelMetric;

/** @type {typeof import('./map-legend').LayerSizeLegend} */
var LayerSizeLegend = function LayerSizeLegend(_ref2) {
  var label = _ref2.label,
      name = _ref2.name;
  return label ? /*#__PURE__*/_react["default"].createElement("div", {
    className: "legend--layer_size-schema"
  }, /*#__PURE__*/_react["default"].createElement("p", null, /*#__PURE__*/_react["default"].createElement("span", {
    className: "legend--layer_by"
  }, label ? /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: label
  }) : null), /*#__PURE__*/_react["default"].createElement("span", {
    className: "legend--layer_by"
  }, " by ")), name && /*#__PURE__*/_react["default"].createElement(VisualChannelMetric, {
    name: name
  })) : null;
};

exports.LayerSizeLegend = LayerSizeLegend;
var SINGLE_COLOR_DOMAIN = [''];

/** @type {typeof import('./map-legend').SingleColorLegend} */
var SingleColorLegend = /*#__PURE__*/_react["default"].memo(function (_ref3) {
  var width = _ref3.width,
      color = _ref3.color;
  return /*#__PURE__*/_react["default"].createElement(_colorLegend["default"], {
    scaleType: "ordinal",
    displayLabel: false,
    domain: SINGLE_COLOR_DOMAIN,
    fieldType: null,
    range: {
      colors: [_d3Color.rgb.apply(void 0, (0, _toConsumableArray2["default"])(color)).toString()]
    },
    width: width
  });
});

exports.SingleColorLegend = SingleColorLegend;
SingleColorLegend.displayName = 'SingleColorLegend';

/** @type {typeof import('./map-legend').LayerColorLegend} */
var LayerColorLegend = /*#__PURE__*/_react["default"].memo(function (_ref4) {
  var description = _ref4.description,
      config = _ref4.config,
      width = _ref4.width,
      colorChannel = _ref4.colorChannel;
  var enableColorBy = description.measure;
  var scale = colorChannel.scale,
      field = colorChannel.field,
      domain = colorChannel.domain,
      range = colorChannel.range,
      property = colorChannel.property;

  var _map = [scale, field, domain].map(function (k) {
    return config[k];
  }),
      _map2 = (0, _slicedToArray2["default"])(_map, 3),
      colorScale = _map2[0],
      colorField = _map2[1],
      colorDomain = _map2[2];

  var colorRange = config.visConfig[range];
  return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "legend--layer_color-schema"
  }, /*#__PURE__*/_react["default"].createElement("div", null, enableColorBy ? /*#__PURE__*/_react["default"].createElement(VisualChannelMetric, {
    name: enableColorBy
  }) : null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "legend--layer_color-legend"
  }, enableColorBy ? /*#__PURE__*/_react["default"].createElement(_colorLegend["default"], {
    scaleType: colorScale,
    displayLabel: true,
    domain: colorDomain,
    fieldType: colorField && colorField.type || 'real',
    range: colorRange,
    width: width
  }) : /*#__PURE__*/_react["default"].createElement(SingleColorLegend, {
    color: config.visConfig[property] || config[property] || config.color,
    width: width
  })))));
}); // eslint-disable-next-line react/display-name


exports.LayerColorLegend = LayerColorLegend;
LayerColorLegend.displayName = 'LayerColorLegend';

var isColorChannel = function isColorChannel(visualChannel) {
  return [_constants.CHANNEL_SCALES.color, _constants.CHANNEL_SCALES.colorAggr].includes(visualChannel.channelScaleType);
};

function LayerLegendHeaderFactory() {
  /** @type {typeof import('./map-legend').LayerLegendHeader }> */
  var LayerLegendHeader = function LayerLegendHeader(_ref5) {
    var options = _ref5.options,
        layer = _ref5.layer;
    return (options === null || options === void 0 ? void 0 : options.showLayerName) !== false ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "legend--layer_name"
    }, layer.config.label) : null;
  };

  return LayerLegendHeader;
}

function LayerLegendContentFactory() {
  /** @type {typeof import('./map-legend').LayerLegendContent }> */
  var LayerLegendContent = function LayerLegendContent(_ref6) {
    var layer = _ref6.layer,
        containerW = _ref6.containerW;
    var colorChannels = Object.values(layer.visualChannels).filter(isColorChannel);
    var nonColorChannels = Object.values(layer.visualChannels).filter(function (vc) {
      return !isColorChannel(vc);
    });
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, colorChannels.map(function (colorChannel) {
      return !colorChannel.condition || colorChannel.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(LayerColorLegend, {
        key: colorChannel.key,
        description: layer.getVisualChannelDescription(colorChannel.key),
        config: layer.config,
        width: containerW - 2 * _constants.DIMENSIONS.mapControl.padding,
        colorChannel: colorChannel
      }) : null;
    }), nonColorChannels.map(function (visualChannel) {
      var matchCondition = !visualChannel.condition || visualChannel.condition(layer.config);
      var enabled = layer.config[visualChannel.field] || visualChannel.defaultMeasure;
      var description = layer.getVisualChannelDescription(visualChannel.key);
      return matchCondition && enabled ? /*#__PURE__*/_react["default"].createElement(LayerSizeLegend, {
        key: visualChannel.key,
        label: description.label,
        name: description.measure
      }) : null;
    }));
  };

  return LayerLegendContent;
}

MapLegendFactory.deps = [LayerLegendHeaderFactory, LayerLegendContentFactory];

function MapLegendFactory(LayerLegendHeader, LayerLegendContent) {
  /** @type {typeof import('./map-legend').MapLegend }> */
  var MapLegend = function MapLegend(_ref7) {
    var _ref7$layers = _ref7.layers,
        layers = _ref7$layers === void 0 ? [] : _ref7$layers,
        width = _ref7.width,
        mapHeight = _ref7.mapHeight,
        options = _ref7.options;
    return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
      className: "map-legend"
    }, mapHeight && {
      style: {
        /* subtracting rough size of 4 map control buttons and padding */
        maxHeight: mapHeight - 250
      }
    }), layers.map(function (layer, index) {
      if (!layer.isValidToSave() || layer.config.hidden) {
        return null;
      }

      var containerW = width || _constants.DIMENSIONS.mapControl.width;
      return /*#__PURE__*/_react["default"].createElement(StyledMapControlLegend, {
        className: "legend--layer",
        last: index === layers.length - 1,
        key: index,
        width: containerW
      }, /*#__PURE__*/_react["default"].createElement(LayerLegendHeader, {
        options: options,
        layer: layer
      }), /*#__PURE__*/_react["default"].createElement(LayerLegendContent, {
        containerW: containerW,
        layer: layer
      }));
    }));
  };

  MapLegend.displayName = 'MapLegend';
  return MapLegend;
}

var _default = MapLegendFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,