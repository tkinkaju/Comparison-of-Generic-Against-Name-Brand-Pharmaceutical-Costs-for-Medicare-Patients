// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = MapPopoverFactory;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _layerHoverInfo = _interopRequireDefault(require("./layer-hover-info"));

var _coordinateInfo = _interopRequireDefault(require("./coordinate-info"));

var _icons = require("../common/icons");

var _reactIntl = require("react-intl");

var _localization = require("@kepler.gl/localization");

var _headless = _interopRequireDefault(require("@tippyjs/react/headless"));

var _ = require("../");

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

var MAX_WIDTH = 500;
var MAX_HEIGHT = 600;

var StyledMapPopover = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  max-width: ", "px;\n  max-height: ", "px;\n  padding: 14px;\n  & > * + * {\n    margin-top: 6px;\n  }\n  ", ";\n  font-family: ", ";\n  font-size: 11px;\n  font-weight: 500;\n  background-color: ", ";\n  color: ", ";\n  z-index: 1000;\n  overflow-x: auto;\n  box-shadow: ", ";\n\n  :hover {\n    background-color: ", ";\n  }\n\n  .primary-label {\n    color: ", ";\n    font-size: 10px;\n  }\n\n  .map-popover__layer-info,\n  .coordingate-hover-info {\n    & > * + * {\n      margin-top: 7px;\n    }\n  }\n\n  table {\n    width: auto;\n    display: grid;\n    border-collapse: collapse;\n    row-gap: 5px;\n    column-gap: 5px;\n  }\n\n  .coordingate-hover-info > table {\n    grid-template-columns: auto auto auto;\n  }\n  .map-popover__layer-info > table {\n    grid-template-columns: auto auto;\n  }\n\n  tbody,\n  tr {\n    display: contents;\n  }\n\n  td {\n    border-color: transparent;\n    color: ", ";\n  }\n\n  td.row__value {\n    text-align: right;\n    font-weight: 500;\n    color: ", ";\n  }\n"])), MAX_WIDTH, MAX_HEIGHT, function (props) {
  return props.theme.scrollBar;
}, function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.panelBackground;
}, function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.theme.panelBoxShadow;
}, function (props) {
  return "".concat(props.theme.panelBackground, "dd");
}, function (props) {
  return props.theme.notificationColors.success;
}, function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.theme.textColorHl;
});

var PinnedButtons = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-self: center;\n  align-items: center;\n  justify-items: center;\n  & > * + * {\n    margin-left: 10px;\n  }\n"])));

var PopoverContent = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  & > * + * {\n    margin-top: 12px;\n  }\n"])));

var StyledIcon = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n\n  :hover {\n    cursor: pointer;\n    color: ", ";\n  }\n"])), function (props) {
  return props.theme.activeColor;
}, function (props) {
  return props.theme.linkBtnColor;
});

MapPopoverFactory.deps = [_layerHoverInfo["default"], _coordinateInfo["default"]];

function createVirtualReference(container, x, y) {
  var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var bounds = container && container.getBoundingClientRect ? container.getBoundingClientRect() : {};
  var left = (bounds.left || 0) + x - size / 2;
  var top = (bounds.top || 0) + y - size / 2;
  return {
    left: left,
    top: top,
    right: left + size,
    bottom: top + size,
    width: size,
    height: size,
    // These properties are present to meet the DOMRect interface
    y: top,
    x: left,
    toJSON: function toJSON() {
      return this;
    }
  };
}

function getOffsetForPlacement(_ref) {
  var placement = _ref.placement,
      reference = _ref.reference,
      popper = _ref.popper;
  var gap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;

  switch (placement) {
    case 'top-start':
    case 'bottom-start':
      return [gap, gap];

    case 'top-end':
    case 'bottom-end':
      return [-gap, gap];

    default:
      return [0, 0];
  }
}

function getPopperOptions(container) {
  return {
    modifiers: [{
      name: 'preventOverflow',
      options: {
        boundary: container
      }
    }]
  };
}

function MapPopoverFactory(LayerHoverInfo, CoordinateInfo) {
  /** @type {typeof import('./map-popover').MapPopover} */
  var MapPopover = function MapPopover(_ref2) {
    var x = _ref2.x,
        y = _ref2.y,
        frozen = _ref2.frozen,
        coordinate = _ref2.coordinate,
        layerHoverProp = _ref2.layerHoverProp,
        isBase = _ref2.isBase,
        zoom = _ref2.zoom,
        container = _ref2.container,
        onClose = _ref2.onClose;

    var _useState = (0, _react.useState)('start'),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        horizontalPlacement = _useState2[0],
        setHorizontalPlacement = _useState2[1];

    var moveLeft = function moveLeft() {
      return setHorizontalPlacement('end');
    };

    var moveRight = function moveRight() {
      return setHorizontalPlacement('start');
    };

    return /*#__PURE__*/_react["default"].createElement(_.RootContext.Consumer, null, function (context) {
      return /*#__PURE__*/_react["default"].createElement(_headless["default"], {
        popperOptions: getPopperOptions(container),
        zIndex: 999
        /* should be below Modal which has zIndex=1000 */
        ,
        visible: true,
        interactive: true // @ts-ignore
        ,
        getReferenceClientRect: function getReferenceClientRect() {
          return createVirtualReference(container, x, y);
        } // @ts-ignore
        ,
        placement: "bottom-".concat(horizontalPlacement) // @ts-ignore
        ,
        offset: getOffsetForPlacement,
        appendTo: (context === null || context === void 0 ? void 0 : context.current) || document.body,
        render: function render(attrs) {
          return /*#__PURE__*/_react["default"].createElement(StyledMapPopover, (0, _extends2["default"])({}, attrs, {
            className: "map-popover"
          }), frozen ? /*#__PURE__*/_react["default"].createElement(PinnedButtons, null, horizontalPlacement === 'start' && /*#__PURE__*/_react["default"].createElement(StyledIcon, {
            className: "popover-arrow-left",
            onClick: moveLeft
          }, /*#__PURE__*/_react["default"].createElement(_icons.ArrowLeft, null)), /*#__PURE__*/_react["default"].createElement(StyledIcon, {
            className: "popover-pin",
            onClick: onClose
          }, /*#__PURE__*/_react["default"].createElement(_icons.Pin, {
            height: "16px"
          })), horizontalPlacement === 'end' && /*#__PURE__*/_react["default"].createElement(StyledIcon, {
            className: "popover-arrow-right",
            onClick: moveRight
          }, /*#__PURE__*/_react["default"].createElement(_icons.ArrowRight, null)), isBase && /*#__PURE__*/_react["default"].createElement("div", {
            className: "primary-label"
          }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
            id: "mapPopover.primary"
          }))) : null, /*#__PURE__*/_react["default"].createElement(PopoverContent, null, Array.isArray(coordinate) && /*#__PURE__*/_react["default"].createElement(CoordinateInfo, {
            coordinate: coordinate,
            zoom: zoom
          }), layerHoverProp && /*#__PURE__*/_react["default"].createElement(LayerHoverInfo, layerHoverProp)));
        }
      });
    });
  };

  return (0, _reactIntl.injectIntl)(MapPopover);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,