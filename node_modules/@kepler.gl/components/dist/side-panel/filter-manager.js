// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _localization = require("@kepler.gl/localization");

var _styledComponents = require("../common/styled-components");

var _icons = require("../common/icons");

var _sourceDataCatalog = _interopRequireDefault(require("./common/source-data-catalog"));

var _filterPanel = _interopRequireDefault(require("./filter-panel/filter-panel"));FilterManagerFactory.deps = [_sourceDataCatalog["default"], _filterPanel["default"]];

function FilterManagerFactory(SourceDataCatalog, FilterPanel) {
  var FilterManager = function FilterManager(_ref) {
    var _ref$filters = _ref.filters,
        filters = _ref$filters === void 0 ? [] : _ref$filters,
        datasets = _ref.datasets,
        layers = _ref.layers,
        showDatasetTable = _ref.showDatasetTable,
        updateTableColor = _ref.updateTableColor,
        visStateActions = _ref.visStateActions;
    var addFilter = visStateActions.addFilter,
        _enlargeFilter = visStateActions.enlargeFilter,
        _removeFilter = visStateActions.removeFilter,
        setFilter = visStateActions.setFilter,
        toggleFilterAnimation = visStateActions.toggleFilterAnimation,
        _toggleFilterFeature = visStateActions.toggleFilterFeature;
    var isAnyFilterAnimating = filters.some(function (f) {
      return f.isAnimating;
    });
    var hadEmptyFilter = filters.some(function (f) {
      return !f.name;
    });
    var hadDataset = Object.keys(datasets).length;
    var onClickAddFilter = (0, _react.useCallback)(function () {
      var defaultDataset = Object.keys(datasets).length && Object.keys(datasets)[0] || null;
      addFilter(defaultDataset);
    }, [datasets, addFilter]); // render last added filter first

    var reversedIndex = (0, _react.useMemo)(function () {
      return new Array(filters.length).fill(0).map(function (d, i) {
        return i;
      }).reverse();
    }, [filters.length]);
    var filterPanelCallbacks = (0, _react.useMemo)(function () {
      return new Array(filters.length).fill(0).map(function (d, idx) {
        return {
          removeFilter: function removeFilter() {
            return _removeFilter(idx);
          },
          enlargeFilter: function enlargeFilter() {
            return _enlargeFilter(idx);
          },
          toggleAnimation: function toggleAnimation() {
            return toggleFilterAnimation(idx);
          },
          toggleFilterFeature: function toggleFilterFeature() {
            return _toggleFilterFeature(idx);
          }
        };
      });
    }, [filters.length, _removeFilter, _enlargeFilter, toggleFilterAnimation, _toggleFilterFeature]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-manager"
    }, /*#__PURE__*/_react["default"].createElement(SourceDataCatalog, {
      datasets: datasets,
      showDatasetTable: showDatasetTable,
      updateTableColor: updateTableColor
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelDivider, null), /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, reversedIndex.map(function (idx) {
      return /*#__PURE__*/_react["default"].createElement(FilterPanel, {
        key: "".concat(filters[idx].id, "-").concat(idx),
        idx: idx,
        filters: filters,
        filter: filters[idx],
        datasets: datasets,
        layers: layers,
        isAnyFilterAnimating: isAnyFilterAnimating,
        removeFilter: filterPanelCallbacks[idx].removeFilter,
        enlargeFilter: filterPanelCallbacks[idx].enlargeFilter,
        toggleAnimation: filterPanelCallbacks[idx].toggleAnimation,
        toggleFilterFeature: filterPanelCallbacks[idx].toggleFilterFeature,
        setFilter: setFilter
      });
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents.Button, {
      className: "add-filter-button",
      inactive: hadEmptyFilter || !hadDataset,
      width: "105px",
      onClick: onClickAddFilter
    }, /*#__PURE__*/_react["default"].createElement(_icons.Add, {
      height: "12px"
    }), /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'filterManager.addFilter'
    })));
  };

  return FilterManager;
}

var _default = FilterManagerFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,