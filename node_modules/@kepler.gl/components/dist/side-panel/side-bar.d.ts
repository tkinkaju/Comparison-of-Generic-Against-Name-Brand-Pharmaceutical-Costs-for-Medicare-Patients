import React from 'react';
declare type CollapseButtonProps = {
    isOpen: boolean;
    onClick: () => void;
};
declare type SideBarProps = {
    width: number;
    isOpen: boolean;
    minifiedWidth: number;
    onOpenOrClose: (v: {
        isOpen: boolean;
    }) => void;
};
export declare const CollapseButtonFactory: () => ({ onClick, isOpen }: CollapseButtonProps) => JSX.Element;
declare function SidebarFactory(CollapseButton: ReturnType<typeof CollapseButtonFactory>): {
    new (props: SideBarProps | Readonly<SideBarProps>): {
        _onOpenOrClose: () => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<SideBarProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<SideBarProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<SideBarProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<SideBarProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<SideBarProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<SideBarProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<SideBarProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<SideBarProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<SideBarProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: SideBarProps, context: any): {
        _onOpenOrClose: () => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<SideBarProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<SideBarProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<SideBarProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<SideBarProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<SideBarProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<SideBarProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<SideBarProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<SideBarProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<SideBarProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    defaultProps: {
        width: number;
        minifiedWidth: number;
        isOpen: boolean;
        onOpenOrClose: () => void;
    };
    contextType?: React.Context<any> | undefined;
};
declare namespace SidebarFactory {
    var deps: (() => ({ onClick, isOpen }: CollapseButtonProps) => JSX.Element)[];
}
export default SidebarFactory;
