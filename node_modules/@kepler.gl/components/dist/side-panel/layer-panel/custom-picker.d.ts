import React, { Component } from 'react';
import { ColorChangeHandler } from 'react-color';
declare type CustomPickerProps = {
    color: string;
    theme: {
        panelBackground: string;
    };
    onChange: ColorChangeHandler;
    onSwatchClose: () => void;
};
declare class CustomPicker extends Component<CustomPickerProps> {
    themeSelector: (props: CustomPickerProps) => {
        panelBackground: string;
    };
    pickerStyleSelector: import("reselect").OutputSelector<CustomPickerProps, {
        picker: {
            width: string;
            padding: string;
            boxSizing: string;
            background: string;
        };
    }, (res: {
        panelBackground: string;
    }) => {
        picker: {
            width: string;
            padding: string;
            boxSizing: string;
            background: string;
        };
    }>;
    handleClickOutside: (e: Event) => void;
    render(): JSX.Element;
}
declare const _default: React.ForwardRefExoticComponent<{
    ref?: React.Ref<import("react-onclickoutside").WrapperInstance<CustomPickerProps, typeof CustomPicker>> | undefined;
    key?: React.Key | null | undefined;
    color: string;
    onChange: any;
    disableOnClickOutside?: boolean | undefined;
    eventTypes?: string | string[] | undefined;
    outsideClickIgnoreClass?: string | undefined;
    preventDefault?: boolean | undefined;
    stopPropagation?: boolean | undefined;
    handleClickOutside?: React.MouseEventHandler<any> | undefined;
    excludeScrollbar?: boolean | undefined;
    onSwatchClose: () => void;
} & {
    theme?: any;
}>;
export default _default;
