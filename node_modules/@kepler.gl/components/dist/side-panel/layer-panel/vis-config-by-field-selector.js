// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactIntl = require("react-intl");

var _styledComponents = require("../../common/styled-components");

var _infoHelper = _interopRequireDefault(require("../../common/info-helper"));

var _dimensionScaleSelector = _interopRequireDefault(require("./dimension-scale-selector"));

var _utils = require("@kepler.gl/utils");

var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

VisConfigByFieldSelectorFactory.deps = [_infoHelper["default"], _fieldSelector["default"]];

function VisConfigByFieldSelectorFactory(InfoHelper, FieldSelector) {
  var VisConfigByFieldSelector = /*#__PURE__*/function (_Component) {
    (0, _inherits2["default"])(VisConfigByFieldSelector, _Component);

    var _super = _createSuper(VisConfigByFieldSelector);

    function VisConfigByFieldSelector() {
      var _this;

      (0, _classCallCheck2["default"])(this, VisConfigByFieldSelector);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_updateVisByField", function (val) {
        _this.props.updateField(val);
      });
      return _this;
    }

    (0, _createClass2["default"])(VisConfigByFieldSelector, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            property = _this$props.property,
            showScale = _this$props.showScale,
            selectedField = _this$props.selectedField,
            description = _this$props.description,
            label = _this$props.label,
            intl = _this$props.intl,
            _this$props$scaleOpti = _this$props.scaleOptions,
            scaleOptions = _this$props$scaleOpti === void 0 ? [] : _this$props$scaleOpti;
        return /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents.PanelLabel, null, label && /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
          id: label
        }) || /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
          id: "layer.propertyBasedOn",
          values: {
            property: intl.formatMessage({
              id: "property.".concat((0, _utils.camelize)(property)),
              defaultMessage: property
            })
          }
        })), description && /*#__PURE__*/_react["default"].createElement(InfoHelper, {
          description: description,
          property: property,
          id: "".concat(this.props.id, "-").concat(property)
        })), /*#__PURE__*/_react["default"].createElement(FieldSelector, {
          fields: this.props.fields,
          value: selectedField && selectedField.name,
          placeholder: this.props.placeholder,
          onSelect: this._updateVisByField,
          erasable: true
        })), /*#__PURE__*/_react["default"].createElement("div", null, showScale ? /*#__PURE__*/_react["default"].createElement(_dimensionScaleSelector["default"], {
          scaleType: this.props.scaleType,
          options: scaleOptions,
          label: "".concat(property, " scale"),
          onSelect: this.props.updateScale,
          disabled: scaleOptions.length < 2
        }) : null));
      }
    }]);
    return VisConfigByFieldSelector;
  }(_react.Component);

  return (0, _reactIntl.injectIntl)(VisConfigByFieldSelector);
}

var _default = VisConfigByFieldSelectorFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,