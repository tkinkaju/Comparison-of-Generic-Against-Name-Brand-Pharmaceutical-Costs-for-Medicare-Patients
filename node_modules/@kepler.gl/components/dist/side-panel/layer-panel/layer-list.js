// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactSortableHoc = require("react-sortable-hoc");

var _layerPanel = _interopRequireDefault(require("./layer-panel"));

var _utils = require("@kepler.gl/utils");

var _templateObject;

// make sure the element is always visible while is being dragged
// item being dragged is appended in body, here to reset its global style
var SortableStyledItem = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  z-index: ", ";\n  &.sorting {\n    pointer-events: none;\n  }\n  &.sorting-layers .layer-panel__header {\n    background-color: ", ";\n    font-family: ", ";\n    font-weight: ", ";\n    font-size: ", ";\n    line-height: ", ";\n    *,\n    *:before,\n    *:after {\n      box-sizing: border-box;\n    }\n    .layer__drag-handle {\n      opacity: 1;\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.dropdownWrapperZ + 1;
}, function (props) {
  return props.theme.panelBackgroundHover;
}, function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.fontWeight;
}, function (props) {
  return props.theme.fontSize;
}, function (props) {
  return props.theme.lineHeight;
}, function (props) {
  return props.theme.textColorHl;
});

LayerListFactory.deps = [_layerPanel["default"]];

function LayerListFactory(LayerPanel) {
  // By wrapping layer panel using a sortable element we don't have to implement the drag and drop logic into the panel itself;
  // Developers can provide any layer panel implementation and it will still be sortable
  var SortableItem = (0, _reactSortableHoc.SortableElement)(function (_ref) {
    var children = _ref.children,
        isSorting = _ref.isSorting;
    return /*#__PURE__*/_react["default"].createElement(SortableStyledItem, {
      className: (0, _classnames["default"])('sortable-layer-items', {
        sorting: isSorting
      })
    }, children);
  });
  var WrappedSortableContainer = (0, _reactSortableHoc.SortableContainer)(function (_ref2) {
    var children = _ref2.children;
    return /*#__PURE__*/_react["default"].createElement("div", null, children);
  });

  var LayerList = function LayerList(props) {
    var layers = props.layers,
        datasets = props.datasets,
        layerOrder = props.layerOrder,
        uiStateActions = props.uiStateActions,
        visStateActions = props.visStateActions,
        layerClasses = props.layerClasses,
        _props$isSortable = props.isSortable,
        isSortable = _props$isSortable === void 0 ? true : _props$isSortable;
    var openModal = uiStateActions.toggleModal;

    var _useState = (0, _react.useState)(false),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        isSorting = _useState2[0],
        setIsSorting = _useState2[1];

    var layerTypeOptions = (0, _react.useMemo)(function () {
      return Object.keys(layerClasses).map(function (key) {
        var layer = new layerClasses[key]();
        return {
          id: key,
          label: layer.name,
          icon: layer.layerIcon,
          requireData: layer.requireData
        };
      });
    }, [layerClasses]);
    var layerActions = {
      layerColorUIChange: visStateActions.layerColorUIChange,
      layerConfigChange: visStateActions.layerConfigChange,
      layerVisualChannelConfigChange: visStateActions.layerVisualChannelConfigChange,
      layerTypeChange: visStateActions.layerTypeChange,
      layerVisConfigChange: visStateActions.layerVisConfigChange,
      layerTextLabelChange: visStateActions.layerTextLabelChange,
      removeLayer: visStateActions.removeLayer,
      duplicateLayer: visStateActions.duplicateLayer
    };
    var panelProps = {
      datasets: datasets,
      openModal: openModal,
      layerTypeOptions: layerTypeOptions
    };

    var _handleSort = (0, _react.useCallback)(function (_ref3) {
      var oldIndex = _ref3.oldIndex,
          newIndex = _ref3.newIndex;
      visStateActions.reorderLayer((0, _utils.arrayMove)(props.layerOrder, oldIndex, newIndex));
      setIsSorting(false);
    }, [props.layerOrder, visStateActions]);

    var _onSortStart = (0, _react.useCallback)(function () {
      setIsSorting(true);
    }, []);

    var _updateBeforeSortStart = (0, _react.useCallback)(function () {
      (function (_ref4) {
        var index = _ref4.index;
        var layerIdx = layerOrder[index];

        if (layers[layerIdx].config.isConfigActive) {
          visStateActions.layerConfigChange(layers[layerIdx], {
            isConfigActive: false
          });
        }
      });
    }, [layers, layerOrder, visStateActions]);

    return isSortable ? /*#__PURE__*/_react["default"].createElement(WrappedSortableContainer, {
      onSortEnd: _handleSort,
      onSortStart: _onSortStart,
      updateBeforeSortStart: _updateBeforeSortStart,
      lockAxis: "y",
      helperClass: "sorting-layers",
      useDragHandle: true
    }, layerOrder.map(function (layerIdx, index) {
      return layers[layerIdx] && !layers[layerIdx].config.hidden && /*#__PURE__*/_react["default"].createElement(SortableItem, {
        key: "layer-".concat(layerIdx),
        index: index,
        isSorting: isSorting
      }, /*#__PURE__*/_react["default"].createElement(LayerPanel, (0, _extends2["default"])({}, panelProps, layerActions, {
        key: layers[layerIdx].id,
        idx: layerIdx,
        layer: layers[layerIdx]
      })));
    })) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, layerOrder.map(function (layerIdx, index) {
      return layers[layerIdx] && !layers[layerIdx].config.hidden && /*#__PURE__*/_react["default"].createElement(LayerPanel, (0, _extends2["default"])({}, panelProps, layerActions, {
        key: layers[layerIdx].id,
        idx: layerIdx,
        layer: layers[layerIdx],
        isDraggable: false
      }));
    }));
  };

  return LayerList;
}

var _default = LayerListFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,