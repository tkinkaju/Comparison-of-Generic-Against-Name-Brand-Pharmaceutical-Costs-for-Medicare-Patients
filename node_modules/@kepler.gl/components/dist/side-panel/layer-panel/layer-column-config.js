// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _localization = require("@kepler.gl/localization");

var _styledComponents2 = require("../../common/styled-components");

var _columnSelector = _interopRequireDefault(require("./column-selector"));

var _templateObject;

var TopRow = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n"])));

LayerColumnConfigFactory.deps = [_columnSelector["default"]];

function LayerColumnConfigFactory(ColumnSelector) {
  var LayerColumnConfig = function LayerColumnConfig(_ref) {
    var columnPairs = _ref.columnPairs,
        fieldPairs = _ref.fieldPairs,
        columns = _ref.columns,
        columnLabels = _ref.columnLabels,
        fields = _ref.fields,
        updateLayerConfig = _ref.updateLayerConfig,
        assignColumn = _ref.assignColumn,
        assignColumnPairs = _ref.assignColumnPairs;
    var enhancedFieldPairs = (0, _react.useMemo)(function () {
      return columnPairs && fieldPairs ? fieldPairs.map(function (fp) {
        return {
          name: fp.defaultName,
          type: 'point',
          pair: fp.pair
        };
      }) : null;
    }, [columnPairs, fieldPairs]);
    var onUpdateColumn = (0, _react.useCallback)(function (key, value) {
      var assignedColumns = value && value.pair && columnPairs ? assignColumnPairs(key, value.pair) : assignColumn(key, value);
      updateLayerConfig({
        columns: assignedColumns
      });
    }, [updateLayerConfig, columnPairs, assignColumnPairs, assignColumn]);

    if (!Object.keys(columns).length) {
      // don't render if columns is empty
      return /*#__PURE__*/_react["default"].createElement("div", null);
    }

    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement("div", {
      className: "layer-config__column"
    }, /*#__PURE__*/_react["default"].createElement(TopRow, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'columns.title'
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "layer.required"
    }))), Object.keys(columns).map(function (key) {
      return /*#__PURE__*/_react["default"].createElement(ColumnSelector, {
        column: columns[key],
        columns: columns,
        label: columnLabels && columnLabels[key] || key,
        key: key,
        allFields: fields,
        fieldPairs: enhancedFieldPairs,
        onSelect: function onSelect(val) {
          return onUpdateColumn(key, val);
        }
      });
    }))));
  };

  return LayerColumnConfig;
}

var _default = LayerColumnConfigFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL2xheWVyLWNvbHVtbi1jb25maWcudHN4Il0sIm5hbWVzIjpbIlRvcFJvdyIsInN0eWxlZCIsImRpdiIsIkxheWVyQ29sdW1uQ29uZmlnRmFjdG9yeSIsImRlcHMiLCJDb2x1bW5TZWxlY3RvckZhY3RvcnkiLCJDb2x1bW5TZWxlY3RvciIsIkxheWVyQ29sdW1uQ29uZmlnIiwiY29sdW1uUGFpcnMiLCJmaWVsZFBhaXJzIiwiY29sdW1ucyIsImNvbHVtbkxhYmVscyIsImZpZWxkcyIsInVwZGF0ZUxheWVyQ29uZmlnIiwiYXNzaWduQ29sdW1uIiwiYXNzaWduQ29sdW1uUGFpcnMiLCJlbmhhbmNlZEZpZWxkUGFpcnMiLCJtYXAiLCJmcCIsIm5hbWUiLCJkZWZhdWx0TmFtZSIsInR5cGUiLCJwYWlyIiwib25VcGRhdGVDb2x1bW4iLCJrZXkiLCJ2YWx1ZSIsImFzc2lnbmVkQ29sdW1ucyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJ2YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFlQSxJQUFNQSxNQUFNLEdBQUdDLDZCQUFPQyxHQUFWLDZJQUFaOztBQUtBQyx3QkFBd0IsQ0FBQ0MsSUFBekIsR0FBZ0MsQ0FBQ0MsMEJBQUQsQ0FBaEM7O0FBRUEsU0FBU0Ysd0JBQVQsQ0FBa0NHLGNBQWxDLEVBQTRGO0FBQzFGLE1BQU1DLGlCQUFtRCxHQUFHLFNBQXREQSxpQkFBc0QsT0FTdEQ7QUFBQSxRQVJKQyxXQVFJLFFBUkpBLFdBUUk7QUFBQSxRQVBKQyxVQU9JLFFBUEpBLFVBT0k7QUFBQSxRQU5KQyxPQU1JLFFBTkpBLE9BTUk7QUFBQSxRQUxKQyxZQUtJLFFBTEpBLFlBS0k7QUFBQSxRQUpKQyxNQUlJLFFBSkpBLE1BSUk7QUFBQSxRQUhKQyxpQkFHSSxRQUhKQSxpQkFHSTtBQUFBLFFBRkpDLFlBRUksUUFGSkEsWUFFSTtBQUFBLFFBREpDLGlCQUNJLFFBREpBLGlCQUNJO0FBQ0osUUFBTUMsa0JBQWtCLEdBQUcsb0JBQ3pCO0FBQUEsYUFDRVIsV0FBVyxJQUFJQyxVQUFmLEdBQ0lBLFVBQVUsQ0FBQ1EsR0FBWCxDQUFlLFVBQUFDLEVBQUU7QUFBQSxlQUFLO0FBQ3BCQyxVQUFBQSxJQUFJLEVBQUVELEVBQUUsQ0FBQ0UsV0FEVztBQUVwQkMsVUFBQUEsSUFBSSxFQUFFLE9BRmM7QUFHcEJDLFVBQUFBLElBQUksRUFBRUosRUFBRSxDQUFDSTtBQUhXLFNBQUw7QUFBQSxPQUFqQixDQURKLEdBTUksSUFQTjtBQUFBLEtBRHlCLEVBU3pCLENBQUNkLFdBQUQsRUFBY0MsVUFBZCxDQVR5QixDQUEzQjtBQVlBLFFBQU1jLGNBQWMsR0FBRyx3QkFDckIsVUFBQ0MsR0FBRCxFQUFNQyxLQUFOLEVBQWdCO0FBQ2QsVUFBTUMsZUFBZSxHQUNuQkQsS0FBSyxJQUFJQSxLQUFLLENBQUNILElBQWYsSUFBdUJkLFdBQXZCLEdBQ0lPLGlCQUFpQixDQUFDUyxHQUFELEVBQU1DLEtBQUssQ0FBQ0gsSUFBWixDQURyQixHQUVJUixZQUFZLENBQUNVLEdBQUQsRUFBTUMsS0FBTixDQUhsQjtBQUtBWixNQUFBQSxpQkFBaUIsQ0FBQztBQUFDSCxRQUFBQSxPQUFPLEVBQUVnQjtBQUFWLE9BQUQsQ0FBakI7QUFDRCxLQVJvQixFQVNyQixDQUFDYixpQkFBRCxFQUFvQkwsV0FBcEIsRUFBaUNPLGlCQUFqQyxFQUFvREQsWUFBcEQsQ0FUcUIsQ0FBdkI7O0FBWUEsUUFBSSxDQUFDYSxNQUFNLENBQUNDLElBQVAsQ0FBWWxCLE9BQVosRUFBcUJtQixNQUExQixFQUFrQztBQUNoQztBQUNBLDBCQUFPLDRDQUFQO0FBQ0Q7O0FBRUQsd0JBQ0UsMERBQ0UsZ0NBQUMsbUNBQUQscUJBQ0U7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNFLGdDQUFDLE1BQUQscUJBQ0UsZ0NBQUMsNkJBQUQscUJBQ0UsZ0NBQUMsOEJBQUQ7QUFBa0IsTUFBQSxFQUFFLEVBQUU7QUFBdEIsTUFERixDQURGLGVBSUUsZ0NBQUMsNkJBQUQscUJBQ0UsZ0NBQUMsOEJBQUQ7QUFBa0IsTUFBQSxFQUFFLEVBQUM7QUFBckIsTUFERixDQUpGLENBREYsRUFTR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlsQixPQUFaLEVBQXFCTyxHQUFyQixDQUF5QixVQUFBTyxHQUFHO0FBQUEsMEJBQzNCLGdDQUFDLGNBQUQ7QUFDRSxRQUFBLE1BQU0sRUFBRWQsT0FBTyxDQUFDYyxHQUFELENBRGpCO0FBRUUsUUFBQSxPQUFPLEVBQUVkLE9BRlg7QUFHRSxRQUFBLEtBQUssRUFBR0MsWUFBWSxJQUFJQSxZQUFZLENBQUNhLEdBQUQsQ0FBN0IsSUFBdUNBLEdBSGhEO0FBSUUsUUFBQSxHQUFHLEVBQUVBLEdBSlA7QUFLRSxRQUFBLFNBQVMsRUFBRVosTUFMYjtBQU1FLFFBQUEsVUFBVSxFQUFFSSxrQkFOZDtBQU9FLFFBQUEsUUFBUSxFQUFFLGtCQUFBYyxHQUFHO0FBQUEsaUJBQUlQLGNBQWMsQ0FBQ0MsR0FBRCxFQUFNTSxHQUFOLENBQWxCO0FBQUE7QUFQZixRQUQyQjtBQUFBLEtBQTVCLENBVEgsQ0FERixDQURGLENBREY7QUEyQkQsR0FsRUQ7O0FBb0VBLFNBQU92QixpQkFBUDtBQUNEOztlQUVjSix3QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMiBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuaW1wb3J0IHtQYW5lbExhYmVsLCBTaWRlUGFuZWxTZWN0aW9ufSBmcm9tICcuLi8uLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IENvbHVtblNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL2NvbHVtbi1zZWxlY3Rvcic7XG5pbXBvcnQge0NvbHVtblBhaXJzLCBMYXllciwgTGF5ZXJDb2x1bW5zLCBMYXllckJhc2VDb25maWd9IGZyb20gJ0BrZXBsZXIuZ2wvbGF5ZXJzJztcbmltcG9ydCB7RmllbGQsIEZpZWxkUGFpcn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5cbnR5cGUgTGF5ZXJDb2x1bW5Db25maWdQcm9wcyA9IHtcbiAgY29sdW1uUGFpcnM/OiBDb2x1bW5QYWlycyB8IG51bGw7XG4gIGZpZWxkUGFpcnM/OiBGaWVsZFBhaXJbXTtcbiAgY29sdW1uczogTGF5ZXJDb2x1bW5zO1xuICBjb2x1bW5MYWJlbHM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBmaWVsZHM6IEZpZWxkW107XG4gIHVwZGF0ZUxheWVyQ29uZmlnOiAobmV3Q29uZmlnOiBQYXJ0aWFsPExheWVyQmFzZUNvbmZpZz4pID0+IHZvaWQ7XG4gIGFzc2lnbkNvbHVtbjogTGF5ZXJbJ2Fzc2lnbkNvbHVtbiddO1xuICBhc3NpZ25Db2x1bW5QYWlyczogTGF5ZXJbJ2Fzc2lnbkNvbHVtblBhaXJzJ107XG59O1xuXG5jb25zdCBUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5gO1xuXG5MYXllckNvbHVtbkNvbmZpZ0ZhY3RvcnkuZGVwcyA9IFtDb2x1bW5TZWxlY3RvckZhY3RvcnldO1xuXG5mdW5jdGlvbiBMYXllckNvbHVtbkNvbmZpZ0ZhY3RvcnkoQ29sdW1uU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIENvbHVtblNlbGVjdG9yRmFjdG9yeT4pIHtcbiAgY29uc3QgTGF5ZXJDb2x1bW5Db25maWc6IFJlYWN0LkZDPExheWVyQ29sdW1uQ29uZmlnUHJvcHM+ID0gKHtcbiAgICBjb2x1bW5QYWlycyxcbiAgICBmaWVsZFBhaXJzLFxuICAgIGNvbHVtbnMsXG4gICAgY29sdW1uTGFiZWxzLFxuICAgIGZpZWxkcyxcbiAgICB1cGRhdGVMYXllckNvbmZpZyxcbiAgICBhc3NpZ25Db2x1bW4sXG4gICAgYXNzaWduQ29sdW1uUGFpcnNcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGVuaGFuY2VkRmllbGRQYWlycyA9IHVzZU1lbW8oXG4gICAgICAoKSA9PlxuICAgICAgICBjb2x1bW5QYWlycyAmJiBmaWVsZFBhaXJzXG4gICAgICAgICAgPyBmaWVsZFBhaXJzLm1hcChmcCA9PiAoe1xuICAgICAgICAgICAgICBuYW1lOiBmcC5kZWZhdWx0TmFtZSxcbiAgICAgICAgICAgICAgdHlwZTogJ3BvaW50JyxcbiAgICAgICAgICAgICAgcGFpcjogZnAucGFpclxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgOiBudWxsLFxuICAgICAgW2NvbHVtblBhaXJzLCBmaWVsZFBhaXJzXVxuICAgICk7XG5cbiAgICBjb25zdCBvblVwZGF0ZUNvbHVtbiA9IHVzZUNhbGxiYWNrKFxuICAgICAgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgYXNzaWduZWRDb2x1bW5zID1cbiAgICAgICAgICB2YWx1ZSAmJiB2YWx1ZS5wYWlyICYmIGNvbHVtblBhaXJzXG4gICAgICAgICAgICA/IGFzc2lnbkNvbHVtblBhaXJzKGtleSwgdmFsdWUucGFpcilcbiAgICAgICAgICAgIDogYXNzaWduQ29sdW1uKGtleSwgdmFsdWUpO1xuXG4gICAgICAgIHVwZGF0ZUxheWVyQ29uZmlnKHtjb2x1bW5zOiBhc3NpZ25lZENvbHVtbnN9KTtcbiAgICAgIH0sXG4gICAgICBbdXBkYXRlTGF5ZXJDb25maWcsIGNvbHVtblBhaXJzLCBhc3NpZ25Db2x1bW5QYWlycywgYXNzaWduQ29sdW1uXVxuICAgICk7XG5cbiAgICBpZiAoIU9iamVjdC5rZXlzKGNvbHVtbnMpLmxlbmd0aCkge1xuICAgICAgLy8gZG9uJ3QgcmVuZGVyIGlmIGNvbHVtbnMgaXMgZW1wdHlcbiAgICAgIHJldHVybiA8ZGl2IC8+O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8U2lkZVBhbmVsU2VjdGlvbj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxheWVyLWNvbmZpZ19fY29sdW1uXCI+XG4gICAgICAgICAgICA8VG9wUm93PlxuICAgICAgICAgICAgICA8UGFuZWxMYWJlbD5cbiAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD17J2NvbHVtbnMudGl0bGUnfSAvPlxuICAgICAgICAgICAgICA8L1BhbmVsTGFiZWw+XG4gICAgICAgICAgICAgIDxQYW5lbExhYmVsPlxuICAgICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwibGF5ZXIucmVxdWlyZWRcIiAvPlxuICAgICAgICAgICAgICA8L1BhbmVsTGFiZWw+XG4gICAgICAgICAgICA8L1RvcFJvdz5cbiAgICAgICAgICAgIHtPYmplY3Qua2V5cyhjb2x1bW5zKS5tYXAoa2V5ID0+IChcbiAgICAgICAgICAgICAgPENvbHVtblNlbGVjdG9yXG4gICAgICAgICAgICAgICAgY29sdW1uPXtjb2x1bW5zW2tleV19XG4gICAgICAgICAgICAgICAgY29sdW1ucz17Y29sdW1uc31cbiAgICAgICAgICAgICAgICBsYWJlbD17KGNvbHVtbkxhYmVscyAmJiBjb2x1bW5MYWJlbHNba2V5XSkgfHwga2V5fVxuICAgICAgICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgICAgICAgIGFsbEZpZWxkcz17ZmllbGRzfVxuICAgICAgICAgICAgICAgIGZpZWxkUGFpcnM9e2VuaGFuY2VkRmllbGRQYWlyc31cbiAgICAgICAgICAgICAgICBvblNlbGVjdD17dmFsID0+IG9uVXBkYXRlQ29sdW1uKGtleSwgdmFsKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1NpZGVQYW5lbFNlY3Rpb24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBMYXllckNvbHVtbkNvbmZpZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGF5ZXJDb2x1bW5Db25maWdGYWN0b3J5O1xuIl19