import React, { Component, MouseEvent } from 'react';
import { ColorRange } from '@kepler.gl/constants';
import { NestedPartial, ColorUI } from '@kepler.gl/types';
declare type ColorRangeSelectorProps = {
    colorPaletteUI: ColorUI;
    selectedColorRange: ColorRange;
    onSelectColorRange: (p: ColorRange, e: MouseEvent) => void;
    setColorPaletteUI: (newConfig: NestedPartial<ColorUI>) => void;
};
declare type PaletteConfigProps = {
    label: string;
    value: string | number | boolean;
    config: {
        type: string;
        options: (string | number | boolean)[];
    };
    onChange: (v: string | number | boolean | object | null) => void;
};
declare type ColorPaletteGroupProps = {
    reversed?: boolean;
    selected: ColorRange;
    colorRanges: ColorRange[];
    onSelect: (p: ColorRange, e: MouseEvent) => void;
};
export declare const ALL_TYPES: string[];
export declare const ALL_STEPS: number[];
export default class ColorRangeSelector extends Component<ColorRangeSelectorProps> {
    static defaultProps: {
        onSelectColorRange: () => void;
        setColorPaletteUI: () => void;
    };
    configTypeSelector: (props: ColorRangeSelectorProps) => string;
    configStepSelector: (props: ColorRangeSelectorProps) => number;
    filteredColorRange: import("reselect").OutputSelector<ColorRangeSelectorProps, ColorRange[], (res1: string, res2: number) => ColorRange[]>;
    _updateConfig: ({ key, value }: {
        key: string;
        value: string | number | boolean | object | null;
    }) => void;
    _onSetCustomPalette: (config: NestedPartial<ColorRange>) => void;
    _setColorRangeConfig: (newConfig: Record<string, string | number | boolean | object | null>) => void;
    _onCustomPaletteCancel: () => void;
    _onToggleSketcher: (val: boolean | number) => void;
    render(): JSX.Element;
}
export declare const PaletteConfig: React.FC<PaletteConfigProps>;
export declare const ColorPaletteGroup: React.FC<ColorPaletteGroupProps>;
export {};
