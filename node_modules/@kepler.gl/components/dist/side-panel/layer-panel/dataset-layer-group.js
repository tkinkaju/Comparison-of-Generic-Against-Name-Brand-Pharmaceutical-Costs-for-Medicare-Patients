// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _datasetLayerSection = _interopRequireDefault(require("./dataset-layer-section"));DatasetLayerGroupFactory.deps = [_datasetLayerSection["default"]];

function DatasetLayerGroupFactory(DatasetLayerSection) {
  var DatasetLayerGroup = function DatasetLayerGroup(props) {
    var datasets = props.datasets,
        showDatasetTable = props.showDatasetTable,
        layers = props.layers,
        updateTableColor = props.updateTableColor,
        showDeleteDataset = props.showDeleteDataset,
        removeDataset = props.removeDataset,
        layerOrder = props.layerOrder,
        layerClasses = props.layerClasses,
        uiStateActions = props.uiStateActions,
        visStateActions = props.visStateActions;
    var datasetLayerSectionData = (0, _react.useMemo)(function () {
      return Object.values(datasets).map(function (dataset) {
        // Global layer order will contain the correct order of layers
        // We just empty the positions in layers array (for each dataset)
        // where the layer doesn't belong to a dataset and set it to null
        var datasetLayers = layers.map(function (layer) {
          return layer.config.dataId === dataset.id ? layer : null;
        }).filter(function (layer) {
          return Boolean(layer);
        });
        return {
          dataset: dataset,
          datasetLayers: datasetLayers
        };
      });
    }, [datasets, layers]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, datasetLayerSectionData.map(function (dlsData) {
      return /*#__PURE__*/_react["default"].createElement(DatasetLayerSection, {
        key: dlsData.dataset.id,
        dataset: dlsData.dataset,
        layers: dlsData.datasetLayers,
        showDatasetTable: showDatasetTable,
        updateTableColor: updateTableColor,
        showDeleteDataset: showDeleteDataset,
        removeDataset: removeDataset,
        layerOrder: layerOrder,
        layerClasses: layerClasses,
        uiStateActions: uiStateActions,
        visStateActions: visStateActions
      });
    }));
  };

  return DatasetLayerGroup;
}

var _default = DatasetLayerGroupFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL2RhdGFzZXQtbGF5ZXItZ3JvdXAudHN4Il0sIm5hbWVzIjpbIkRhdGFzZXRMYXllckdyb3VwRmFjdG9yeSIsImRlcHMiLCJEYXRhc2V0TGF5ZXJTZWN0aW9uRmFjdG9yeSIsIkRhdGFzZXRMYXllclNlY3Rpb24iLCJEYXRhc2V0TGF5ZXJHcm91cCIsInByb3BzIiwiZGF0YXNldHMiLCJzaG93RGF0YXNldFRhYmxlIiwibGF5ZXJzIiwidXBkYXRlVGFibGVDb2xvciIsInNob3dEZWxldGVEYXRhc2V0IiwicmVtb3ZlRGF0YXNldCIsImxheWVyT3JkZXIiLCJsYXllckNsYXNzZXMiLCJ1aVN0YXRlQWN0aW9ucyIsInZpc1N0YXRlQWN0aW9ucyIsImRhdGFzZXRMYXllclNlY3Rpb25EYXRhIiwiT2JqZWN0IiwidmFsdWVzIiwibWFwIiwiZGF0YXNldCIsImRhdGFzZXRMYXllcnMiLCJsYXllciIsImNvbmZpZyIsImRhdGFJZCIsImlkIiwiZmlsdGVyIiwiQm9vbGVhbiIsImRsc0RhdGEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBb0JBOztBQUVBOztBQXRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXNCQUEsd0JBQXdCLENBQUNDLElBQXpCLEdBQWdDLENBQUNDLCtCQUFELENBQWhDOztBQUVBLFNBQVNGLHdCQUFULENBQ0VHLG1CQURGLEVBRUU7QUFDQSxNQUFNQyxpQkFBbUQsR0FBRyxTQUF0REEsaUJBQXNELENBQUFDLEtBQUssRUFBSTtBQUFBLFFBRWpFQyxRQUZpRSxHQVkvREQsS0FaK0QsQ0FFakVDLFFBRmlFO0FBQUEsUUFHakVDLGdCQUhpRSxHQVkvREYsS0FaK0QsQ0FHakVFLGdCQUhpRTtBQUFBLFFBSWpFQyxNQUppRSxHQVkvREgsS0FaK0QsQ0FJakVHLE1BSmlFO0FBQUEsUUFLakVDLGdCQUxpRSxHQVkvREosS0FaK0QsQ0FLakVJLGdCQUxpRTtBQUFBLFFBTWpFQyxpQkFOaUUsR0FZL0RMLEtBWitELENBTWpFSyxpQkFOaUU7QUFBQSxRQU9qRUMsYUFQaUUsR0FZL0ROLEtBWitELENBT2pFTSxhQVBpRTtBQUFBLFFBUWpFQyxVQVJpRSxHQVkvRFAsS0FaK0QsQ0FRakVPLFVBUmlFO0FBQUEsUUFTakVDLFlBVGlFLEdBWS9EUixLQVorRCxDQVNqRVEsWUFUaUU7QUFBQSxRQVVqRUMsY0FWaUUsR0FZL0RULEtBWitELENBVWpFUyxjQVZpRTtBQUFBLFFBV2pFQyxlQVhpRSxHQVkvRFYsS0FaK0QsQ0FXakVVLGVBWGlFO0FBY25FLFFBQU1DLHVCQUF1QixHQUFHLG9CQUFRLFlBQU07QUFDNUMsYUFBT0MsTUFBTSxDQUFDQyxNQUFQLENBQWNaLFFBQWQsRUFBd0JhLEdBQXhCLENBQTRCLFVBQUFDLE9BQU8sRUFBSTtBQUM1QztBQUNBO0FBQ0E7QUFDQSxZQUFNQyxhQUFhLEdBQUdiLE1BQU0sQ0FDekJXLEdBRG1CLENBQ2YsVUFBQUcsS0FBSztBQUFBLGlCQUFLQSxLQUFLLENBQUNDLE1BQU4sQ0FBYUMsTUFBYixLQUF3QkosT0FBTyxDQUFDSyxFQUFoQyxHQUFxQ0gsS0FBckMsR0FBNkMsSUFBbEQ7QUFBQSxTQURVLEVBRW5CSSxNQUZtQixDQUVaLFVBQUFKLEtBQUs7QUFBQSxpQkFBSUssT0FBTyxDQUFDTCxLQUFELENBQVg7QUFBQSxTQUZPLENBQXRCO0FBSUEsZUFBTztBQUFDRixVQUFBQSxPQUFPLEVBQVBBLE9BQUQ7QUFBVUMsVUFBQUEsYUFBYSxFQUFiQTtBQUFWLFNBQVA7QUFDRCxPQVRNLENBQVA7QUFVRCxLQVgrQixFQVc3QixDQUFDZixRQUFELEVBQVdFLE1BQVgsQ0FYNkIsQ0FBaEM7QUFhQSx3QkFDRSxrRUFDR1EsdUJBQXVCLENBQUNHLEdBQXhCLENBQTRCLFVBQUFTLE9BQU87QUFBQSwwQkFDbEMsZ0NBQUMsbUJBQUQ7QUFDRSxRQUFBLEdBQUcsRUFBRUEsT0FBTyxDQUFDUixPQUFSLENBQWdCSyxFQUR2QjtBQUVFLFFBQUEsT0FBTyxFQUFFRyxPQUFPLENBQUNSLE9BRm5CO0FBR0UsUUFBQSxNQUFNLEVBQUVRLE9BQU8sQ0FBQ1AsYUFIbEI7QUFJRSxRQUFBLGdCQUFnQixFQUFFZCxnQkFKcEI7QUFLRSxRQUFBLGdCQUFnQixFQUFFRSxnQkFMcEI7QUFNRSxRQUFBLGlCQUFpQixFQUFFQyxpQkFOckI7QUFPRSxRQUFBLGFBQWEsRUFBRUMsYUFQakI7QUFRRSxRQUFBLFVBQVUsRUFBRUMsVUFSZDtBQVNFLFFBQUEsWUFBWSxFQUFFQyxZQVRoQjtBQVVFLFFBQUEsY0FBYyxFQUFFQyxjQVZsQjtBQVdFLFFBQUEsZUFBZSxFQUFFQztBQVhuQixRQURrQztBQUFBLEtBQW5DLENBREgsQ0FERjtBQW1CRCxHQTlDRDs7QUFnREEsU0FBT1gsaUJBQVA7QUFDRDs7ZUFFY0osd0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjIgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QsIHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBEYXRhc2V0TGF5ZXJTZWN0aW9uRmFjdG9yeSBmcm9tICcuL2RhdGFzZXQtbGF5ZXItc2VjdGlvbic7XG5pbXBvcnQge0xheWVyLCBMYXllckNsYXNzZXNUeXBlfSBmcm9tICdAa2VwbGVyLmdsL2xheWVycyc7XG5pbXBvcnQge1VJU3RhdGVBY3Rpb25zLCBWaXNTdGF0ZUFjdGlvbnMsIEFjdGlvbkhhbmRsZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvYWN0aW9ucyc7XG5pbXBvcnQge0RhdGFzZXRzfSBmcm9tICdAa2VwbGVyLmdsL3RhYmxlJztcblxudHlwZSBEYXRhc2V0TGF5ZXJHcm91cFByb3BzID0ge1xuICBkYXRhc2V0czogRGF0YXNldHM7XG4gIGxheWVyczogTGF5ZXJbXTtcbiAgbGF5ZXJPcmRlcjogbnVtYmVyW107XG4gIGxheWVyQ2xhc3NlczogTGF5ZXJDbGFzc2VzVHlwZTtcbiAgc2hvd0RlbGV0ZURhdGFzZXQ6IGJvb2xlYW47XG4gIHJlbW92ZURhdGFzZXQ6IEFjdGlvbkhhbmRsZXI8dHlwZW9mIFVJU3RhdGVBY3Rpb25zLm9wZW5EZWxldGVNb2RhbD47XG4gIHNob3dEYXRhc2V0VGFibGU6IEFjdGlvbkhhbmRsZXI8dHlwZW9mIFZpc1N0YXRlQWN0aW9ucy5zaG93RGF0YXNldFRhYmxlPjtcbiAgdXBkYXRlVGFibGVDb2xvcjogQWN0aW9uSGFuZGxlcjx0eXBlb2YgVmlzU3RhdGVBY3Rpb25zLnVwZGF0ZVRhYmxlQ29sb3I+O1xuICB1aVN0YXRlQWN0aW9uczogdHlwZW9mIFVJU3RhdGVBY3Rpb25zO1xuICB2aXNTdGF0ZUFjdGlvbnM6IHR5cGVvZiBWaXNTdGF0ZUFjdGlvbnM7XG59O1xuXG5EYXRhc2V0TGF5ZXJHcm91cEZhY3RvcnkuZGVwcyA9IFtEYXRhc2V0TGF5ZXJTZWN0aW9uRmFjdG9yeV07XG5cbmZ1bmN0aW9uIERhdGFzZXRMYXllckdyb3VwRmFjdG9yeShcbiAgRGF0YXNldExheWVyU2VjdGlvbjogUmV0dXJuVHlwZTx0eXBlb2YgRGF0YXNldExheWVyU2VjdGlvbkZhY3Rvcnk+XG4pIHtcbiAgY29uc3QgRGF0YXNldExheWVyR3JvdXA6IFJlYWN0LkZDPERhdGFzZXRMYXllckdyb3VwUHJvcHM+ID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGFzZXRzLFxuICAgICAgc2hvd0RhdGFzZXRUYWJsZSxcbiAgICAgIGxheWVycyxcbiAgICAgIHVwZGF0ZVRhYmxlQ29sb3IsXG4gICAgICBzaG93RGVsZXRlRGF0YXNldCxcbiAgICAgIHJlbW92ZURhdGFzZXQsXG4gICAgICBsYXllck9yZGVyLFxuICAgICAgbGF5ZXJDbGFzc2VzLFxuICAgICAgdWlTdGF0ZUFjdGlvbnMsXG4gICAgICB2aXNTdGF0ZUFjdGlvbnNcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBkYXRhc2V0TGF5ZXJTZWN0aW9uRGF0YSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoZGF0YXNldHMpLm1hcChkYXRhc2V0ID0+IHtcbiAgICAgICAgLy8gR2xvYmFsIGxheWVyIG9yZGVyIHdpbGwgY29udGFpbiB0aGUgY29ycmVjdCBvcmRlciBvZiBsYXllcnNcbiAgICAgICAgLy8gV2UganVzdCBlbXB0eSB0aGUgcG9zaXRpb25zIGluIGxheWVycyBhcnJheSAoZm9yIGVhY2ggZGF0YXNldClcbiAgICAgICAgLy8gd2hlcmUgdGhlIGxheWVyIGRvZXNuJ3QgYmVsb25nIHRvIGEgZGF0YXNldCBhbmQgc2V0IGl0IHRvIG51bGxcbiAgICAgICAgY29uc3QgZGF0YXNldExheWVycyA9IGxheWVyc1xuICAgICAgICAgIC5tYXAobGF5ZXIgPT4gKGxheWVyLmNvbmZpZy5kYXRhSWQgPT09IGRhdGFzZXQuaWQgPyBsYXllciA6IG51bGwpKVxuICAgICAgICAgIC5maWx0ZXIobGF5ZXIgPT4gQm9vbGVhbihsYXllcikpO1xuXG4gICAgICAgIHJldHVybiB7ZGF0YXNldCwgZGF0YXNldExheWVyc307XG4gICAgICB9KTtcbiAgICB9LCBbZGF0YXNldHMsIGxheWVyc10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIHtkYXRhc2V0TGF5ZXJTZWN0aW9uRGF0YS5tYXAoZGxzRGF0YSA9PiAoXG4gICAgICAgICAgPERhdGFzZXRMYXllclNlY3Rpb25cbiAgICAgICAgICAgIGtleT17ZGxzRGF0YS5kYXRhc2V0LmlkfVxuICAgICAgICAgICAgZGF0YXNldD17ZGxzRGF0YS5kYXRhc2V0fVxuICAgICAgICAgICAgbGF5ZXJzPXtkbHNEYXRhLmRhdGFzZXRMYXllcnMgYXMgTGF5ZXJbXX1cbiAgICAgICAgICAgIHNob3dEYXRhc2V0VGFibGU9e3Nob3dEYXRhc2V0VGFibGV9XG4gICAgICAgICAgICB1cGRhdGVUYWJsZUNvbG9yPXt1cGRhdGVUYWJsZUNvbG9yfVxuICAgICAgICAgICAgc2hvd0RlbGV0ZURhdGFzZXQ9e3Nob3dEZWxldGVEYXRhc2V0fVxuICAgICAgICAgICAgcmVtb3ZlRGF0YXNldD17cmVtb3ZlRGF0YXNldH1cbiAgICAgICAgICAgIGxheWVyT3JkZXI9e2xheWVyT3JkZXJ9XG4gICAgICAgICAgICBsYXllckNsYXNzZXM9e2xheWVyQ2xhc3Nlc31cbiAgICAgICAgICAgIHVpU3RhdGVBY3Rpb25zPXt1aVN0YXRlQWN0aW9uc31cbiAgICAgICAgICAgIHZpc1N0YXRlQWN0aW9ucz17dmlzU3RhdGVBY3Rpb25zfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gRGF0YXNldExheWVyR3JvdXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFzZXRMYXllckdyb3VwRmFjdG9yeTtcbiJdfQ==