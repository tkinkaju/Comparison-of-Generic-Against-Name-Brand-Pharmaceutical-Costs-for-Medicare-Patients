// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _sourceDataCatalog = _interopRequireDefault(require("../common/source-data-catalog"));

var _layerList = _interopRequireDefault(require("./layer-list"));

var _templateObject;

var DatasetLayerSectionWrapper = _styledComponents["default"].div.attrs({
  className: 'dataset-layer-section'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 16px;\n"])));

DatasetLayerSectionFactory.deps = [_sourceDataCatalog["default"], _layerList["default"]];

function DatasetLayerSectionFactory(SourceDataCatalog, LayerList) {
  var DatasetLayerSection = function DatasetLayerSection(props) {
    var dataset = props.dataset,
        showDatasetTable = props.showDatasetTable,
        layers = props.layers,
        updateTableColor = props.updateTableColor,
        showDeleteDataset = props.showDeleteDataset,
        removeDataset = props.removeDataset,
        layerOrder = props.layerOrder,
        layerClasses = props.layerClasses,
        uiStateActions = props.uiStateActions,
        visStateActions = props.visStateActions;
    var datasets = (0, _react.useMemo)(function () {
      return (0, _defineProperty2["default"])({}, dataset.id, dataset);
    }, [dataset]);
    return /*#__PURE__*/_react["default"].createElement(DatasetLayerSectionWrapper, null, /*#__PURE__*/_react["default"].createElement(SourceDataCatalog, {
      datasets: datasets,
      showDatasetTable: showDatasetTable,
      updateTableColor: updateTableColor,
      removeDataset: removeDataset,
      showDeleteDataset: showDeleteDataset
    }), /*#__PURE__*/_react["default"].createElement(LayerList, {
      datasets: datasets,
      layerOrder: layerOrder,
      layers: layers,
      layerClasses: layerClasses,
      uiStateActions: uiStateActions,
      visStateActions: visStateActions,
      isSortable: false
    }));
  };

  return DatasetLayerSection;
}

var _default = DatasetLayerSectionFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL2RhdGFzZXQtbGF5ZXItc2VjdGlvbi50c3giXSwibmFtZXMiOlsiRGF0YXNldExheWVyU2VjdGlvbldyYXBwZXIiLCJzdHlsZWQiLCJkaXYiLCJhdHRycyIsImNsYXNzTmFtZSIsIkRhdGFzZXRMYXllclNlY3Rpb25GYWN0b3J5IiwiZGVwcyIsIlNvdXJjZURhdGFDYXRhbG9nRmFjdG9yeSIsIkxheWVyTGlzdEZhY3RvcnkiLCJTb3VyY2VEYXRhQ2F0YWxvZyIsIkxheWVyTGlzdCIsIkRhdGFzZXRMYXllclNlY3Rpb24iLCJwcm9wcyIsImRhdGFzZXQiLCJzaG93RGF0YXNldFRhYmxlIiwibGF5ZXJzIiwidXBkYXRlVGFibGVDb2xvciIsInNob3dEZWxldGVEYXRhc2V0IiwicmVtb3ZlRGF0YXNldCIsImxheWVyT3JkZXIiLCJsYXllckNsYXNzZXMiLCJ1aVN0YXRlQWN0aW9ucyIsInZpc1N0YXRlQWN0aW9ucyIsImRhdGFzZXRzIiwiaWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQWtCQSxJQUFNQSwwQkFBMEIsR0FBR0MsNkJBQU9DLEdBQVAsQ0FBV0MsS0FBWCxDQUFpQjtBQUNsREMsRUFBQUEsU0FBUyxFQUFFO0FBRHVDLENBQWpCLENBQUgsZ0hBQWhDOztBQU1BQywwQkFBMEIsQ0FBQ0MsSUFBM0IsR0FBa0MsQ0FBQ0MsNkJBQUQsRUFBMkJDLHFCQUEzQixDQUFsQzs7QUFFQSxTQUFTSCwwQkFBVCxDQUNFSSxpQkFERixFQUVFQyxTQUZGLEVBR0U7QUFDQSxNQUFNQyxtQkFBdUQsR0FBRyxTQUExREEsbUJBQTBELENBQUFDLEtBQUssRUFBSTtBQUFBLFFBRXJFQyxPQUZxRSxHQVluRUQsS0FabUUsQ0FFckVDLE9BRnFFO0FBQUEsUUFHckVDLGdCQUhxRSxHQVluRUYsS0FabUUsQ0FHckVFLGdCQUhxRTtBQUFBLFFBSXJFQyxNQUpxRSxHQVluRUgsS0FabUUsQ0FJckVHLE1BSnFFO0FBQUEsUUFLckVDLGdCQUxxRSxHQVluRUosS0FabUUsQ0FLckVJLGdCQUxxRTtBQUFBLFFBTXJFQyxpQkFOcUUsR0FZbkVMLEtBWm1FLENBTXJFSyxpQkFOcUU7QUFBQSxRQU9yRUMsYUFQcUUsR0FZbkVOLEtBWm1FLENBT3JFTSxhQVBxRTtBQUFBLFFBUXJFQyxVQVJxRSxHQVluRVAsS0FabUUsQ0FRckVPLFVBUnFFO0FBQUEsUUFTckVDLFlBVHFFLEdBWW5FUixLQVptRSxDQVNyRVEsWUFUcUU7QUFBQSxRQVVyRUMsY0FWcUUsR0FZbkVULEtBWm1FLENBVXJFUyxjQVZxRTtBQUFBLFFBV3JFQyxlQVhxRSxHQVluRVYsS0FabUUsQ0FXckVVLGVBWHFFO0FBY3ZFLFFBQU1DLFFBQVEsR0FBRyxvQkFBUSxZQUFNO0FBQzdCLGtEQUFTVixPQUFPLENBQUNXLEVBQWpCLEVBQXNCWCxPQUF0QjtBQUNELEtBRmdCLEVBRWQsQ0FBQ0EsT0FBRCxDQUZjLENBQWpCO0FBSUEsd0JBQ0UsZ0NBQUMsMEJBQUQscUJBQ0UsZ0NBQUMsaUJBQUQ7QUFDRSxNQUFBLFFBQVEsRUFBRVUsUUFEWjtBQUVFLE1BQUEsZ0JBQWdCLEVBQUVULGdCQUZwQjtBQUdFLE1BQUEsZ0JBQWdCLEVBQUVFLGdCQUhwQjtBQUlFLE1BQUEsYUFBYSxFQUFFRSxhQUpqQjtBQUtFLE1BQUEsaUJBQWlCLEVBQUVEO0FBTHJCLE1BREYsZUFRRSxnQ0FBQyxTQUFEO0FBQ0UsTUFBQSxRQUFRLEVBQUVNLFFBRFo7QUFFRSxNQUFBLFVBQVUsRUFBRUosVUFGZDtBQUdFLE1BQUEsTUFBTSxFQUFFSixNQUhWO0FBSUUsTUFBQSxZQUFZLEVBQUVLLFlBSmhCO0FBS0UsTUFBQSxjQUFjLEVBQUVDLGNBTGxCO0FBTUUsTUFBQSxlQUFlLEVBQUVDLGVBTm5CO0FBT0UsTUFBQSxVQUFVLEVBQUU7QUFQZCxNQVJGLENBREY7QUFvQkQsR0F0Q0Q7O0FBd0NBLFNBQU9YLG1CQUFQO0FBQ0Q7O2VBRWNOLDBCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIyIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IFJlYWN0LCB7dXNlTWVtb30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCBTb3VyY2VEYXRhQ2F0YWxvZ0ZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL3NvdXJjZS1kYXRhLWNhdGFsb2cnO1xuaW1wb3J0IExheWVyTGlzdEZhY3RvcnkgZnJvbSAnLi9sYXllci1saXN0JztcbmltcG9ydCB7TGF5ZXIsIExheWVyQ2xhc3Nlc1R5cGV9IGZyb20gJ0BrZXBsZXIuZ2wvbGF5ZXJzJztcbmltcG9ydCB7VUlTdGF0ZUFjdGlvbnMsIEFjdGlvbkhhbmRsZXIsIFZpc1N0YXRlQWN0aW9uc30gZnJvbSAnQGtlcGxlci5nbC9hY3Rpb25zJztcbmltcG9ydCB7S2VwbGVyVGFibGV9IGZyb20gJ0BrZXBsZXIuZ2wvdGFibGUnO1xuXG50eXBlIERhdGFzZXRMYXllclNlY3Rpb25Qcm9wcyA9IHtcbiAgZGF0YXNldDogS2VwbGVyVGFibGU7XG4gIGxheWVyczogTGF5ZXJbXTtcbiAgbGF5ZXJPcmRlcjogbnVtYmVyW107XG4gIGxheWVyQ2xhc3NlczogTGF5ZXJDbGFzc2VzVHlwZTtcbiAgc2hvd0RlbGV0ZURhdGFzZXQ6IGJvb2xlYW47XG4gIHNob3dEYXRhc2V0VGFibGU6IEFjdGlvbkhhbmRsZXI8dHlwZW9mIFZpc1N0YXRlQWN0aW9ucy5zaG93RGF0YXNldFRhYmxlPjtcbiAgdXBkYXRlVGFibGVDb2xvcjogQWN0aW9uSGFuZGxlcjx0eXBlb2YgVmlzU3RhdGVBY3Rpb25zLnVwZGF0ZVRhYmxlQ29sb3I+O1xuICByZW1vdmVEYXRhc2V0OiBBY3Rpb25IYW5kbGVyPHR5cGVvZiBVSVN0YXRlQWN0aW9ucy5vcGVuRGVsZXRlTW9kYWw+O1xuICB1aVN0YXRlQWN0aW9uczogdHlwZW9mIFVJU3RhdGVBY3Rpb25zO1xuICB2aXNTdGF0ZUFjdGlvbnM6IHR5cGVvZiBWaXNTdGF0ZUFjdGlvbnM7XG59O1xuXG5jb25zdCBEYXRhc2V0TGF5ZXJTZWN0aW9uV3JhcHBlciA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICdkYXRhc2V0LWxheWVyLXNlY3Rpb24nXG59KWBcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbkRhdGFzZXRMYXllclNlY3Rpb25GYWN0b3J5LmRlcHMgPSBbU291cmNlRGF0YUNhdGFsb2dGYWN0b3J5LCBMYXllckxpc3RGYWN0b3J5XTtcblxuZnVuY3Rpb24gRGF0YXNldExheWVyU2VjdGlvbkZhY3RvcnkoXG4gIFNvdXJjZURhdGFDYXRhbG9nOiBSZXR1cm5UeXBlPHR5cGVvZiBTb3VyY2VEYXRhQ2F0YWxvZ0ZhY3Rvcnk+LFxuICBMYXllckxpc3Q6IFJldHVyblR5cGU8dHlwZW9mIExheWVyTGlzdEZhY3Rvcnk+XG4pIHtcbiAgY29uc3QgRGF0YXNldExheWVyU2VjdGlvbjogUmVhY3QuRkM8RGF0YXNldExheWVyU2VjdGlvblByb3BzPiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhc2V0LFxuICAgICAgc2hvd0RhdGFzZXRUYWJsZSxcbiAgICAgIGxheWVycyxcbiAgICAgIHVwZGF0ZVRhYmxlQ29sb3IsXG4gICAgICBzaG93RGVsZXRlRGF0YXNldCxcbiAgICAgIHJlbW92ZURhdGFzZXQsXG4gICAgICBsYXllck9yZGVyLFxuICAgICAgbGF5ZXJDbGFzc2VzLFxuICAgICAgdWlTdGF0ZUFjdGlvbnMsXG4gICAgICB2aXNTdGF0ZUFjdGlvbnNcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBkYXRhc2V0cyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgcmV0dXJuIHtbZGF0YXNldC5pZF06IGRhdGFzZXR9O1xuICAgIH0sIFtkYXRhc2V0XSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPERhdGFzZXRMYXllclNlY3Rpb25XcmFwcGVyPlxuICAgICAgICA8U291cmNlRGF0YUNhdGFsb2dcbiAgICAgICAgICBkYXRhc2V0cz17ZGF0YXNldHN9XG4gICAgICAgICAgc2hvd0RhdGFzZXRUYWJsZT17c2hvd0RhdGFzZXRUYWJsZX1cbiAgICAgICAgICB1cGRhdGVUYWJsZUNvbG9yPXt1cGRhdGVUYWJsZUNvbG9yfVxuICAgICAgICAgIHJlbW92ZURhdGFzZXQ9e3JlbW92ZURhdGFzZXR9XG4gICAgICAgICAgc2hvd0RlbGV0ZURhdGFzZXQ9e3Nob3dEZWxldGVEYXRhc2V0fVxuICAgICAgICAvPlxuICAgICAgICA8TGF5ZXJMaXN0XG4gICAgICAgICAgZGF0YXNldHM9e2RhdGFzZXRzfVxuICAgICAgICAgIGxheWVyT3JkZXI9e2xheWVyT3JkZXJ9XG4gICAgICAgICAgbGF5ZXJzPXtsYXllcnN9XG4gICAgICAgICAgbGF5ZXJDbGFzc2VzPXtsYXllckNsYXNzZXN9XG4gICAgICAgICAgdWlTdGF0ZUFjdGlvbnM9e3VpU3RhdGVBY3Rpb25zfVxuICAgICAgICAgIHZpc1N0YXRlQWN0aW9ucz17dmlzU3RhdGVBY3Rpb25zfVxuICAgICAgICAgIGlzU29ydGFibGU9e2ZhbHNlfVxuICAgICAgICAvPlxuICAgICAgPC9EYXRhc2V0TGF5ZXJTZWN0aW9uV3JhcHBlcj5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBEYXRhc2V0TGF5ZXJTZWN0aW9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhc2V0TGF5ZXJTZWN0aW9uRmFjdG9yeTtcbiJdfQ==