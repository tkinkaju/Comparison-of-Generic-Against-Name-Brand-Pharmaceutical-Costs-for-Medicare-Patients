// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _localization = require("@kepler.gl/localization");

var _react2 = _interopRequireDefault(require("@tippyjs/react"));

var _icons = require("../../common/icons");

var _styledComponents2 = require("../../common/styled-components");

var _ = require("../..");

var _typeahead = _interopRequireDefault(require("../../common/item-selector/typeahead"));

var _accessor = _interopRequireDefault(require("../../common/item-selector/accessor"));

var _templateObject, _templateObject2, _templateObject3;

var DropdownContainer = _styledComponents["default"].div.attrs({
  className: 'add-layer-menu-dropdown'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .list-selector {\n    border-top: 1px solid ", ";\n    width: 100%;\n    /* disable scrolling, currently set to 280px internally */\n    max-height: unset;\n  }\n\n  .list__item > div {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    line-height: 18px;\n    padding: 0;\n\n    svg {\n      margin-right: 10px;\n    }\n  }\n"])), function (props) {
  return props.theme.secondaryInputBorderColor;
});

var AddLayerMenu = _styledComponents["default"].div.attrs({
  className: 'add-layer-menu'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  min-width: 240px;\n  max-width: 240px;\n  position: absolute;\n  top: 100%;\n  left: -53px;\n  z-index: 5;\n"])));

var ListItemWrapper = _styledComponents["default"].div.attrs({
  className: 'add-layer-menu-list-item-wrapper'
})(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  color: ", ";\n  font-size: 11px;\n  letter-spacing: 0.2px;\n  overflow: auto;\n\n  .dataset-color {\n    flex-shrink: 0;\n    margin-top: 3px;\n  }\n\n  .dataset-name {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n"])), function (props) {
  return props.theme.textColor;
});

var TYPEAHEAD_CLASS = 'typeahead';
var TYPEAHEAD_INPUT_CLASS = 'typeahead__input';

function AddLayerButtonFactory() {
  var ListItem = function ListItem(_ref) {
    var value = _ref.value;
    return /*#__PURE__*/_react["default"].createElement(ListItemWrapper, null, /*#__PURE__*/_react["default"].createElement(_.DatasetSquare, {
      className: "dataset-color",
      backgroundColor: value.color
    }), /*#__PURE__*/_react["default"].createElement("div", {
      className: "dataset-name",
      title: value.label
    }, value.label));
  };

  var AddLayerButton = function AddLayerButton(props) {
    var datasets = props.datasets,
        onOptionSelected = props.onOptionSelected,
        typeaheadPlaceholder = props.typeaheadPlaceholder,
        intl = props.intl;

    var _useState = (0, _react.useState)(false),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        showAddLayerDropdown = _useState2[0],
        setShowAddLayerDropdown = _useState2[1];

    var toggleAddLayerDropdown = (0, _react.useCallback)(function () {
      setShowAddLayerDropdown(!showAddLayerDropdown);
    }, [showAddLayerDropdown, setShowAddLayerDropdown]);

    var _onBlur = (0, _react.useCallback)(function () {
      setShowAddLayerDropdown(false);
    }, []);

    var toggleSelectedOption = (0, _react.useCallback)(function (option) {
      onOptionSelected(option.value);

      _onBlur();
    }, [onOptionSelected, _onBlur]);
    var onButtonBlur = (0, _react.useCallback)(function (event) {
      if ([TYPEAHEAD_CLASS, TYPEAHEAD_INPUT_CLASS].every(function (cls) {
        var _event$relatedTarget;

        return !(event !== null && event !== void 0 && (_event$relatedTarget = event.relatedTarget) !== null && _event$relatedTarget !== void 0 && _event$relatedTarget.classList.contains(cls));
      })) {
        _onBlur();
      }
    }, [_onBlur]);
    var onSearchBlur = (0, _react.useCallback)(function () {
      _onBlur();
    }, [_onBlur]);
    var options = (0, _react.useMemo)(function () {
      return Object.values(datasets).map(function (ds) {
        return {
          label: ds.label,
          value: ds.id,
          color: ds.color
        };
      });
    }, [datasets]);
    return /*#__PURE__*/_react["default"].createElement(_react2["default"], {
      visible: showAddLayerDropdown,
      arrow: false,
      interactive: true,
      placement: "bottom",
      appendTo: "parent",
      duration: 0,
      content: /*#__PURE__*/_react["default"].createElement(AddLayerMenu, null, /*#__PURE__*/_react["default"].createElement(DropdownContainer, null, /*#__PURE__*/_react["default"].createElement(_typeahead["default"], {
        onBlur: onSearchBlur,
        className: TYPEAHEAD_CLASS,
        customClasses: {
          results: 'list-selector',
          input: TYPEAHEAD_INPUT_CLASS,
          listItem: 'list__item'
        },
        placeholder: typeaheadPlaceholder || intl ? intl.formatMessage({
          id: 'placeholder.search'
        }) : 'Search',
        selectedItems: null,
        options: options,
        displayOption: _accessor["default"].generateOptionToStringFor('label'),
        filterOption: 'label',
        searchable: true,
        onOptionSelected: toggleSelectedOption,
        customListItemComponent: ListItem
      })))
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.Button, {
      tabIndex: -1,
      onBlur: onButtonBlur,
      className: "add-layer-button",
      width: "105px",
      onClick: toggleAddLayerDropdown
    }, /*#__PURE__*/_react["default"].createElement(_icons.Add, {
      height: "12px"
    }), /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'layerManager.addLayer'
    })));
  };

  return AddLayerButton;
}

var _default = AddLayerButtonFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,