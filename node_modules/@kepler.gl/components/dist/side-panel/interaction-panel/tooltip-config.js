// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactIntl = require("react-intl");

var _localization = require("@kepler.gl/localization");

var _styledComponents2 = require("../../common/styled-components");

var _datasetTag = _interopRequireDefault(require("../common/dataset-tag"));

var _tooltipChicklet = _interopRequireDefault(require("./tooltip-config/tooltip-chicklet"));

var _switch = _interopRequireDefault(require("../../common/switch"));

var _itemSelector = _interopRequireDefault(require("../../common/item-selector/item-selector"));

var _constants = require("@kepler.gl/constants");

var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));

var _templateObject, _templateObject2, _templateObject3;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var TooltipConfigWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .item-selector > div > div {\n    overflow: visible;\n  }\n"])));

var ButtonWrapper = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: inherit;\n  padding: 0;\n\n  .button.clear-all {\n    background: transparent;\n    color: ", ";\n    margin: 0 0 0 8px;\n    padding: 0;\n\n    &:hover {\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.subtextColor;
}, function (props) {
  return props.theme.textColor;
});

var CompareSwitchWrapper = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  display: flex;\n  font-size: ", ";\n  justify-content: space-between;\n  line-height: 11px;\n  margin-bottom: 8px;\n"])), function (props) {
  return props.theme.labelColor;
}, function (props) {
  return props.theme.inputFontSize;
});

TooltipConfigFactory.deps = [_datasetTag["default"], _fieldSelector["default"]];

function TooltipConfigFactory(DatasetTag, FieldSelector) {
  var DatasetTooltipConfig = function DatasetTooltipConfig(_ref) {
    var config = _ref.config,
        onChange = _ref.onChange,
        dataset = _ref.dataset;
    var dataId = dataset.id;
    return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, {
      key: dataId
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.SBFlexboxNoMargin, null, /*#__PURE__*/_react["default"].createElement(DatasetTag, {
      dataset: dataset
    }), Boolean(config.fieldsToShow[dataId].length) && /*#__PURE__*/_react["default"].createElement(ButtonWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.Button, {
      className: "clear-all",
      onClick: function onClick() {
        var newConfig = _objectSpread(_objectSpread({}, config), {}, {
          fieldsToShow: _objectSpread(_objectSpread({}, config.fieldsToShow), {}, (0, _defineProperty2["default"])({}, dataId, []))
        });

        onChange(newConfig);
      },
      width: "54px",
      secondary: true
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "fieldSelector.clearAll"
    })))), /*#__PURE__*/_react["default"].createElement(FieldSelector, {
      fields: dataset.fields,
      value: config.fieldsToShow[dataId],
      onSelect: function onSelect(selected) {
        var newConfig = _objectSpread(_objectSpread({}, config), {}, {
          fieldsToShow: _objectSpread(_objectSpread({}, config.fieldsToShow), {}, (0, _defineProperty2["default"])({}, dataId, selected.map(function (f) {
            return config.fieldsToShow[dataId].find(function (tooltipField) {
              return tooltipField.name === f.name;
            }) || {
              name: f.name,
              // default initial tooltip is null
              format: null
            };
          })))
        });

        onChange(newConfig);
      },
      closeOnSelect: false,
      multiSelect: true,
      inputTheme: "secondary" // @ts-expect-error
      ,
      CustomChickletComponent: (0, _tooltipChicklet["default"])(dataId, config, onChange, dataset.fields)
    }));
  };

  var TooltipConfig = function TooltipConfig(_ref2) {
    var config = _ref2.config,
        datasets = _ref2.datasets,
        _onChange = _ref2.onChange,
        intl = _ref2.intl;
    return /*#__PURE__*/_react["default"].createElement(TooltipConfigWrapper, null, Object.keys(config.fieldsToShow).map(function (dataId) {
      return dataId === _constants.GEOCODER_DATASET_NAME ? null : /*#__PURE__*/_react["default"].createElement(DatasetTooltipConfig, {
        key: dataId,
        config: config,
        onChange: _onChange,
        dataset: datasets[dataId]
      });
    }), /*#__PURE__*/_react["default"].createElement(CompareSwitchWrapper, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "compare.modeLabel"
    }), /*#__PURE__*/_react["default"].createElement(_switch["default"], {
      checked: config.compareMode,
      id: "compare-mode-toggle",
      onChange: function onChange() {
        var newConfig = _objectSpread(_objectSpread({}, config), {}, {
          compareMode: !config.compareMode
        });

        _onChange(newConfig);
      },
      secondary: true
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "compare.typeLabel"
    })), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
      disabled: !config.compareMode,
      displayOption: function displayOption(d) {
        return intl.formatMessage({
          id: "compare.types.".concat(d)
        });
      },
      selectedItems: config.compareType,
      options: Object.values(_constants.COMPARE_TYPES),
      multiSelect: false,
      searchable: false,
      inputTheme: 'secondary',
      getOptionValue: function getOptionValue(d) {
        return d;
      },
      onChange: function onChange(option) {
        var newConfig = _objectSpread(_objectSpread({}, config), {}, {
          // @ts-expect-error
          compareType: option
        });

        _onChange(newConfig);
      }
    })));
  };

  return (0, _reactIntl.injectIntl)(TooltipConfig);
}

var _default = TooltipConfigFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXBhbmVsL2ludGVyYWN0aW9uLXBhbmVsL3Rvb2x0aXAtY29uZmlnLnRzeCJdLCJuYW1lcyI6WyJUb29sdGlwQ29uZmlnV3JhcHBlciIsInN0eWxlZCIsImRpdiIsIkJ1dHRvbldyYXBwZXIiLCJwcm9wcyIsInRoZW1lIiwic3VidGV4dENvbG9yIiwidGV4dENvbG9yIiwiQ29tcGFyZVN3aXRjaFdyYXBwZXIiLCJsYWJlbENvbG9yIiwiaW5wdXRGb250U2l6ZSIsIlRvb2x0aXBDb25maWdGYWN0b3J5IiwiZGVwcyIsIkRhdGFzZXRUYWdGYWN0b3J5IiwiRmllbGRTZWxlY3RvckZhY3RvcnkiLCJEYXRhc2V0VGFnIiwiRmllbGRTZWxlY3RvciIsIkRhdGFzZXRUb29sdGlwQ29uZmlnIiwiY29uZmlnIiwib25DaGFuZ2UiLCJkYXRhc2V0IiwiZGF0YUlkIiwiaWQiLCJCb29sZWFuIiwiZmllbGRzVG9TaG93IiwibGVuZ3RoIiwibmV3Q29uZmlnIiwiZmllbGRzIiwic2VsZWN0ZWQiLCJtYXAiLCJmIiwiZmluZCIsInRvb2x0aXBGaWVsZCIsIm5hbWUiLCJmb3JtYXQiLCJUb29sdGlwQ29uZmlnIiwiZGF0YXNldHMiLCJpbnRsIiwiT2JqZWN0Iiwia2V5cyIsIkdFT0NPREVSX0RBVEFTRVRfTkFNRSIsImNvbXBhcmVNb2RlIiwiZCIsImZvcm1hdE1lc3NhZ2UiLCJjb21wYXJlVHlwZSIsInZhbHVlcyIsIkNPTVBBUkVfVFlQRVMiLCJvcHRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBTUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBR0EsSUFBTUEsb0JBQW9CLEdBQUdDLDZCQUFPQyxHQUFWLHFKQUExQjs7QUFNQSxJQUFNQyxhQUFhLEdBQUdGLDZCQUFPQyxHQUFWLGtTQU1OLFVBQUFFLEtBQUs7QUFBQSxTQUFJQSxLQUFLLENBQUND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QUQ7QUFBa0IsTUFBQSxFQUFFLEVBQUM7QUFBckIsTUFERixDQURGLGVBSUUsZ0NBQUMsd0JBQUQ7QUFDRSxNQUFBLFFBQVEsRUFBRSxDQUFDUixNQUFNLENBQUN1QixXQURwQjtBQUVFLE1BQUEsYUFBYSxFQUFFLHVCQUFBQyxDQUFDO0FBQUEsZUFDZEwsSUFBSSxDQUFDTSxhQUFMLENBQW1CO0FBQ2pCckIsVUFBQUEsRUFBRSwwQkFBbUJvQixDQUFuQjtBQURlLFNBQW5CLENBRGM7QUFBQSxPQUZsQjtBQU9FLE1BQUEsYUFBYSxFQUFFeEIsTUFBTSxDQUFDMEIsV0FQeEI7QUFRRSxNQUFBLE9BQU8sRUFBRU4sTUFBTSxDQUFDTyxNQUFQLENBQWNDLHdCQUFkLENBUlg7QUFTRSxNQUFBLFdBQVcsRUFBRSxLQVRmO0FBVUUsTUFBQSxVQUFVLEVBQUUsS0FWZDtBQVdFLE1BQUEsVUFBVSxFQUFFLFdBWGQ7QUFZRSxNQUFBLGNBQWMsRUFBRSx3QkFBQUosQ0FBQztBQUFBLGVBQUlBLENBQUo7QUFBQSxPQVpuQjtBQWFFLE1BQUEsUUFBUSxFQUFFLGtCQUFBSyxNQUFNLEVBQUk7QUFDbEIsWUFBTXJCLFNBQXVDLG1DQUN4Q1IsTUFEd0M7QUFFM0M7QUFDQTBCLFVBQUFBLFdBQVcsRUFBRUc7QUFIOEIsVUFBN0M7O0FBS0E1QixRQUFBQSxTQUFRLENBQUNPLFNBQUQsQ0FBUjtBQUNEO0FBcEJILE1BSkYsQ0ExQkYsQ0FERjtBQXdERCxHQXpERDs7QUEyREEsU0FBTywyQkFBV1MsYUFBWCxDQUFQO0FBQ0Q7O2VBRWN4QixvQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMiBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7aW5qZWN0SW50bCwgSW50bFNoYXBlfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuXG5pbXBvcnQge1xuICBTaWRlUGFuZWxTZWN0aW9uLFxuICBTQkZsZXhib3hOb01hcmdpbixcbiAgQnV0dG9uLFxuICBQYW5lbExhYmVsXG59IGZyb20gJy4uLy4uL2NvbW1vbi9zdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgRGF0YXNldFRhZ0ZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL2RhdGFzZXQtdGFnJztcbmltcG9ydCBUb29sdGlwQ2hpY2tsZXRGYWN0b3J5IGZyb20gJy4vdG9vbHRpcC1jb25maWcvdG9vbHRpcC1jaGlja2xldCc7XG5pbXBvcnQgU3dpdGNoIGZyb20gJy4uLy4uL2NvbW1vbi9zd2l0Y2gnO1xuaW1wb3J0IEl0ZW1TZWxlY3RvciBmcm9tICcuLi8uLi9jb21tb24vaXRlbS1zZWxlY3Rvci9pdGVtLXNlbGVjdG9yJztcbmltcG9ydCB7Q09NUEFSRV9UWVBFUywgR0VPQ09ERVJfREFUQVNFVF9OQU1FfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQgRmllbGRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL2ZpZWxkLXNlbGVjdG9yJztcbmltcG9ydCBLZXBsZXJUYWJsZSwge0RhdGFzZXRzfSBmcm9tICdAa2VwbGVyLmdsL3RhYmxlJztcblxuY29uc3QgVG9vbHRpcENvbmZpZ1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICAuaXRlbS1zZWxlY3RvciA+IGRpdiA+IGRpdiB7XG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIH1cbmA7XG5cbmNvbnN0IEJ1dHRvbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBpbmhlcml0O1xuICBwYWRkaW5nOiAwO1xuXG4gIC5idXR0b24uY2xlYXItYWxsIHtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5zdWJ0ZXh0Q29sb3J9O1xuICAgIG1hcmdpbjogMCAwIDAgOHB4O1xuICAgIHBhZGRpbmc6IDA7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLnRleHRDb2xvcn07XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBDb21wYXJlU3dpdGNoV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmxhYmVsQ29sb3J9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmb250LXNpemU6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuaW5wdXRGb250U2l6ZX07XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgbGluZS1oZWlnaHQ6IDExcHg7XG4gIG1hcmdpbi1ib3R0b206IDhweDtcbmA7XG5cbnR5cGUgVG9vbHRpcENvbmZpZ1Byb3BzID0ge1xuICBjb25maWc6IHtcbiAgICBmaWVsZHNUb1Nob3c6IHtcbiAgICAgIFtrZXk6IHN0cmluZ106IHtuYW1lOiBzdHJpbmc7IGZvcm1hdDogc3RyaW5nIHwgbnVsbH1bXTtcbiAgICB9O1xuICAgIGNvbXBhcmVNb2RlOiBib29sZWFuO1xuICAgIGNvbXBhcmVUeXBlOiBzdHJpbmcgfCBudWxsO1xuICB9O1xuICBvbkNoYW5nZTogKGNvbmZpZzoge1xuICAgIGZpZWxkc1RvU2hvdzoge1xuICAgICAgW2tleTogc3RyaW5nXToge25hbWU6IHN0cmluZzsgZm9ybWF0OiBzdHJpbmcgfCBudWxsfVtdO1xuICAgIH07XG4gICAgY29tcGFyZU1vZGU6IGJvb2xlYW47XG4gICAgY29tcGFyZVR5cGU6IHN0cmluZyB8IG51bGw7XG4gIH0pID0+IHZvaWQ7XG4gIGRhdGFzZXRzOiBEYXRhc2V0cztcbiAgaW50bDogSW50bFNoYXBlO1xufTtcblxudHlwZSBEYXRhc2V0VG9vbHRpcENvbmZpZ1Byb3BzID0ge1xuICBjb25maWc6IHtcbiAgICBmaWVsZHNUb1Nob3c6IHtcbiAgICAgIFtrZXk6IHN0cmluZ106IHtuYW1lOiBzdHJpbmc7IGZvcm1hdDogc3RyaW5nIHwgbnVsbH1bXTtcbiAgICB9O1xuICAgIGNvbXBhcmVNb2RlOiBib29sZWFuO1xuICAgIGNvbXBhcmVUeXBlOiBzdHJpbmcgfCBudWxsO1xuICB9O1xuICBvbkNoYW5nZTogKGNvbmZpZzoge1xuICAgIGZpZWxkc1RvU2hvdzoge1xuICAgICAgW2tleTogc3RyaW5nXToge25hbWU6IHN0cmluZzsgZm9ybWF0OiBzdHJpbmcgfCBudWxsfVtdO1xuICAgIH07XG4gICAgY29tcGFyZU1vZGU6IGJvb2xlYW47XG4gICAgY29tcGFyZVR5cGU6IHN0cmluZyB8IG51bGw7XG4gIH0pID0+IHZvaWQ7XG4gIGRhdGFzZXQ6IEtlcGxlclRhYmxlO1xufTtcblxuVG9vbHRpcENvbmZpZ0ZhY3RvcnkuZGVwcyA9IFtEYXRhc2V0VGFnRmFjdG9yeSwgRmllbGRTZWxlY3RvckZhY3RvcnldO1xuZnVuY3Rpb24gVG9vbHRpcENvbmZpZ0ZhY3RvcnkoXG4gIERhdGFzZXRUYWc6IFJldHVyblR5cGU8dHlwZW9mIERhdGFzZXRUYWdGYWN0b3J5PixcbiAgRmllbGRTZWxlY3RvcjogUmV0dXJuVHlwZTx0eXBlb2YgRmllbGRTZWxlY3RvckZhY3Rvcnk+XG4pIHtcbiAgY29uc3QgRGF0YXNldFRvb2x0aXBDb25maWcgPSAoe2NvbmZpZywgb25DaGFuZ2UsIGRhdGFzZXR9OiBEYXRhc2V0VG9vbHRpcENvbmZpZ1Byb3BzKSA9PiB7XG4gICAgY29uc3QgZGF0YUlkID0gZGF0YXNldC5pZDtcbiAgICByZXR1cm4gKFxuICAgICAgPFNpZGVQYW5lbFNlY3Rpb24ga2V5PXtkYXRhSWR9PlxuICAgICAgICA8U0JGbGV4Ym94Tm9NYXJnaW4+XG4gICAgICAgICAgPERhdGFzZXRUYWcgZGF0YXNldD17ZGF0YXNldH0gLz5cbiAgICAgICAgICB7Qm9vbGVhbihjb25maWcuZmllbGRzVG9TaG93W2RhdGFJZF0ubGVuZ3RoKSAmJiAoXG4gICAgICAgICAgICA8QnV0dG9uV3JhcHBlcj5cbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNsZWFyLWFsbFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Q29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkc1RvU2hvdzoge1xuICAgICAgICAgICAgICAgICAgICAgIC4uLmNvbmZpZy5maWVsZHNUb1Nob3csXG4gICAgICAgICAgICAgICAgICAgICAgW2RhdGFJZF06IFtdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZShuZXdDb25maWcpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgd2lkdGg9XCI1NHB4XCJcbiAgICAgICAgICAgICAgICBzZWNvbmRhcnlcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiZmllbGRTZWxlY3Rvci5jbGVhckFsbFwiIC8+XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9CdXR0b25XcmFwcGVyPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU0JGbGV4Ym94Tm9NYXJnaW4+XG4gICAgICAgIDxGaWVsZFNlbGVjdG9yXG4gICAgICAgICAgZmllbGRzPXtkYXRhc2V0LmZpZWxkc31cbiAgICAgICAgICB2YWx1ZT17Y29uZmlnLmZpZWxkc1RvU2hvd1tkYXRhSWRdfVxuICAgICAgICAgIG9uU2VsZWN0PXtzZWxlY3RlZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdDb25maWc6IERhdGFzZXRUb29sdGlwQ29uZmlnUHJvcHNbJ2NvbmZpZyddID0ge1xuICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgIGZpZWxkc1RvU2hvdzoge1xuICAgICAgICAgICAgICAgIC4uLmNvbmZpZy5maWVsZHNUb1Nob3csXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIFtkYXRhSWRdOiBzZWxlY3RlZC5tYXAoXG4gICAgICAgICAgICAgICAgICBmID0+XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5maWVsZHNUb1Nob3dbZGF0YUlkXS5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBGaWVsZCA9PiB0b29sdGlwRmllbGQubmFtZSA9PT0gZi5uYW1lXG4gICAgICAgICAgICAgICAgICAgICkgfHwge1xuICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGYubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IGluaXRpYWwgdG9vbHRpcCBpcyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvbkNoYW5nZShuZXdDb25maWcpO1xuICAgICAgICAgIH19XG4gICAgICAgICAgY2xvc2VPblNlbGVjdD17ZmFsc2V9XG4gICAgICAgICAgbXVsdGlTZWxlY3RcbiAgICAgICAgICBpbnB1dFRoZW1lPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgQ3VzdG9tQ2hpY2tsZXRDb21wb25lbnQ9e1Rvb2x0aXBDaGlja2xldEZhY3RvcnkoZGF0YUlkLCBjb25maWcsIG9uQ2hhbmdlLCBkYXRhc2V0LmZpZWxkcyl9XG4gICAgICAgIC8+XG4gICAgICA8L1NpZGVQYW5lbFNlY3Rpb24+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBUb29sdGlwQ29uZmlnID0gKHtjb25maWcsIGRhdGFzZXRzLCBvbkNoYW5nZSwgaW50bH06IFRvb2x0aXBDb25maWdQcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcENvbmZpZ1dyYXBwZXI+XG4gICAgICAgIHtPYmplY3Qua2V5cyhjb25maWcuZmllbGRzVG9TaG93KS5tYXAoZGF0YUlkID0+XG4gICAgICAgICAgZGF0YUlkID09PSBHRU9DT0RFUl9EQVRBU0VUX05BTUUgPyBudWxsIDogKFxuICAgICAgICAgICAgPERhdGFzZXRUb29sdGlwQ29uZmlnXG4gICAgICAgICAgICAgIGtleT17ZGF0YUlkfVxuICAgICAgICAgICAgICBjb25maWc9e2NvbmZpZ31cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgICBkYXRhc2V0PXtkYXRhc2V0c1tkYXRhSWRdfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApXG4gICAgICAgICl9XG4gICAgICAgIDxDb21wYXJlU3dpdGNoV3JhcHBlcj5cbiAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImNvbXBhcmUubW9kZUxhYmVsXCIgLz5cbiAgICAgICAgICA8U3dpdGNoXG4gICAgICAgICAgICBjaGVja2VkPXtjb25maWcuY29tcGFyZU1vZGV9XG4gICAgICAgICAgICBpZD1cImNvbXBhcmUtbW9kZS10b2dnbGVcIlxuICAgICAgICAgICAgb25DaGFuZ2U9eygpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbmV3Q29uZmlnID0ge1xuICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBjb21wYXJlTW9kZTogIWNvbmZpZy5jb21wYXJlTW9kZVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBvbkNoYW5nZShuZXdDb25maWcpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHNlY29uZGFyeVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvQ29tcGFyZVN3aXRjaFdyYXBwZXI+XG4gICAgICAgIDxTaWRlUGFuZWxTZWN0aW9uPlxuICAgICAgICAgIDxQYW5lbExhYmVsPlxuICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21wYXJlLnR5cGVMYWJlbFwiIC8+XG4gICAgICAgICAgPC9QYW5lbExhYmVsPlxuICAgICAgICAgIDxJdGVtU2VsZWN0b3JcbiAgICAgICAgICAgIGRpc2FibGVkPXshY29uZmlnLmNvbXBhcmVNb2RlfVxuICAgICAgICAgICAgZGlzcGxheU9wdGlvbj17ZCA9PlxuICAgICAgICAgICAgICBpbnRsLmZvcm1hdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIGlkOiBgY29tcGFyZS50eXBlcy4ke2R9YFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZWN0ZWRJdGVtcz17Y29uZmlnLmNvbXBhcmVUeXBlfVxuICAgICAgICAgICAgb3B0aW9ucz17T2JqZWN0LnZhbHVlcyhDT01QQVJFX1RZUEVTKX1cbiAgICAgICAgICAgIG11bHRpU2VsZWN0PXtmYWxzZX1cbiAgICAgICAgICAgIHNlYXJjaGFibGU9e2ZhbHNlfVxuICAgICAgICAgICAgaW5wdXRUaGVtZT17J3NlY29uZGFyeSd9XG4gICAgICAgICAgICBnZXRPcHRpb25WYWx1ZT17ZCA9PiBkfVxuICAgICAgICAgICAgb25DaGFuZ2U9e29wdGlvbiA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG5ld0NvbmZpZzogVG9vbHRpcENvbmZpZ1Byb3BzWydjb25maWcnXSA9IHtcbiAgICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIGNvbXBhcmVUeXBlOiBvcHRpb25cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgb25DaGFuZ2UobmV3Q29uZmlnKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9TaWRlUGFuZWxTZWN0aW9uPlxuICAgICAgPC9Ub29sdGlwQ29uZmlnV3JhcHBlcj5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBpbmplY3RJbnRsKFRvb2x0aXBDb25maWcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwQ29uZmlnRmFjdG9yeTtcbiJdfQ==