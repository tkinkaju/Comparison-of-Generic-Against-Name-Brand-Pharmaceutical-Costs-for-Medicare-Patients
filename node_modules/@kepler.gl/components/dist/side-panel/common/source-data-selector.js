// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SourceDataSelectorFactory;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = require("../../common/styled-components");

var _itemSelector = _interopRequireDefault(require("../../common/item-selector/item-selector"));

var _datasetTag = _interopRequireDefault(require("./dataset-tag"));

var _localization = require("@kepler.gl/localization");var defaultPlaceHolder = 'Select A Dataset';
SourceDataSelectorFactory.deps = [_datasetTag["default"]];

function SourceDataSelectorFactory(DatasetTag) {
  var DatasetItem = function DatasetItem(_ref) {
    var value = _ref.value;
    return /*#__PURE__*/_react["default"].createElement(DatasetTag, {
      dataset: value
    });
  };

  var SourceDataSelector = function SourceDataSelector(_ref2) {
    var dataId = _ref2.dataId,
        datasets = _ref2.datasets,
        disabled = _ref2.disabled,
        onSelect = _ref2.onSelect,
        defaultValue = _ref2.defaultValue,
        inputTheme = _ref2.inputTheme;
    var dsOptions = (0, _react.useMemo)(function () {
      return Object.values(datasets).map(function (ds) {
        return {
          label: ds.label,
          value: ds.id,
          color: ds.color
        };
      });
    }, [datasets]);
    var selectedItems = (0, _react.useMemo)(function () {
      return dataId ? (Array.isArray(dataId) && dataId || [dataId]).map(function (id) {
        return datasets[id];
      }) : [];
    }, [dataId, datasets]);
    return /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, {
      className: "data-source-selector"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'misc.dataSource'
    })), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
      inputTheme: inputTheme,
      selectedItems: selectedItems,
      options: dsOptions,
      getOptionValue: 'value',
      filterOption: 'label',
      multiSelect: false,
      onChange: onSelect,
      placeholder: defaultValue,
      disabled: Boolean(disabled),
      displayOption: 'label',
      DropDownLineItemRenderComponent: DatasetItem
    }));
  };

  SourceDataSelector.defaultProps = {
    defaultValue: defaultPlaceHolder
  };
  return SourceDataSelector;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXBhbmVsL2NvbW1vbi9zb3VyY2UtZGF0YS1zZWxlY3Rvci50c3giXSwibmFtZXMiOlsiZGVmYXVsdFBsYWNlSG9sZGVyIiwiU291cmNlRGF0YVNlbGVjdG9yRmFjdG9yeSIsImRlcHMiLCJEYXRhc2V0VGFnRmFjdG9yeSIsIkRhdGFzZXRUYWciLCJEYXRhc2V0SXRlbSIsInZhbHVlIiwiU291cmNlRGF0YVNlbGVjdG9yIiwiZGF0YUlkIiwiZGF0YXNldHMiLCJkaXNhYmxlZCIsIm9uU2VsZWN0IiwiZGVmYXVsdFZhbHVlIiwiaW5wdXRUaGVtZSIsImRzT3B0aW9ucyIsIk9iamVjdCIsInZhbHVlcyIsIm1hcCIsImRzIiwibGFiZWwiLCJpZCIsImNvbG9yIiwic2VsZWN0ZWRJdGVtcyIsIkFycmF5IiwiaXNBcnJheSIsIkJvb2xlYW4iLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQXhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBLElBQU1BLGtCQUFrQixHQUFHLGtCQUEzQjtBQUVBQyx5QkFBeUIsQ0FBQ0MsSUFBMUIsR0FBaUMsQ0FBQ0Msc0JBQUQsQ0FBakM7O0FBRWUsU0FBU0YseUJBQVQsQ0FDYkcsVUFEYSxFQUVzQjtBQUNuQyxNQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBYztBQUFBLFFBQUVDLEtBQUYsUUFBRUEsS0FBRjtBQUFBLHdCQUErQixnQ0FBQyxVQUFEO0FBQVksTUFBQSxPQUFPLEVBQUVBO0FBQXJCLE1BQS9CO0FBQUEsR0FBcEI7O0FBRUEsTUFBTUMsa0JBQXFELEdBQUcsU0FBeERBLGtCQUF3RCxRQU8vQjtBQUFBLFFBTjdCQyxNQU02QixTQU43QkEsTUFNNkI7QUFBQSxRQUw3QkMsUUFLNkIsU0FMN0JBLFFBSzZCO0FBQUEsUUFKN0JDLFFBSTZCLFNBSjdCQSxRQUk2QjtBQUFBLFFBSDdCQyxRQUc2QixTQUg3QkEsUUFHNkI7QUFBQSxRQUY3QkMsWUFFNkIsU0FGN0JBLFlBRTZCO0FBQUEsUUFEN0JDLFVBQzZCLFNBRDdCQSxVQUM2QjtBQUM3QixRQUFNQyxTQUFTLEdBQUcsb0JBQ2hCO0FBQUEsYUFDRUMsTUFBTSxDQUFDQyxNQUFQLENBQWNQLFFBQWQsRUFBd0JRLEdBQXhCLENBQTRCLFVBQUFDLEVBQUU7QUFBQSxlQUFLO0FBQ2pDQyxVQUFBQSxLQUFLLEVBQUVELEVBQUUsQ0FBQ0MsS0FEdUI7QUFFakNiLFVBQUFBLEtBQUssRUFBRVksRUFBRSxDQUFDRSxFQUZ1QjtBQUdqQ0MsVUFBQUEsS0FBSyxFQUFFSCxFQUFFLENBQUNHO0FBSHVCLFNBQUw7QUFBQSxPQUE5QixDQURGO0FBQUEsS0FEZ0IsRUFPaEIsQ0FBQ1osUUFBRCxDQVBnQixDQUFsQjtBQVVBLFFBQU1hLGFBQWEsR0FBRyxvQkFDcEI7QUFBQSxhQUFPZCxNQUFNLEdBQUcsQ0FBRWUsS0FBSyxDQUFDQyxPQUFOLENBQWNoQixNQUFkLEtBQXlCQSxNQUExQixJQUFxQyxDQUFDQSxNQUFELENBQXRDLEVBQWdEUyxHQUFoRCxDQUFvRCxVQUFBRyxFQUFFO0FBQUEsZUFBSVgsUUFBUSxDQUFDVyxFQUFELENBQVo7QUFBQSxPQUF0RCxDQUFILEdBQTZFLEVBQTFGO0FBQUEsS0FEb0IsRUFFcEIsQ0FBQ1osTUFBRCxFQUFTQyxRQUFULENBRm9CLENBQXRCO0FBS0Esd0JBQ0UsZ0NBQUMsa0NBQUQ7QUFBa0IsTUFBQSxTQUFTLEVBQUM7QUFBNUIsb0JBQ0UsZ0NBQUMsNEJBQUQscUJBQ0UsZ0NBQUMsOEJBQUQ7QUFBa0IsTUFBQSxFQUFFLEVBQUU7QUFBdEIsTUFERixDQURGLGVBSUUsZ0NBQUMsd0JBQUQ7QUFDRSxNQUFBLFVBQVUsRUFBRUksVUFEZDtBQUVFLE1BQUEsYUFBYSxFQUFFUyxhQUZqQjtBQUdFLE1BQUEsT0FBTyxFQUFFUixTQUhYO0FBSUUsTUFBQSxjQUFjLEVBQUUsT0FKbEI7QUFLRSxNQUFBLFlBQVksRUFBRSxPQUxoQjtBQU1FLE1BQUEsV0FBVyxFQUFFLEtBTmY7QUFPRSxNQUFBLFFBQVEsRUFBRUgsUUFQWjtBQVFFLE1BQUEsV0FBVyxFQUFFQyxZQVJmO0FBU0UsTUFBQSxRQUFRLEVBQUVhLE9BQU8sQ0FBQ2YsUUFBRCxDQVRuQjtBQVVFLE1BQUEsYUFBYSxFQUFFLE9BVmpCO0FBV0UsTUFBQSwrQkFBK0IsRUFBRUw7QUFYbkMsTUFKRixDQURGO0FBb0JELEdBM0NEOztBQTZDQUUsRUFBQUEsa0JBQWtCLENBQUNtQixZQUFuQixHQUFrQztBQUNoQ2QsSUFBQUEsWUFBWSxFQUFFWjtBQURrQixHQUFsQztBQUdBLFNBQU9PLGtCQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjIgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QsIHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1BhbmVsTGFiZWwsIFNpZGVQYW5lbFNlY3Rpb259IGZyb20gJy4uLy4uL2NvbW1vbi9zdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgSXRlbVNlbGVjdG9yIGZyb20gJy4uLy4uL2NvbW1vbi9pdGVtLXNlbGVjdG9yL2l0ZW0tc2VsZWN0b3InO1xuaW1wb3J0IERhdGFzZXRUYWdGYWN0b3J5IGZyb20gJy4vZGF0YXNldC10YWcnO1xuaW1wb3J0IHtGb3JtYXR0ZWRNZXNzYWdlfSBmcm9tICdAa2VwbGVyLmdsL2xvY2FsaXphdGlvbic7XG5pbXBvcnQge0RhdGFzZXRJdGVtUHJvcHMsIFNvdXJjZURhdGFTZWxlY3RvclByb3BzfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZGVmYXVsdFBsYWNlSG9sZGVyID0gJ1NlbGVjdCBBIERhdGFzZXQnO1xuXG5Tb3VyY2VEYXRhU2VsZWN0b3JGYWN0b3J5LmRlcHMgPSBbRGF0YXNldFRhZ0ZhY3RvcnldO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTb3VyY2VEYXRhU2VsZWN0b3JGYWN0b3J5KFxuICBEYXRhc2V0VGFnOiBSZXR1cm5UeXBlPHR5cGVvZiBEYXRhc2V0VGFnRmFjdG9yeT5cbik6IFJlYWN0LkZDPFNvdXJjZURhdGFTZWxlY3RvclByb3BzPiB7XG4gIGNvbnN0IERhdGFzZXRJdGVtID0gKHt2YWx1ZX06IERhdGFzZXRJdGVtUHJvcHMpID0+IDxEYXRhc2V0VGFnIGRhdGFzZXQ9e3ZhbHVlfSAvPjtcblxuICBjb25zdCBTb3VyY2VEYXRhU2VsZWN0b3I6IFJlYWN0LkZDPFNvdXJjZURhdGFTZWxlY3RvclByb3BzPiA9ICh7XG4gICAgZGF0YUlkLFxuICAgIGRhdGFzZXRzLFxuICAgIGRpc2FibGVkLFxuICAgIG9uU2VsZWN0LFxuICAgIGRlZmF1bHRWYWx1ZSxcbiAgICBpbnB1dFRoZW1lXG4gIH06IFNvdXJjZURhdGFTZWxlY3RvclByb3BzKSA9PiB7XG4gICAgY29uc3QgZHNPcHRpb25zID0gdXNlTWVtbyhcbiAgICAgICgpID0+XG4gICAgICAgIE9iamVjdC52YWx1ZXMoZGF0YXNldHMpLm1hcChkcyA9PiAoe1xuICAgICAgICAgIGxhYmVsOiBkcy5sYWJlbCxcbiAgICAgICAgICB2YWx1ZTogZHMuaWQsXG4gICAgICAgICAgY29sb3I6IGRzLmNvbG9yXG4gICAgICAgIH0pKSxcbiAgICAgIFtkYXRhc2V0c11cbiAgICApO1xuXG4gICAgY29uc3Qgc2VsZWN0ZWRJdGVtcyA9IHVzZU1lbW8oXG4gICAgICAoKSA9PiAoZGF0YUlkID8gKChBcnJheS5pc0FycmF5KGRhdGFJZCkgJiYgZGF0YUlkKSB8fCBbZGF0YUlkXSkubWFwKGlkID0+IGRhdGFzZXRzW2lkXSkgOiBbXSksXG4gICAgICBbZGF0YUlkLCBkYXRhc2V0c11cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxTaWRlUGFuZWxTZWN0aW9uIGNsYXNzTmFtZT1cImRhdGEtc291cmNlLXNlbGVjdG9yXCI+XG4gICAgICAgIDxQYW5lbExhYmVsPlxuICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPXsnbWlzYy5kYXRhU291cmNlJ30gLz5cbiAgICAgICAgPC9QYW5lbExhYmVsPlxuICAgICAgICA8SXRlbVNlbGVjdG9yXG4gICAgICAgICAgaW5wdXRUaGVtZT17aW5wdXRUaGVtZX1cbiAgICAgICAgICBzZWxlY3RlZEl0ZW1zPXtzZWxlY3RlZEl0ZW1zfVxuICAgICAgICAgIG9wdGlvbnM9e2RzT3B0aW9uc31cbiAgICAgICAgICBnZXRPcHRpb25WYWx1ZT17J3ZhbHVlJ31cbiAgICAgICAgICBmaWx0ZXJPcHRpb249eydsYWJlbCd9XG4gICAgICAgICAgbXVsdGlTZWxlY3Q9e2ZhbHNlfVxuICAgICAgICAgIG9uQ2hhbmdlPXtvblNlbGVjdH1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17ZGVmYXVsdFZhbHVlfVxuICAgICAgICAgIGRpc2FibGVkPXtCb29sZWFuKGRpc2FibGVkKX1cbiAgICAgICAgICBkaXNwbGF5T3B0aW9uPXsnbGFiZWwnfVxuICAgICAgICAgIERyb3BEb3duTGluZUl0ZW1SZW5kZXJDb21wb25lbnQ9e0RhdGFzZXRJdGVtfVxuICAgICAgICAvPlxuICAgICAgPC9TaWRlUGFuZWxTZWN0aW9uPlxuICAgICk7XG4gIH07XG5cbiAgU291cmNlRGF0YVNlbGVjdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRQbGFjZUhvbGRlclxuICB9O1xuICByZXR1cm4gU291cmNlRGF0YVNlbGVjdG9yO1xufVxuIl19