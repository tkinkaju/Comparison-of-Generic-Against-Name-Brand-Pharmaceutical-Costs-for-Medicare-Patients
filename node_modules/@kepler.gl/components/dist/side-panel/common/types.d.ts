import React, { MouseEvent } from 'react';
import { openDeleteModal, VisStateActions, ActionHandler } from '@kepler.gl/actions';
import { RGBColor } from '@kepler.gl/types';
import KeplerTable, { Datasets } from '@kepler.gl/table';
export declare type DatasetInfoProps = {
    dataset: KeplerTable;
};
export declare type UpdateTableColorTypes = {
    id: string;
    children: React.ReactNode;
};
export declare type DatasetTagProps = {
    id?: string;
    dataset: KeplerTable;
    updateTableColor?: ActionHandler<typeof VisStateActions.updateTableColor>;
    onClick?: (e: MouseEvent) => void;
    onClickSquare?: (e: MouseEvent) => void;
};
export declare type ShowDataTableProps = {
    id: string;
    showDatasetTable?: ActionHandler<typeof VisStateActions.showDatasetTable>;
};
export declare type RemoveDatasetProps = {
    datasetKey: string;
    removeDataset?: ActionHandler<typeof openDeleteModal>;
};
export declare type StyledDatasetTitleProps = {
    clickable: boolean;
};
export declare type DatasetTitleProps = {
    dataset: KeplerTable;
    showDeleteDataset: boolean;
    onTitleClick?: () => void;
    showDatasetTable?: ActionHandler<typeof VisStateActions.showDatasetTable>;
    updateTableColor: ActionHandler<typeof VisStateActions.updateTableColor>;
    removeDataset?: ActionHandler<typeof openDeleteModal>;
};
export declare type SourceDataCatalogProps = {
    datasets: Datasets;
    showDeleteDataset?: boolean;
    onTitleClick?: () => void;
    showDatasetTable?: ActionHandler<typeof VisStateActions.showDatasetTable>;
    updateTableColor: ActionHandler<typeof VisStateActions.updateTableColor>;
    removeDataset?: ActionHandler<typeof openDeleteModal>;
};
export declare type DatasetItemProps = {
    value: KeplerTable;
};
export declare type SelectableDataset = {
    label?: string;
    id: string;
    color: RGBColor;
};
export declare type SourceDataSelectorProps = {
    dataId: string | string[] | null;
    datasets: {
        [id: string]: SelectableDataset;
    };
    disabled?: boolean;
    defaultValue?: string;
    inputTheme?: string;
    onSelect: (items: ReadonlyArray<string | number | boolean | object> | string | number | boolean | object | null) => void;
};
