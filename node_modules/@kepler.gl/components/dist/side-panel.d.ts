import React from 'react';
import SidebarFactory from './side-panel/side-bar';
import PanelHeaderFactory from './side-panel/panel-header';
import PanelToggleFactory from './side-panel/panel-toggle';
import LayerManagerFactory from './side-panel/layer-manager';
import FilterManagerFactory from './side-panel/filter-manager';
import InteractionManagerFactory from './side-panel/interaction-manager';
import MapManagerFactory from './side-panel/map-manager';
import CustomPanelsFactory from './side-panel/custom-panel';
import PanelTitleFactory from './side-panel/panel-title';
import { SidePanelProps } from './types';
export declare const StyledSidePanelContent: import("styled-components").StyledComponent<"div", any, {}, never>;
/**
 * Vertical sidebar containing input components for the rendering layers
 */
declare function SidePanelFactory(Sidebar: ReturnType<typeof SidebarFactory>, PanelHeader: ReturnType<typeof PanelHeaderFactory>, PanelToggle: ReturnType<typeof PanelToggleFactory>, PanelTitle: ReturnType<typeof PanelTitleFactory>, LayerManager: ReturnType<typeof LayerManagerFactory>, FilterManager: ReturnType<typeof FilterManagerFactory>, InteractionManager: ReturnType<typeof InteractionManagerFactory>, MapManager: ReturnType<typeof MapManagerFactory>, CustomPanels: ReturnType<typeof CustomPanelsFactory>): {
    (props: SidePanelProps): JSX.Element;
    defaultProps: {
        panels: {
            component: any;
            iconComponent: any;
            id: string;
            label: string;
            onClick: null;
        }[];
        sidebarComponents: {
            layer: React.ForwardRefExoticComponent<import("react-intl").Omit<{
                datasets: import("@kepler.gl/table").Datasets;
                layers: import("@kepler.gl/layers/dist/base-layer").default[];
                layerOrder: number[];
                layerClasses: {
                    point: typeof import("@kepler.gl/layers/dist/point-layer/point-layer").default;
                    arc: typeof import("@kepler.gl/layers/dist/arc-layer/arc-layer").default;
                    line: typeof import("@kepler.gl/layers/dist/line-layer/line-layer").default;
                    grid: typeof import("@kepler.gl/layers/dist/grid-layer/grid-layer").default;
                    hexagon: typeof import("@kepler.gl/layers/dist/hexagon-layer/hexagon-layer").default;
                    geojson: typeof import("@kepler.gl/layers/dist/geojson-layer/geojson-layer").default;
                    cluster: typeof import("@kepler.gl/layers/dist/cluster-layer/cluster-layer").default;
                    icon: typeof import("@kepler.gl/layers/dist/icon-layer/icon-layer").default;
                    heatmap: typeof import("@kepler.gl/layers/dist/heatmap-layer/heatmap-layer").default;
                    hexagonId: typeof import("@kepler.gl/layers/dist/h3-hexagon-layer/h3-hexagon-layer").default;
                    "3D": typeof import("@kepler.gl/layers/dist/scenegraph-layer/scenegraph-layer").default;
                    trip: typeof import("@kepler.gl/layers/dist/trip-layer/trip-layer").default;
                    s2: typeof import("@kepler.gl/layers/dist/s2-geometry-layer/s2-geometry-layer").default;
                };
                layerBlending: string;
                uiStateActions: typeof import("@kepler.gl/actions/dist/ui-state-actions");
                visStateActions: typeof import("@kepler.gl/actions/dist/vis-state-actions");
                showAddDataModal: () => void;
                removeDataset: import("@kepler.gl/actions").ActionHandler<(datasetId: string) => {
                    payload: string;
                    type: "@@kepler.gl/OPEN_DELETE_MODAL";
                }>;
                showDatasetTable: import("@kepler.gl/actions").ActionHandler<typeof import("@kepler.gl/actions").showDatasetTable>;
                updateTableColor: import("@kepler.gl/actions").ActionHandler<typeof import("@kepler.gl/actions").updateTableColor>;
                layerPanelListView: import("@kepler.gl/types").LayerPanelListView;
                panelMetadata: import("./types").SidePanelItem;
            } & import("react-intl").WrappedComponentProps<"intl">, "intl"> & {
                forwardedRef?: React.Ref<any> | undefined;
            } & React.RefAttributes<any>> & {
                WrappedComponent: React.ComponentType<{
                    datasets: import("@kepler.gl/table").Datasets;
                    layers: import("@kepler.gl/layers/dist/base-layer").default[];
                    layerOrder: number[];
                    layerClasses: {
                        point: typeof import("@kepler.gl/layers/dist/point-layer/point-layer").default;
                        arc: typeof import("@kepler.gl/layers/dist/arc-layer/arc-layer").default;
                        line: typeof import("@kepler.gl/layers/dist/line-layer/line-layer").default;
                        grid: typeof import("@kepler.gl/layers/dist/grid-layer/grid-layer").default;
                        hexagon: typeof import("@kepler.gl/layers/dist/hexagon-layer/hexagon-layer").default;
                        geojson: typeof import("@kepler.gl/layers/dist/geojson-layer/geojson-layer").default;
                        cluster: typeof import("@kepler.gl/layers/dist/cluster-layer/cluster-layer").default;
                        icon: typeof import("@kepler.gl/layers/dist/icon-layer/icon-layer").default;
                        heatmap: typeof import("@kepler.gl/layers/dist/heatmap-layer/heatmap-layer").default;
                        hexagonId: typeof import("@kepler.gl/layers/dist/h3-hexagon-layer/h3-hexagon-layer").default;
                        "3D": typeof import("@kepler.gl/layers/dist/scenegraph-layer/scenegraph-layer").default;
                        trip: typeof import("@kepler.gl/layers/dist/trip-layer/trip-layer").default;
                        s2: typeof import("@kepler.gl/layers/dist/s2-geometry-layer/s2-geometry-layer").default;
                    };
                    layerBlending: string;
                    uiStateActions: typeof import("@kepler.gl/actions/dist/ui-state-actions");
                    visStateActions: typeof import("@kepler.gl/actions/dist/vis-state-actions");
                    showAddDataModal: () => void;
                    removeDataset: import("@kepler.gl/actions").ActionHandler<(datasetId: string) => {
                        payload: string;
                        type: "@@kepler.gl/OPEN_DELETE_MODAL";
                    }>;
                    showDatasetTable: import("@kepler.gl/actions").ActionHandler<typeof import("@kepler.gl/actions").showDatasetTable>;
                    updateTableColor: import("@kepler.gl/actions").ActionHandler<typeof import("@kepler.gl/actions").updateTableColor>;
                    layerPanelListView: import("@kepler.gl/types").LayerPanelListView;
                    panelMetadata: import("./types").SidePanelItem;
                } & import("react-intl").WrappedComponentProps<"intl">>;
            };
            filter: ({ filters, datasets, layers, showDatasetTable, updateTableColor, visStateActions }: {
                filters: import("@kepler.gl/types").Filter[];
                datasets: import("@kepler.gl/table").Datasets;
                layers: import("@kepler.gl/layers/dist/base-layer").default[];
                showDatasetTable: import("@kepler.gl/actions").ActionHandler<typeof import("@kepler.gl/actions").showDatasetTable>;
                updateTableColor: import("@kepler.gl/actions").ActionHandler<typeof import("@kepler.gl/actions").updateTableColor>;
                visStateActions: typeof import("@kepler.gl/actions/dist/vis-state-actions");
            }) => JSX.Element;
            interaction: React.FC<{
                interactionConfig: import("@kepler.gl/types").InteractionConfig;
                datasets: import("@kepler.gl/table").Datasets;
                visStateActions: typeof import("@kepler.gl/actions/dist/vis-state-actions");
            }>;
            map: React.ForwardRefExoticComponent<import("react-intl").Omit<{
                mapStyle: import("@kepler.gl/reducers").MapStyle;
                mapStyleActions: typeof import("@kepler.gl/actions/dist/map-style-actions");
                showAddMapStyleModal: () => void;
            } & import("react-intl").WrappedComponentProps<"intl">, "intl"> & {
                forwardedRef?: React.Ref<any> | undefined;
            } & React.RefAttributes<any>> & {
                WrappedComponent: React.ComponentType<{
                    mapStyle: import("@kepler.gl/reducers").MapStyle;
                    mapStyleActions: typeof import("@kepler.gl/actions/dist/map-style-actions");
                    showAddMapStyleModal: () => void;
                } & import("react-intl").WrappedComponentProps<"intl">>;
            };
        };
        uiState: {};
        visStateActions: {};
        mapStyleActions: {};
        uiStateActions: {};
        availableProviders: {};
        mapInfo: {};
    };
};
declare namespace SidePanelFactory {
    var deps: (typeof SidebarFactory | typeof PanelHeaderFactory | typeof PanelToggleFactory | typeof CustomPanelsFactory | (() => import("styled-components").StyledComponent<"div", any, {
        className: string;
    }, "className">) | typeof LayerManagerFactory | typeof FilterManagerFactory | typeof InteractionManagerFactory | typeof MapManagerFactory)[];
}
export default SidePanelFactory;
