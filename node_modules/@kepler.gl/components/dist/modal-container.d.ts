import React from 'react';
import ModalDialogFactory from './modals/modal-dialog';
import { MapStyle, ProviderState } from '@kepler.gl/reducers';
import DeleteDatasetModalFactory from './modals/delete-data-modal';
import OverWriteMapModalFactory from './modals/overwrite-map-modal';
import DataTableModalFactory from './modals/data-table-modal';
import LoadDataModalFactory from './modals/load-data-modal';
import ExportImageModalFactory from './modals/export-image-modal';
import ExportDataModalFactory from './modals/export-data-modal';
import ExportMapModalFactory from './modals/export-map-modal/export-map-modal';
import AddMapStyleModalFactory from './modals/add-map-style-modal';
import SaveMapModalFactory from './modals/save-map-modal';
import ShareMapModalFactory from './modals/share-map-modal';
import { MapState, UiState, OnSuccessCallBack, OnErrorCallBack } from '@kepler.gl/types';
import { VisStateActions, UIStateActions, MapStyleActions, ProviderActions } from '@kepler.gl/actions';
import { Provider } from '@kepler.gl/cloud-providers';
import { VisState } from '@kepler.gl/schemas';
export declare type ModalContainerProps = {
    appName: string;
    rootNode: React.ReactInstance | null | undefined;
    containerW: number;
    containerH: number;
    mapboxApiAccessToken: string;
    mapboxApiUrl?: string;
    mapState: MapState;
    mapStyle: MapStyle;
    uiState: UiState;
    visState: VisState;
    providerState: ProviderState;
    visStateActions: typeof VisStateActions;
    uiStateActions: typeof UIStateActions;
    mapStyleActions: typeof MapStyleActions;
    providerActions: typeof ProviderActions;
    onSaveToStorage?: () => void;
    cloudProviders: Provider[];
    onLoadCloudMapSuccess?: OnSuccessCallBack;
    onLoadCloudMapError?: OnErrorCallBack;
    onExportToCloudSuccess?: OnSuccessCallBack;
    onExportToCloudError?: OnErrorCallBack;
};
declare function ModalContainerFactory(DeleteDatasetModal: ReturnType<typeof DeleteDatasetModalFactory>, OverWriteMapModal: ReturnType<typeof OverWriteMapModalFactory>, DataTableModal: ReturnType<typeof DataTableModalFactory>, LoadDataModal: ReturnType<typeof LoadDataModalFactory>, ExportImageModal: ReturnType<typeof ExportImageModalFactory>, ExportDataModal: ReturnType<typeof ExportDataModalFactory>, ExportMapModal: ReturnType<typeof ExportMapModalFactory>, AddMapStyleModal: ReturnType<typeof AddMapStyleModalFactory>, ModalDialog: ReturnType<typeof ModalDialogFactory>, SaveMapModal: ReturnType<typeof SaveMapModalFactory>, ShareMapModal: ReturnType<typeof ShareMapModalFactory>): React.ElementType<ModalContainerProps>;
declare namespace ModalContainerFactory {
    var deps: (typeof ShareMapModalFactory | (() => React.FC<import("./modals/delete-data-modal").DeleteDatasetModalProps>) | (() => React.FC<{
        mapSaved: string | null;
        title: string;
        cloudProviders: Provider[];
        isProviderLoading: boolean;
        currentProvider: string | null;
        onUpdateImageSetting: (newSetting: Partial<import("@kepler.gl/constants").ExportImage>) => void;
        cleanupExportImage: () => {
            type: "@@kepler.gl/CLEANUP_EXPORT_IMAGE";
        };
    }>) | typeof DataTableModalFactory | typeof LoadDataModalFactory | (() => React.ForwardRefExoticComponent<import("react-intl").Omit<import("./modals/export-image-modal").ExportImageModalProps, "intl"> & {
        forwardedRef?: React.Ref<any> | undefined;
    } & React.RefAttributes<any>> & {
        WrappedComponent: React.ComponentType<import("./modals/export-image-modal").ExportImageModalProps>;
    }) | (() => React.ForwardRefExoticComponent<import("react-intl").Omit<import("./modals/export-data-modal").ExportDataModalProps, "intl"> & {
        forwardedRef?: React.Ref<any> | undefined;
    } & React.RefAttributes<any>> & {
        WrappedComponent: React.ComponentType<import("./modals/export-data-modal").ExportDataModalProps>;
    }) | typeof ExportMapModalFactory | typeof AddMapStyleModalFactory | (() => import("styled-components").StyledComponent<typeof import("./common/modal").ModalDialog, any, {}, never>) | typeof SaveMapModalFactory)[];
}
export default ModalContainerFactory;
