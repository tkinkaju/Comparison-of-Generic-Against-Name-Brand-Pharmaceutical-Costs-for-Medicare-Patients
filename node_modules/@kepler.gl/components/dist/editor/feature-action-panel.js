// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PureFeatureActionPanelFactory = PureFeatureActionPanelFactory;
exports["default"] = FeatureActionPanelFactory;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _reactIntl = require("react-intl");

var _actionPanel = _interopRequireWildcard(require("../common/action-panel"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactOnclickoutside = _interopRequireDefault(require("react-onclickoutside"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icons = require("../common/icons");

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _templateObject;

var LAYOVER_OFFSET = 4;

var StyledActionsLayer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n"])));

PureFeatureActionPanelFactory.deps = [];

function PureFeatureActionPanelFactory() {
  var FeatureActionPanel = function FeatureActionPanel(_ref) {
    var className = _ref.className,
        datasets = _ref.datasets,
        selectedFeature = _ref.selectedFeature,
        position = _ref.position,
        layers = _ref.layers,
        currentFilter = _ref.currentFilter,
        onToggleLayer = _ref.onToggleLayer,
        onDeleteFeature = _ref.onDeleteFeature;

    var _useState = (0, _react.useState)(false),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        copied = _useState2[0],
        setCopied = _useState2[1];

    var _ref2 = currentFilter || {},
        _ref2$layerId = _ref2.layerId,
        layerId = _ref2$layerId === void 0 ? [] : _ref2$layerId;

    var intl = (0, _reactIntl.useIntl)();
    var copyGeometry = (0, _react.useCallback)(function () {
      if (selectedFeature !== null && selectedFeature !== void 0 && selectedFeature.geometry) (0, _copyToClipboard["default"])(JSON.stringify(selectedFeature.geometry));
      setCopied(true);
    }, [selectedFeature === null || selectedFeature === void 0 ? void 0 : selectedFeature.geometry]);

    if (!position) {
      return null;
    }

    return /*#__PURE__*/_react["default"].createElement(StyledActionsLayer, {
      className: (0, _classnames["default"])('feature-action-panel', className),
      style: {
        top: "".concat(position.y + LAYOVER_OFFSET, "px"),
        left: "".concat(position.x + LAYOVER_OFFSET, "px")
      }
    }, /*#__PURE__*/_react["default"].createElement(_actionPanel["default"], null, /*#__PURE__*/_react["default"].createElement(_actionPanel.ActionPanelItem, {
      className: "editor-layers-list",
      label: intl.formatMessage({
        id: 'editor.filterLayer',
        defaultMessage: 'Filter layers'
      }),
      Icon: _icons.Layers
    }, layers.map(function (layer, index) {
      return /*#__PURE__*/_react["default"].createElement(_actionPanel.ActionPanelItem, {
        key: index,
        label: layer.config.label // @ts-ignore
        ,
        color: datasets[layer.config.dataId].color,
        isSelection: true,
        isActive: layerId.includes(layer.id),
        onClick: function onClick() {
          return onToggleLayer(layer);
        },
        className: "layer-panel-item"
      });
    })), /*#__PURE__*/_react["default"].createElement(_actionPanel.ActionPanelItem, {
      label: intl.formatMessage({
        id: 'editor.copyGeometry',
        defaultMessage: 'Copy Geometry'
      }),
      className: "delete-panel-item",
      Icon: copied ? _icons.Checkmark : _icons.Copy,
      onClick: copyGeometry
    }), /*#__PURE__*/_react["default"].createElement(_actionPanel.ActionPanelItem, {
      label: intl.formatMessage({
        id: 'tooltip.delete',
        defaultMessage: 'Delete'
      }),
      className: "delete-panel-item",
      Icon: _icons.Trash,
      onClick: onDeleteFeature
    })));
  };

  FeatureActionPanel.displayName = 'FeatureActionPanel';
  FeatureActionPanel.defaultProps = {
    position: null
  };
  return FeatureActionPanel;
}

FeatureActionPanelFactory.deps = PureFeatureActionPanelFactory.deps;

function FeatureActionPanelFactory() {
  var PureFeatureActionPanel = PureFeatureActionPanelFactory();

  var ClickOutsideFeatureActionPanel = function ClickOutsideFeatureActionPanel(props) {
    // @ts-ignore
    ClickOutsideFeatureActionPanel.handleClickOutside = function (e) {
      var _props$onClose;

      e.preventDefault();
      e.stopPropagation();
      (_props$onClose = props.onClose) === null || _props$onClose === void 0 ? void 0 : _props$onClose.call(props);
    };

    return /*#__PURE__*/_react["default"].createElement(PureFeatureActionPanel, props);
  };

  var clickOutsideConfig = {
    // @ts-ignore
    handleClickOutside: function handleClickOutside() {
      return ClickOutsideFeatureActionPanel.handleClickOutside;
    }
  };
  return (0, _reactOnclickoutside["default"])(ClickOutsideFeatureActionPanel, clickOutsideConfig);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,