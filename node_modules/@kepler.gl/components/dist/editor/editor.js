// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = EditorFactory;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactMapGlDraw = require("react-map-gl-draw");

var _window = _interopRequireDefault(require("global/window"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash.get"));

var _reselect = require("reselect");

var _featureActionPanel = _interopRequireDefault(require("./feature-action-panel"));

var _constants = require("@kepler.gl/constants");

var _featureStyles = require("./feature-styles");

var _handleStyle = require("./handle-style");

var _templateObject;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var StyledWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  cursor: ", ";\n  position: relative;\n"])), function (props) {
  return props.editor.mode === _constants.EDITOR_MODES.EDIT ? 'pointer' : 'crosshair';
});

var editorLayerFilter = function editorLayerFilter(layer) {
  return _constants.EDITOR_AVAILABLE_LAYERS.includes(layer.type);
};

EditorFactory.deps = [_featureActionPanel["default"]];

function EditorFactory(FeatureActionPanel) {
  var EditorUnmemoized = /*#__PURE__*/function (_Component) {
    (0, _inherits2["default"])(EditorUnmemoized, _Component);

    var _super = _createSuper(EditorUnmemoized);

    function EditorUnmemoized() {
      var _this;

      (0, _classCallCheck2["default"])(this, EditorUnmemoized);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
        showActions: false,
        lastPosition: null
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "layerSelector", function (props) {
        return props.layers;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "layersToRenderSelector", function (props) {
        return props.layersToRender;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filterSelector", function (props) {
        return props.filters;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "selectedFeatureIdSelector", function (props) {
        return (0, _lodash["default"])(props, ['editor', 'selectedFeature', 'id']);
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "editorFeatureSelector", function (props) {
        return (0, _lodash["default"])(props, ['editor', 'features']);
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "currentFilterSelector", (0, _reselect.createSelector)(_this.filterSelector, _this.selectedFeatureIdSelector, function (filters, selectedFeatureId) {
        return filters.find(function (f) {
          return f.value && f.value.id === selectedFeatureId;
        });
      }));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "availableLayersSeletor", (0, _reselect.createSelector)(_this.layerSelector, _this.layersToRenderSelector, function (layers, layersToRender) {
        return layers.filter(editorLayerFilter).filter(function (layer) {
          return layersToRender[layer.id];
        });
      }));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "allFeaturesSelector", (0, _reselect.createSelector)(_this.filterSelector, _this.editorFeatureSelector, function (filters, editorFeatures) {
        return filters.filter(function (f) {
          return f.type === _constants.FILTER_TYPES.polygon;
        }).map(function (f) {
          return f.value;
        }).concat(editorFeatures);
      }));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onKeyPressed", function (event) {
        var isEnabled = _this.props.isEnabled;

        if (!isEnabled) {
          return;
        }

        switch (event.keyCode) {
          case _constants.KeyEvent.DOM_VK_DELETE:
          case _constants.KeyEvent.DOM_VK_BACK_SPACE:
            _this._onDeleteSelectedFeature();

            break;

          case _constants.KeyEvent.DOM_VK_ESCAPE:
            _this.props.onSelect(null);

            break;

          default:
            break;
        }
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onSelect", function (_ref) {
        var selectedFeatureId = _ref.selectedFeatureId,
            sourceEvent = _ref.sourceEvent;

        var allFeatures = _this.allFeaturesSelector(_this.props);

        _this.setState(_objectSpread({}, sourceEvent.rightButton ? {
          showActions: true,
          lastPosition: {
            x: sourceEvent.changedPointers[0].offsetX,
            y: sourceEvent.changedPointers[0].offsetY
          }
        } : null), function () {
          _this.props.onSelect(allFeatures.find(function (f) {
            return f.id === selectedFeatureId;
          }));
        });
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onDeleteSelectedFeature", function () {
        if (_this.state.showActions) {
          _this.setState({
            showActions: false
          });
        }

        var editor = _this.props.editor;
        var _editor$selectedFeatu = editor.selectedFeature,
            selectedFeature = _editor$selectedFeatu === void 0 ? {} : _editor$selectedFeatu;

        _this.props.onDeleteFeature(selectedFeature);
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_closeFeatureAction", function () {
        _this.setState({
          showActions: false
        });
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onToggleLayer", function (layer) {
        var selectedFeature = _this.props.editor.selectedFeature;

        if (!selectedFeature) {
          return;
        }

        _this.props.onTogglePolygonFilter(layer, selectedFeature);
      });
      return _this;
    }

    (0, _createClass2["default"])(EditorUnmemoized, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        _window["default"].addEventListener('keydown', this._onKeyPressed);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _window["default"].removeEventListener('keydown', this._onKeyPressed);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            className = _this$props.className,
            clickRadius = _this$props.clickRadius,
            datasets = _this$props.datasets,
            editor = _this$props.editor,
            onUpdate = _this$props.onUpdate,
            style = _this$props.style;
        var _this$state = this.state,
            lastPosition = _this$state.lastPosition,
            showActions = _this$state.showActions;
        var selectedFeatureId = (0, _lodash["default"])(editor, ['selectedFeature', 'id']);
        var currentFilter = this.currentFilterSelector(this.props);
        var availableLayers = this.availableLayersSeletor(this.props);
        var allFeatures = this.allFeaturesSelector(this.props);
        return /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
          editor: editor,
          className: (0, _classnames["default"])('editor', className),
          style: style
        }, /*#__PURE__*/_react["default"].createElement(_reactMapGlDraw.Editor, {
          clickRadius: clickRadius,
          mode: editor.mode,
          features: allFeatures,
          selectedFeatureId: selectedFeatureId,
          onSelect: this._onSelect,
          onUpdate: onUpdate,
          getEditHandleShape: _handleStyle.getEditHandleShape,
          getFeatureStyle: _featureStyles.getStyle,
          getEditHandleStyle: _handleStyle.getStyle
        }), showActions && Boolean(selectedFeatureId) ? /*#__PURE__*/_react["default"].createElement(FeatureActionPanel, {
          selectedFeature: (0, _lodash["default"])(editor, ['selectedFeature']),
          datasets: datasets,
          layers: availableLayers,
          currentFilter: currentFilter,
          onClose: this._closeFeatureAction,
          onDeleteFeature: this._onDeleteSelectedFeature,
          onToggleLayer: this._onToggleLayer,
          position: lastPosition
        }) : null);
      }
    }]);
    return EditorUnmemoized;
  }(_react.Component);

  (0, _defineProperty2["default"])(EditorUnmemoized, "defaultProps", {
    clickRadius: _featureStyles.DEFAULT_RADIUS
  });
  (0, _defineProperty2["default"])(EditorUnmemoized, "displayName", 'Editor');

  var Editor = /*#__PURE__*/_react["default"].memo(EditorUnmemoized);

  Editor.displayName = 'Editor';
  return Editor;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lZGl0b3IvZWRpdG9yLnRzeCJdLCJuYW1lcyI6WyJTdHlsZWRXcmFwcGVyIiwic3R5bGVkIiwiZGl2IiwicHJvcHMiLCJlZGl0b3IiLCJtb2RlIiwiRURJVE9SX01PREVTIiwiRURJVCIsImVkaXRvckxheWVyRmlsdGVyIiwibGF5ZXIiLCJFRElUT1JfQVZBSUxBQkxFX0xBWUVSUyIsImluY2x1ZGVzIiwidHlwZSIsIkVkaXRvckZhY3RvcnkiLCJkZXBzIiwiRmVhdHVyZUFjdGlvblBhbmVsRmFjdG9yeSIsIkZlYXR1cmVBY3Rpb25QYW5lbCIsIkVkaXRvclVubWVtb2l6ZWQiLCJzaG93QWN0aW9ucyIsImxhc3RQb3NpdGlvbiIsImxheWVycyIsImxheWVyc1RvUmVuZGVyIiwiZmlsdGVycyIsImZpbHRlclNlbGVjdG9yIiwic2VsZWN0ZWRGZWF0dXJlSWRTZWxlY3RvciIsInNlbGVjdGVkRmVhdHVyZUlkIiwiZmluZCIsImYiLCJ2YWx1ZSIsImlkIiwibGF5ZXJTZWxlY3RvciIsImxheWVyc1RvUmVuZGVyU2VsZWN0b3IiLCJmaWx0ZXIiLCJlZGl0b3JGZWF0dXJlU2VsZWN0b3IiLCJlZGl0b3JGZWF0dXJlcyIsIkZJTFRFUl9UWVBFUyIsInBvbHlnb24iLCJtYXAiLCJjb25jYXQiLCJldmVudCIsImlzRW5hYmxlZCIsImtleUNvZGUiLCJLZXlFdmVudCIsIkRPTV9WS19ERUxFVEUiLCJET01fVktfQkFDS19TUEFDRSIsIl9vbkRlbGV0ZVNlbGVjdGVkRmVhdHVyZSIsIkRPTV9WS19FU0NBUEUiLCJvblNlbGVjdCIsInNvdXJjZUV2ZW50IiwiYWxsRmVhdHVyZXMiLCJhbGxGZWF0dXJlc1NlbGVjdG9yIiwic2V0U3RhdGUiLCJyaWdodEJ1dHRvbiIsIngiLCJjaGFuZ2VkUG9pbnRlcnMiLCJvZmZzZXRYIiwieSIsIm9mZnNldFkiLCJzdGF0ZSIsInNlbGVjdGVkRmVhdHVyZSIsIm9uRGVsZXRlRmVhdHVyZSIsIm9uVG9nZ2xlUG9seWdvbkZpbHRlciIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJfb25LZXlQcmVzc2VkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsYXNzTmFtZSIsImNsaWNrUmFkaXVzIiwiZGF0YXNldHMiLCJvblVwZGF0ZSIsInN0eWxlIiwiY3VycmVudEZpbHRlciIsImN1cnJlbnRGaWx0ZXJTZWxlY3RvciIsImF2YWlsYWJsZUxheWVycyIsImF2YWlsYWJsZUxheWVyc1NlbGV0b3IiLCJfb25TZWxlY3QiLCJnZXRFZGl0SGFuZGxlU2hhcGUiLCJnZXRGZWF0dXJlU3R5bGUiLCJnZXRFZGl0SGFuZGxlU3R5bGUiLCJCb29sZWFuIiwiX2Nsb3NlRmVhdHVyZUFjdGlvbiIsIl9vblRvZ2dsZUxheWVyIiwiQ29tcG9uZW50IiwiREVGQVVMVF9SQURJVVMiLCJFZGl0b3IiLCJSZWFjdCIsIm1lbW8iLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQVFBOztBQUNBOzs7Ozs7Ozs7Ozs7QUFNQSxJQUFNQSxhQUFhLEdBQUdDLDZCQUFPQyxHQUFWLGlJQUNQLFVBQUNDLEtBQUQ7QUFBQSxTQUNSQSxLQUFLLENBQUNDLE1BQU4sQ0FBYUMsSUFBYixLQUFzQkMsd0JBQWFDLElBQW5DLEdBQTBDLFNBQTFDLEdBQXNELFdBRDlDO0FBQUEsQ0FETyxDQUFuQjs7QUFNQSxJQUFNQyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQUNDLEtBQUQ7QUFBQSxTQUFrQkMsbUNBQXdCQyxRQUF4QixDQUFpQ0YsS0FBSyxDQUFDRyxJQUF2QyxDQUFsQjtBQUFBLENBQTFCOztBQUVBQyxhQUFhLENBQUNDLElBQWQsR0FBcUIsQ0FBQ0MsOEJBQUQsQ0FBckI7O0FBbUJlLFNBQVNGLGFBQVQsQ0FDYkcsa0JBRGEsRUFFc0I7QUFBQSxNQUM3QkMsZ0JBRDZCO0FBQUE7O0FBQUE7O0FB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IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50LCBDU1NQcm9wZXJ0aWVzLCBLZXlib2FyZEV2ZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7RWRpdG9yIGFzIERyYXd9IGZyb20gJ3JlYWN0LW1hcC1nbC1kcmF3JztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBnZXQgZnJvbSAnbG9kYXNoLmdldCc7XG5pbXBvcnQge2NyZWF0ZVNlbGVjdG9yfSBmcm9tICdyZXNlbGVjdCc7XG5cbmltcG9ydCBGZWF0dXJlQWN0aW9uUGFuZWxGYWN0b3J5LCB7RmVhdHVyZUFjdGlvblBhbmVsUHJvcHN9IGZyb20gJy4vZmVhdHVyZS1hY3Rpb24tcGFuZWwnO1xuaW1wb3J0IHtcbiAgRURJVE9SX0FWQUlMQUJMRV9MQVlFUlMsXG4gIEZJTFRFUl9UWVBFUyxcbiAgRURJVE9SX01PREVTLFxuICBLZXlFdmVudFxufSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge0xheWVyfSBmcm9tICdAa2VwbGVyLmdsL2xheWVycyc7XG5cbmltcG9ydCB7REVGQVVMVF9SQURJVVMsIGdldFN0eWxlIGFzIGdldEZlYXR1cmVTdHlsZX0gZnJvbSAnLi9mZWF0dXJlLXN0eWxlcyc7XG5pbXBvcnQge2dldFN0eWxlIGFzIGdldEVkaXRIYW5kbGVTdHlsZSwgZ2V0RWRpdEhhbmRsZVNoYXBlfSBmcm9tICcuL2hhbmRsZS1zdHlsZSc7XG5pbXBvcnQge0ZpbHRlcn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge0ZlYXR1cmV9IGZyb20gJ0BuZWJ1bGEuZ2wvZWRpdC1tb2Rlcyc7XG5pbXBvcnQge01qb2xuaXJHZXN0dXJlRXZlbnR9IGZyb20gJ21qb2xuaXIuanMnO1xuaW1wb3J0IHtEYXRhc2V0c30gZnJvbSAnQGtlcGxlci5nbC90YWJsZSc7XG5cbmNvbnN0IFN0eWxlZFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBjdXJzb3I6ICR7KHByb3BzOiB7ZWRpdG9yOiB7bW9kZTogc3RyaW5nfX0pID0+XG4gICAgcHJvcHMuZWRpdG9yLm1vZGUgPT09IEVESVRPUl9NT0RFUy5FRElUID8gJ3BvaW50ZXInIDogJ2Nyb3NzaGFpcid9O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5gO1xuXG5jb25zdCBlZGl0b3JMYXllckZpbHRlciA9IChsYXllcjogTGF5ZXIpID0+IEVESVRPUl9BVkFJTEFCTEVfTEFZRVJTLmluY2x1ZGVzKGxheWVyLnR5cGUhKTtcblxuRWRpdG9yRmFjdG9yeS5kZXBzID0gW0ZlYXR1cmVBY3Rpb25QYW5lbEZhY3RvcnldO1xuXG5pbnRlcmZhY2UgRWRpdG9yUHJvcHMge1xuICBmaWx0ZXJzOiBGaWx0ZXJbXTtcbiAgbGF5ZXJzOiBMYXllcltdO1xuICBkYXRhc2V0czogRGF0YXNldHM7XG4gIGVkaXRvcjoge3NlbGVjdGVkRmVhdHVyZTogRmVhdHVyZTsgbW9kZTogc3RyaW5nfTtcbiAgbGF5ZXJzVG9SZW5kZXI6IFJlY29yZDxzdHJpbmcsIExheWVyPjtcbiAgaW5kZXg6IG51bWJlcjtcbiAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gIGNsaWNrUmFkaXVzOiBudW1iZXI7XG4gIHN0eWxlOiBDU1NQcm9wZXJ0aWVzO1xuICBpc0VuYWJsZWQ6IGJvb2xlYW47XG4gIG9uU2VsZWN0OiAoZjogRmVhdHVyZSB8IG51bGwpID0+IHZvaWQ7XG4gIG9uVXBkYXRlOiAoZjogRmVhdHVyZVtdKSA9PiB2b2lkO1xuICBvbkRlbGV0ZUZlYXR1cmU6IChmOiBGZWF0dXJlKSA9PiB2b2lkO1xuICBvblRvZ2dsZVBvbHlnb25GaWx0ZXI6IChsOiBMYXllciwgZjogRmVhdHVyZSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWRpdG9yRmFjdG9yeShcbiAgRmVhdHVyZUFjdGlvblBhbmVsOiBSZWFjdC5GQzxGZWF0dXJlQWN0aW9uUGFuZWxQcm9wcz5cbik6IFJlYWN0LkNvbXBvbmVudENsYXNzPEVkaXRvclByb3BzPiB7XG4gIGNsYXNzIEVkaXRvclVubWVtb2l6ZWQgZXh0ZW5kcyBDb21wb25lbnQ8RWRpdG9yUHJvcHM+IHtcbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgY2xpY2tSYWRpdXM6IERFRkFVTFRfUkFESVVTXG4gICAgfTtcblxuICAgIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdFZGl0b3InO1xuXG4gICAgc3RhdGUgPSB7XG4gICAgICBzaG93QWN0aW9uczogZmFsc2UsXG4gICAgICBsYXN0UG9zaXRpb246IG51bGxcbiAgICB9O1xuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX29uS2V5UHJlc3NlZCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX29uS2V5UHJlc3NlZCk7XG4gICAgfVxuXG4gICAgbGF5ZXJTZWxlY3RvciA9IChwcm9wczogRWRpdG9yUHJvcHMpID0+IHByb3BzLmxheWVycztcbiAgICBsYXllcnNUb1JlbmRlclNlbGVjdG9yID0gKHByb3BzOiBFZGl0b3JQcm9wcykgPT4gcHJvcHMubGF5ZXJzVG9SZW5kZXI7XG4gICAgZmlsdGVyU2VsZWN0b3IgPSAocHJvcHM6IEVkaXRvclByb3BzKSA9PiBwcm9wcy5maWx0ZXJzO1xuICAgIHNlbGVjdGVkRmVhdHVyZUlkU2VsZWN0b3IgPSAocHJvcHM6IEVkaXRvclByb3BzKSA9PlxuICAgICAgZ2V0KHByb3BzLCBbJ2VkaXRvcicsICdzZWxlY3RlZEZlYXR1cmUnLCAnaWQnXSk7XG4gICAgZWRpdG9yRmVhdHVyZVNlbGVjdG9yID0gKHByb3BzOiBFZGl0b3JQcm9wcykgPT4gZ2V0KHByb3BzLCBbJ2VkaXRvcicsICdmZWF0dXJlcyddKTtcblxuICAgIGN1cnJlbnRGaWx0ZXJTZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yKFxuICAgICAgdGhpcy5maWx0ZXJTZWxlY3RvcixcbiAgICAgIHRoaXMuc2VsZWN0ZWRGZWF0dXJlSWRTZWxlY3RvcixcbiAgICAgIChmaWx0ZXJzLCBzZWxlY3RlZEZlYXR1cmVJZCkgPT4gZmlsdGVycy5maW5kKGYgPT4gZi52YWx1ZSAmJiBmLnZhbHVlLmlkID09PSBzZWxlY3RlZEZlYXR1cmVJZClcbiAgICApO1xuXG4gICAgYXZhaWxhYmxlTGF5ZXJzU2VsZXRvciA9IGNyZWF0ZVNlbGVjdG9yKFxuICAgICAgdGhpcy5sYXllclNlbGVjdG9yLFxuICAgICAgdGhpcy5sYXllcnNUb1JlbmRlclNlbGVjdG9yLFxuICAgICAgKGxheWVycywgbGF5ZXJzVG9SZW5kZXIpID0+XG4gICAgICAgIGxheWVycy5maWx0ZXIoZWRpdG9yTGF5ZXJGaWx0ZXIpLmZpbHRlcihsYXllciA9PiB7XG4gICAgICAgICAgcmV0dXJuIGxheWVyc1RvUmVuZGVyW2xheWVyLmlkXTtcbiAgICAgICAgfSlcbiAgICApO1xuXG4gICAgYWxsRmVhdHVyZXNTZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yKFxuICAgICAgdGhpcy5maWx0ZXJTZWxlY3RvcixcbiAgICAgIHRoaXMuZWRpdG9yRmVhdHVyZVNlbGVjdG9yLFxuICAgICAgKGZpbHRlcnMsIGVkaXRvckZlYXR1cmVzKSA9PlxuICAgICAgICBmaWx0ZXJzXG4gICAgICAgICAgLmZpbHRlcihmID0+IGYudHlwZSA9PT0gRklMVEVSX1RZUEVTLnBvbHlnb24pXG4gICAgICAgICAgLm1hcChmID0+IGYudmFsdWUpXG4gICAgICAgICAgLmNvbmNhdChlZGl0b3JGZWF0dXJlcylcbiAgICApO1xuXG4gICAgX29uS2V5UHJlc3NlZCA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgY29uc3Qge2lzRW5hYmxlZH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAoIWlzRW5hYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIEtleUV2ZW50LkRPTV9WS19ERUxFVEU6XG4gICAgICAgIGNhc2UgS2V5RXZlbnQuRE9NX1ZLX0JBQ0tfU1BBQ0U6XG4gICAgICAgICAgdGhpcy5fb25EZWxldGVTZWxlY3RlZEZlYXR1cmUoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBLZXlFdmVudC5ET01fVktfRVNDQVBFOlxuICAgICAgICAgIHRoaXMucHJvcHMub25TZWxlY3QobnVsbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9vblNlbGVjdCA9ICh7XG4gICAgICBzZWxlY3RlZEZlYXR1cmVJZCxcbiAgICAgIHNvdXJjZUV2ZW50XG4gICAgfToge1xuICAgICAgc2VsZWN0ZWRGZWF0dXJlSWQ6IHN0cmluZyB8IG51bWJlcjtcbiAgICAgIHNvdXJjZUV2ZW50OiBNam9sbmlyR2VzdHVyZUV2ZW50O1xuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IGFsbEZlYXR1cmVzID0gdGhpcy5hbGxGZWF0dXJlc1NlbGVjdG9yKHRoaXMucHJvcHMpO1xuICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAge1xuICAgICAgICAgIC4uLihzb3VyY2VFdmVudC5yaWdodEJ1dHRvblxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgc2hvd0FjdGlvbnM6IHRydWUsXG4gICAgICAgICAgICAgICAgbGFzdFBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICB4OiBzb3VyY2VFdmVudC5jaGFuZ2VkUG9pbnRlcnNbMF0ub2Zmc2V0WCxcbiAgICAgICAgICAgICAgICAgIHk6IHNvdXJjZUV2ZW50LmNoYW5nZWRQb2ludGVyc1swXS5vZmZzZXRZXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IG51bGwpXG4gICAgICAgIH0sXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uU2VsZWN0KGFsbEZlYXR1cmVzLmZpbmQoZiA9PiBmLmlkID09PSBzZWxlY3RlZEZlYXR1cmVJZCkpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH07XG5cbiAgICBfb25EZWxldGVTZWxlY3RlZEZlYXR1cmUgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5zaG93QWN0aW9ucykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtzaG93QWN0aW9uczogZmFsc2V9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qge2VkaXRvcn0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3Qge3NlbGVjdGVkRmVhdHVyZSA9IHt9fSA9IGVkaXRvcjtcbiAgICAgIHRoaXMucHJvcHMub25EZWxldGVGZWF0dXJlKHNlbGVjdGVkRmVhdHVyZSk7XG4gICAgfTtcblxuICAgIF9jbG9zZUZlYXR1cmVBY3Rpb24gPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtzaG93QWN0aW9uczogZmFsc2V9KTtcbiAgICB9O1xuXG4gICAgX29uVG9nZ2xlTGF5ZXIgPSAobGF5ZXI6IExheWVyKSA9PiB7XG4gICAgICBjb25zdCB7c2VsZWN0ZWRGZWF0dXJlfSA9IHRoaXMucHJvcHMuZWRpdG9yO1xuICAgICAgaWYgKCFzZWxlY3RlZEZlYXR1cmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb3BzLm9uVG9nZ2xlUG9seWdvbkZpbHRlcihsYXllciwgc2VsZWN0ZWRGZWF0dXJlKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3Qge2NsYXNzTmFtZSwgY2xpY2tSYWRpdXMsIGRhdGFzZXRzLCBlZGl0b3IsIG9uVXBkYXRlLCBzdHlsZX0gPSB0aGlzLnByb3BzO1xuXG4gICAgICBjb25zdCB7bGFzdFBvc2l0aW9uLCBzaG93QWN0aW9uc30gPSB0aGlzLnN0YXRlO1xuICAgICAgY29uc3Qgc2VsZWN0ZWRGZWF0dXJlSWQgPSBnZXQoZWRpdG9yLCBbJ3NlbGVjdGVkRmVhdHVyZScsICdpZCddKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRGaWx0ZXIgPSB0aGlzLmN1cnJlbnRGaWx0ZXJTZWxlY3Rvcih0aGlzLnByb3BzKTtcbiAgICAgIGNvbnN0IGF2YWlsYWJsZUxheWVycyA9IHRoaXMuYXZhaWxhYmxlTGF5ZXJzU2VsZXRvcih0aGlzLnByb3BzKTtcbiAgICAgIGNvbnN0IGFsbEZlYXR1cmVzID0gdGhpcy5hbGxGZWF0dXJlc1NlbGVjdG9yKHRoaXMucHJvcHMpO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkV3JhcHBlciBlZGl0b3I9e2VkaXRvcn0gY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdlZGl0b3InLCBjbGFzc05hbWUpfSBzdHlsZT17c3R5bGV9PlxuICAgICAgICAgIDxEcmF3XG4gICAgICAgICAgICBjbGlja1JhZGl1cz17Y2xpY2tSYWRpdXN9XG4gICAgICAgICAgICBtb2RlPXtlZGl0b3IubW9kZX1cbiAgICAgICAgICAgIGZlYXR1cmVzPXthbGxGZWF0dXJlc31cbiAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZUlkPXtzZWxlY3RlZEZlYXR1cmVJZH1cbiAgICAgICAgICAgIG9uU2VsZWN0PXt0aGlzLl9vblNlbGVjdH1cbiAgICAgICAgICAgIG9uVXBkYXRlPXtvblVwZGF0ZX1cbiAgICAgICAgICAgIGdldEVkaXRIYW5kbGVTaGFwZT17Z2V0RWRpdEhhbmRsZVNoYXBlfVxuICAgICAgICAgICAgZ2V0RmVhdHVyZVN0eWxlPXtnZXRGZWF0dXJlU3R5bGV9XG4gICAgICAgICAgICBnZXRFZGl0SGFuZGxlU3R5bGU9e2dldEVkaXRIYW5kbGVTdHlsZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtzaG93QWN0aW9ucyAmJiBCb29sZWFuKHNlbGVjdGVkRmVhdHVyZUlkKSA/IChcbiAgICAgICAgICAgIDxGZWF0dXJlQWN0aW9uUGFuZWxcbiAgICAgICAgICAgICAgc2VsZWN0ZWRGZWF0dXJlPXtnZXQoZWRpdG9yLCBbJ3NlbGVjdGVkRmVhdHVyZSddKX1cbiAgICAgICAgICAgICAgZGF0YXNldHM9e2RhdGFzZXRzfVxuICAgICAgICAgICAgICBsYXllcnM9e2F2YWlsYWJsZUxheWVyc31cbiAgICAgICAgICAgICAgY3VycmVudEZpbHRlcj17Y3VycmVudEZpbHRlcn1cbiAgICAgICAgICAgICAgb25DbG9zZT17dGhpcy5fY2xvc2VGZWF0dXJlQWN0aW9ufVxuICAgICAgICAgICAgICBvbkRlbGV0ZUZlYXR1cmU9e3RoaXMuX29uRGVsZXRlU2VsZWN0ZWRGZWF0dXJlfVxuICAgICAgICAgICAgICBvblRvZ2dsZUxheWVyPXt0aGlzLl9vblRvZ2dsZUxheWVyfVxuICAgICAgICAgICAgICBwb3NpdGlvbj17bGFzdFBvc2l0aW9ufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9TdHlsZWRXcmFwcGVyPlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBFZGl0b3IgPSAoUmVhY3QubWVtbyhFZGl0b3JVbm1lbW9pemVkKSBhcyB1bmtub3duKSBhcyB0eXBlb2YgRWRpdG9yVW5tZW1vaXplZDtcbiAgRWRpdG9yLmRpc3BsYXlOYW1lID0gJ0VkaXRvcic7XG4gIHJldHVybiBFZGl0b3I7XG59XG4iXX0=