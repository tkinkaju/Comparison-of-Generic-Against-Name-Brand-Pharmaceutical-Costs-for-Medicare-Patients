import React from 'react';
import TimeWidgetFactory from './filters/time-widget';
import AnimationControlFactory from './common/animation-control/animation-control';
import AnimationControllerFactory from './common/animation-control/animation-controller';
import { AnimationConfig, TimeRangeFilter } from '@kepler.gl/types';
interface FilterAnimationControllerProps {
    filter: TimeRangeFilter & {
        animationWindow?: string;
    };
    filterIdx: number;
    setFilterAnimationTime: (idx: number, value: string, a: any[]) => void;
}
export declare function FilterAnimationControllerFactory(AnimationController: ReturnType<typeof AnimationControllerFactory>): React.FC<FilterAnimationControllerProps>;
export declare namespace FilterAnimationControllerFactory {
    var deps: (typeof AnimationControllerFactory)[];
}
interface LayerAnimationControllerProps {
    animationConfig: AnimationConfig & {
        timeSteps?: number[] | null;
    };
    setLayerAnimationTime: (x: number) => void;
}
export declare function LayerAnimationControllerFactory(AnimationController: ReturnType<typeof AnimationControllerFactory>): React.FC<LayerAnimationControllerProps>;
export declare namespace LayerAnimationControllerFactory {
    var deps: (typeof AnimationControllerFactory)[];
}
declare function BottomWidgetFactory(TimeWidget: ReturnType<typeof TimeWidgetFactory>, AnimationControl: ReturnType<typeof AnimationControlFactory>, FilterAnimationController: ReturnType<typeof FilterAnimationControllerFactory>, LayerAnimationController: ReturnType<typeof LayerAnimationControllerFactory>): React.ForwardRefExoticComponent<{
    rootRef: React.ForwardedRef<HTMLDivElement>;
    containerW: number;
} & {
    filters: import("@kepler.gl/types").Filter[];
    datasets: import("@kepler.gl/table").Datasets;
    uiState: import("@kepler.gl/types").UiState;
    layers: import("@kepler.gl/layers/dist/base-layer").default[];
    animationConfig: AnimationConfig;
    visStateActions: typeof import("@kepler.gl/actions/dist/vis-state-actions");
    toggleModal: (id: string | null) => {
        payload: string | null;
        type: "@@kepler.gl/TOGGLE_MODAL";
    };
    sidePanelWidth: any;
} & React.RefAttributes<unknown>>;
declare namespace BottomWidgetFactory {
    var deps: (typeof TimeWidgetFactory | typeof AnimationControlFactory | typeof LayerAnimationControllerFactory | typeof FilterAnimationControllerFactory)[];
}
export default BottomWidgetFactory;
