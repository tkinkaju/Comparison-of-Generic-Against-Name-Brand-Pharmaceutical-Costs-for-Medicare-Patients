import React, { Dispatch } from 'react';
import { FeatureFlags } from './context';
import { OnErrorCallBack, OnSuccessCallBack } from '@kepler.gl/types';
import { MapStateActions, MapStyleActions, ProviderActions, UIStateActions, VisStateActions } from '@kepler.gl/actions';
declare type KeplerGlActions = {
    visStateActions: typeof VisStateActions;
    mapStateActions: typeof MapStateActions;
    mapStyleActions: typeof MapStyleActions;
    uiStateActions: typeof UIStateActions;
    providerActions: typeof ProviderActions;
};
import SidePanelFactory from './side-panel';
import MapContainerFactory from './map-container';
import MapsLayoutFactory from './maps-layout';
import BottomWidgetFactory from './bottom-widget';
import ModalContainerFactory from './modal-container';
import PlotContainerFactory from './plot-container';
import NotificationPanelFactory from './notification-panel';
import GeoCoderPanelFactory from './geocoder-panel';
import { KeplerGlState } from '@kepler.gl/reducers';
import { Provider } from '@kepler.gl/cloud-providers';
export declare const mapFieldsSelector: (props: KeplerGLProps) => {
    getMapboxRef: (() => React.RefObject<any>) | undefined;
    mapboxApiAccessToken: string;
    mapboxApiUrl: string;
    mapState: import("@kepler.gl/types").MapState;
    mapStyle: import("@kepler.gl/reducers").MapStyle;
    onDeckInitialized: (() => void) | undefined;
    onViewStateChange: (() => void) | undefined;
    deckGlProps: object | undefined;
    uiStateActions: typeof UIStateActions;
    visStateActions: typeof VisStateActions;
    mapStateActions: typeof MapStateActions;
    visState: import("@kepler.gl/schemas").VisState;
    activeSidePanel: string;
    mapControls: import("@kepler.gl/types").MapControls;
    readOnly: boolean;
    locale: string;
    topMapContainerProps: object | undefined;
    bottomMapContainerProps: object | undefined;
};
export declare function getVisibleDatasets(datasets: any): {};
export declare const sidePanelSelector: (props: KeplerGLProps, availableProviders: any, filteredDatasets: any) => {
    appName: string;
    version: string;
    appWebsite: any;
    mapStyle: import("@kepler.gl/reducers").MapStyle;
    onSaveMap: (() => void) | undefined;
    uiState: import("@kepler.gl/types").UiState;
    mapStyleActions: typeof MapStyleActions;
    visStateActions: typeof VisStateActions;
    uiStateActions: typeof UIStateActions;
    mapStateActions: typeof MapStateActions;
    datasets: any;
    filters: import("@kepler.gl/types").Filter[];
    layers: import("@kepler.gl/layers/dist/base-layer").default[];
    layerOrder: number[];
    layerClasses: {
        point: typeof import("@kepler.gl/layers/dist/point-layer/point-layer").default;
        arc: typeof import("@kepler.gl/layers/dist/arc-layer/arc-layer").default;
        line: typeof import("@kepler.gl/layers/dist/line-layer/line-layer").default;
        grid: typeof import("@kepler.gl/layers/dist/grid-layer/grid-layer").default;
        hexagon: typeof import("@kepler.gl/layers/dist/hexagon-layer/hexagon-layer").default;
        geojson: typeof import("@kepler.gl/layers/dist/geojson-layer/geojson-layer").default;
        cluster: typeof import("@kepler.gl/layers/dist/cluster-layer/cluster-layer").default;
        icon: typeof import("@kepler.gl/layers/dist/icon-layer/icon-layer").default;
        heatmap: typeof import("@kepler.gl/layers/dist/heatmap-layer/heatmap-layer").default;
        hexagonId: typeof import("@kepler.gl/layers/dist/h3-hexagon-layer/h3-hexagon-layer").default;
        "3D": typeof import("@kepler.gl/layers/dist/scenegraph-layer/scenegraph-layer").default;
        trip: typeof import("@kepler.gl/layers/dist/trip-layer/trip-layer").default;
        s2: typeof import("@kepler.gl/layers/dist/s2-geometry-layer/s2-geometry-layer").default;
    };
    interactionConfig: import("@kepler.gl/types").InteractionConfig;
    mapInfo: import("@kepler.gl/types").MapInfo;
    layerBlending: string;
    width: number;
    availableProviders: any;
    mapSaved: string | null;
};
export declare const plotContainerSelector: (props: KeplerGLProps) => {
    width: number | undefined;
    height: number | undefined;
    exportImageSetting: import("@kepler.gl/types").ExportImage;
    mapFields: {
        getMapboxRef: (() => React.RefObject<any>) | undefined;
        mapboxApiAccessToken: string;
        mapboxApiUrl: string;
        mapState: import("@kepler.gl/types").MapState;
        mapStyle: import("@kepler.gl/reducers").MapStyle;
        onDeckInitialized: (() => void) | undefined;
        onViewStateChange: (() => void) | undefined;
        deckGlProps: object | undefined;
        uiStateActions: typeof UIStateActions;
        visStateActions: typeof VisStateActions;
        mapStateActions: typeof MapStateActions;
        visState: import("@kepler.gl/schemas").VisState;
        activeSidePanel: string;
        mapControls: import("@kepler.gl/types").MapControls;
        readOnly: boolean;
        locale: string;
        topMapContainerProps: object | undefined;
        bottomMapContainerProps: object | undefined;
    };
    addNotification: (notification: object) => {
        payload: object;
        type: "@@kepler.gl/ADD_NOTIFICATION";
    };
    setExportImageSetting: (newSetting: Partial<import("@kepler.gl/constants").ExportImage>) => {
        payload: Partial<import("@kepler.gl/constants").ExportImage>;
        type: "@@kepler.gl/SET_EXPORT_IMAGE_SETTING";
    };
    setExportImageDataUri: (dataUri: string) => {
        payload: string;
        type: "@@kepler.gl/SET_EXPORT_IMAGE_DATA_URI";
    };
    setExportImageError: (error: Error) => {
        payload: Error;
        type: "@@kepler.gl/SET_EXPORT_IMAGE_ERROR";
    };
    splitMaps: import("@kepler.gl/types").SplitMap[];
};
export declare const isSplitSelector: (props: KeplerGLProps) => boolean;
export declare const bottomWidgetSelector: (props: KeplerGLProps, theme: any) => {
    filters: import("@kepler.gl/types").Filter[];
    datasets: import("@kepler.gl/table").Datasets;
    uiState: import("@kepler.gl/types").UiState;
    layers: import("@kepler.gl/layers/dist/base-layer").default[];
    animationConfig: import("@kepler.gl/types").AnimationConfig;
    visStateActions: typeof VisStateActions;
    toggleModal: (id: string | null) => {
        payload: string | null;
        type: "@@kepler.gl/TOGGLE_MODAL";
    };
    sidePanelWidth: any;
};
export declare const modalContainerSelector: (props: KeplerGLProps, rootNode: any) => {
    appName: string;
    mapStyle: import("@kepler.gl/reducers").MapStyle;
    visState: import("@kepler.gl/schemas").VisState;
    mapState: import("@kepler.gl/types").MapState;
    uiState: import("@kepler.gl/types").UiState;
    providerState: import("@kepler.gl/reducers").ProviderState;
    mapboxApiAccessToken: string;
    mapboxApiUrl: string | undefined;
    visStateActions: typeof VisStateActions;
    uiStateActions: typeof UIStateActions;
    mapStyleActions: typeof MapStyleActions;
    providerActions: typeof ProviderActions;
    rootNode: any;
    cloudProviders: Provider[];
    onExportToCloudSuccess: OnSuccessCallBack | undefined;
    onLoadCloudMapSuccess: OnSuccessCallBack | undefined;
    onLoadCloudMapError: OnErrorCallBack | undefined;
    onExportToCloudError: OnErrorCallBack | undefined;
};
export declare const geoCoderPanelSelector: (props: KeplerGLProps) => {
    isGeocoderEnabled: boolean;
    mapboxApiAccessToken: string;
    mapState: import("@kepler.gl/types").MapState;
    updateVisData: typeof VisStateActions.updateVisData;
    removeDataset: typeof VisStateActions.removeDataset;
    updateMap: (payload: import("@kepler.gl/types").Viewport) => {
        payload: import("@kepler.gl/types").Viewport;
        type: "@@kepler.gl/UPDATE_MAP";
    };
};
export declare const notificationPanelSelector: (props: KeplerGLProps) => {
    removeNotification: (id: string) => {
        payload: string;
        type: "@@kepler.gl/REMOVE_NOTIFICATION";
    };
    notifications: import("@kepler.gl/types").Notifications[];
};
export declare const DEFAULT_KEPLER_GL_PROPS: {
    mapStyles: never[];
    mapStylesReplaceDefault: boolean;
    mapboxApiUrl: string;
    width: number;
    height: number;
    appName: string;
    version: string;
    sidePanelWidth: number;
    theme: {};
    cloudProviders: never[];
    readOnly: boolean;
    featureFlags: {};
};
declare type KeplerGLBasicProps = {
    mapboxApiAccessToken: string;
    mapboxApiUrl?: string;
    id: string;
    width?: number;
    height?: number;
    appWebsite?: any;
    onSaveMap?: () => void;
    onViewStateChange?: () => void;
    onDeckInitialized?: () => void;
    onKeplerGlInitialized?: () => void;
    getMapboxRef?: () => React.RefObject<any>;
    mapStyles?: {
        id: string;
        style?: object;
    }[];
    mapStylesReplaceDefault?: boolean;
    appName?: string;
    version?: string;
    sidePanelWidth?: number;
    theme?: object;
    cloudProviders?: Provider[];
    deckGlProps?: object;
    onLoadCloudMapSuccess?: OnSuccessCallBack;
    onLoadCloudMapError?: OnErrorCallBack;
    onExportToCloudSuccess?: OnSuccessCallBack;
    onExportToCloudError?: OnErrorCallBack;
    readOnly?: boolean;
    featureFlags?: FeatureFlags;
    localeMessages?: {
        [key: string]: {
            [key: string]: string;
        };
    };
    dispatch: Dispatch<any>;
    topMapContainerProps?: object;
    bottomMapContainerProps?: object;
};
declare type KeplerGLProps = KeplerGlState & KeplerGlActions & KeplerGLBasicProps;
declare function KeplerGlFactory(BottomWidget: ReturnType<typeof BottomWidgetFactory>, GeoCoderPanel: ReturnType<typeof GeoCoderPanelFactory>, MapContainer: ReturnType<typeof MapContainerFactory>, MapsLayout: ReturnType<typeof MapsLayoutFactory>, ModalContainer: ReturnType<typeof ModalContainerFactory>, SidePanel: ReturnType<typeof SidePanelFactory>, PlotContainer: ReturnType<typeof PlotContainerFactory>, NotificationPanel: ReturnType<typeof NotificationPanelFactory>): React.ComponentType<KeplerGLBasicProps & {
    selector: (...args: any[]) => KeplerGlState;
}>;
declare namespace KeplerGlFactory {
    var deps: (typeof NotificationPanelFactory | typeof BottomWidgetFactory | typeof GeoCoderPanelFactory | typeof MapContainerFactory | typeof MapsLayoutFactory | typeof ModalContainerFactory | typeof SidePanelFactory | typeof PlotContainerFactory)[];
}
export declare function mapStateToProps(state: KeplerGlState, props: KeplerGLProps): {
    visState: import("@kepler.gl/schemas").VisState;
    mapStyle: import("@kepler.gl/reducers").MapStyle;
    mapState: import("@kepler.gl/types").MapState;
    uiState: import("@kepler.gl/types").UiState;
    providerState: import("@kepler.gl/reducers").ProviderState;
    visStateActions: typeof VisStateActions;
    mapStateActions: typeof MapStateActions;
    mapStyleActions: typeof MapStyleActions;
    uiStateActions: typeof UIStateActions;
    providerActions: typeof ProviderActions;
    mapboxApiAccessToken: string;
    mapboxApiUrl?: string | undefined;
    id: string;
    width?: number | undefined;
    height?: number | undefined;
    appWebsite?: any;
    onSaveMap?: (() => void) | undefined;
    onViewStateChange?: (() => void) | undefined;
    onDeckInitialized?: (() => void) | undefined;
    onKeplerGlInitialized?: (() => void) | undefined;
    getMapboxRef?: (() => React.RefObject<any>) | undefined;
    mapStyles?: {
        id: string;
        style?: object | undefined;
    }[] | undefined;
    mapStylesReplaceDefault?: boolean | undefined;
    appName?: string | undefined;
    version?: string | undefined;
    sidePanelWidth?: number | undefined;
    theme?: object | undefined;
    cloudProviders?: Provider[] | undefined;
    deckGlProps?: object | undefined;
    onLoadCloudMapSuccess?: OnSuccessCallBack | undefined;
    onLoadCloudMapError?: OnErrorCallBack | undefined;
    onExportToCloudSuccess?: OnSuccessCallBack | undefined;
    onExportToCloudError?: OnErrorCallBack | undefined;
    readOnly?: boolean | undefined;
    featureFlags?: FeatureFlags | undefined;
    localeMessages?: {
        [key: string]: {
            [key: string]: string;
        };
    } | undefined;
    dispatch: React.Dispatch<any>;
    topMapContainerProps?: object | undefined;
    bottomMapContainerProps?: object | undefined;
};
export default KeplerGlFactory;
