/** Returns a function that logs a value with a given message */
export declare function log(text: string): (value: any) => void;
/** Wraps a value in an object and stores it the `payload` field */
export declare function payload_<P>(payload: P): {
    payload: P;
};
/** Wraps a value in an object and stores it the `payload` field */
export declare function apply_<State, P>(updater: (state: State, nextPayload: P) => State, payload: P): (state: State) => State;
export declare function with_<State>(fn: (state: State) => (nextState: State) => State): (state: State) => State;
export declare function if_<State>(pred: boolean, fn: (state: State) => State): (state: State) => State;
export declare function compose_<State>(fns: Array<(s: State) => State>): (s: State) => State;
/** Returns a reducer function that merges props with state */
export declare function merge_<Props>(obj: Props): <State>(state: State) => State;
export declare function pick_<Prop extends string>(prop: Prop): <Value>(fn: (p: Value) => Value) => <State extends Record<Prop, Value>>(state: State) => State;
export declare function swap_<X extends {
    id: string;
}>(item: X): (arr: X[]) => X[];
export declare function findById<X extends {
    id: string;
}>(id: string): (arr: X[]) => X | undefined;
export declare function map_<X>(fn: (state: X) => X): (arr: X[]) => X[];
