// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.providerStateReducerFactory = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var providerStateUpdaters = _interopRequireWildcard(require("./provider-state-updaters"));

var _actions = require("@kepler.gl/actions");

var _actionHandler;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Important: Do not rename `actionHandler` or the assignment pattern of property value.
 * It is used to generate documentation
 */
var actionHandler = (_actionHandler = {}, (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.EXPORT_FILE_TO_CLOUD, providerStateUpdaters.exportFileToCloudUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.EXPORT_FILE_SUCCESS, providerStateUpdaters.exportFileSuccessUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.EXPORT_FILE_ERROR, providerStateUpdaters.exportFileErrorUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.RESET_PROVIDER_STATUS, providerStateUpdaters.resetProviderStatusUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.SET_CLOUD_PROVIDER, providerStateUpdaters.setCloudProviderUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.POST_SAVE_LOAD_SUCCESS, providerStateUpdaters.postSaveLoadSuccessUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.LOAD_CLOUD_MAP, providerStateUpdaters.loadCloudMapUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.LOAD_CLOUD_MAP_SUCCESS, providerStateUpdaters.loadCloudMapSuccessUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.LOAD_CLOUD_MAP_ERROR, providerStateUpdaters.loadCloudMapErrorUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.GET_SAVED_MAPS, providerStateUpdaters.getSavedMapsUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.GET_SAVED_MAPS_SUCCESS, providerStateUpdaters.getSavedMapsSuccessUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ProviderActionTypes.GET_SAVED_MAPS_ERROR, providerStateUpdaters.getSavedMapsErrorUpdater), _actionHandler); // construct provider-state reducer

var providerStateReducerFactory = function providerStateReducerFactory() {
  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return (// @ts-expect-error
    (0, _reduxActions.handleActions)(actionHandler, _objectSpread(_objectSpread(_objectSpread({}, providerStateUpdaters.INITIAL_PROVIDER_STATE), initialState), {}, {
      initialState: initialState
    }))
  );
};

exports.providerStateReducerFactory = providerStateReducerFactory;

var _default = providerStateReducerFactory();

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm92aWRlci1zdGF0ZS50cyJdLCJuYW1lcyI6WyJhY3Rpb25IYW5kbGVyIiwiQWN0aW9uVHlwZXMiLCJFWFBPUlRfRklMRV9UT19DTE9VRCIsInByb3ZpZGVyU3RhdGVVcGRhdGVycyIsImV4cG9ydEZpbGVUb0Nsb3VkVXBkYXRlciIsIkVYUE9SVF9GSUxFX1NVQ0NFU1MiLCJleHBvcnRGaWxlU3VjY2Vzc1VwZGF0ZXIiLCJFWFBPUlRfRklMRV9FUlJPUiIsImV4cG9ydEZpbGVFcnJvclVwZGF0ZXIiLCJSRVNFVF9QUk9WSURFUl9TVEFUVVMiLCJyZXNldFByb3ZpZGVyU3RhdHVzVXBkYXRlciIsIlNFVF9DTE9VRF9QUk9WSURFUiIsInNldENsb3VkUHJvdmlkZXJVcGRhdGVyIiwiUE9TVF9TQVZFX0xPQURfU1VDQ0VTUyIsInBvc3RTYXZlTG9hZFN1Y2Nlc3NVcGRhdGVyIiwiTE9BRF9DTE9VRF9NQVAiLCJsb2FkQ2xvdWRNYXBVcGRhdGVyIiwiTE9BRF9DTE9VRF9NQVBfU1VDQ0VTUyIsImxvYWRDbG91ZE1hcFN1Y2Nlc3NVcGRhdGVyIiwiTE9BRF9DTE9VRF9NQVBfRVJST1IiLCJsb2FkQ2xvdWRNYXBFcnJvclVwZGF0ZXIiLCJHRVRfU0FWRURfTUFQUyIsImdldFNhdmVkTWFwc1VwZGF0ZXIiLCJHRVRfU0FWRURfTUFQU19TVUNDRVNTIiwiZ2V0U2F2ZWRNYXBzU3VjY2Vzc1VwZGF0ZXIiLCJHRVRfU0FWRURfTUFQU19FUlJPUiIsImdldFNhdmVkTWFwc0Vycm9yVXBkYXRlciIsInByb3ZpZGVyU3RhdGVSZWR1Y2VyRmFjdG9yeSIsImluaXRpYWxTdGF0ZSIsIklOSVRJQUxfUFJPVklERVJfU1RBVEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxhQUFhLDBFQUNoQkMsNkJBQVlDLG9CQURJLEVBQ21CQyxxQkFBcUIsQ0FBQ0Msd0JBRHpDLG9EQUVoQkgsNkJBQVlJLG1CQUZJLEVBRWtCRixxQkFBcUIsQ0FBQ0csd0JBRnhDLG9EQUdoQkwsNkJBQVlNLGlCQUhJLEVBR2dCSixxQkFBcUIsQ0FBQ0ssc0JBSHRDLG9EQUloQlAsNkJBQVlRLHFCQUpJLEVBSW9CTixxQkFBcUIsQ0FBQ08sMEJBSjFDLG9EQUtoQlQsNkJBQVlVLGtCQUxJLEVBS2lCUixxQkFBcUIsQ0FBQ1MsdUJBTHZDLG9EQU1oQlgsNkJBQVlZLHNCQU5JLEVBTXFCVixxQkFBcUIsQ0FBQ1csMEJBTjNDLG9EQU9oQmIsNkJBQVljLGNBUEksRUFPYVoscUJBQXFCLENBQUNhLG1CQVBuQyxvREFRaEJmLDZCQUFZZ0Isc0JBUkksRUFRcUJkLHFCQUFxQixDQUFDZSwwQkFSM0Msb0RBU2hCakIsNkJBQVlrQixvQkFUSSxFQVNtQmhCLHFCQUFxQixDQUFDaUIsd0JBVHpDLG9EQVVoQm5CLDZCQUFZb0IsY0FWSSxFQVVhbEIscUJBQXFCLENBQUNtQixtQkFWbkMsb0RBV2hCckIsNkJBQVlzQixzQkFYSSxFQVdxQnBCLHFCQUFxQixDQUFDcUIsMEJBWDNDLG9EQVloQnZCLDZCQUFZd0Isb0JBWkksRUFZbUJ0QixxQkFBcUIsQ0FBQ3VCLHdCQVp6QyxrQkFBbkIsQyxDQWVBOztBQUNPLElBQU1DLDJCQUEyQixHQUFHLFNBQTlCQSwyQkFBOEI7QUFBQSxNQUFDQyxZQUFELHVFQUFnQixFQUFoQjtBQUFBLFNBQ3pDO0FBQ0EscUNBQWM1QixhQUFkLGdEQUNLRyxxQkFBcUIsQ0FBQzBCLHNCQUQzQixHQUVLRCxZQUZMO0FBR0VBLE1BQUFBLFlBQVksRUFBWkE7QUFIRjtBQUZ5QztBQUFBLENBQXBDOzs7O2VBUVFELDJCQUEyQixFIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIyIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtoYW5kbGVBY3Rpb25zfSBmcm9tICdyZWR1eC1hY3Rpb25zJztcbmltcG9ydCAqIGFzIHByb3ZpZGVyU3RhdGVVcGRhdGVycyBmcm9tICcuL3Byb3ZpZGVyLXN0YXRlLXVwZGF0ZXJzJztcbmltcG9ydCB7UHJvdmlkZXJBY3Rpb25UeXBlcyBhcyBBY3Rpb25UeXBlc30gZnJvbSAnQGtlcGxlci5nbC9hY3Rpb25zJztcblxuLyoqXG4gKiBJbXBvcnRhbnQ6IERvIG5vdCByZW5hbWUgYGFjdGlvbkhhbmRsZXJgIG9yIHRoZSBhc3NpZ25tZW50IHBhdHRlcm4gb2YgcHJvcGVydHkgdmFsdWUuXG4gKiBJdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGRvY3VtZW50YXRpb25cbiAqL1xuY29uc3QgYWN0aW9uSGFuZGxlciA9IHtcbiAgW0FjdGlvblR5cGVzLkVYUE9SVF9GSUxFX1RPX0NMT1VEXTogcHJvdmlkZXJTdGF0ZVVwZGF0ZXJzLmV4cG9ydEZpbGVUb0Nsb3VkVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLkVYUE9SVF9GSUxFX1NVQ0NFU1NdOiBwcm92aWRlclN0YXRlVXBkYXRlcnMuZXhwb3J0RmlsZVN1Y2Nlc3NVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuRVhQT1JUX0ZJTEVfRVJST1JdOiBwcm92aWRlclN0YXRlVXBkYXRlcnMuZXhwb3J0RmlsZUVycm9yVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLlJFU0VUX1BST1ZJREVSX1NUQVRVU106IHByb3ZpZGVyU3RhdGVVcGRhdGVycy5yZXNldFByb3ZpZGVyU3RhdHVzVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLlNFVF9DTE9VRF9QUk9WSURFUl06IHByb3ZpZGVyU3RhdGVVcGRhdGVycy5zZXRDbG91ZFByb3ZpZGVyVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLlBPU1RfU0FWRV9MT0FEX1NVQ0NFU1NdOiBwcm92aWRlclN0YXRlVXBkYXRlcnMucG9zdFNhdmVMb2FkU3VjY2Vzc1VwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5MT0FEX0NMT1VEX01BUF06IHByb3ZpZGVyU3RhdGVVcGRhdGVycy5sb2FkQ2xvdWRNYXBVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuTE9BRF9DTE9VRF9NQVBfU1VDQ0VTU106IHByb3ZpZGVyU3RhdGVVcGRhdGVycy5sb2FkQ2xvdWRNYXBTdWNjZXNzVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLkxPQURfQ0xPVURfTUFQX0VSUk9SXTogcHJvdmlkZXJTdGF0ZVVwZGF0ZXJzLmxvYWRDbG91ZE1hcEVycm9yVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLkdFVF9TQVZFRF9NQVBTXTogcHJvdmlkZXJTdGF0ZVVwZGF0ZXJzLmdldFNhdmVkTWFwc1VwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5HRVRfU0FWRURfTUFQU19TVUNDRVNTXTogcHJvdmlkZXJTdGF0ZVVwZGF0ZXJzLmdldFNhdmVkTWFwc1N1Y2Nlc3NVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuR0VUX1NBVkVEX01BUFNfRVJST1JdOiBwcm92aWRlclN0YXRlVXBkYXRlcnMuZ2V0U2F2ZWRNYXBzRXJyb3JVcGRhdGVyXG59O1xuXG4vLyBjb25zdHJ1Y3QgcHJvdmlkZXItc3RhdGUgcmVkdWNlclxuZXhwb3J0IGNvbnN0IHByb3ZpZGVyU3RhdGVSZWR1Y2VyRmFjdG9yeSA9IChpbml0aWFsU3RhdGUgPSB7fSkgPT5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICBoYW5kbGVBY3Rpb25zKGFjdGlvbkhhbmRsZXIsIHtcbiAgICAuLi5wcm92aWRlclN0YXRlVXBkYXRlcnMuSU5JVElBTF9QUk9WSURFUl9TVEFURSxcbiAgICAuLi5pbml0aWFsU3RhdGUsXG4gICAgaW5pdGlhbFN0YXRlXG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCBwcm92aWRlclN0YXRlUmVkdWNlckZhY3RvcnkoKTtcbiJdfQ==