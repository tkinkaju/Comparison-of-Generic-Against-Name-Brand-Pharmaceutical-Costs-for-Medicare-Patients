import { MapState, UiState, AddDataToMapPayload } from '@kepler.gl/types';
import { MapStyle } from './map-style-updaters';
import { ProviderState } from './provider-state-updaters';
import { loadFilesSuccessUpdaterAction } from '@kepler.gl/actions';
import { VisState } from '@kepler.gl/schemas';
export declare type KeplerGlState = {
    visState: VisState;
    mapState: MapState;
    mapStyle: MapStyle;
    uiState: UiState;
    providerState: ProviderState;
};
export declare const isValidConfig: (config: any) => unknown;
export declare const defaultAddDataToMapOptions: {
    centerMap: boolean;
    keepExistingConfig: boolean;
    autoCreateLayers: boolean;
};
/**
 * Combine data and full configuration update in a single action
 *
 * @memberof combinedUpdaters
 * @param {Object} state kepler.gl instance state, containing all subreducer state
 * @param {Object} action
 * @param {Object} action.payload `{datasets, options, config}`
 * @param action.payload.datasets - ***required** datasets can be a dataset or an array of datasets
 * Each dataset object needs to have `info` and `data` property.
 * @param [action.payload.options] option object `{centerMap: true}`
 * @param [action.payload.config] map config
 * @param [action.payload.info] map info contains title and description
 * @returns nextState
 *
 * @typedef {Object} Dataset
 * @property info -info of a dataset
 * @property info.id - id of this dataset. If config is defined, `id` should matches the `dataId` in config.
 * @property info.label - A display name of this dataset
 * @property data - ***required** The data object, in a tabular format with 2 properties `fields` and `rows`
 * @property data.fields - ***required** Array of fields,
 * @property data.fields.name - ***required** Name of the field,
 * @property data.rows - ***required** Array of rows, in a tabular format with `fields` and `rows`
 *
 * @public
 */
export declare const addDataToMapUpdater: (state: KeplerGlState, { payload }: {
    payload: AddDataToMapPayload;
}) => KeplerGlState;
export declare const loadFilesSuccessUpdater: (state: KeplerGlState, action: loadFilesSuccessUpdaterAction) => KeplerGlState;
export declare const addDataToMapComposed: (state: KeplerGlState, { payload }: {
    payload: AddDataToMapPayload;
}) => KeplerGlState;
