// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_COLOR_RANGE = exports.COLOR_RANGES = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _colorbrewer = _interopRequireDefault(require("colorbrewer"));

var _customColorRanges = require("./custom-color-ranges");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Add colorbrewer color schemes (Data Science requirement)
// See http://colorbrewer2.org/
var colorBrewerMap = Object.entries(_colorbrewer["default"].schemeGroups).reduce(function (accu, _ref) {
  var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
      type = _ref2[0],
      palettes = _ref2[1];

  return _objectSpread(_objectSpread({}, accu), palettes.reduce(function (group, name) {
    return _objectSpread(_objectSpread({}, group), {}, (0, _defineProperty2["default"])({}, name, type));
  }, {}));
}, {});
var colorRanges = (0, _toConsumableArray2["default"])(_customColorRanges.VizColorPalette);

for (var _i = 0, _Object$entries = Object.entries(_colorbrewer["default"]); _i < _Object$entries.length; _i++) {
  var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
      keyName = _Object$entries$_i[0],
      colorScheme = _Object$entries$_i[1];

  if (keyName !== 'schemeGroups') {
    for (var _i2 = 0, _Object$entries2 = Object.entries(colorScheme); _i2 < _Object$entries2.length; _i2++) {
      var _Object$entries2$_i = (0, _slicedToArray2["default"])(_Object$entries2[_i2], 2),
          lenKey = _Object$entries2$_i[0],
          colors = _Object$entries2$_i[1];

      colorRanges.push({
        name: "ColorBrewer ".concat(keyName, "-").concat(lenKey),
        type: colorBrewerMap[keyName],
        category: 'ColorBrewer',
        colors: colors
      });
    }
  }
}

var COLOR_RANGES = colorRanges;
exports.COLOR_RANGES = COLOR_RANGES;
var DEFAULT_COLOR_RANGE = colorRanges.find(function (_ref3) {
  var name = _ref3.name;
  return name === 'Global Warming';
}) || {
  name: 'Global Warming',
  type: 'SEQ',
  category: 'Uber',
  colors: ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']
};
exports.DEFAULT_COLOR_RANGE = DEFAULT_COLOR_RANGE;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb2xvci1yYW5nZXMudHMiXSwibmFtZXMiOlsiY29sb3JCcmV3ZXJNYXAiLCJPYmplY3QiLCJlbnRyaWVzIiwiY29sb3JicmV3ZXIiLCJzY2hlbWVHcm91cHMiLCJyZWR1Y2UiLCJhY2N1IiwidHlwZSIsInBhbGV0dGVzIiwiZ3JvdXAiLCJuYW1lIiwiY29sb3JSYW5nZXMiLCJWaXpDb2xvclBhbGV0dGUiLCJrZXlOYW1lIiwiY29sb3JTY2hlbWUiLCJsZW5LZXkiLCJjb2xvcnMiLCJwdXNoIiwiY2F0ZWdvcnkiLCJDT0xPUl9SQU5HRVMiLCJERUZBVUxUX0NPTE9SX1JBTkdFIiwiZmluZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOztBQUVBOzs7Ozs7QUFnQkE7QUFDQTtBQUVBLElBQU1BLGNBQWMsR0FBR0MsTUFBTSxDQUFDQyxPQUFQLENBQWVDLHdCQUFZQyxZQUEzQixFQUF5Q0MsTUFBekMsQ0FDckIsVUFBQ0MsSUFBRDtBQUFBO0FBQUEsTUFBUUMsSUFBUjtBQUFBLE1BQWNDLFFBQWQ7O0FBQUEseUNBQ0tGLElBREwsR0FFS0UsUUFBUSxDQUFDSCxNQUFULENBQ0QsVUFBQ0ksS0FBRCxFQUFRQyxJQUFSO0FBQUEsMkNBQ0tELEtBREwsNENBRUdDLElBRkgsRUFFVUgsSUFGVjtBQUFBLEdBREMsRUFLRCxFQUxDLENBRkw7QUFBQSxDQURxQixFQVdyQixFQVhxQixDQUF2QjtBQWNBLElBQU1JLFdBQXlCLHVDQUFPQyxrQ0FBUCxDQUEvQjs7QUFFQSxtQ0FBcUNYLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyx1QkFBZixDQUFyQyxxQ0FBa0U7QUFBQTtBQUFBLE1BQXREVSxPQUFzRDtBQUFBLE1BQTdDQyxXQUE2Qzs7QUFDaEUsTUFBSUQsT0FBTyxLQUFLLGNBQWhCLEVBQWdDO0FBQzlCLHlDQUErQlosTUFBTSxDQUFDQyxPQUFQLENBQWVZLFdBQWYsQ0FBL0Isd0NBQW1FO0FBQUE7QUFBQSxVQUF2REMsTUFBdUQ7QUFBQSxVQUEvQ0MsTUFBK0M7O0FBQ2pFTCxNQUFBQSxXQUFXLENBQUNNLElBQVosQ0FBaUI7QUFDZlAsUUFBQUEsSUFBSSx3QkFBaUJHLE9BQWpCLGNBQTRCRSxNQUE1QixDQURXO0FBRWZSLFFBQUFBLElBQUksRUFBRVAsY0FBYyxDQUFDYSxPQUFELENBRkw7QUFHZkssUUFBQUEsUUFBUSxFQUFFLGFBSEs7QUFJZkYsUUFBQUEsTUFBTSxFQUFFQTtBQUpPLE9BQWpCO0FBTUQ7QUFDRjtBQUNGOztBQUVNLElBQU1HLFlBQVksR0FBR1IsV0FBckI7O0FBRUEsSUFBTVMsbUJBQW1CLEdBQUdULFdBQVcsQ0FBQ1UsSUFBWixDQUFpQjtBQUFBLE1BQUVYLElBQUYsU0FBRUEsSUFBRjtBQUFBLFNBQVlBLElBQUksS0FBSyxnQkFBckI7QUFBQSxDQUFqQixLQUEyRDtBQUM1RkEsRUFBQUEsSUFBSSxFQUFFLGdCQURzRjtBQUU1RkgsRUFBQUEsSUFBSSxFQUFFLEtBRnNGO0FBRzVGVyxFQUFBQSxRQUFRLEVBQUUsTUFIa0Y7QUFJNUZGLEVBQUFBLE1BQU0sRUFBRSxDQUFDLFNBQUQsRUFBWSxTQUFaLEVBQXVCLFNBQXZCLEVBQWtDLFNBQWxDLEVBQTZDLFNBQTdDLEVBQXdELFNBQXhEO0FBSm9GLENBQXZGIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIyIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IGNvbG9yYnJld2VyIGZyb20gJ2NvbG9yYnJld2VyJztcbmltcG9ydCB7SGV4Q29sb3J9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IHtWaXpDb2xvclBhbGV0dGV9IGZyb20gJy4vY3VzdG9tLWNvbG9yLXJhbmdlcyc7XG5cbmV4cG9ydCB0eXBlIENvbG9yTWFwID0gW3N0cmluZyB8IG51bWJlciB8IG51bGwsIEhleENvbG9yXVtdO1xuLy8gS2V5IGlzIEhleENvbG9yIGJ1dCBhcyBrZXkgd2UgY2FuIHVzZSBvbmx5IHN0cmluZ1xuZXhwb3J0IHR5cGUgQ29sb3JMZWdlbmRzID0ge1trZXk6IHN0cmluZ106IHN0cmluZ307XG5cbmV4cG9ydCB0eXBlIENvbG9yUmFuZ2UgPSB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIHR5cGU/OiBzdHJpbmc7XG4gIGNhdGVnb3J5Pzogc3RyaW5nO1xuICBjb2xvcnM6IEhleENvbG9yW107XG4gIHJldmVyc2VkPzogYm9vbGVhbjtcbiAgY29sb3JNYXA/OiBDb2xvck1hcDtcbiAgY29sb3JMZWdlbmRzPzogQ29sb3JMZWdlbmRzO1xufTtcblxuLy8gQWRkIGNvbG9yYnJld2VyIGNvbG9yIHNjaGVtZXMgKERhdGEgU2NpZW5jZSByZXF1aXJlbWVudClcbi8vIFNlZSBodHRwOi8vY29sb3JicmV3ZXIyLm9yZy9cblxuY29uc3QgY29sb3JCcmV3ZXJNYXAgPSBPYmplY3QuZW50cmllcyhjb2xvcmJyZXdlci5zY2hlbWVHcm91cHMpLnJlZHVjZShcbiAgKGFjY3UsIFt0eXBlLCBwYWxldHRlc106IFtzdHJpbmcsIGFueV0pID0+ICh7XG4gICAgLi4uYWNjdSxcbiAgICAuLi5wYWxldHRlcy5yZWR1Y2UoXG4gICAgICAoZ3JvdXAsIG5hbWUpID0+ICh7XG4gICAgICAgIC4uLmdyb3VwLFxuICAgICAgICBbbmFtZV06IHR5cGVcbiAgICAgIH0pLFxuICAgICAge31cbiAgICApXG4gIH0pLFxuICB7fVxuKTtcblxuY29uc3QgY29sb3JSYW5nZXM6IENvbG9yUmFuZ2VbXSA9IFsuLi5WaXpDb2xvclBhbGV0dGVdO1xuXG5mb3IgKGNvbnN0IFtrZXlOYW1lLCBjb2xvclNjaGVtZV0gb2YgT2JqZWN0LmVudHJpZXMoY29sb3JicmV3ZXIpKSB7XG4gIGlmIChrZXlOYW1lICE9PSAnc2NoZW1lR3JvdXBzJykge1xuICAgIGZvciAoY29uc3QgW2xlbktleSwgY29sb3JzXSBvZiBPYmplY3QuZW50cmllcyhjb2xvclNjaGVtZSBhcyBhbnkpKSB7XG4gICAgICBjb2xvclJhbmdlcy5wdXNoKHtcbiAgICAgICAgbmFtZTogYENvbG9yQnJld2VyICR7a2V5TmFtZX0tJHtsZW5LZXl9YCxcbiAgICAgICAgdHlwZTogY29sb3JCcmV3ZXJNYXBba2V5TmFtZV0sXG4gICAgICAgIGNhdGVnb3J5OiAnQ29sb3JCcmV3ZXInLFxuICAgICAgICBjb2xvcnM6IGNvbG9ycyBhcyBIZXhDb2xvcltdXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IENPTE9SX1JBTkdFUyA9IGNvbG9yUmFuZ2VzO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9DT0xPUl9SQU5HRSA9IGNvbG9yUmFuZ2VzLmZpbmQoKHtuYW1lfSkgPT4gbmFtZSA9PT0gJ0dsb2JhbCBXYXJtaW5nJykgfHwge1xuICBuYW1lOiAnR2xvYmFsIFdhcm1pbmcnLFxuICB0eXBlOiAnU0VRJyxcbiAgY2F0ZWdvcnk6ICdVYmVyJyxcbiAgY29sb3JzOiBbJyM1QTE4NDYnLCAnIzkwMEMzRicsICcjQzcwMDM5JywgJyNFMzYxMUMnLCAnI0YxOTIwRScsICcjRkZDMzAwJ11cbn07XG4iXX0=