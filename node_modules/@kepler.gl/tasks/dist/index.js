// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UNWRAP_TASK = exports.DELAY_TASK = exports.ACTION_TASK = exports.GET_SAVED_MAPS_TASK = exports.LOAD_CLOUD_MAP_TASK = exports.EXPORT_FILE_TO_CLOUD_TASK = exports.LOAD_MAP_STYLE_TASK = exports.PROCESS_FILE_DATA = exports.LOAD_FILE_TASK = void 0;

var _tasks = _interopRequireWildcard(require("react-palm/tasks"));

var _d3Request = require("d3-request");

var _processors = require("@kepler.gl/processors");var LOAD_FILE_TASK = _tasks["default"].fromPromise(function (_ref) {
  var file = _ref.file,
      fileCache = _ref.fileCache,
      loaders = _ref.loaders,
      loadOptions = _ref.loadOptions;
  return (0, _processors.readFileInBatches)({
    file: file,
    fileCache: fileCache,
    loaders: loaders,
    loadOptions: loadOptions
  });
}, 'LOAD_FILE_TASK');

exports.LOAD_FILE_TASK = LOAD_FILE_TASK;

var PROCESS_FILE_DATA = _tasks["default"].fromPromise(_processors.processFileData, 'PROCESS_FILE_CONTENT');

exports.PROCESS_FILE_DATA = PROCESS_FILE_DATA;
var LOAD_MAP_STYLE_TASK = (0, _tasks.taskCreator)(function (_ref2, success, error) {
  var url = _ref2.url,
      id = _ref2.id;
  return (0, _d3Request.json)(url, function (err, result) {
    if (err) {
      error(err);
    } else {
      if (!result) {
        error(new Error('Map style response is empty'));
      }

      success({
        id: id,
        style: result
      });
    }
  });
}, 'LOAD_MAP_STYLE_TASK');
/**
 * task to upload file to cloud provider
 */

exports.LOAD_MAP_STYLE_TASK = LOAD_MAP_STYLE_TASK;

var EXPORT_FILE_TO_CLOUD_TASK = _tasks["default"].fromPromise(function (_ref3) {
  var provider = _ref3.provider,
      payload = _ref3.payload;
  return provider.uploadMap(payload);
}, 'EXPORT_FILE_TO_CLOUD_TASK');

exports.EXPORT_FILE_TO_CLOUD_TASK = EXPORT_FILE_TO_CLOUD_TASK;

var LOAD_CLOUD_MAP_TASK = _tasks["default"].fromPromise(function (_ref4) {
  var provider = _ref4.provider,
      payload = _ref4.payload;
  return provider.downloadMap(payload);
}, 'LOAD_CLOUD_MAP_TASK');

exports.LOAD_CLOUD_MAP_TASK = LOAD_CLOUD_MAP_TASK;

var GET_SAVED_MAPS_TASK = _tasks["default"].fromPromise(function (provider) {
  return provider.listMaps();
}, 'GET_SAVED_MAPS_TASK');
/**
 *  task to dispatch a function as a task
 */


exports.GET_SAVED_MAPS_TASK = GET_SAVED_MAPS_TASK;

var ACTION_TASK = _tasks["default"].fromCallback(function (_, cb) {
  return cb();
}, 'ACTION_TASK');

exports.ACTION_TASK = ACTION_TASK;

var DELAY_TASK = _tasks["default"].fromCallback(function (delay, cb) {
  return window.setTimeout(function () {
    return cb();
  }, delay);
}, 'DELAY_TASK');

exports.DELAY_TASK = DELAY_TASK;

var UNWRAP_TASK = _tasks["default"].fromPromise(function (promise) {
  return promise;
}, 'UNWRAP');

exports.UNWRAP_TASK = UNWRAP_TASK;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJMT0FEX0ZJTEVfVEFTSyIsIlRhc2siLCJmcm9tUHJvbWlzZSIsImZpbGUiLCJmaWxlQ2FjaGUiLCJsb2FkZXJzIiwibG9hZE9wdGlvbnMiLCJQUk9DRVNTX0ZJTEVfREFUQSIsInByb2Nlc3NGaWxlRGF0YSIsIkxPQURfTUFQX1NUWUxFX1RBU0siLCJzdWNjZXNzIiwiZXJyb3IiLCJ1cmwiLCJpZCIsImVyciIsInJlc3VsdCIsIkVycm9yIiwic3R5bGUiLCJFWFBPUlRfRklMRV9UT19DTE9VRF9UQVNLIiwicHJvdmlkZXIiLCJwYXlsb2FkIiwidXBsb2FkTWFwIiwiTE9BRF9DTE9VRF9NQVBfVEFTSyIsImRvd25sb2FkTWFwIiwiR0VUX1NBVkVEX01BUFNfVEFTSyIsImxpc3RNYXBzIiwiQUNUSU9OX1RBU0siLCJmcm9tQ2FsbGJhY2siLCJfIiwiY2IiLCJERUxBWV9UQVNLIiwiZGVsYXkiLCJ3aW5kb3ciLCJzZXRUaW1lb3V0IiwiVU5XUkFQX1RBU0siLCJwcm9taXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTU8sSUFBTUEsY0FBYyxHQUFHQyxrQkFBS0MsV0FBTCxDQUM1QjtBQUFBLE1BQUVDLElBQUYsUUFBRUEsSUFBRjtBQUFBLE1BQVFDLFNBQVIsUUFBUUEsU0FBUjtBQUFBLE1BQW1CQyxPQUFuQixRQUFtQkEsT0FBbkI7QUFBQSxNQUE0QkMsV0FBNUIsUUFBNEJBLFdBQTVCO0FBQUEsU0FDRSxtQ0FBa0I7QUFBQ0gsSUFBQUEsSUFBSSxFQUFKQSxJQUFEO0FBQU9DLElBQUFBLFNBQVMsRUFBVEEsU0FBUDtBQUFrQkMsSUFBQUEsT0FBTyxFQUFQQSxPQUFsQjtBQUEyQkMsSUFBQUEsV0FBVyxFQUFYQTtBQUEzQixHQUFsQixDQURGO0FBQUEsQ0FENEIsRUFHNUIsZ0JBSDRCLENBQXZCOzs7O0FBTUEsSUFBTUMsaUJBQWlCLEdBQUdOLGtCQUFLQyxXQUFMLENBQy9CTSwyQkFEK0IsRUFHL0Isc0JBSCtCLENBQTFCOzs7QUFNQSxJQUFNQyxtQkFBbUIsR0FBRyx3QkFDakMsaUJBQVlDLE9BQVosRUFBcUJDLEtBQXJCO0FBQUEsTUFBRUMsR0FBRixTQUFFQSxHQUFGO0FBQUEsTUFBT0MsRUFBUCxTQUFPQSxFQUFQO0FBQUEsU0FDRSxxQkFBWUQsR0FBWixFQUFpQixVQUFDRSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDaEMsUUFBSUQsR0FBSixFQUFTO0FBQ1BILE1BQUFBLEtBQUssQ0FBQ0csR0FBRCxDQUFMO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSSxDQUFDQyxNQUFMLEVBQWE7QUFDWEosUUFBQUEsS0FBSyxDQUFDLElBQUlLLEtBQUosQ0FBVSw2QkFBVixDQUFELENBQUw7QUFDRDs7QUFDRE4sTUFBQUEsT0FBTyxDQUFDO0FBQUNHLFFBQUFBLEVBQUUsRUFBRkEsRUFBRDtBQUFLSSxRQUFBQSxLQUFLLEVBQUVGO0FBQVosT0FBRCxDQUFQO0FBQ0Q7QUFDRixHQVRELENBREY7QUFBQSxDQURpQyxFQWFqQyxxQkFiaUMsQ0FBNUI7QUFnQlA7QUFDQTtBQUNBOzs7O0FBQ08sSUFBTUcseUJBQXlCLEdBQUdqQixrQkFBS0MsV0FBTCxDQUN2QztBQUFBLE1BQUVpQixRQUFGLFNBQUVBLFFBQUY7QUFBQSxNQUFZQyxPQUFaLFNBQVlBLE9BQVo7QUFBQSxTQUF5QkQsUUFBUSxDQUFDRSxTQUFULENBQW1CRCxPQUFuQixDQUF6QjtBQUFBLENBRHVDLEVBR3ZDLDJCQUh1QyxDQUFsQzs7OztBQU1BLElBQU1FLG1CQUFtQixHQUFHckIsa0JBQUtDLFdBQUwsQ0FDakM7QUFBQSxNQUFFaUIsUUFBRixTQUFFQSxRQUFGO0FBQUEsTUFBWUMsT0FBWixTQUFZQSxPQUFaO0FBQUEsU0FBeUJELFFBQVEsQ0FBQ0ksV0FBVCxDQUFxQkgsT0FBckIsQ0FBekI7QUFBQSxDQURpQyxFQUdqQyxxQkFIaUMsQ0FBNUI7Ozs7QUFNQSxJQUFNSSxtQkFBbUIsR0FBR3ZCLGtCQUFLQyxXQUFMLENBQ2pDLFVBQUFpQixRQUFRO0FBQUEsU0FBSUEsUUFBUSxDQUFDTSxRQUFULEVBQUo7QUFBQSxDQUR5QixFQUdqQyxxQkFIaUMsQ0FBNUI7QUFLUDtBQUNBO0FBQ0E7Ozs7O0FBQ08sSUFBTUMsV0FBVyxHQUFHekIsa0JBQUswQixZQUFMLENBQ3pCLFVBQUNDLENBQUQsRUFBSUMsRUFBSjtBQUFBLFNBQVdBLEVBQUUsRUFBYjtBQUFBLENBRHlCLEVBR3pCLGFBSHlCLENBQXBCOzs7O0FBTUEsSUFBTUMsVUFBVSxHQUFHN0Isa0JBQUswQixZQUFMLENBQ3hCLFVBQUNJLEtBQUQsRUFBUUYsRUFBUjtBQUFBLFNBQWVHLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQjtBQUFBLFdBQU1KLEVBQUUsRUFBUjtBQUFBLEdBQWxCLEVBQThCRSxLQUE5QixDQUFmO0FBQUEsQ0FEd0IsRUFHeEIsWUFId0IsQ0FBbkI7Ozs7QUFNQSxJQUFNRyxXQUFXLEdBQUdqQyxrQkFBS0MsV0FBTCxDQUN6QixVQUFBaUMsT0FBTztBQUFBLFNBQUlBLE9BQUo7QUFBQSxDQURrQixFQUd6QixRQUh5QixDQUFwQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMiBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBUYXNrLCB7dGFza0NyZWF0b3J9IGZyb20gJ3JlYWN0LXBhbG0vdGFza3MnO1xuaW1wb3J0IHtqc29uIGFzIHJlcXVlc3RKc29ufSBmcm9tICdkMy1yZXF1ZXN0JztcbmltcG9ydCB7cmVhZEZpbGVJbkJhdGNoZXMsIHByb2Nlc3NGaWxlRGF0YX0gZnJvbSAnQGtlcGxlci5nbC9wcm9jZXNzb3JzJztcblxuZXhwb3J0IGNvbnN0IExPQURfRklMRV9UQVNLID0gVGFzay5mcm9tUHJvbWlzZShcbiAgKHtmaWxlLCBmaWxlQ2FjaGUsIGxvYWRlcnMsIGxvYWRPcHRpb25zfSkgPT5cbiAgICByZWFkRmlsZUluQmF0Y2hlcyh7ZmlsZSwgZmlsZUNhY2hlLCBsb2FkZXJzLCBsb2FkT3B0aW9uc30pLFxuICAnTE9BRF9GSUxFX1RBU0snXG4pO1xuXG5leHBvcnQgY29uc3QgUFJPQ0VTU19GSUxFX0RBVEEgPSBUYXNrLmZyb21Qcm9taXNlKFxuICBwcm9jZXNzRmlsZURhdGEsXG5cbiAgJ1BST0NFU1NfRklMRV9DT05URU5UJ1xuKTtcblxuZXhwb3J0IGNvbnN0IExPQURfTUFQX1NUWUxFX1RBU0sgPSB0YXNrQ3JlYXRvcihcbiAgKHt1cmwsIGlkfSwgc3VjY2VzcywgZXJyb3IpID0+XG4gICAgcmVxdWVzdEpzb24odXJsLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZXJyb3IoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgZXJyb3IobmV3IEVycm9yKCdNYXAgc3R5bGUgcmVzcG9uc2UgaXMgZW1wdHknKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3VjY2Vzcyh7aWQsIHN0eWxlOiByZXN1bHR9KTtcbiAgICAgIH1cbiAgICB9KSxcblxuICAnTE9BRF9NQVBfU1RZTEVfVEFTSydcbik7XG5cbi8qKlxuICogdGFzayB0byB1cGxvYWQgZmlsZSB0byBjbG91ZCBwcm92aWRlclxuICovXG5leHBvcnQgY29uc3QgRVhQT1JUX0ZJTEVfVE9fQ0xPVURfVEFTSyA9IFRhc2suZnJvbVByb21pc2UoXG4gICh7cHJvdmlkZXIsIHBheWxvYWR9KSA9PiBwcm92aWRlci51cGxvYWRNYXAocGF5bG9hZCksXG5cbiAgJ0VYUE9SVF9GSUxFX1RPX0NMT1VEX1RBU0snXG4pO1xuXG5leHBvcnQgY29uc3QgTE9BRF9DTE9VRF9NQVBfVEFTSyA9IFRhc2suZnJvbVByb21pc2UoXG4gICh7cHJvdmlkZXIsIHBheWxvYWR9KSA9PiBwcm92aWRlci5kb3dubG9hZE1hcChwYXlsb2FkKSxcblxuICAnTE9BRF9DTE9VRF9NQVBfVEFTSydcbik7XG5cbmV4cG9ydCBjb25zdCBHRVRfU0FWRURfTUFQU19UQVNLID0gVGFzay5mcm9tUHJvbWlzZShcbiAgcHJvdmlkZXIgPT4gcHJvdmlkZXIubGlzdE1hcHMoKSxcblxuICAnR0VUX1NBVkVEX01BUFNfVEFTSydcbik7XG4vKipcbiAqICB0YXNrIHRvIGRpc3BhdGNoIGEgZnVuY3Rpb24gYXMgYSB0YXNrXG4gKi9cbmV4cG9ydCBjb25zdCBBQ1RJT05fVEFTSyA9IFRhc2suZnJvbUNhbGxiYWNrKFxuICAoXywgY2IpID0+IGNiKCksXG5cbiAgJ0FDVElPTl9UQVNLJ1xuKTtcblxuZXhwb3J0IGNvbnN0IERFTEFZX1RBU0sgPSBUYXNrLmZyb21DYWxsYmFjayhcbiAgKGRlbGF5LCBjYikgPT4gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gY2IoKSwgZGVsYXkpLFxuXG4gICdERUxBWV9UQVNLJ1xuKTtcblxuZXhwb3J0IGNvbnN0IFVOV1JBUF9UQVNLID0gVGFzay5mcm9tUHJvbWlzZShcbiAgcHJvbWlzZSA9PiBwcm9taXNlLFxuXG4gICdVTldSQVAnXG4pO1xuIl19