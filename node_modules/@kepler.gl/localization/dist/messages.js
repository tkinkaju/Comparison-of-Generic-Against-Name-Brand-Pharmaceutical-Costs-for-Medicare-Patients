// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.messages = exports.flattenMessages = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _en = _interopRequireDefault(require("./translations/en"));

var _fi = _interopRequireDefault(require("./translations/fi"));

var _pt = _interopRequireDefault(require("./translations/pt"));

var _es = _interopRequireDefault(require("./translations/es"));

var _ca = _interopRequireDefault(require("./translations/ca"));

var _cn = _interopRequireDefault(require("./translations/cn"));

var _ja = _interopRequireDefault(require("./translations/ja"));

var _ru = _interopRequireDefault(require("./translations/ru"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Flat messages since react-intl does not seem to support nested structures
// Adapted from https://medium.com/siren-apparel-press/internationalization-and-localization-of-sirenapparel-eu-sirenapparel-us-and-sirenapparel-asia-ddee266066a2
var flattenMessages = function flattenMessages(nestedMessages) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return Object.keys(nestedMessages).reduce(function (messages, key) {
    var value = nestedMessages[key];
    var prefixedKey = prefix ? "".concat(prefix, ".").concat(key) : key;

    if (typeof value === 'string') {
      messages[prefixedKey] = value;
    } else {
      Object.assign(messages, flattenMessages(value, prefixedKey));
    }

    return messages;
  }, {});
};

exports.flattenMessages = flattenMessages;
var enFlat = flattenMessages(_en["default"]);
var messages = {};
exports.messages = messages;
messages.en = enFlat;
messages.fi = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_fi["default"]));
messages.pt = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_pt["default"]));
messages.es = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_es["default"]));
messages.ca = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_ca["default"]));
messages.cn = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_cn["default"]));
messages.ja = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_ja["default"]));
messages.ru = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_ru["default"]));
var _default = messages;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXNzYWdlcy50cyJdLCJuYW1lcyI6WyJmbGF0dGVuTWVzc2FnZXMiLCJuZXN0ZWRNZXNzYWdlcyIsInByZWZpeCIsIk9iamVjdCIsImtleXMiLCJyZWR1Y2UiLCJtZXNzYWdlcyIsImtleSIsInZhbHVlIiwicHJlZml4ZWRLZXkiLCJhc3NpZ24iLCJlbkZsYXQiLCJlbiIsImZpIiwicHQiLCJlcyIsImNhIiwiY24iLCJqYSIsInJ1Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQW9CQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBRUE7QUFDQTtBQUNPLElBQU1BLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FDN0JDLGNBRDZCLEVBSzFCO0FBQUEsTUFISEMsTUFHRyx1RUFITSxFQUdOO0FBQ0gsU0FBT0MsTUFBTSxDQUFDQyxJQUFQLENBQVlILGNBQVosRUFBNEJJLE1BQTVCLENBQW1DLFVBQUNDLFFBQUQsRUFBV0MsR0FBWCxFQUFtQjtBQUMzRCxRQUFNQyxLQUFLLEdBQUdQLGNBQWMsQ0FBQ00sR0FBRCxDQUE1QjtBQUNBLFFBQU1FLFdBQVcsR0FBR1AsTUFBTSxhQUFNQSxNQUFOLGNBQWdCSyxHQUFoQixJQUF3QkEsR0FBbEQ7O0FBQ0EsUUFBSSxPQUFPQyxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCRixNQUFBQSxRQUFRLENBQUNHLFdBQUQsQ0FBUixHQUF3QkQsS0FBeEI7QUFDRCxLQUZELE1BRU87QUFDTEwsTUFBQUEsTUFBTSxDQUFDTyxNQUFQLENBQWNKLFFBQWQsRUFBd0JOLGVBQWUsQ0FBQ1EsS0FBRCxFQUFRQyxXQUFSLENBQXZDO0FBQ0Q7O0FBQ0QsV0FBT0gsUUFBUDtBQUNELEdBVE0sRUFTSixFQVRJLENBQVA7QUFVRCxDQWhCTTs7O0FBa0JQLElBQU1LLE1BQU0sR0FBR1gsZUFBZSxDQUFDWSxjQUFELENBQTlCO0FBRU8sSUFBTU4sUUFJWixHQUFHLEVBSkc7O0FBTVBBLFFBQVEsQ0FBQ00sRUFBVCxHQUFjRCxNQUFkO0FBQ0FMLFFBQVEsQ0FBQ08sRUFBVCxtQ0FBa0JGLE1BQWxCLEdBQTZCWCxlQUFlLENBQUNhLGNBQUQsQ0FBNUM7QUFDQVAsUUFBUSxDQUFDUSxFQUFULG1DQUFrQkgsTUFBbEIsR0FBNkJYLGVBQWUsQ0FBQ2MsY0FBRCxDQUE1QztBQUNBUixRQUFRLENBQUNTLEVBQVQsbUNBQWtCSixNQUFsQixHQUE2QlgsZUFBZSxDQUFDZSxjQUFELENBQTVDO0FBQ0FULFFBQVEsQ0FBQ1UsRUFBVCxtQ0FBa0JMLE1BQWxCLEdBQTZCWCxlQUFlLENBQUNnQixjQUFELENBQTVDO0FBQ0FWLFFBQVEsQ0FBQ1csRUFBVCxtQ0FBa0JOLE1BQWxCLEdBQTZCWCxlQUFlLENBQUNpQixjQUFELENBQTVDO0FBQ0FYLFFBQVEsQ0FBQ1ksRUFBVCxtQ0FBa0JQLE1BQWxCLEdBQTZCWCxlQUFlLENBQUNrQixjQUFELENBQTVDO0FBQ0FaLFFBQVEsQ0FBQ2EsRUFBVCxtQ0FBa0JSLE1BQWxCLEdBQTZCWCxlQUFlLENBQUNtQixjQUFELENBQTVDO2VBRWViLFEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjIgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgZW4gZnJvbSAnLi90cmFuc2xhdGlvbnMvZW4nO1xuaW1wb3J0IGZpIGZyb20gJy4vdHJhbnNsYXRpb25zL2ZpJztcbmltcG9ydCBwdCBmcm9tICcuL3RyYW5zbGF0aW9ucy9wdCc7XG5pbXBvcnQgZXMgZnJvbSAnLi90cmFuc2xhdGlvbnMvZXMnO1xuaW1wb3J0IGNhIGZyb20gJy4vdHJhbnNsYXRpb25zL2NhJztcbmltcG9ydCBjbiBmcm9tICcuL3RyYW5zbGF0aW9ucy9jbic7XG5pbXBvcnQgamEgZnJvbSAnLi90cmFuc2xhdGlvbnMvamEnO1xuaW1wb3J0IHJ1IGZyb20gJy4vdHJhbnNsYXRpb25zL3J1JztcblxuLy8gRmxhdCBtZXNzYWdlcyBzaW5jZSByZWFjdC1pbnRsIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCBuZXN0ZWQgc3RydWN0dXJlc1xuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vbWVkaXVtLmNvbS9zaXJlbi1hcHBhcmVsLXByZXNzL2ludGVybmF0aW9uYWxpemF0aW9uLWFuZC1sb2NhbGl6YXRpb24tb2Ytc2lyZW5hcHBhcmVsLWV1LXNpcmVuYXBwYXJlbC11cy1hbmQtc2lyZW5hcHBhcmVsLWFzaWEtZGRlZTI2NjA2NmEyXG5leHBvcnQgY29uc3QgZmxhdHRlbk1lc3NhZ2VzID0gKFxuICBuZXN0ZWRNZXNzYWdlcyxcbiAgcHJlZml4ID0gJydcbik6IHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xufSA9PiB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhuZXN0ZWRNZXNzYWdlcykucmVkdWNlKChtZXNzYWdlcywga2V5KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBuZXN0ZWRNZXNzYWdlc1trZXldO1xuICAgIGNvbnN0IHByZWZpeGVkS2V5ID0gcHJlZml4ID8gYCR7cHJlZml4fS4ke2tleX1gIDoga2V5O1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtZXNzYWdlc1twcmVmaXhlZEtleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmFzc2lnbihtZXNzYWdlcywgZmxhdHRlbk1lc3NhZ2VzKHZhbHVlLCBwcmVmaXhlZEtleSkpO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZXM7XG4gIH0sIHt9KTtcbn07XG5cbmNvbnN0IGVuRmxhdCA9IGZsYXR0ZW5NZXNzYWdlcyhlbik7XG5cbmV4cG9ydCBjb25zdCBtZXNzYWdlczoge1xuICBba2V5OiBzdHJpbmddOiB7XG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xufSA9IHt9O1xuXG5tZXNzYWdlcy5lbiA9IGVuRmxhdDtcbm1lc3NhZ2VzLmZpID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKGZpKX07XG5tZXNzYWdlcy5wdCA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhwdCl9O1xubWVzc2FnZXMuZXMgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMoZXMpfTtcbm1lc3NhZ2VzLmNhID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKGNhKX07XG5tZXNzYWdlcy5jbiA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhjbil9O1xubWVzc2FnZXMuamEgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMoamEpfTtcbm1lc3NhZ2VzLnJ1ID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKHJ1KX07XG5cbmV4cG9ydCBkZWZhdWx0IG1lc3NhZ2VzO1xuIl19