// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeMessages = exports.flattenMessages = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("./utils");

var _console = _interopRequireDefault(require("global/console"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Flat messages since react-intl does not seem to support nested structures
// Adapted from https://medium.com/siren-apparel-press/internationalization-and-localization-of-sirenapparel-eu-sirenapparel-us-and-sirenapparel-asia-ddee266066a2
var flattenMessages = function flattenMessages(nestedMessages) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return Object.keys(nestedMessages).reduce(function (messages, key) {
    var value = nestedMessages[key];
    var prefixedKey = prefix ? "".concat(prefix, ".").concat(key) : key;

    if (typeof value === 'string') {
      messages[prefixedKey] = value;
    } else {
      Object.assign(messages, flattenMessages(value, prefixedKey));
    }

    return messages;
  }, {});
};

exports.flattenMessages = flattenMessages;

var mergeMessages = function mergeMessages(defaultMessages, userMessages) {
  if (!(0, _utils.isObject)(userMessages) || !(0, _utils.isObject)(userMessages.en)) {
    _console["default"].error('message should be an object and contain at least the `en` translation. Read more at https://docs.kepler.gl/docs/api-reference/localization');

    return defaultMessages;
  }

  var userEnFlat = flattenMessages(userMessages.en);
  return Object.keys(defaultMessages).reduce(function (acc, key) {
    return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, key, key === 'en' ? _objectSpread(_objectSpread({}, defaultMessages.en), userEnFlat) : _objectSpread(_objectSpread(_objectSpread({}, defaultMessages[key]), userEnFlat), flattenMessages(userMessages[key] || {}))));
  }, {});
};

exports.mergeMessages = mergeMessages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sb2NhbGUtdXRpbHMudHMiXSwibmFtZXMiOlsiZmxhdHRlbk1lc3NhZ2VzIiwibmVzdGVkTWVzc2FnZXMiLCJwcmVmaXgiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwibWVzc2FnZXMiLCJrZXkiLCJ2YWx1ZSIsInByZWZpeGVkS2V5IiwiYXNzaWduIiwibWVyZ2VNZXNzYWdlcyIsImRlZmF1bHRNZXNzYWdlcyIsInVzZXJNZXNzYWdlcyIsImVuIiwiQ29uc29sZSIsImVycm9yIiwidXNlckVuRmxhdCIsImFjYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7Ozs7OztBQUVBO0FBQ0E7QUFDTyxJQUFNQSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNDLGNBQUQsRUFBaUM7QUFBQSxNQUFoQkMsTUFBZ0IsdUVBQVAsRUFBTztBQUM5RCxTQUFPQyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsY0FBWixFQUE0QkksTUFBNUIsQ0FBbUMsVUFBQ0MsUUFBRCxFQUFXQyxHQUFYLEVBQW1CO0FBQzNELFFBQU1DLEtBQUssR0FBR1AsY0FBYyxDQUFDTSxHQUFELENBQTVCO0FBQ0EsUUFBTUUsV0FBVyxHQUFHUCxNQUFNLGFBQU1BLE1BQU4sY0FBZ0JLLEdBQWhCLElBQXdCQSxHQUFsRDs7QUFDQSxRQUFJLE9BQU9DLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0JGLE1BQUFBLFFBQVEsQ0FBQ0csV0FBRCxDQUFSLEdBQXdCRCxLQUF4QjtBQUNELEtBRkQsTUFFTztBQUNMTCxNQUFBQSxNQUFNLENBQUNPLE1BQVAsQ0FBY0osUUFBZCxFQUF3Qk4sZUFBZSxDQUFDUSxLQUFELEVBQVFDLFdBQVIsQ0FBdkM7QUFDRDs7QUFDRCxXQUFPSCxRQUFQO0FBQ0QsR0FUTSxFQVNKLEVBVEksQ0FBUDtBQVVELENBWE07Ozs7QUFhQSxJQUFNSyxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQUNDLGVBQUQsRUFBa0JDLFlBQWxCLEVBQW1DO0FBQzlELE1BQUksQ0FBQyxxQkFBU0EsWUFBVCxDQUFELElBQTJCLENBQUMscUJBQVNBLFlBQVksQ0FBQ0MsRUFBdEIsQ0FBaEMsRUFBMkQ7QUFDekRDLHdCQUFRQyxLQUFSLENBQ0UsNElBREY7O0FBSUEsV0FBT0osZUFBUDtBQUNEOztBQUVELE1BQU1LLFVBQVUsR0FBR2pCLGVBQWUsQ0FBQ2EsWUFBWSxDQUFDQyxFQUFkLENBQWxDO0FBQ0EsU0FBT1gsTUFBTSxDQUFDQyxJQUFQLENBQVlRLGVBQVosRUFBNkJQLE1BQTdCLENBQ0wsVUFBQ2EsR0FBRCxFQUFNWCxHQUFOO0FBQUEsMkNBQ0tXLEdBREwsNENBRUdYLEdBRkgsRUFHSUEsR0FBRyxLQUFLLElBQVIsbUNBQ1FLLGVBQWUsQ0FBQ0UsRUFEeEIsR0FDK0JHLFVBRC9CLGtEQUVRTCxlQUFlLENBQUNMLEdBQUQsQ0FGdkIsR0FFaUNVLFVBRmpDLEdBRWdEakIsZUFBZSxDQUFDYSxZQUFZLENBQUNOLEdBQUQsQ0FBWixJQUFxQixFQUF0QixDQUYvRCxDQUhKO0FBQUEsR0FESyxFQVFMLEVBUkssQ0FBUDtBQVVELENBcEJNIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIyIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtpc09iamVjdH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgQ29uc29sZSBmcm9tICdnbG9iYWwvY29uc29sZSc7XG5cbi8vIEZsYXQgbWVzc2FnZXMgc2luY2UgcmVhY3QtaW50bCBkb2VzIG5vdCBzZWVtIHRvIHN1cHBvcnQgbmVzdGVkIHN0cnVjdHVyZXNcbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL21lZGl1bS5jb20vc2lyZW4tYXBwYXJlbC1wcmVzcy9pbnRlcm5hdGlvbmFsaXphdGlvbi1hbmQtbG9jYWxpemF0aW9uLW9mLXNpcmVuYXBwYXJlbC1ldS1zaXJlbmFwcGFyZWwtdXMtYW5kLXNpcmVuYXBwYXJlbC1hc2lhLWRkZWUyNjYwNjZhMlxuZXhwb3J0IGNvbnN0IGZsYXR0ZW5NZXNzYWdlcyA9IChuZXN0ZWRNZXNzYWdlcywgcHJlZml4ID0gJycpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG5lc3RlZE1lc3NhZ2VzKS5yZWR1Y2UoKG1lc3NhZ2VzLCBrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IG5lc3RlZE1lc3NhZ2VzW2tleV07XG4gICAgY29uc3QgcHJlZml4ZWRLZXkgPSBwcmVmaXggPyBgJHtwcmVmaXh9LiR7a2V5fWAgOiBrZXk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1lc3NhZ2VzW3ByZWZpeGVkS2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuYXNzaWduKG1lc3NhZ2VzLCBmbGF0dGVuTWVzc2FnZXModmFsdWUsIHByZWZpeGVkS2V5KSk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlcztcbiAgfSwge30pO1xufTtcblxuZXhwb3J0IGNvbnN0IG1lcmdlTWVzc2FnZXMgPSAoZGVmYXVsdE1lc3NhZ2VzLCB1c2VyTWVzc2FnZXMpID0+IHtcbiAgaWYgKCFpc09iamVjdCh1c2VyTWVzc2FnZXMpIHx8ICFpc09iamVjdCh1c2VyTWVzc2FnZXMuZW4pKSB7XG4gICAgQ29uc29sZS5lcnJvcihcbiAgICAgICdtZXNzYWdlIHNob3VsZCBiZSBhbiBvYmplY3QgYW5kIGNvbnRhaW4gYXQgbGVhc3QgdGhlIGBlbmAgdHJhbnNsYXRpb24uIFJlYWQgbW9yZSBhdCBodHRwczovL2RvY3Mua2VwbGVyLmdsL2RvY3MvYXBpLXJlZmVyZW5jZS9sb2NhbGl6YXRpb24nXG4gICAgKTtcblxuICAgIHJldHVybiBkZWZhdWx0TWVzc2FnZXM7XG4gIH1cblxuICBjb25zdCB1c2VyRW5GbGF0ID0gZmxhdHRlbk1lc3NhZ2VzKHVzZXJNZXNzYWdlcy5lbik7XG4gIHJldHVybiBPYmplY3Qua2V5cyhkZWZhdWx0TWVzc2FnZXMpLnJlZHVjZShcbiAgICAoYWNjLCBrZXkpID0+ICh7XG4gICAgICAuLi5hY2MsXG4gICAgICBba2V5XTpcbiAgICAgICAga2V5ID09PSAnZW4nXG4gICAgICAgICAgPyB7Li4uZGVmYXVsdE1lc3NhZ2VzLmVuLCAuLi51c2VyRW5GbGF0fVxuICAgICAgICAgIDogey4uLmRlZmF1bHRNZXNzYWdlc1trZXldLCAuLi51c2VyRW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXModXNlck1lc3NhZ2VzW2tleV0gfHwge30pfVxuICAgIH0pLFxuICAgIHt9XG4gICk7XG59O1xuIl19