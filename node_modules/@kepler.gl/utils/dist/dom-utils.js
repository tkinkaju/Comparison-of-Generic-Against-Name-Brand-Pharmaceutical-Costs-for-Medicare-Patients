// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processClone = processClone;
exports.asArray = asArray;
exports.fourRandomChars = fourRandomChars;
exports.uid = uid;
exports.makeImage = makeImage;
exports.isDataUrl = isDataUrl;
exports.mimeType = mimeType;
exports.dataAsUrl = dataAsUrl;
exports.escape = escape;
exports.delay = delay;
exports.isSrcAsDataUrl = isSrcAsDataUrl;
exports.canvasToBlob = canvasToBlob;
exports.escapeXhtml = escapeXhtml;
exports.getWidth = getWidth;
exports.getHeight = getHeight;
exports.resolveUrl = resolveUrl;
exports.getAndEncode = getAndEncode;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _console = _interopRequireDefault(require("global/console"));

var _window = _interopRequireDefault(require("global/window"));

var _document = _interopRequireDefault(require("global/document"));

var _constants = require("@kepler.gl/constants");function processClone(original, clone) {
  if (!(clone instanceof _window["default"].Element)) {
    return clone;
  }

  function copyProperties(sourceStyle, targetStyle) {
    var propertyKeys = asArray(sourceStyle);
    propertyKeys.forEach(function (name) {
      targetStyle.setProperty(name, sourceStyle.getPropertyValue(name), sourceStyle.getPropertyPriority(name));
    });
  }

  function copyStyle(source, target) {
    if (source.cssText) {
      target.cssText = source.cssText; // add additional copy of composite styles

      if (source.font) {
        target.font = source.font;
      }
    } else {
      copyProperties(source, target);
    }
  }

  function cloneStyle(og, cln) {
    var originalStyle = _window["default"].getComputedStyle(og);

    copyStyle(originalStyle, cln.style);
  }

  function formatPseudoElementStyle(cln, elm, stl) {
    var formatCssText = function formatCssText(stl1) {
      var cnt = stl1.getPropertyValue('content');
      return "".concat(stl.cssText, " content: ").concat(cnt, ";");
    };

    var formatProperty = function formatProperty(name) {
      return "".concat(name, ":").concat(stl.getPropertyValue(name)).concat(stl.getPropertyPriority(name) ? ' !important' : '');
    };

    var formatCssProperties = function formatCssProperties(stl2) {
      return "".concat(asArray(stl2).map(formatProperty).join('; '), ";");
    };

    var selector = ".".concat(cln, ":").concat(elm);
    var cssText = stl.cssText ? formatCssText(stl) : formatCssProperties(stl);
    return _document["default"].createTextNode("".concat(selector, "{").concat(cssText, "}"));
  }

  function clonePseudoElement(org, cln, element) {
    var style = _window["default"].getComputedStyle(org, element);

    var content = style.getPropertyValue('content');

    if (content === '' || content === 'none') {
      return;
    }

    var className = uid();
    cln.className = "".concat(cln.className, " ").concat(className);

    var styleElement = _document["default"].createElement('style');

    styleElement.appendChild(formatPseudoElementStyle(className, element, style));
    cln.appendChild(styleElement);
  }

  function clonePseudoElements(_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
        og = _ref2[0],
        cln = _ref2[1];

    [':before', ':after'].forEach(function (element) {
      return clonePseudoElement(og, cln, element);
    });
  }

  function copyUserInput(_ref3) {
    var _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
        og = _ref4[0],
        cln = _ref4[1];

    if (og instanceof _window["default"].HTMLTextAreaElement) cln.innerHTML = og.value;
    if (og instanceof _window["default"].HTMLInputElement) cln.setAttribute('value', og.value);
  }

  function fixSvg(cln) {
    if (!(cln instanceof _window["default"].SVGElement)) return;
    cln.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
    if (!(cln instanceof _window["default"].SVGRectElement)) return;
    ['width', 'height'].forEach(function (attribute) {
      var value = cln.getAttribute(attribute);
      if (!value) return;
      cln.style.setProperty(attribute, value);
    });
  }

  return Promise.resolve([original, clone]).then(function (_ref5) {
    var _ref6 = (0, _slicedToArray2["default"])(_ref5, 2),
        og = _ref6[0],
        cln = _ref6[1];

    cloneStyle(og, cln);
    return [og, cln];
  }).then(function (_ref7) {
    var _ref8 = (0, _slicedToArray2["default"])(_ref7, 2),
        og = _ref8[0],
        cln = _ref8[1];

    clonePseudoElements([og, cln]);
    return [og, cln];
  }).then(function (_ref9) {
    var _ref10 = (0, _slicedToArray2["default"])(_ref9, 2),
        og = _ref10[0],
        cln = _ref10[1];

    copyUserInput([og, cln]);
    return [og, cln];
  }).then(function (_ref11) {
    var _ref12 = (0, _slicedToArray2["default"])(_ref11, 2),
        og = _ref12[0],
        cln = _ref12[1];

    fixSvg(cln);
    return [og, cln];
  }).then(function (_ref13) {
    var _ref14 = (0, _slicedToArray2["default"])(_ref13, 2),
        og = _ref14[0],
        cln = _ref14[1];

    return cln;
  });
}
/****
 * UTILS
 ****/


function asArray(arrayLike) {
  var array = [];
  var length = arrayLike.length;

  for (var i = 0; i < length; i++) {
    array.push(arrayLike[i]);
  }

  return array;
}

function fourRandomChars() {
  /* see http://stackoverflow.com/a/6248722/2519373 */
  return "0000".concat((Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);
}

function uid() {
  var index = 0;
  return "u".concat(fourRandomChars()).concat(index++);
}

function makeImage(uri) {
  return new Promise(function (resolve, reject) {
    var image = new _window["default"].Image();

    image.onload = function () {
      resolve(image);
    };

    image.onerror = function (err) {
      var message = _constants.IMAGE_EXPORT_ERRORS.dataUri;

      _console["default"].log(uri); // error is an Event Object
      // https://www.w3schools.com/jsref/obj_event.asp


      reject({
        event: err,
        message: message
      });
    };

    image.src = uri;
  });
}

function isDataUrl(url) {
  return url.search(/^(data:)/) !== -1;
}

function parseExtension(url) {
  var match = /\.([^\.\/]*?)$/g.exec(url);

  if (match) {
    return match[1];
  }

  return '';
}

function mimes() {
  /*
   * Only WOFF and EOT mime types for fonts are 'real'
   * see http://www.iana.org/assignments/media-types/media-types.xhtml
   */
  var WOFF = 'application/font-woff';
  var JPEG = 'image/jpeg';
  return {
    woff: WOFF,
    woff2: WOFF,
    ttf: 'application/font-truetype',
    eot: 'application/vnd.ms-fontobject',
    png: 'image/png',
    jpg: JPEG,
    jpeg: JPEG,
    gif: 'image/gif',
    tiff: 'image/tiff',
    svg: 'image/svg+xml'
  };
}

function mimeType(url) {
  var extension = parseExtension(url).toLowerCase();
  return mimes()[extension] || '';
}

function dataAsUrl(content, type) {
  return "data:".concat(type, ";base64,").concat(content);
}

function escape(string) {
  return string.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1');
}

function delay(ms) {
  return function (arg) {
    return new Promise(function (resolve) {
      _window["default"].setTimeout(function () {
        resolve(arg);
      }, ms);
    });
  };
}

function isSrcAsDataUrl(text) {
  var DATA_URL_REGEX = /url\(['"]?(data:)([^'"]+?)['"]?\)/;
  return text.search(DATA_URL_REGEX) !== -1;
}

function cvToBlob(canvas) {
  return new Promise(function (resolve) {
    var binaryString = _window["default"].atob(canvas.toDataURL().split(',')[1]);

    var length = binaryString.length;
    var binaryArray = new Uint8Array(length);

    for (var i = 0; i < length; i++) {
      binaryArray[i] = binaryString.charCodeAt(i);
    }

    resolve(new _window["default"].Blob([binaryArray], {
      type: 'image/png'
    }));
  });
}

function canvasToBlob(canvas) {
  if (canvas.toBlob) return new Promise(function (resolve) {
    canvas.toBlob(resolve);
  });
  return cvToBlob(canvas);
}

function escapeXhtml(string) {
  return string.replace(/#/g, '%23').replace(/\n/g, '%0A');
}

function getWidth(node) {
  var leftBorder = px(node, 'border-left-width');
  var rightBorder = px(node, 'border-right-width');
  return node.scrollWidth + leftBorder + rightBorder;
}

function getHeight(node) {
  var topBorder = px(node, 'border-top-width');
  var bottomBorder = px(node, 'border-bottom-width');
  return node.scrollHeight + topBorder + bottomBorder;
}

function px(node, styleProperty) {
  var value = _window["default"].getComputedStyle(node).getPropertyValue(styleProperty);

  return parseFloat(value.replace('px', ''));
}

function resolveUrl(url, baseUrl) {
  var doc = _document["default"].implementation.createHTMLDocument();

  var base = doc.createElement('base');
  doc.head.appendChild(base);
  var a = doc.createElement('a');
  doc.body.appendChild(a);
  base.href = baseUrl;
  a.href = url;
  return a.href;
}

function getAndEncode(url, options) {
  var TIMEOUT = 30000;

  if (options.cacheBust) {
    // Cache bypass so we dont have CORS issues with cached images
    // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache
    url += (/\?/.test(url) ? '&' : '?') + new Date().getTime();
  }

  return new Promise(function (resolve) {
    var request = new _window["default"].XMLHttpRequest();
    request.onreadystatechange = done;
    request.ontimeout = timeout;
    request.responseType = 'blob';
    request.timeout = TIMEOUT;
    request.open('GET', url, true);
    request.send();
    var placeholder;

    if (options.imagePlaceholder) {
      var split = options.imagePlaceholder.split(/,/);

      if (split && split[1]) {
        placeholder = split[1];
      }
    }

    function done() {
      if (request.readyState !== 4) return;

      if (request.status !== 200) {
        if (placeholder) {
          resolve(placeholder);
        } else {
          fail("cannot fetch resource: ".concat(url, ", status: ").concat(request.status));
        }

        return;
      }

      var encoder = new _window["default"].FileReader();

      encoder.onloadend = function () {
        var content = encoder.result.split(/,/)[1];
        resolve(content);
      };

      encoder.readAsDataURL(request.response);
    }

    function timeout() {
      if (placeholder) {
        resolve(placeholder);
      } else {
        fail("timeout of ".concat(TIMEOUT, "ms occurred while fetching resource: ").concat(url));
      }
    }

    function fail(message) {
      _console["default"].error(message);

      resolve('');
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,