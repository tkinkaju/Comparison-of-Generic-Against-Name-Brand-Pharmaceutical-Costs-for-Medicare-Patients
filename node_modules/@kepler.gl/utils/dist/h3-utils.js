// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVertices = getVertices;
exports.getCentroid = getCentroid;
exports.idToPolygonGeo = idToPolygonGeo;
Object.defineProperty(exports, "h3GetResolution", {
  enumerable: true,
  get: function get() {
    return _h3Js.h3GetResolution;
  }
});
Object.defineProperty(exports, "h3IsValid", {
  enumerable: true,
  get: function get() {
    return _h3Js.h3IsValid;
  }
});
exports.getHexFields = exports.isHexField = void 0;

var _h3Js = require("h3-js");

var _constants = require("@kepler.gl/constants");

var _dataUtils = require("./data-utils");// get vertices should return [lon, lat]
function getVertices(_ref) {
  var id = _ref.id;
  // always reverse it
  return (0, _h3Js.h3ToGeoBoundary)(id, true);
} // get centroid should return [lon, lat]


function getCentroid(_ref2) {
  var id = _ref2.id;
  // always reverse it to [lng, lat]
  return (0, _h3Js.h3ToGeo)(id).reverse();
}

function idToPolygonGeo(object, properties) {
  if (!(object !== null && object !== void 0 && object.id)) {
    return null;
  }

  var vertices = getVertices(object);
  return {
    geometry: {
      coordinates: vertices,
      type: 'LineString'
    },
    properties: properties
  };
}

var isHexField = function isHexField(field, fieldIdx, dataContainer) {
  if (field.type !== _constants.ALL_FIELD_TYPES.string) {
    return false;
  }

  var firstDP = dataContainer.find(function (d) {
    return (0, _dataUtils.notNullorUndefined)(d.valueAt(fieldIdx));
  }, true);
  return firstDP && (0, _h3Js.h3IsValid)(firstDP.valueAt(fieldIdx));
};

exports.isHexField = isHexField;

var getHexFields = function getHexFields(fields, dataContainer) {
  return fields.filter(function (f, i) {
    return isHexField(f, i, dataContainer);
  });
};

exports.getHexFields = getHexFields;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oMy11dGlscy50cyJdLCJuYW1lcyI6WyJnZXRWZXJ0aWNlcyIsImlkIiwiZ2V0Q2VudHJvaWQiLCJyZXZlcnNlIiwiaWRUb1BvbHlnb25HZW8iLCJvYmplY3QiLCJwcm9wZXJ0aWVzIiwidmVydGljZXMiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwidHlwZSIsImlzSGV4RmllbGQiLCJmaWVsZCIsImZpZWxkSWR4IiwiZGF0YUNvbnRhaW5lciIsIkFMTF9GSUVMRF9UWVBFUyIsInN0cmluZyIsImZpcnN0RFAiLCJmaW5kIiwiZCIsInZhbHVlQXQiLCJnZXRIZXhGaWVsZHMiLCJmaWVsZHMiLCJmaWx0ZXIiLCJmIiwiaSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7QUFDQTs7QUFDQTs7QUF0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUNPLFNBQVNBLFdBQVQsT0FBMEM7QUFBQSxNQUFwQkMsRUFBb0IsUUFBcEJBLEVBQW9CO0FBQy9DO0FBQ0EsU0FBTywyQkFBZ0JBLEVBQWhCLEVBQW9CLElBQXBCLENBQVA7QUFDRCxDLENBRUQ7OztBQUNPLFNBQVNDLFdBQVQsUUFBb0Q7QUFBQSxNQUE5QkQsRUFBOEIsU0FBOUJBLEVBQThCO0FBQ3pEO0FBQ0EsU0FBTyxtQkFBUUEsRUFBUixFQUFZRSxPQUFaLEVBQVA7QUFDRDs7QUFFTSxTQUFTQyxjQUFULENBQXdCQyxNQUF4QixFQUFnREMsVUFBaEQsRUFBa0U7QUFDdkUsTUFBSSxFQUFDRCxNQUFELGFBQUNBLE1BQUQsZUFBQ0EsTUFBTSxDQUFFSixFQUFULENBQUosRUFBaUI7QUFDZixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFNTSxRQUFRLEdBQUdQLFdBQVcsQ0FBQ0ssTUFBRCxDQUE1QjtBQUVBLFNBQU87QUFDTEcsSUFBQUEsUUFBUSxFQUFFO0FBQ1JDLE1BQUFBLFdBQVcsRUFBRUYsUUFETDtBQUVSRyxNQUFBQSxJQUFJLEVBQUU7QUFGRSxLQURMO0FBS0xKLElBQUFBLFVBQVUsRUFBVkE7QUFMSyxHQUFQO0FBT0Q7O0FBRU0sSUFBTUssVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLEVBQWtCQyxhQUFsQixFQUFvQztBQUM1RCxNQUFJRixLQUFLLENBQUNGLElBQU4sS0FBZUssMkJBQWdCQyxNQUFuQyxFQUEyQztBQUN6QyxXQUFPLEtBQVA7QUFDRDs7QUFFRCxNQUFNQyxPQUFPLEdBQUdILGFBQWEsQ0FBQ0ksSUFBZCxDQUFtQixVQUFBQyxDQUFDO0FBQUEsV0FBSSxtQ0FBbUJBLENBQUMsQ0FBQ0MsT0FBRixDQUFVUCxRQUFWLENBQW5CLENBQUo7QUFBQSxHQUFwQixFQUFpRSxJQUFqRSxDQUFoQjtBQUNBLFNBQU9JLE9BQU8sSUFBSSxxQkFBVUEsT0FBTyxDQUFDRyxPQUFSLENBQWdCUCxRQUFoQixDQUFWLENBQWxCO0FBQ0QsQ0FQTTs7OztBQVNBLElBQU1RLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQUNDLE1BQUQsRUFBU1IsYUFBVDtBQUFBLFNBQzFCUSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxVQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxXQUFVZCxVQUFVLENBQUNhLENBQUQsRUFBSUMsQ0FBSixFQUFPWCxhQUFQLENBQXBCO0FBQUEsR0FBZCxDQUQwQjtBQUFBLENBQXJCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIyIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtoM0dldFJlc29sdXRpb24sIEgzSW5kZXgsIGgzSXNWYWxpZCwgaDNUb0dlbywgaDNUb0dlb0JvdW5kYXJ5fSBmcm9tICdoMy1qcyc7XG5pbXBvcnQge0FMTF9GSUVMRF9UWVBFU30gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtub3ROdWxsb3JVbmRlZmluZWR9IGZyb20gJy4vZGF0YS11dGlscyc7XG5cbmV4cG9ydCB7aDNHZXRSZXNvbHV0aW9uLCBoM0lzVmFsaWR9O1xuXG5leHBvcnQgdHlwZSBDZW50cm9pZCA9IFtudW1iZXIsIG51bWJlcl07XG5cbi8vIGdldCB2ZXJ0aWNlcyBzaG91bGQgcmV0dXJuIFtsb24sIGxhdF1cbmV4cG9ydCBmdW5jdGlvbiBnZXRWZXJ0aWNlcyh7aWR9OiB7aWQ6IEgzSW5kZXh9KSB7XG4gIC8vIGFsd2F5cyByZXZlcnNlIGl0XG4gIHJldHVybiBoM1RvR2VvQm91bmRhcnkoaWQsIHRydWUpO1xufVxuXG4vLyBnZXQgY2VudHJvaWQgc2hvdWxkIHJldHVybiBbbG9uLCBsYXRdXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2VudHJvaWQoe2lkfToge2lkOiBIM0luZGV4fSk6IENlbnRyb2lkIHtcbiAgLy8gYWx3YXlzIHJldmVyc2UgaXQgdG8gW2xuZywgbGF0XVxuICByZXR1cm4gaDNUb0dlbyhpZCkucmV2ZXJzZSgpIGFzIENlbnRyb2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaWRUb1BvbHlnb25HZW8ob2JqZWN0Pzoge2lkOiBIM0luZGV4fSwgcHJvcGVydGllcz86IGFueSkge1xuICBpZiAoIW9iamVjdD8uaWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHZlcnRpY2VzID0gZ2V0VmVydGljZXMob2JqZWN0KTtcblxuICByZXR1cm4ge1xuICAgIGdlb21ldHJ5OiB7XG4gICAgICBjb29yZGluYXRlczogdmVydGljZXMsXG4gICAgICB0eXBlOiAnTGluZVN0cmluZydcbiAgICB9LFxuICAgIHByb3BlcnRpZXNcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGlzSGV4RmllbGQgPSAoZmllbGQsIGZpZWxkSWR4LCBkYXRhQ29udGFpbmVyKSA9PiB7XG4gIGlmIChmaWVsZC50eXBlICE9PSBBTExfRklFTERfVFlQRVMuc3RyaW5nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgZmlyc3REUCA9IGRhdGFDb250YWluZXIuZmluZChkID0+IG5vdE51bGxvclVuZGVmaW5lZChkLnZhbHVlQXQoZmllbGRJZHgpKSwgdHJ1ZSk7XG4gIHJldHVybiBmaXJzdERQICYmIGgzSXNWYWxpZChmaXJzdERQLnZhbHVlQXQoZmllbGRJZHgpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRIZXhGaWVsZHMgPSAoZmllbGRzLCBkYXRhQ29udGFpbmVyKSA9PlxuICBmaWVsZHMuZmlsdGVyKChmLCBpKSA9PiBpc0hleEZpZWxkKGYsIGksIGRhdGFDb250YWluZXIpKTtcbiJdfQ==