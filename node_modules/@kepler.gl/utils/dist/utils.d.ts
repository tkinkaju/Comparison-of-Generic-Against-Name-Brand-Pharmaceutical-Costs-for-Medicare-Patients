/**
 * Generate a hash string based on number of character
 * @param {number} count
 * @returns {string} hash string
 */
export declare function generateHashId(count?: number): string;
/**
 * Detect chrome
 * @returns {boolean} - yes or no
 */
export declare function isChrome(): any;
/**
 * Capitalize first letter of a string
 * @param {string} str
 * @returns {string}
 */
export declare function capitalizeFirstLetter(str: any): any;
/**
 * Convert camel style names to title
 * strokeColor -> Stroke Color
 * @param {string} str
 * @returns {string}
 */
export declare function camelToTitle(str: any): any;
/**
 * Convert names to camel style
 * Stroke Color -> strokeColor
 * @param {string} str
 * @returns {string}
 */
export declare const camelize: (str: any) => any;
/**
 * Converts non-arrays to arrays.  Leaves arrays alone.  Converts
 * undefined values to empty arrays ([] instead of [undefined]).
 * Otherwise, just returns [item] for non-array items.
 *
 * @param {*} item
 * @returns {array} boom! much array. very indexed. so useful.
 */
export declare function toArray(item: any): any[];
/**
 * immutably insert value to an Array or Object
 * @param {Array|Object} obj
 * @param {Number|String} key
 * @param {*} value
 * @returns {Array|Object}
 */
export declare const insertValue: (obj: any, key: any, value: any) => any;
/**
 * check if value is a loose object including a plain object, array, function
 * @param {*} value
 */
export declare function isObject(value: any): boolean;
/**
 * Immutable version of _.set
 * @param {Array<String|Number>} path
 * @param {*} value
 * @param {Object} obj
 * @returns {Object}
 */
export declare const set: (path: any, value: any, obj: any) => any;
/**
 * Get error information of unknown type
 * Extracts as much human readable information as possible
 * Ensure result is an Error object suitable for throw or promise rejection
 *
 * @private
 * @param {*}  err - Unknown error
 * @return {string} - human readable error msg
 */
export declare function getError(err: any): any;
export declare function arrayInsert(arr: any, index: any, val: any): any;
export declare function hasMobileWidth(breakPointValues: any): any;
export declare function hasPortableWidth(breakPointValues: any): any;
export declare function isTest(): boolean;
/**
 * Filters an object by an arbitrary predicate
 * Returns a new object containing all elements that match the predicate
 * @param {Object} obj Object to be filtered
 * @param {Function} predicate Predicate by which the object will be filtered
 * @returns {Object}
 */
export declare function filterObjectByPredicate(obj: any, predicate: any): {};
export declare function isFunction(func: any): boolean;
