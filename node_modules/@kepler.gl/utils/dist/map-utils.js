// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMapLayersFromSplitMaps = exports.onViewPortChange = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _constants = require("@kepler.gl/constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var onViewPortChange = function onViewPortChange(viewState, onUpdateMap, onViewStateChange) {
  var primary = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var width = viewState.width,
      height = viewState.height,
      restViewState = (0, _objectWithoutProperties2["default"])(viewState, ["width", "height"]); // react-map-gl sends 0,0 dimensions during initialization
  // after we have received proper dimensions from observeDimensions

  var next = _objectSpread(_objectSpread({}, width > 0 && height > 0 ? viewState : restViewState), {}, {
    // enabling transition in two maps may lead to endless update loops
    transitionDuration: primary ? _constants.TRANSITION_DURATION : 0
  });

  if (onViewStateChange && typeof onViewStateChange === 'function') {
    onViewStateChange(next);
  }

  onUpdateMap(next);
};

exports.onViewPortChange = onViewPortChange;

var getMapLayersFromSplitMaps = function getMapLayersFromSplitMaps(splitMaps, mapIndex) {
  var _splitMaps;

  return (_splitMaps = splitMaps[mapIndex || '']) === null || _splitMaps === void 0 ? void 0 : _splitMaps.layers;
};

exports.getMapLayersFromSplitMaps = getMapLayersFromSplitMaps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXAtdXRpbHMudHMiXSwibmFtZXMiOlsib25WaWV3UG9ydENoYW5nZSIsInZpZXdTdGF0ZSIsIm9uVXBkYXRlTWFwIiwib25WaWV3U3RhdGVDaGFuZ2UiLCJwcmltYXJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJyZXN0Vmlld1N0YXRlIiwibmV4dCIsInRyYW5zaXRpb25EdXJhdGlvbiIsIlRSQU5TSVRJT05fRFVSQVRJT04iLCJnZXRNYXBMYXllcnNGcm9tU3BsaXRNYXBzIiwic3BsaXRNYXBzIiwibWFwSW5kZXgiLCJsYXllcnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7O0FBR08sSUFBTUEsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUM5QkMsU0FEOEIsRUFFOUJDLFdBRjhCLEVBRzlCQyxpQkFIOEIsRUFLckI7QUFBQSxNQURUQyxPQUNTLHVFQURVLEtBQ1Y7QUFBQSxNQUNGQyxLQURFLEdBQ2lDSixTQURqQyxDQUNGSSxLQURFO0FBQUEsTUFDS0MsTUFETCxHQUNpQ0wsU0FEakMsQ0FDS0ssTUFETDtBQUFBLE1BQ2dCQyxhQURoQiw2Q0FDaUNOLFNBRGpDLHdCQUVUO0FBQ0E7O0FBQ0EsTUFBTU8sSUFBSSxtQ0FDSkgsS0FBSyxHQUFHLENBQVIsSUFBYUMsTUFBTSxHQUFHLENBQXRCLEdBQTBCTCxTQUExQixHQUFzQ00sYUFEbEM7QUFFUjtBQUNBRSxJQUFBQSxrQkFBa0IsRUFBRUwsT0FBTyxHQUFHTSw4QkFBSCxHQUF5QjtBQUg1QyxJQUFWOztBQUtBLE1BQUlQLGlCQUFpQixJQUFJLE9BQU9BLGlCQUFQLEtBQTZCLFVBQXRELEVBQWtFO0FBQ2hFQSxJQUFBQSxpQkFBaUIsQ0FBQ0ssSUFBRCxDQUFqQjtBQUNEOztBQUVETixFQUFBQSxXQUFXLENBQUNNLElBQUQsQ0FBWDtBQUNELENBbkJNOzs7O0FBcUJBLElBQU1HLHlCQUF5QixHQUFHLFNBQTVCQSx5QkFBNEIsQ0FDdkNDLFNBRHVDLEVBRXZDQyxRQUZ1QyxFQUdEO0FBQUE7O0FBQ3RDLHVCQUFPRCxTQUFTLENBQUNDLFFBQVEsSUFBSSxFQUFiLENBQWhCLCtDQUFPLFdBQTJCQyxNQUFsQztBQUNELENBTE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RSQU5TSVRJT05fRFVSQVRJT059IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7U3BsaXRNYXBMYXllcnMsIFNwbGl0TWFwfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IG9uVmlld1BvcnRDaGFuZ2UgPSAoXG4gIHZpZXdTdGF0ZTogYW55LFxuICBvblVwZGF0ZU1hcDogKG5leHQ6IGFueSkgPT4gYW55LFxuICBvblZpZXdTdGF0ZUNoYW5nZT86IChuZXh0OiBhbnkpID0+IHZvaWQgfCBudWxsLFxuICBwcmltYXJ5OiBib29sZWFuID0gZmFsc2Vcbik6IHZvaWQgPT4ge1xuICBjb25zdCB7d2lkdGgsIGhlaWdodCwgLi4ucmVzdFZpZXdTdGF0ZX0gPSB2aWV3U3RhdGU7XG4gIC8vIHJlYWN0LW1hcC1nbCBzZW5kcyAwLDAgZGltZW5zaW9ucyBkdXJpbmcgaW5pdGlhbGl6YXRpb25cbiAgLy8gYWZ0ZXIgd2UgaGF2ZSByZWNlaXZlZCBwcm9wZXIgZGltZW5zaW9ucyBmcm9tIG9ic2VydmVEaW1lbnNpb25zXG4gIGNvbnN0IG5leHQgPSB7XG4gICAgLi4uKHdpZHRoID4gMCAmJiBoZWlnaHQgPiAwID8gdmlld1N0YXRlIDogcmVzdFZpZXdTdGF0ZSksXG4gICAgLy8gZW5hYmxpbmcgdHJhbnNpdGlvbiBpbiB0d28gbWFwcyBtYXkgbGVhZCB0byBlbmRsZXNzIHVwZGF0ZSBsb29wc1xuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogcHJpbWFyeSA/IFRSQU5TSVRJT05fRFVSQVRJT04gOiAwXG4gIH07XG4gIGlmIChvblZpZXdTdGF0ZUNoYW5nZSAmJiB0eXBlb2Ygb25WaWV3U3RhdGVDaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvblZpZXdTdGF0ZUNoYW5nZShuZXh0KTtcbiAgfVxuXG4gIG9uVXBkYXRlTWFwKG5leHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldE1hcExheWVyc0Zyb21TcGxpdE1hcHMgPSAoXG4gIHNwbGl0TWFwczogU3BsaXRNYXBbXSxcbiAgbWFwSW5kZXg/OiBudW1iZXIgfCB1bmRlZmluZWRcbik6IFNwbGl0TWFwTGF5ZXJzIHwgdW5kZWZpbmVkIHwgbnVsbCA9PiB7XG4gIHJldHVybiBzcGxpdE1hcHNbbWFwSW5kZXggfHwgJyddPy5sYXllcnM7XG59O1xuIl19