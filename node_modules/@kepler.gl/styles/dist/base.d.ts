declare type InputProps = {
    active: boolean;
    disabled: boolean;
    error: string;
    size: string;
    type: string;
};
declare type SecondaryInputProps = {
    error: string;
};
declare type SwitchableProps = {
    checked: boolean;
};
export declare const transition = "all .4s ease";
export declare const transitionFast = "all .2s ease";
export declare const transitionSlow = "all .8s ease";
export declare const boxShadow = "0 1px 2px 0 rgba(0,0,0,0.10)";
export declare const boxSizing = "border-box";
export declare const borderRadius = "1px";
export declare const borderColor = "#3A414C";
export declare const borderColorLT = "#F1F1F1";
export declare const fontFamily = "ff-clan-web-pro, 'Helvetica Neue', Helvetica, sans-serif";
export declare const fontWeight = 400;
export declare const fontSize = "0.875em";
export declare const lineHeight = 1.71429;
export declare const labelColor = "#6A7485";
export declare const labelHoverColor = "#C6C6C6";
export declare const labelColorLT = "#6A7485";
export declare const textColor = "#A0A7B4";
export declare const textColorLT = "#3A414C";
export declare const dataTableTextColor = "#3A414C";
export declare const titleColorLT = "#29323C";
export declare const subtextColor = "#6A7485";
export declare const subtextColorLT = "#A0A7B4";
export declare const subtextColorActive = "#FFFFFF";
export declare const panelToggleBorderColor = "#FFFFFF";
export declare const panelTabWidth = "30px";
export declare const titleTextColor = "#FFFFFF";
export declare const textColorHl = "#F0F0F0";
export declare const textColorHlLT = "#000000";
export declare const activeColor = "#1FBAD6";
export declare const activeColorLT = "#2473BD";
export declare const activeColorHover = "#108188";
export declare const errorColor = "#F9042C";
export declare const logoColor = "#1FBAD6";
export declare const btnFontFamily = "ff-clan-web-pro, 'Helvetica Neue', Helvetica, sans-serif";
export declare const primaryBtnBgd = "#0F9668";
export declare const primaryBtnActBgd = "#13B17B";
export declare const primaryBtnColor = "#FFFFFF";
export declare const primaryBtnActColor = "#FFFFFF";
export declare const primaryBtnBgdHover = "#13B17B";
export declare const primaryBtnRadius = "2px";
export declare const primaryBtnFontSizeDefault = "11px";
export declare const primaryBtnFontSizeSmall = "10px";
export declare const primaryBtnFontSizeLarge = "14px";
export declare const primaryBtnBorder = "0";
export declare const secondaryBtnBgd = "#6A7485";
export declare const secondaryBtnActBgd = "#A0A7B4";
export declare const secondaryBtnColor = "#FFFFFF";
export declare const secondaryBtnActColor = "#FFFFFF";
export declare const secondaryBtnBgdHover = "#A0A7B4";
export declare const secondaryBtnBorder = "0";
export declare const ctaBtnBgd = "#0F9668";
export declare const ctaBtnBgdHover = "#13B17B";
export declare const ctaBtnActBgd = "#13B17B";
export declare const ctaBtnColor = "#FFFFFF";
export declare const ctaBtnActColor = "#FFFFFF";
export declare const linkBtnBgd = "transparent";
export declare const linkBtnActBgd = "transparent";
export declare const linkBtnColor = "#A0A7B4";
export declare const linkBtnActColor = "#F1F1F1";
export declare const linkBtnActBgdHover = "transparent";
export declare const linkBtnBorder = "0";
export declare const negativeBtnBgd = "#F9042C";
export declare const negativeBtnActBgd = "#FF193E";
export declare const negativeBtnBgdHover = "#FF193E";
export declare const negativeBtnBorder = "0";
export declare const negativeBtnColor = "#FFFFFF";
export declare const negativeBtnActColor = "#FFFFFF";
export declare const floatingBtnBgd = "#29323C";
export declare const floatingBtnActBgd = "#3A4552";
export declare const floatingBtnBgdHover = "#3A4552";
export declare const floatingBtnBorder = "0";
export declare const floatingBtnBorderHover = "0";
export declare const floatingBtnColor = "#6A7485";
export declare const floatingBtnActColor = "#FFFFFF";
export declare const selectionBtnBgd = "transparent";
export declare const selectionBtnActBgd = "transparent";
export declare const selectionBtnColor = "#D3D8E0";
export declare const selectionBtnActColor = "#0F9668";
export declare const selectionBtnBgdHover = "#0F9668";
export declare const selectionBtnBorder = "1";
export declare const selectionBtnBorderColor = "#D3D8E0";
export declare const selectionBtnBorderActColor = "#0F9668";
export declare const inputBoxHeight = "34px";
export declare const inputBoxHeightSmall = "24px";
export declare const inputBoxHeightTiny = "18px";
export declare const inputPadding = "4px 10px";
export declare const inputPaddingSmall = "4px 6px";
export declare const inputPaddingTiny = "2px 4px";
export declare const inputFontSize = "11px";
export declare const inputFontSizeSmall = "10px";
export declare const inputFontWeight = 500;
export declare const inputBgd = "#29323C";
export declare const inputBgdHover = "#3A414C";
export declare const inputBgdActive = "#3A414C";
export declare const inputBgdActiveLT = "#FFFFFF";
export declare const inputBorderColor = "#29323C";
export declare const inputBorderHoverColor = "#3A414C";
export declare const inputBorderHoverColorLT = "#6A7485";
export declare const inputBorderActiveColor = "#3A414C";
export declare const inputBorderActiveColorLT = "#3A414C";
export declare const inputColor = "#A0A7B4";
export declare const inputBorderRadius = "1px";
export declare const inputPlaceholderColor = "#6A7485";
export declare const inputPlaceholderColorLT = "#A0A7B4";
export declare const inputPlaceholderFontWeight = 400;
export declare const inputBoxShadow = "none";
export declare const inputBoxShadowActive = "none";
export declare const inputBoxShadowActiveLT = "none";
export declare const secondaryInputBgd = "#242730";
export declare const secondaryInputBgdHover = "#3A414C";
export declare const secondaryInputBgdActive = "#3A414C";
export declare const secondaryInputColor = "#A0A7B4";
export declare const secondaryInputBorderColor = "#242730";
export declare const secondaryInputBorderActiveColor = "#D3D8E0";
export declare const dropdownSelectHeight = 30;
export declare const selectColor = "#A0A7B4";
export declare const selectColorLT = "#29323C";
export declare const selectActiveBorderColor = "#D3D8E0";
export declare const selectFontSize = "11px";
export declare const selectFontWeight = "400";
export declare const selectFontWeightBold = "500";
export declare const selectColorPlaceHolder = "#6A7485";
export declare const selectColorPlaceHolderLT = "#29323C";
export declare const selectBackground = "#29323C";
export declare const selectBackgroundHover = "#3A414C";
export declare const selectBackgroundLT = "#FFFFFF";
export declare const selectBackgroundHoverLT = "#F8F8F9";
export declare const selectBorderColor = "#D3D8E0";
export declare const selectBorderColorLT = "#D3D8E0";
export declare const selectBorderRadius = "1px";
export declare const selectBorder = 0;
export declare const panelTabColor = "#6A7485";
export declare const dropdownListHighlightBg = "#6A7485";
export declare const dropdownListHighlightBgLT = "#F8F8F9";
export declare const dropdownListShadow = "0 6px 12px 0 rgba(0,0,0,0.16)";
export declare const dropdownListBgd = "#29323C";
export declare const toolbarItemBgdHover = "#3A4552";
export declare const toolbarItemIconHover = "#F0F0F0";
export declare const toolbarItemBorderHover = "transparent";
export declare const toolbarItemBorderRaddius = "0px";
export declare const dropdownListBgdLT = "#FFFFFF";
export declare const dropdownListBorderTop = "#242730";
export declare const dropdownListBorderTopLT = "#D3D8E0";
export declare const dropdownListLineHeight = 20;
export declare const dropdownWrapperZ = 100;
export declare const dropdownWapperMargin = 4;
export declare const switchWidth = 24;
export declare const switchHeight = 12;
export declare const switchLabelMargin = 12;
export declare const switchTrackBgd = "#29323C";
export declare const switchTrackBgdActive = "#1FBAD6";
export declare const switchTrackBorderRadius = "1px";
export declare const switchBtnBgd = "#6A7485";
export declare const switchBtnBgdActive = "#D3D8E0";
export declare const switchBtnBoxShadow = "0 2px 4px 0 rgba(0,0,0,0.40)";
export declare const switchBtnBorderRadius = "0";
export declare const switchBtnWidth = 12;
export declare const switchBtnHeight = 12;
export declare const secondarySwitchTrackBgd = "#242730";
export declare const secondarySwitchBtnBgd = "#3A414C";
export declare const checkboxWidth = 16;
export declare const checkboxHeight = 16;
export declare const checkboxMargin = 12;
export declare const checkboxBorderColor = "#D3D8E0";
export declare const checkboxBorderRadius = "2px";
export declare const checkboxBorderColorLT = "#D3D8E0";
export declare const checkboxBoxBgd = "white";
export declare const checkboxBoxBgdChecked = "#0F9668";
export declare const radioRadius = 8;
export declare const radioBorderRadius = 100;
export declare const radioBorderColor = "transparent";
export declare const radioButtonRadius = 4;
export declare const radioButtonBgdColor = "#D3D8E0";
export declare const sidePanelHeaderBg = "#29323C";
export declare const sidePanelHeaderBorder = "transparent";
export declare const layerConfigGroupMarginBottom = 12;
export declare const layerConfigGroupPaddingLeft = 18;
export declare const sidePanelInnerPadding = 16;
export declare const sidePanelBorder = 0;
export declare const sidePanelBorderColor = "transparent";
export declare const sidePanelBg = "#242730";
export declare const sidePanelScrollBarWidth = 10;
export declare const sidePanelScrollBarHeight = 10;
export declare const sideBarCloseBtnBgd = "#6A7485";
export declare const sideBarCloseBtnColor = "#29323C";
export declare const sideBarCloseBtnBgdHover = "#A0A7B4";
export declare const sidePanelTitleFontsize = "20px";
export declare const sidePanelTitleLineHeight = "1.71429";
export declare const panelBackground = "#29323C";
export declare const panelContentBackground = "#292E36";
export declare const panelBackgroundHover = "#3A4552";
export declare const panelHeaderBorderRadius = "0px";
export declare const chickletBgd = "#3A4552";
export declare const chickletBgdLT = "#D3D8E0";
export declare const panelHeaderIcon = "#6A7485";
export declare const panelHeaderIconActive = "#A0A7B4";
export declare const panelHeaderIconHover = "#F0F0F0";
export declare const panelHeaderHeight = 48;
export declare const layerPanelHeaderHeight = 48;
export declare const panelBoxShadow = "0 6px 12px 0 rgba(0,0,0,0.16)";
export declare const panelBorderRadius = "2px";
export declare const panelBackgroundLT = "#F8F8F9";
export declare const panelToggleMarginRight = 12;
export declare const panelToggleBottomPadding = 6;
export declare const panelBorderColor = "#3A414C";
export declare const panelBorder: string;
export declare const panelBorderLT: string;
export declare const mapPanelBackgroundColor = "#242730";
export declare const mapPanelHeaderBackgroundColor = "#29323C";
export declare const tooltipBg = "#3A414C";
export declare const tooltipColor = "#F0F0F0";
export declare const tooltipBoxShadow = "0 1px 2px 0 rgba(0,0,0,0.10)";
export declare const tooltipFontSize = "10px";
export declare const layerTypeIconSizeL = 50;
export declare const layerTypeIconPdL = 12;
export declare const layerTypeIconSizeSM = 28;
export declare const layerPanelToggleOptionColor = "#6A7485";
export declare const layerPanelToggleOptionColorActive = "#F0F0F0";
export declare const sidepanelDividerBorder = "1px";
export declare const sidepanelDividerMargin = 12;
export declare const sidepanelDividerHeight = 12;
export declare const bottomInnerPdSide = 32;
export declare const bottomInnerPdVert = 6;
export declare const bottomPanelGap = 20;
export declare const bottomPanelGapPalm = 20;
export declare const bottomWidgetPaddingTop = 20;
export declare const bottomWidgetPaddingRight = 20;
export declare const bottomWidgetPaddingBottom = 30;
export declare const bottomWidgetPaddingLeft = 20;
export declare const bottomWidgetBgd = "#29323C";
export declare const modalTitleColor = "#3A414C";
export declare const modalTitleFontSize = "24px";
export declare const modalTitleFontSizeSmaller = "18px";
export declare const modalFooterBgd = "#F8F8F9";
export declare const modalImagePlaceHolder = "#DDDFE3";
export declare const modalPadding = "10px 0";
export declare const modalLateralPadding = "72px";
export declare const modalPortableLateralPadding = "36px";
export declare const modalOverLayZ = 1001;
export declare const modalOverlayBgd = "rgba(0, 0, 0, 0.5)";
export declare const modalContentZ = 10002;
export declare const modalFooterZ = 10001;
export declare const modalTitleZ = 10003;
export declare const modalButtonZ = 10005;
export declare const modalDropdownBackground = "#FFFFFF";
export declare const modalDialogBgd = "#3A414C";
export declare const modalDialogColor = "#F0F0F0";
export declare const sliderBarColor = "#6A7485";
export declare const sliderBarBgd = "#3A414C";
export declare const sliderBarHoverColor = "#D3D8E0";
export declare const sliderBarRadius = "1px";
export declare const sliderBarHeight = 4;
export declare const sliderHandleHeight = 12;
export declare const sliderHandleWidth = 12;
export declare const sliderHandleColor = "#D3D8E0";
export declare const sliderHandleTextColor = "#D3D8E0";
export declare const sliderInactiveBorderColor = "#D3D8E0";
export declare const sliderBorderRadius = "0";
export declare const sliderHandleHoverColor = "#FFFFFF";
export declare const sliderHandleAfterContent = "";
export declare const sliderHandleShadow = "0 2px 4px 0 rgba(0,0,0,0.40)";
export declare const sliderInputHeight = 24;
export declare const sliderInputWidth = 56;
export declare const sliderInputFontSize = "10px";
export declare const sliderInputPadding = "4px 6px";
export declare const sliderMarginTopIsTime = -12;
export declare const sliderMarginTop = 12;
export declare const sliderMarginBottom = 12;
export declare const geocoderWidth = 360;
export declare const geocoderTop = 20;
export declare const geocoderRight = 12;
export declare const geocoderInputHeight = 36;
export declare const rangeBrushBgd = "#3A414C";
export declare const histogramFillInRange = "#1FBAD6";
export declare const histogramFillOutRange = "#6A7485";
export declare const axisFontSize = "10px";
export declare const axisFontColor = "#A0A7B4";
export declare const timeTitleFontSize = "10px";
export declare const rangePlotMargin: {
    top: number;
    bottom: number;
    left: number;
    right: number;
};
export declare const rangePlotMarginLarge: {
    top: number;
    bottom: number;
    left: number;
    right: number;
};
export declare const rangePlotH = 62;
export declare const rangePlotContainerH = 78;
export declare const rangePlotHLarge = 102;
export declare const rangePlotHLargePalm = 102;
export declare const rangePlotContainerHLarge = 120;
export declare const rangePlotContainerHLargePalm = 120;
export declare const notificationColors: {
    info: string;
    error: string;
    success: string;
    warning: string;
};
export declare const notificationPanelWidth = 240;
export declare const notificationPanelItemWidth: number;
export declare const notificationPanelItemHeight = 60;
export declare const actionPanelWidth = 110;
export declare const actionPanelHeight = 32;
export declare const fieldTokenRightMargin = 4;
export declare const textTruncate: {
    maxWidth: string;
    overflow: string;
    textOverflow: string;
    whiteSpace: string;
    wordWrap: string;
};
export declare const layerConfigGroupLabelBorderLeft = "2px";
export declare const layerConfigGroupLabelMargin = "-12px";
export declare const layerConfigGroupLabelPadding = "10px";
export declare const layerConfigGroupColor = "transparent";
export declare const layerConfigGroupLabelLabelMargin = "0";
export declare const layerConfigGroupLabelLabelFontSize = "12px";
export declare const styledConfigGroupHeaderBorder = "2px";
export declare const layerConfiguratorBorder = "0";
export declare const layerConfiguratorBorderColor = "";
export declare const layerConfiguratorMargin = "12px";
export declare const layerConfiguratorPadding = "12px 0 8px 0";
export declare const breakPoints: {
    palm: number;
    desk: number;
};
export declare const modalScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
export declare const theme: {
    input: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<InputProps, any>>;
    inputLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<InputProps, any>>;
    inlineInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    chickletedInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    chickletedInputLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    chickletedInputContainer: import("styled-components").FlattenSimpleInterpolation;
    secondaryChickletedInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    borderColor: string;
    borderColorLT: string;
    secondaryInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SecondaryInputProps, any>>;
    dropdownScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownScrollBarLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownList: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListItem: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListItemLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListAnchor: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListAnchorLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListHeader: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListSection: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListShadow: string;
    dropdownWrapperZ: number;
    dropdownWapperMargin: number;
    modalScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    scrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    sidePanelScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    inputSwitch: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    secondarySwitch: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    switchTrack: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    switchButton: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    inputCheckbox: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    inputRadio: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    checkboxBox: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    checkboxCheck: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    transition: string;
    transitionFast: string;
    transitionSlow: string;
    activeColor: string;
    activeColorHover: string;
    borderRadius: string;
    boxShadow: string;
    errorColor: string;
    dropdownListHighlightBg: string;
    dropdownListHighlightBgLT: string;
    dropdownListBgd: string;
    toolbarItemBgdHover: string;
    toolbarItemBorderHover: string;
    toolbarItemIconHover: string;
    toolbarItemBorderRaddius: string;
    dropdownListBgdLT: string;
    dropdownListBorderTop: string;
    dropdownListBorderTopLT: string;
    dropdownListLineHeight: number;
    labelColor: string;
    labelColorLT: string;
    labelHoverColor: string;
    mapPanelBackgroundColor: string;
    mapPanelHeaderBackgroundColor: string;
    selectActiveBorderColor: string;
    selectBackground: string;
    selectBackgroundLT: string;
    selectBackgroundHover: string;
    selectBackgroundHoverLT: string;
    selectBorder: number;
    selectBorderColor: string;
    selectBorderRadius: string;
    selectBorderColorLT: string;
    selectColor: string;
    selectColorPlaceHolder: string;
    selectColorPlaceHolderLT: string;
    selectFontSize: string;
    selectFontWeight: string;
    selectColorLT: string;
    selectFontWeightBold: string;
    panelTabColor: string;
    inputBgd: string;
    inputBgdHover: string;
    inputBgdActive: string;
    inputBgdActiveLT: string;
    inputBoxHeight: string;
    inputBoxHeightSmall: string;
    inputBoxHeightTiny: string;
    inputBorderColor: string;
    inputBorderActiveColor: string;
    inputBorderHoverColor: string;
    inputBorderRadius: string;
    inputColor: string;
    inputPadding: string;
    inputPaddingSmall: string;
    inputPaddingTiny: string;
    inputFontSize: string;
    inputFontSizeSmall: string;
    inputFontWeight: number;
    inputPlaceholderColor: string;
    inputPlaceholderColorLT: string;
    inputPlaceholderFontWeight: number;
    inputBoxShadow: string;
    inputBoxShadowActive: string;
    inputBoxShadowActiveLT: string;
    secondaryInputBgd: string;
    secondaryInputBgdHover: string;
    secondaryInputBgdActive: string;
    secondaryInputColor: string;
    secondaryInputBorderColor: string;
    secondaryInputBorderActiveColor: string;
    dropdownSelectHeight: number;
    switchWidth: number;
    switchHeight: number;
    switchTrackBgd: string;
    switchTrackBgdActive: string;
    switchTrackBorderRadius: string;
    switchBtnBgd: string;
    switchBtnBgdActive: string;
    switchBtnBoxShadow: string;
    switchBtnBorderRadius: string;
    switchBtnWidth: number;
    switchBtnHeight: number;
    switchLabelMargin: number;
    secondarySwitchTrackBgd: string;
    secondarySwitchBtnBgd: string;
    checkboxWidth: number;
    checkboxHeight: number;
    checkboxMargin: number;
    checkboxBorderColor: string;
    checkboxBorderRadius: string;
    checkboxBorderColorLT: string;
    checkboxBoxBgd: string;
    checkboxBoxBgdChecked: string;
    radioRadius: number;
    radioBorderRadius: number;
    radioBorderColor: string;
    radioButtonRadius: number;
    radioButtonBgdColor: string;
    radioTrack: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    radioButton: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    secondaryRadio: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    btnFontFamily: string;
    primaryBtnBgd: string;
    primaryBtnActBgd: string;
    primaryBtnColor: string;
    primaryBtnActColor: string;
    primaryBtnBgdHover: string;
    primaryBtnRadius: string;
    primaryBtnFontSizeDefault: string;
    primaryBtnFontSizeSmall: string;
    primaryBtnFontSizeLarge: string;
    primaryBtnBorder: string;
    secondaryBtnBgd: string;
    secondaryBtnActBgd: string;
    secondaryBtnBgdHover: string;
    secondaryBtnColor: string;
    secondaryBtnActColor: string;
    secondaryBtnBorder: string;
    negativeBtnBgd: string;
    negativeBtnActBgd: string;
    negativeBtnBgdHover: string;
    negativeBtnBorder: string;
    negativeBtnColor: string;
    negativeBtnActColor: string;
    linkBtnBgd: string;
    linkBtnActBgd: string;
    linkBtnColor: string;
    linkBtnActColor: string;
    linkBtnActBgdHover: string;
    linkBtnBorder: string;
    floatingBtnBgd: string;
    floatingBtnActBgd: string;
    floatingBtnBgdHover: string;
    floatingBtnBorder: string;
    floatingBtnBorderHover: string;
    floatingBtnColor: string;
    floatingBtnActColor: string;
    ctaBtnBgd: string;
    ctaBtnBgdHover: string;
    ctaBtnActBgd: string;
    ctaBtnColor: string;
    ctaBtnActColor: string;
    selectionBtnBgd: string;
    selectionBtnActBgd: string;
    selectionBtnColor: string;
    selectionBtnActColor: string;
    selectionBtnBgdHover: string;
    selectionBtnBorder: string;
    selectionBtnBorderColor: string;
    selectionBtnBorderActColor: string;
    modalTitleColor: string;
    modalTitleFontSize: string;
    modalTitleFontSizeSmaller: string;
    modalFooterBgd: string;
    modalImagePlaceHolder: string;
    modalPadding: string;
    modalDialogBgd: string;
    modalDialogColor: string;
    modalLateralPadding: string;
    modalPortableLateralPadding: string;
    modalOverLayZ: number;
    modalOverlayBgd: string;
    modalContentZ: number;
    modalFooterZ: number;
    modalTitleZ: number;
    modalButtonZ: number;
    modalDropdownBackground: string;
    sidePanelBg: string;
    sidePanelInnerPadding: number;
    sideBarCloseBtnBgd: string;
    sideBarCloseBtnColor: string;
    sideBarCloseBtnBgdHover: string;
    sidePanelHeaderBg: string;
    sidePanelHeaderBorder: string;
    sidePanelScrollBarWidth: number;
    sidePanelScrollBarHeight: number;
    sidePanelTitleFontsize: string;
    sidePanelTitleLineHeight: string;
    panelHeaderBorderRadius: string;
    sidePanelBorder: number;
    sidePanelBorderColor: string;
    layerConfigGroupLabelLabelFontSize: string;
    layerConfigGroupMarginBottom: number;
    layerConfigGroupPaddingLeft: number;
    chickletBgd: string;
    chickletBgdLT: string;
    panelBackground: string;
    panelContentBackground: string;
    panelBackgroundHover: string;
    panelBackgroundLT: string;
    panelToggleMarginRight: number;
    panelToggleBottomPadding: number;
    panelBoxShadow: string;
    panelBorderRadius: string;
    panelBorder: string;
    panelBorderColor: string;
    panelBorderLT: string;
    panelHeaderIcon: string;
    panelHeaderIconActive: string;
    panelHeaderIconHover: string;
    panelHeaderHeight: number;
    layerPanelHeaderHeight: number;
    panelDropdownScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    layerTypeIconSizeL: number;
    layerTypeIconPdL: number;
    layerTypeIconSizeSM: number;
    layerPanelToggleOptionColor: string;
    layerPanelToggleOptionColorActive: string;
    fontFamily: string;
    fontWeight: number;
    fontSize: string;
    lineHeight: number;
    textColor: string;
    textColorLT: string;
    dataTableTextColor: string;
    textColorHl: string;
    titleTextColor: string;
    subtextColor: string;
    subtextColorLT: string;
    subtextColorActive: string;
    panelToggleBorderColor: string;
    panelTabWidth: string;
    textTruncate: {
        maxWidth: string;
        overflow: string;
        textOverflow: string;
        whiteSpace: string;
        wordWrap: string;
    };
    titleColorLT: string;
    tooltipBg: string;
    tooltipColor: string;
    tooltipBoxShadow: string;
    tooltipFontSize: string;
    logoColor: string;
    sidepanelDividerBorder: string;
    sidepanelDividerMargin: number;
    sidepanelDividerHeight: number;
    bottomInnerPdSide: number;
    bottomInnerPdVert: number;
    bottomPanelGap: number;
    bottomPanelGapPalm: number;
    bottomWidgetPaddingTop: number;
    bottomWidgetPaddingRight: number;
    bottomWidgetPaddingBottom: number;
    bottomWidgetPaddingLeft: number;
    bottomWidgetBgd: string;
    sliderBarColor: string;
    sliderBarBgd: string;
    sliderBarHoverColor: string;
    sliderBarRadius: string;
    sliderBarHeight: number;
    sliderHandleHeight: number;
    sliderHandleWidth: number;
    sliderHandleColor: string;
    sliderHandleTextColor: string;
    sliderInactiveBorderColor: string;
    sliderBorderRadius: string;
    sliderHandleHoverColor: string;
    sliderHandleAfterContent: string;
    sliderHandleShadow: string;
    sliderInputHeight: number;
    sliderInputWidth: number;
    sliderMarginTopIsTime: number;
    sliderMarginTop: number;
    sliderMarginBottom: number;
    geocoderWidth: number;
    geocoderTop: number;
    geocoderRight: number;
    geocoderInputHeight: number;
    rangeBrushBgd: string;
    histogramFillInRange: string;
    histogramFillOutRange: string;
    axisFontSize: string;
    axisFontColor: string;
    timeTitleFontSize: string;
    rangePlotMargin: {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    rangePlotMarginLarge: {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    rangePlotH: number;
    rangePlotHLarge: number;
    rangePlotHLargePalm: number;
    rangePlotContainerH: number;
    rangePlotContainerHLarge: number;
    rangePlotContainerHLargePalm: number;
    notificationColors: {
        info: string;
        error: string;
        success: string;
        warning: string;
    };
    notificationPanelWidth: number;
    notificationPanelItemWidth: number;
    notificationPanelItemHeight: number;
    headerRowHeight: number;
    rowHeight: number;
    headerPaddingTop: number;
    headerPaddingBottom: number;
    cellPaddingSide: number;
    edgeCellPaddingSide: number;
    cellFontSize: number;
    gridPaddingSide: number;
    optionButtonColor: string;
    headerCellBackground: string;
    headerCellBorderColor: string;
    headerCellIconColor: string;
    cellBorderColor: string;
    evenRowBackground: string;
    oddRowBackground: string;
    pinnedGridBorderColor: string;
    timeDisplayBorderRadius: number;
    timeDisplayHeight: number;
    timeDisplayMinWidth: number;
    timeDisplayOpacity: number;
    timeDisplayPadding: string;
    exportIntraSectionMargin: string;
    actionPanelWidth: number;
    actionPanelHeight: number;
    breakPoints: {
        palm: number;
        desk: number;
    };
    progressBarColor: string;
    progressBarTrackColor: string;
    layerConfigGroupLabelBorderLeft: string;
    layerConfigGroupLabelMargin: string;
    layerConfigGroupLabelPadding: string;
    layerConfigGroupColor: string;
    layerConfigGroupLabelLabelMargin: string;
    styledConfigGroupHeaderBorder: string;
    layerConfiguratorBorder: string;
    layerConfiguratorBorderColor: string;
    layerConfiguratorMargin: string;
    layerConfiguratorPadding: string;
    fieldTokenRightMargin: number;
    sidePanel: {
        width: number;
        margin: {
            top: number;
            left: number;
            bottom: number;
            right: number;
        };
        headerHeight: number;
    };
    mapControl: {
        width: number;
        padding: number;
        mapLegend: {
            pinned: {
                bottom: number;
                right: number;
            };
        };
    };
};
export declare const themeLT: {
    activeColor: string;
    input: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<InputProps, any>>;
    textColor: string;
    sidePanelBg: string;
    selectColor: string;
    titleTextColor: string;
    sidePanelHeaderBg: string;
    subtextColorActive: string;
    tooltipBg: string;
    tooltipColor: string;
    dropdownListBgd: string;
    toolbarItemBgdHover: string;
    textColorHl: string;
    inputBgd: string;
    inputBgdHover: string;
    inputBgdActive: string;
    inputBgdActiveLT: string;
    dropdownListHighlightBg: string;
    toolbarItemIconHover: string;
    panelBackground: string;
    panelContentBackground: string;
    bottomWidgetBgd: string;
    panelBackgroundHover: string;
    panelBorderColor: string;
    panelHeaderIconActive: string;
    panelHeaderIconHover: string;
    sideBarCloseBtnBgd: string;
    sideBarCloseBtnColor: string;
    sideBarCloseBtnBgdHover: string;
    secondaryInputBgd: string;
    secondaryInputBgdActive: string;
    secondaryInputBgdHover: string;
    secondaryInputBorderActiveColor: string;
    secondaryInputBorderColor: string;
    secondaryInputColor: string;
    chickletBgd: string;
    mapPanelBackgroundColor: string;
    mapPanelHeaderBackgroundColor: string;
    sliderBarColor: string;
    sliderBarBgd: string;
    sliderHandleColor: string;
    sliderInactiveBorderColor: string;
    sliderHandleTextColor: string;
    sliderHandleHoverColor: string;
    subtextColor: string;
    switchBtnBgd: string;
    secondarySwitchBtnBgd: string;
    secondarySwitchTrackBgd: string;
    switchBtnBgdActive: string;
    switchTrackBgd: string;
    switchTrackBgdActive: string;
    primaryBtnBgd: string;
    primaryBtnActBgd: string;
    primaryBtnBgdHover: string;
    secondaryBtnBgd: string;
    secondaryBtnActBgd: string;
    secondaryBtnBgdHover: string;
    floatingBtnBgd: string;
    floatingBtnActBgd: string;
    floatingBtnBgdHover: string;
    floatingBtnColor: string;
    floatingBtnActColor: string;
    linkBtnActColor: string;
    rangeBrushBgd: string;
    histogramFillInRange: string;
    histogramFillOutRange: string;
    axisFontColor: string;
    inputLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<InputProps, any>>;
    inlineInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    chickletedInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    chickletedInputLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    chickletedInputContainer: import("styled-components").FlattenSimpleInterpolation;
    secondaryChickletedInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    borderColor: string;
    borderColorLT: string;
    secondaryInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SecondaryInputProps, any>>;
    dropdownScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownScrollBarLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownList: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListItem: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListItemLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListAnchor: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListAnchorLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListHeader: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListSection: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListShadow: string;
    dropdownWrapperZ: number;
    dropdownWapperMargin: number;
    modalScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    scrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    sidePanelScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    inputSwitch: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    secondarySwitch: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    switchTrack: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    switchButton: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    inputCheckbox: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    inputRadio: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    checkboxBox: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    checkboxCheck: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    transition: string;
    transitionFast: string;
    transitionSlow: string;
    activeColorHover: string;
    borderRadius: string;
    boxShadow: string;
    errorColor: string;
    dropdownListHighlightBgLT: string;
    toolbarItemBorderHover: string;
    toolbarItemBorderRaddius: string;
    dropdownListBgdLT: string;
    dropdownListBorderTop: string;
    dropdownListBorderTopLT: string;
    dropdownListLineHeight: number;
    labelColor: string;
    labelColorLT: string;
    labelHoverColor: string;
    selectActiveBorderColor: string;
    selectBackground: string;
    selectBackgroundLT: string;
    selectBackgroundHover: string;
    selectBackgroundHoverLT: string;
    selectBorder: number;
    selectBorderColor: string;
    selectBorderRadius: string;
    selectBorderColorLT: string;
    selectColorPlaceHolder: string;
    selectColorPlaceHolderLT: string;
    selectFontSize: string;
    selectFontWeight: string;
    selectColorLT: string;
    selectFontWeightBold: string;
    panelTabColor: string;
    inputBoxHeight: string;
    inputBoxHeightSmall: string;
    inputBoxHeightTiny: string;
    inputBorderColor: string;
    inputBorderActiveColor: string;
    inputBorderHoverColor: string;
    inputBorderRadius: string;
    inputColor: string;
    inputPadding: string;
    inputPaddingSmall: string;
    inputPaddingTiny: string;
    inputFontSize: string;
    inputFontSizeSmall: string;
    inputFontWeight: number;
    inputPlaceholderColor: string;
    inputPlaceholderColorLT: string;
    inputPlaceholderFontWeight: number;
    inputBoxShadow: string;
    inputBoxShadowActive: string;
    inputBoxShadowActiveLT: string;
    dropdownSelectHeight: number;
    switchWidth: number;
    switchHeight: number;
    switchTrackBorderRadius: string;
    switchBtnBoxShadow: string;
    switchBtnBorderRadius: string;
    switchBtnWidth: number;
    switchBtnHeight: number;
    switchLabelMargin: number;
    checkboxWidth: number;
    checkboxHeight: number;
    checkboxMargin: number;
    checkboxBorderColor: string;
    checkboxBorderRadius: string;
    checkboxBorderColorLT: string;
    checkboxBoxBgd: string;
    checkboxBoxBgdChecked: string;
    radioRadius: number;
    radioBorderRadius: number;
    radioBorderColor: string;
    radioButtonRadius: number;
    radioButtonBgdColor: string;
    radioTrack: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    radioButton: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    secondaryRadio: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    btnFontFamily: string;
    primaryBtnColor: string;
    primaryBtnActColor: string;
    primaryBtnRadius: string;
    primaryBtnFontSizeDefault: string;
    primaryBtnFontSizeSmall: string;
    primaryBtnFontSizeLarge: string;
    primaryBtnBorder: string;
    secondaryBtnColor: string;
    secondaryBtnActColor: string;
    secondaryBtnBorder: string;
    negativeBtnBgd: string;
    negativeBtnActBgd: string;
    negativeBtnBgdHover: string;
    negativeBtnBorder: string;
    negativeBtnColor: string;
    negativeBtnActColor: string;
    linkBtnBgd: string;
    linkBtnActBgd: string;
    linkBtnColor: string;
    linkBtnActBgdHover: string;
    linkBtnBorder: string;
    floatingBtnBorder: string;
    floatingBtnBorderHover: string;
    ctaBtnBgd: string;
    ctaBtnBgdHover: string;
    ctaBtnActBgd: string;
    ctaBtnColor: string;
    ctaBtnActColor: string;
    selectionBtnBgd: string;
    selectionBtnActBgd: string;
    selectionBtnColor: string;
    selectionBtnActColor: string;
    selectionBtnBgdHover: string;
    selectionBtnBorder: string;
    selectionBtnBorderColor: string;
    selectionBtnBorderActColor: string;
    modalTitleColor: string;
    modalTitleFontSize: string;
    modalTitleFontSizeSmaller: string;
    modalFooterBgd: string;
    modalImagePlaceHolder: string;
    modalPadding: string;
    modalDialogBgd: string;
    modalDialogColor: string;
    modalLateralPadding: string;
    modalPortableLateralPadding: string;
    modalOverLayZ: number;
    modalOverlayBgd: string;
    modalContentZ: number;
    modalFooterZ: number;
    modalTitleZ: number;
    modalButtonZ: number;
    modalDropdownBackground: string;
    sidePanelInnerPadding: number;
    sidePanelHeaderBorder: string;
    sidePanelScrollBarWidth: number;
    sidePanelScrollBarHeight: number;
    sidePanelTitleFontsize: string;
    sidePanelTitleLineHeight: string;
    panelHeaderBorderRadius: string;
    sidePanelBorder: number;
    sidePanelBorderColor: string;
    layerConfigGroupLabelLabelFontSize: string;
    layerConfigGroupMarginBottom: number;
    layerConfigGroupPaddingLeft: number;
    chickletBgdLT: string;
    panelBackgroundLT: string;
    panelToggleMarginRight: number;
    panelToggleBottomPadding: number;
    panelBoxShadow: string;
    panelBorderRadius: string;
    panelBorder: string;
    panelBorderLT: string;
    panelHeaderIcon: string;
    panelHeaderHeight: number;
    layerPanelHeaderHeight: number;
    panelDropdownScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    layerTypeIconSizeL: number;
    layerTypeIconPdL: number;
    layerTypeIconSizeSM: number;
    layerPanelToggleOptionColor: string;
    layerPanelToggleOptionColorActive: string;
    fontFamily: string;
    fontWeight: number;
    fontSize: string;
    lineHeight: number;
    textColorLT: string;
    dataTableTextColor: string;
    subtextColorLT: string;
    panelToggleBorderColor: string;
    panelTabWidth: string;
    textTruncate: {
        maxWidth: string;
        overflow: string;
        textOverflow: string;
        whiteSpace: string;
        wordWrap: string;
    };
    titleColorLT: string;
    tooltipBoxShadow: string;
    tooltipFontSize: string;
    logoColor: string;
    sidepanelDividerBorder: string;
    sidepanelDividerMargin: number;
    sidepanelDividerHeight: number;
    bottomInnerPdSide: number;
    bottomInnerPdVert: number;
    bottomPanelGap: number;
    bottomPanelGapPalm: number;
    bottomWidgetPaddingTop: number;
    bottomWidgetPaddingRight: number;
    bottomWidgetPaddingBottom: number;
    bottomWidgetPaddingLeft: number;
    sliderBarHoverColor: string;
    sliderBarRadius: string;
    sliderBarHeight: number;
    sliderHandleHeight: number;
    sliderHandleWidth: number;
    sliderBorderRadius: string;
    sliderHandleAfterContent: string;
    sliderHandleShadow: string;
    sliderInputHeight: number;
    sliderInputWidth: number;
    sliderMarginTopIsTime: number;
    sliderMarginTop: number;
    sliderMarginBottom: number;
    geocoderWidth: number;
    geocoderTop: number;
    geocoderRight: number;
    geocoderInputHeight: number;
    axisFontSize: string;
    timeTitleFontSize: string;
    rangePlotMargin: {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    rangePlotMarginLarge: {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    rangePlotH: number;
    rangePlotHLarge: number;
    rangePlotHLargePalm: number;
    rangePlotContainerH: number;
    rangePlotContainerHLarge: number;
    rangePlotContainerHLargePalm: number;
    notificationColors: {
        info: string;
        error: string;
        success: string;
        warning: string;
    };
    notificationPanelWidth: number;
    notificationPanelItemWidth: number;
    notificationPanelItemHeight: number;
    headerRowHeight: number;
    rowHeight: number;
    headerPaddingTop: number;
    headerPaddingBottom: number;
    cellPaddingSide: number;
    edgeCellPaddingSide: number;
    cellFontSize: number;
    gridPaddingSide: number;
    optionButtonColor: string;
    headerCellBackground: string;
    headerCellBorderColor: string;
    headerCellIconColor: string;
    cellBorderColor: string;
    evenRowBackground: string;
    oddRowBackground: string;
    pinnedGridBorderColor: string;
    timeDisplayBorderRadius: number;
    timeDisplayHeight: number;
    timeDisplayMinWidth: number;
    timeDisplayOpacity: number;
    timeDisplayPadding: string;
    exportIntraSectionMargin: string;
    actionPanelWidth: number;
    actionPanelHeight: number;
    breakPoints: {
        palm: number;
        desk: number;
    };
    progressBarColor: string;
    progressBarTrackColor: string;
    layerConfigGroupLabelBorderLeft: string;
    layerConfigGroupLabelMargin: string;
    layerConfigGroupLabelPadding: string;
    layerConfigGroupColor: string;
    layerConfigGroupLabelLabelMargin: string;
    styledConfigGroupHeaderBorder: string;
    layerConfiguratorBorder: string;
    layerConfiguratorBorderColor: string;
    layerConfiguratorMargin: string;
    layerConfiguratorPadding: string;
    fieldTokenRightMargin: number;
    sidePanel: {
        width: number;
        margin: {
            top: number;
            left: number;
            bottom: number;
            right: number;
        };
        headerHeight: number;
    };
    mapControl: {
        width: number;
        padding: number;
        mapLegend: {
            pinned: {
                bottom: number;
                right: number;
            };
        };
    };
};
export declare const themeBS: {
    activeColor: string;
    dropdownListBgd: string;
    toolbarItemBgdHover: string;
    dropdownListBorderTop: string;
    dropdownListHighlightBg: string;
    toolbarItemIconHover: string;
    inputBgd: string;
    inputBgdActive: string;
    inputBgdHover: string;
    inputBorderActiveColor: string;
    inputColor: string;
    chickletBgd: string;
    panelBackground: string;
    panelBackgroundHover: string;
    panelContentBackground: string;
    bottomWidgetBgd: string;
    panelHeaderIconActive: string;
    panelHeaderIconHover: string;
    panelBorderColor: string;
    primaryBtnBgd: string;
    primaryBtnBgdHover: string;
    primaryBtnColor: string;
    secondaryBtnActBgd: string;
    secondaryBtnActColor: string;
    secondaryBtnBgd: string;
    secondaryBtnBgdHover: string;
    ctnBtnBgd: string;
    ctnBtnBgdHover: string;
    ctnBtnColor: string;
    ctnBtnActColor: string;
    sideBarCloseBtnBgd: string;
    sideBarCloseBtnColor: string;
    sideBarCloseBtnBgdHover: string;
    floatingBtnBgd: string;
    floatingBtnActBgd: string;
    floatingBtnBgdHover: string;
    floatingBtnColor: string;
    floatingBtnActColor: string;
    secondaryBtnColor: string;
    secondaryInputBgd: string;
    secondaryInputBgdActive: string;
    secondaryInputBgdHover: string;
    secondaryInputBorderActiveColor: string;
    secondaryInputBorderColor: string;
    secondaryInputColor: string;
    sidePanelBg: string;
    sidePanelHeaderBg: string;
    subtextColor: string;
    panelTabColor: string;
    subtextColorActive: string;
    textColor: string;
    textColorHl: string;
    mapPanelBackgroundColor: string;
    mapPanelHeaderBackgroundColor: string;
    titleTextColor: string;
    switchBtnBgdActive: string;
    switchBtnBgd: string;
    switchTrackBgdActive: string;
    secondarySwitchTrackBgd: string;
    switchTrackBgd: string;
    secondarySwitchBtnBgd: string;
    histogramFillInRange: string;
    histogramFillOutRange: string;
    rangeBrushBgd: string;
    sliderBarBgd: string;
    sliderHandleColor: string;
    sliderInactiveBorderColor: string;
    sliderHandleTextColor: string;
    sliderBarColor: string;
    input: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<InputProps, any>>;
    inputLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<InputProps, any>>;
    inlineInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    chickletedInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    chickletedInputLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    chickletedInputContainer: import("styled-components").FlattenSimpleInterpolation;
    secondaryChickletedInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    borderColor: string;
    borderColorLT: string;
    secondaryInput: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SecondaryInputProps, any>>;
    dropdownScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownScrollBarLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownList: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListItem: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListItemLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListAnchor: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListAnchorLT: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListHeader: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListSection: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    dropdownListShadow: string;
    dropdownWrapperZ: number;
    dropdownWapperMargin: number;
    modalScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    scrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    sidePanelScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    inputSwitch: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    secondarySwitch: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    switchTrack: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    switchButton: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    inputCheckbox: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    inputRadio: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    checkboxBox: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    checkboxCheck: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    transition: string;
    transitionFast: string;
    transitionSlow: string;
    activeColorHover: string;
    borderRadius: string;
    boxShadow: string;
    errorColor: string;
    dropdownListHighlightBgLT: string;
    toolbarItemBorderHover: string;
    toolbarItemBorderRaddius: string;
    dropdownListBgdLT: string;
    dropdownListBorderTopLT: string;
    dropdownListLineHeight: number;
    labelColor: string;
    labelColorLT: string;
    labelHoverColor: string;
    selectActiveBorderColor: string;
    selectBackground: string;
    selectBackgroundLT: string;
    selectBackgroundHover: string;
    selectBackgroundHoverLT: string;
    selectBorder: number;
    selectBorderColor: string;
    selectBorderRadius: string;
    selectBorderColorLT: string;
    selectColor: string;
    selectColorPlaceHolder: string;
    selectColorPlaceHolderLT: string;
    selectFontSize: string;
    selectFontWeight: string;
    selectColorLT: string;
    selectFontWeightBold: string;
    inputBgdActiveLT: string;
    inputBoxHeight: string;
    inputBoxHeightSmall: string;
    inputBoxHeightTiny: string;
    inputBorderColor: string;
    inputBorderHoverColor: string;
    inputBorderRadius: string;
    inputPadding: string;
    inputPaddingSmall: string;
    inputPaddingTiny: string;
    inputFontSize: string;
    inputFontSizeSmall: string;
    inputFontWeight: number;
    inputPlaceholderColor: string;
    inputPlaceholderColorLT: string;
    inputPlaceholderFontWeight: number;
    inputBoxShadow: string;
    inputBoxShadowActive: string;
    inputBoxShadowActiveLT: string;
    dropdownSelectHeight: number;
    switchWidth: number;
    switchHeight: number;
    switchTrackBorderRadius: string;
    switchBtnBoxShadow: string;
    switchBtnBorderRadius: string;
    switchBtnWidth: number;
    switchBtnHeight: number;
    switchLabelMargin: number;
    checkboxWidth: number;
    checkboxHeight: number;
    checkboxMargin: number;
    checkboxBorderColor: string;
    checkboxBorderRadius: string;
    checkboxBorderColorLT: string;
    checkboxBoxBgd: string;
    checkboxBoxBgdChecked: string;
    radioRadius: number;
    radioBorderRadius: number;
    radioBorderColor: string;
    radioButtonRadius: number;
    radioButtonBgdColor: string;
    radioTrack: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    radioButton: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    secondaryRadio: import("styled-components").FlattenInterpolation<import("styled-components").ThemedStyledProps<SwitchableProps, any>>;
    btnFontFamily: string;
    primaryBtnActBgd: string;
    primaryBtnActColor: string;
    primaryBtnRadius: string;
    primaryBtnFontSizeDefault: string;
    primaryBtnFontSizeSmall: string;
    primaryBtnFontSizeLarge: string;
    primaryBtnBorder: string;
    secondaryBtnBorder: string;
    negativeBtnBgd: string;
    negativeBtnActBgd: string;
    negativeBtnBgdHover: string;
    negativeBtnBorder: string;
    negativeBtnColor: string;
    negativeBtnActColor: string;
    linkBtnBgd: string;
    linkBtnActBgd: string;
    linkBtnColor: string;
    linkBtnActColor: string;
    linkBtnActBgdHover: string;
    linkBtnBorder: string;
    floatingBtnBorder: string;
    floatingBtnBorderHover: string;
    ctaBtnBgd: string;
    ctaBtnBgdHover: string;
    ctaBtnActBgd: string;
    ctaBtnColor: string;
    ctaBtnActColor: string;
    selectionBtnBgd: string;
    selectionBtnActBgd: string;
    selectionBtnColor: string;
    selectionBtnActColor: string;
    selectionBtnBgdHover: string;
    selectionBtnBorder: string;
    selectionBtnBorderColor: string;
    selectionBtnBorderActColor: string;
    modalTitleColor: string;
    modalTitleFontSize: string;
    modalTitleFontSizeSmaller: string;
    modalFooterBgd: string;
    modalImagePlaceHolder: string;
    modalPadding: string;
    modalDialogBgd: string;
    modalDialogColor: string;
    modalLateralPadding: string;
    modalPortableLateralPadding: string;
    modalOverLayZ: number;
    modalOverlayBgd: string;
    modalContentZ: number;
    modalFooterZ: number;
    modalTitleZ: number;
    modalButtonZ: number;
    modalDropdownBackground: string;
    sidePanelInnerPadding: number;
    sidePanelHeaderBorder: string;
    sidePanelScrollBarWidth: number;
    sidePanelScrollBarHeight: number;
    sidePanelTitleFontsize: string;
    sidePanelTitleLineHeight: string;
    panelHeaderBorderRadius: string;
    sidePanelBorder: number;
    sidePanelBorderColor: string;
    layerConfigGroupLabelLabelFontSize: string;
    layerConfigGroupMarginBottom: number;
    layerConfigGroupPaddingLeft: number;
    chickletBgdLT: string;
    panelBackgroundLT: string;
    panelToggleMarginRight: number;
    panelToggleBottomPadding: number;
    panelBoxShadow: string;
    panelBorderRadius: string;
    panelBorder: string;
    panelBorderLT: string;
    panelHeaderIcon: string;
    panelHeaderHeight: number;
    layerPanelHeaderHeight: number;
    panelDropdownScrollBar: import("styled-components").FlattenInterpolation<import("styled-components").ThemeProps<any>>;
    layerTypeIconSizeL: number;
    layerTypeIconPdL: number;
    layerTypeIconSizeSM: number;
    layerPanelToggleOptionColor: string;
    layerPanelToggleOptionColorActive: string;
    fontFamily: string;
    fontWeight: number;
    fontSize: string;
    lineHeight: number;
    textColorLT: string;
    dataTableTextColor: string;
    subtextColorLT: string;
    panelToggleBorderColor: string;
    panelTabWidth: string;
    textTruncate: {
        maxWidth: string;
        overflow: string;
        textOverflow: string;
        whiteSpace: string;
        wordWrap: string;
    };
    titleColorLT: string;
    tooltipBg: string;
    tooltipColor: string;
    tooltipBoxShadow: string;
    tooltipFontSize: string;
    logoColor: string;
    sidepanelDividerBorder: string;
    sidepanelDividerMargin: number;
    sidepanelDividerHeight: number;
    bottomInnerPdSide: number;
    bottomInnerPdVert: number;
    bottomPanelGap: number;
    bottomPanelGapPalm: number;
    bottomWidgetPaddingTop: number;
    bottomWidgetPaddingRight: number;
    bottomWidgetPaddingBottom: number;
    bottomWidgetPaddingLeft: number;
    sliderBarHoverColor: string;
    sliderBarRadius: string;
    sliderBarHeight: number;
    sliderHandleHeight: number;
    sliderHandleWidth: number;
    sliderBorderRadius: string;
    sliderHandleHoverColor: string;
    sliderHandleAfterContent: string;
    sliderHandleShadow: string;
    sliderInputHeight: number;
    sliderInputWidth: number;
    sliderMarginTopIsTime: number;
    sliderMarginTop: number;
    sliderMarginBottom: number;
    geocoderWidth: number;
    geocoderTop: number;
    geocoderRight: number;
    geocoderInputHeight: number;
    axisFontSize: string;
    axisFontColor: string;
    timeTitleFontSize: string;
    rangePlotMargin: {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    rangePlotMarginLarge: {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    rangePlotH: number;
    rangePlotHLarge: number;
    rangePlotHLargePalm: number;
    rangePlotContainerH: number;
    rangePlotContainerHLarge: number;
    rangePlotContainerHLargePalm: number;
    notificationColors: {
        info: string;
        error: string;
        success: string;
        warning: string;
    };
    notificationPanelWidth: number;
    notificationPanelItemWidth: number;
    notificationPanelItemHeight: number;
    headerRowHeight: number;
    rowHeight: number;
    headerPaddingTop: number;
    headerPaddingBottom: number;
    cellPaddingSide: number;
    edgeCellPaddingSide: number;
    cellFontSize: number;
    gridPaddingSide: number;
    optionButtonColor: string;
    headerCellBackground: string;
    headerCellBorderColor: string;
    headerCellIconColor: string;
    cellBorderColor: string;
    evenRowBackground: string;
    oddRowBackground: string;
    pinnedGridBorderColor: string;
    timeDisplayBorderRadius: number;
    timeDisplayHeight: number;
    timeDisplayMinWidth: number;
    timeDisplayOpacity: number;
    timeDisplayPadding: string;
    exportIntraSectionMargin: string;
    actionPanelWidth: number;
    actionPanelHeight: number;
    breakPoints: {
        palm: number;
        desk: number;
    };
    progressBarColor: string;
    progressBarTrackColor: string;
    layerConfigGroupLabelBorderLeft: string;
    layerConfigGroupLabelMargin: string;
    layerConfigGroupLabelPadding: string;
    layerConfigGroupColor: string;
    layerConfigGroupLabelLabelMargin: string;
    styledConfigGroupHeaderBorder: string;
    layerConfiguratorBorder: string;
    layerConfiguratorBorderColor: string;
    layerConfiguratorMargin: string;
    layerConfiguratorPadding: string;
    fieldTokenRightMargin: number;
    sidePanel: {
        width: number;
        margin: {
            top: number;
            left: number;
            bottom: number;
            right: number;
        };
        headerHeight: number;
    };
    mapControl: {
        width: number;
        padding: number;
        mapLegend: {
            pinned: {
                bottom: number;
                right: number;
            };
        };
    };
};
export {};
