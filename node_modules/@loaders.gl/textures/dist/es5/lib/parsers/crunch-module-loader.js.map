{"version":3,"file":"crunch-module-loader.js","names":["loadCrunchModule","options","modules","crunch","loadCrunch","crunchModule","loadLibrary","loadCrunchDecoder","globalThis","LoadCrunchDecoder"],"sources":["../../../../src/lib/parsers/crunch-module-loader.ts"],"sourcesContent":["// @ts-nocheck\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\n/**\n * Load crunch decoder module\n * @param options - loader options\n * @returns Promise of module object\n */\nexport async function loadCrunchModule(options): Promise<any> {\n  const modules = options.modules || {};\n  if (modules.crunch) {\n    return modules.crunch;\n  }\n\n  return loadCrunch(options);\n}\n\nlet crunchModule;\n\n/**\n * Load crunch decoder module\n * @param {any} options - Loader options\n * @returns {Promise<any>} Promise of Module object\n */\nasync function loadCrunch(options) {\n  if (crunchModule) {\n    return crunchModule;\n  }\n\n  let loadCrunchDecoder = await loadLibrary('crunch.js', 'textures', options);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  loadCrunchDecoder = loadCrunchDecoder || globalThis.LoadCrunchDecoder;\n  crunchModule = loadCrunchDecoder();\n  return crunchModule;\n}\n"],"mappings":";;;;;;;;;AACA;AAAqD,SAO/BA,gBAAgB;EAAA;AAAA;AAAA;EAAA,8EAA/B,iBAAgCC,OAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YACtCC,OAAO,GAAGD,OAAO,CAACC,OAAO,IAAI,CAAC,CAAC;YAAA,KACjCA,OAAO,CAACC,MAAM;cAAA;cAAA;YAAA;YAAA,iCACTD,OAAO,CAACC,MAAM;UAAA;YAAA,iCAGhBC,UAAU,CAACH,OAAO,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;EAAA;AAAA;AAED,IAAII,YAAY;;AAAC,SAOFD,UAAU;EAAA;AAAA;AAAA;EAAA,wEAAzB,kBAA0BH,OAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,KAC3BI,YAAY;cAAA;cAAA;YAAA;YAAA,kCACPA,YAAY;UAAA;YAAA;YAAA,OAGS,IAAAC,wBAAW,EAAC,WAAW,EAAE,UAAU,EAAEL,OAAO,CAAC;UAAA;YAAvEM,iBAAiB;YAIrBA,iBAAiB,GAAGA,iBAAiB,IAAIC,UAAU,CAACC,iBAAiB;YACrEJ,YAAY,GAAGE,iBAAiB,EAAE;YAAC,kCAC5BF,YAAY;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACpB;EAAA;AAAA"}