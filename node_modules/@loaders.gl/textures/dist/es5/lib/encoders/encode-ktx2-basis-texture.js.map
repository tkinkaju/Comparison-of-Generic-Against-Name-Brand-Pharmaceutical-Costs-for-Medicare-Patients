{"version":3,"file":"encode-ktx2-basis-texture.js","names":["encodeKTX2BasisTexture","image","options","useSRGB","qualityLevel","encodeUASTC","mipmaps","loadBasisEncoderModule","BasisEncoder","basisEncoder","basisFileData","Uint8Array","width","height","setCreateKTX2File","setKTX2UASTCSupercompression","setKTX2SRGBTransferFunc","setSliceSourceImage","data","setPerceptual","setMipSRGB","setQualityLevel","setUASTC","setMipGen","numOutputBytes","encode","actualKTX2FileData","subarray","buffer","console","error","delete"],"sources":["../../../../src/lib/encoders/encode-ktx2-basis-texture.ts"],"sourcesContent":["import type {ImageDataType} from '@loaders.gl/images';\nimport {loadBasisEncoderModule} from '../parsers/basis-module-loader';\n\n/**\n * Encodes image to Basis Universal Supercompressed GPU Texture.\n * Code example is taken from here - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/ktx2_encode_test/index.html#L279\n * BasisEncoder API - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/transcoder/basis_wrappers.cpp#L1712\n * @param image\n * @param options\n */\nexport async function encodeKTX2BasisTexture(\n  image: ImageDataType,\n  options: any = {}\n): Promise<ArrayBuffer> {\n  // TODO remove default values after writer options will be normalized like it done in load module.\n  const {useSRGB = false, qualityLevel = 10, encodeUASTC = false, mipmaps = false} = options;\n  const {BasisEncoder} = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}\n"],"mappings":";;;;;;;;;AACA;AAAsE,SAShDA,sBAAsB;EAAA;AAAA;AAAA;EAAA,oFAArC,iBACLC,KAAoB;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YACpBC,OAAY,2DAAG,CAAC,CAAC;YAAA,mBAGkEA,OAAO,CAAnFC,OAAO,EAAPA,OAAO,iCAAG,KAAK,6CAA6DD,OAAO,CAAlEE,YAAY,EAAZA,YAAY,sCAAG,EAAE,iDAA0CF,OAAO,CAA/CG,WAAW,EAAXA,WAAW,qCAAG,KAAK,4CAAqBH,OAAO,CAA1BI,OAAO,EAAPA,OAAO,iCAAG,KAAK;YAAA;YAAA,OAClD,IAAAC,yCAAsB,EAACL,OAAO,CAAC;UAAA;YAAA;YAArDM,YAAY,yBAAZA,YAAY;YACbC,YAAY,GAAG,IAAID,YAAY,EAAE;YAAA;YAG/BE,aAAa,GAAG,IAAIC,UAAU,CAACV,KAAK,CAACW,KAAK,GAAGX,KAAK,CAACY,MAAM,GAAG,CAAC,CAAC;YACpEJ,YAAY,CAACK,iBAAiB,CAAC,IAAI,CAAC;YACpCL,YAAY,CAACM,4BAA4B,CAAC,IAAI,CAAC;YAC/CN,YAAY,CAACO,uBAAuB,CAAC,IAAI,CAAC;YAE1CP,YAAY,CAACQ,mBAAmB,CAAC,CAAC,EAAEhB,KAAK,CAACiB,IAAI,EAAEjB,KAAK,CAACW,KAAK,EAAEX,KAAK,CAACY,MAAM,EAAE,KAAK,CAAC;YACjFJ,YAAY,CAACU,aAAa,CAAChB,OAAO,CAAC;YACnCM,YAAY,CAACW,UAAU,CAACjB,OAAO,CAAC;YAChCM,YAAY,CAACY,eAAe,CAACjB,YAAY,CAAC;YAC1CK,YAAY,CAACa,QAAQ,CAACjB,WAAW,CAAC;YAClCI,YAAY,CAACc,SAAS,CAACjB,OAAO,CAAC;YAEzBkB,cAAc,GAAGf,YAAY,CAACgB,MAAM,CAACf,aAAa,CAAC;YAEnDgB,kBAAkB,GAAGhB,aAAa,CAACiB,QAAQ,CAAC,CAAC,EAAEH,cAAc,CAAC,CAACI,MAAM;YAAA,iCACpEF,kBAAkB;UAAA;YAAA;YAAA;YAGzBG,OAAO,CAACC,KAAK,CAAC,6DAA6D,cAAQ;YAAC;UAAA;YAAA;YAGpFrB,YAAY,CAACsB,MAAM,EAAE;YAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAEzB;EAAA;AAAA"}