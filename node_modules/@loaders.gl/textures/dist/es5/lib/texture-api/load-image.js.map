{"version":3,"file":"load-image.js","names":["loadImageTexture","getUrl","options","getImageUrls","imageUrls","deepLoad","ImageLoader","parse","urlOptions","mipLevels","image","getMipmappedImageUrls","generateUrl","urls","url","lod","shallowLoad","getImageSize","width","height","getMipLevels","push","assert","mipLevel","length","size","Math","floor","log2","max"],"sources":["../../../../src/lib/texture-api/load-image.ts"],"sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\nimport {ImageLoader, getImageSize} from '@loaders.gl/images';\nimport type {GetUrl, UrlOptions} from './texture-api-types';\nimport {generateUrl} from './generate-url';\nimport {deepLoad, shallowLoad} from './deep-load';\n\nexport async function loadImageTexture(getUrl: string | GetUrl, options = {}): Promise<any> {\n  const imageUrls = await getImageUrls(getUrl, options);\n  return await deepLoad(imageUrls, ImageLoader.parse, options);\n}\n\nexport async function getImageUrls(\n  getUrl: string | GetUrl,\n  options: any,\n  urlOptions: UrlOptions = {}\n): Promise<any> {\n  const mipLevels = (options && options.image && options.image.mipLevels) || 0;\n  return mipLevels !== 0\n    ? await getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions)\n    : generateUrl(getUrl, options, urlOptions);\n}\n\nasync function getMipmappedImageUrls(\n  getUrl: string | GetUrl,\n  mipLevels: number | 'auto',\n  options: any,\n  urlOptions: UrlOptions\n): Promise<string[]> {\n  const urls: string[] = [];\n\n  // If no mip levels supplied, we need to load the level 0 image and calculate based on size\n  if (mipLevels === 'auto') {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: 0});\n    const image = await shallowLoad(url, ImageLoader.parse, options);\n\n    const {width, height} = getImageSize(image);\n    mipLevels = getMipLevels({width, height});\n\n    // TODO - push image and make `deepLoad` pass through non-url values, avoid loading twice?\n    urls.push(url);\n  }\n\n  // We now know how many mipLevels we need, remaining image urls can now be constructed\n  assert(mipLevels > 0);\n\n  for (let mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: mipLevel});\n    urls.push(url);\n  }\n\n  return urls;\n}\n\n// Calculates number of mipmaps based on texture size (log2)\nexport function getMipLevels(size: {width: number; height: number}): number {\n  return 1 + Math.floor(Math.log2(Math.max(size.width, size.height)));\n}\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAAkD;AAAA;AAAA,SAE5BA,gBAAgB;EAAA;AAAA;AAAA;EAAA,8EAA/B,iBAAgCC,MAAuB;IAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAAEC,OAAO,2DAAG,CAAC,CAAC;YAAA;YAAA,OAClDC,YAAY,CAACF,MAAM,EAAEC,OAAO,CAAC;UAAA;YAA/CE,SAAS;YAAA;YAAA,OACF,IAAAC,kBAAQ,EAACD,SAAS,EAAEE,mBAAW,CAACC,KAAK,EAAEL,OAAO,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC7D;EAAA;AAAA;AAAA,SAEqBC,YAAY;EAAA;AAAA;AAAA;EAAA,0EAA3B,kBACLF,MAAuB,EACvBC,OAAY;IAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YACZM,UAAsB,8DAAG,CAAC,CAAC;YAErBC,SAAS,GAAIP,OAAO,IAAIA,OAAO,CAACQ,KAAK,IAAIR,OAAO,CAACQ,KAAK,CAACD,SAAS,IAAK,CAAC;YAAA,MACrEA,SAAS,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA;YAAA,OACZE,qBAAqB,CAACV,MAAM,EAAEQ,SAAS,EAAEP,OAAO,EAAEM,UAAU,CAAC;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA,eACnE,IAAAI,wBAAW,EAACX,MAAM,EAAEC,OAAO,EAAEM,UAAU,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC7C;EAAA;AAAA;AAAA,SAEcG,qBAAqB;EAAA;AAAA;AAAA;EAAA,mFAApC,kBACEV,MAAuB,EACvBQ,SAA0B,EAC1BP,OAAY,EACZM,UAAsB;IAAA;IAAA;MAAA;QAAA;UAAA;YAEhBK,IAAc,GAAG,EAAE;YAAA,MAGrBJ,SAAS,KAAK,MAAM;cAAA;cAAA;YAAA;YAChBK,GAAG,GAAG,IAAAF,wBAAW,EAACX,MAAM,EAAEC,OAAO,kCAAMM,UAAU;cAAEO,GAAG,EAAE;YAAC,GAAE;YAAA;YAAA,OAC7C,IAAAC,qBAAW,EAACF,GAAG,EAAER,mBAAW,CAACC,KAAK,EAAEL,OAAO,CAAC;UAAA;YAA1DQ,KAAK;YAAA,gBAEa,IAAAO,oBAAY,EAACP,KAAK,CAAC,EAApCQ,KAAK,iBAALA,KAAK,EAAEC,MAAM,iBAANA,MAAM;YACpBV,SAAS,GAAGW,YAAY,CAAC;cAACF,KAAK,EAALA,KAAK;cAAEC,MAAM,EAANA;YAAM,CAAC,CAAC;;YAGzCN,IAAI,CAACQ,IAAI,CAACP,GAAG,CAAC;UAAC;YAIjB,IAAAQ,mBAAM,EAACb,SAAS,GAAG,CAAC,CAAC;YAErB,KAASc,QAAQ,GAAGV,IAAI,CAACW,MAAM,EAAED,QAAQ,GAAGd,SAAS,EAAE,EAAEc,QAAQ,EAAE;cAC3DT,IAAG,GAAG,IAAAF,wBAAW,EAACX,MAAM,EAAEC,OAAO,kCAAMM,UAAU;gBAAEO,GAAG,EAAEQ;cAAQ,GAAE;cACxEV,IAAI,CAACQ,IAAI,CAACP,IAAG,CAAC;YAChB;YAAC,kCAEMD,IAAI;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACZ;EAAA;AAAA;AAGM,SAASO,YAAY,CAACK,IAAqC,EAAU;EAC1E,OAAO,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,IAAI,CAACF,IAAI,CAACG,GAAG,CAACJ,IAAI,CAACP,KAAK,EAAEO,IAAI,CAACN,MAAM,CAAC,CAAC,CAAC;AACrE"}