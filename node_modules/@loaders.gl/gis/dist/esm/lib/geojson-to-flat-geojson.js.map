{"version":3,"file":"geojson-to-flat-geojson.js","names":["getPolygonSignedArea","geojsonToFlatGeojson","features","options","coordLength","fixRingWinding","map","feature","flattenFeature","flattenPoint","coordinates","data","indices","push","length","i","flattenLineString","c","flattenPolygon","areas","count","ringAreas","polygons","lineString","lineString2d","p","slice","area","flat","ccw","reverse","geometry","type","Error"],"sources":["../../../src/lib/geojson-to-flat-geojson.ts"],"sourcesContent":["import {getPolygonSignedArea} from '@math.gl/polygon';\n\nimport {Feature, Position, FlatFeature} from '@loaders.gl/schema';\n\n/**\n * Options for `geojsonToFlatGeojson`\n */\nexport type GeojsonToFlatGeojsonOptions = {\n  coordLength: number;\n  fixRingWinding: boolean;\n};\n\n// Coordinates defining a Point\ntype PointCoordinates = Position;\n// Coordinates defining a LineString\ntype LineStringCoordinates = Position[];\n// Coordinates defining a Polygon\ntype PolygonCoordinates = Position[][];\n\n/**\n * Convert GeoJSON features to Flat GeoJSON features\n *\n * @param features\n * @param options\n * @returns an Array of Flat GeoJSON features\n */\nexport function geojsonToFlatGeojson(\n  features: Feature[],\n  options: GeojsonToFlatGeojsonOptions = {coordLength: 2, fixRingWinding: true}\n): FlatFeature[] {\n  return features.map((feature) => flattenFeature(feature, options));\n}\n\n/**\n * Helper function to copy Point values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenPoint(\n  coordinates: PointCoordinates,\n  data: number[],\n  indices: number[],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  indices.push(data.length);\n  data.push(...coordinates);\n\n  // Pad up to coordLength\n  for (let i = coordinates.length; i < options.coordLength; i++) {\n    data.push(0);\n  }\n}\n\n/**\n * Helper function to copy LineString values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenLineString(\n  coordinates: LineStringCoordinates,\n  data: number[],\n  indices: number[],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  indices.push(data.length);\n  for (const c of coordinates) {\n    data.push(...c);\n\n    // Pad up to coordLength\n    for (let i = c.length; i < options.coordLength; i++) {\n      data.push(0);\n    }\n  }\n}\n\n/**\n * Helper function to copy Polygon values from `coordinates` into `data` & `indices` & `areas`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param areas\n * @param options\n */\nfunction flattenPolygon(\n  coordinates: PolygonCoordinates,\n  data: number[],\n  indices: number[][],\n  areas: number[][],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  let count = 0;\n  const ringAreas: number[] = [];\n  const polygons: number[] = [];\n  for (const lineString of coordinates) {\n    const lineString2d = lineString.map((p) => p.slice(0, 2));\n    let area = getPolygonSignedArea(lineString2d.flat());\n    const ccw = area < 0;\n\n    // Exterior ring must be CCW and interior rings CW\n    if (options.fixRingWinding && ((count === 0 && !ccw) || (count > 0 && ccw))) {\n      lineString.reverse();\n      area = -area;\n    }\n    ringAreas.push(area);\n    flattenLineString(lineString, data, polygons, options);\n    count++;\n  }\n\n  if (count > 0) {\n    areas.push(ringAreas);\n    indices.push(polygons);\n  }\n}\n\n/**\n * Flatten single GeoJSON feature into Flat GeoJSON\n *\n * @param feature\n * @param options\n * @returns A Flat GeoJSON feature\n */\nfunction flattenFeature(feature: Feature, options: GeojsonToFlatGeojsonOptions): FlatFeature {\n  const {geometry} = feature;\n  if (geometry.type === 'GeometryCollection') {\n    throw new Error('GeometryCollection type not supported');\n  }\n  const data = [];\n  const indices = [];\n  let areas;\n  let type;\n\n  switch (geometry.type) {\n    case 'Point':\n      type = 'Point';\n      flattenPoint(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiPoint':\n      type = 'Point';\n      geometry.coordinates.map((c) => flattenPoint(c, data, indices, options));\n      break;\n    case 'LineString':\n      type = 'LineString';\n      flattenLineString(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiLineString':\n      type = 'LineString';\n      geometry.coordinates.map((c) => flattenLineString(c, data, indices, options));\n      break;\n    case 'Polygon':\n      type = 'Polygon';\n      areas = [];\n      flattenPolygon(geometry.coordinates, data, indices, areas, options);\n      break;\n    case 'MultiPolygon':\n      type = 'Polygon';\n      areas = [];\n      geometry.coordinates.map((c) => flattenPolygon(c, data, indices, areas, options));\n      break;\n    default:\n      throw new Error(`Unknown type: ${type}`);\n  }\n\n  return {...feature, geometry: {type, indices, data, areas}};\n}\n"],"mappings":"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"}