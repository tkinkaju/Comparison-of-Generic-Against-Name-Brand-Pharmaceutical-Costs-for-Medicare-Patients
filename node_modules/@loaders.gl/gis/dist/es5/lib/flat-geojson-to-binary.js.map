{"version":3,"file":"flat-geojson-to-binary.js","names":["flatGeojsonToBinary","features","geometryInfo","options","propArrayTypes","extractNumericPropTypes","numericPropKeys","Object","keys","filter","k","Array","fillArrays","PositionDataType","Float32Array","TEST_EXPORTS","feature","properties","key","val","deduceArrayType","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLength","hasGlobalId","GlobalFeatureIdsDataType","length","Uint32Array","Uint16Array","points","type","positions","globalFeatureIds","featureIds","numericProps","fields","lines","pathIndices","polygons","polygonIndices","primitivePolygonIndices","triangles","object","propName","T","indexMap","pointPosition","pointFeature","linePosition","linePath","lineFeature","polygonPosition","polygonObject","polygonRing","polygonFeature","geometry","handlePoint","push","keepStringProperties","id","handleLineString","handlePolygon","Error","makeAccessorObjects","set","data","nPositions","fillNumericProperties","fill","i","il","indices","start","end","l","ll","startPosition","areas","nextIndices","undefined","endPosition","triangulatePolygon","polygonPositions","subarray","offset","holes","slice","map","n","earcut","t","tl","wrapProps","obj","size","returnObj","value","index","numericPropName","numericKeys","props","includes","x","constructor","Number","isFinite","Float64Array","Math","fround"],"sources":["../../../src/lib/flat-geojson-to-binary.ts"],"sourcesContent":["/* eslint-disable indent */\nimport {earcut} from '@math.gl/polygon';\nimport type {\n  BinaryAttribute,\n  BinaryFeatures,\n  FlatFeature,\n  FlatPoint,\n  FlatLineString,\n  FlatPolygon,\n  GeojsonGeometryInfo,\n  TypedArray\n} from '@loaders.gl/schema';\nimport {PropArrayConstructor, Lines, Points, Polygons} from './flat-geojson-to-binary-types';\n\n/**\n * Convert binary features to flat binary arrays. Similar to\n * `geojsonToBinary` helper function, except that it expects\n * a binary representation of the feature data, which enables\n * 2X-3X speed increase in parse speed, compared to using\n * geoJSON. See `binary-vector-tile/VectorTileFeature` for\n * data format detais\n *\n * @param features\n * @param geometryInfo\n * @param options\n * @returns filled arrays\n */\nexport function flatGeojsonToBinary(\n  features: FlatFeature[],\n  geometryInfo: GeojsonGeometryInfo,\n  options?: FlatGeojsonToBinaryOptions\n) {\n  const propArrayTypes = extractNumericPropTypes(features);\n  const numericPropKeys = Object.keys(propArrayTypes).filter((k) => propArrayTypes[k] !== Array);\n  return fillArrays(\n    features,\n    {\n      propArrayTypes,\n      ...geometryInfo\n    },\n    {\n      numericPropKeys: (options && options.numericPropKeys) || numericPropKeys,\n      PositionDataType: options ? options.PositionDataType : Float32Array\n    }\n  );\n}\n\n/**\n * Options for `flatGeojsonToBinary`\n */\nexport type FlatGeojsonToBinaryOptions = {\n  numericPropKeys?: string[];\n  PositionDataType?: Float32ArrayConstructor | Float64ArrayConstructor;\n};\n\nexport const TEST_EXPORTS = {\n  extractNumericPropTypes\n};\n\n/**\n * Extracts properties that are always numeric\n *\n * @param features\n * @returns object with numeric types\n */\nfunction extractNumericPropTypes(features: FlatFeature[]): {\n  [key: string]: PropArrayConstructor;\n} {\n  const propArrayTypes = {};\n  for (const feature of features) {\n    if (feature.properties) {\n      for (const key in feature.properties) {\n        // If property has not been seen before, or if property has been numeric\n        // in all previous features, check if numeric in this feature\n        // If not numeric, Array is stored to prevent rechecking in the future\n        // Additionally, detects if 64 bit precision is required\n        const val = feature.properties[key];\n        propArrayTypes[key] = deduceArrayType(val, propArrayTypes[key]);\n      }\n    }\n  }\n\n  return propArrayTypes;\n}\n\n/**\n * Fills coordinates into pre-allocated typed arrays\n *\n * @param features\n * @param geometryInfo\n * @param options\n * @returns an accessor object with value and size keys\n */\n// eslint-disable-next-line complexity\nfunction fillArrays(\n  features: FlatFeature[],\n  geometryInfo: GeojsonGeometryInfo & {\n    propArrayTypes: {[key: string]: PropArrayConstructor};\n  },\n  options: FlatGeojsonToBinaryOptions\n) {\n  const {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount,\n    propArrayTypes,\n    coordLength\n  } = geometryInfo;\n  const {numericPropKeys = [], PositionDataType = Float32Array} = options;\n  const hasGlobalId = features[0] && 'id' in features[0];\n  const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  const points: Points = {\n    type: 'Point',\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds:\n      pointFeaturesCount > 65535\n        ? new Uint32Array(pointPositionsCount)\n        : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n  const lines: Lines = {\n    type: 'LineString',\n    pathIndices:\n      linePositionsCount > 65535\n        ? new Uint32Array(linePathsCount + 1)\n        : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds:\n      lineFeaturesCount > 65535\n        ? new Uint32Array(linePositionsCount)\n        : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n  const polygons: Polygons = {\n    type: 'Polygon',\n    polygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonObjectsCount + 1)\n        : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonRingsCount + 1)\n        : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    triangles: [],\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds:\n      polygonFeaturesCount > 65535\n        ? new Uint32Array(polygonPositionsCount)\n        : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n\n  // Instantiate numeric properties arrays; one value per vertex\n  for (const object of [points, lines, polygons]) {\n    for (const propName of numericPropKeys) {\n      // If property has been numeric in all previous features in which the property existed, check\n      // if numeric in this feature\n      const T = propArrayTypes[propName];\n      object.numericProps[propName] = new T(object.positions.length / coordLength) as TypedArray;\n    }\n  }\n\n  // Set last element of path/polygon indices as positions length\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n\n  const indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    const properties = feature.properties || {};\n\n    switch (geometry.type) {\n      case 'Point':\n        handlePoint(geometry, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          points.fields.push({id: feature.id});\n        }\n        indexMap.pointFeature++;\n        break;\n      case 'LineString':\n        handleLineString(geometry, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          lines.fields.push({id: feature.id});\n        }\n        indexMap.lineFeature++;\n        break;\n      case 'Polygon':\n        handlePolygon(geometry, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          polygons.fields.push({id: feature.id});\n        }\n        indexMap.polygonFeature++;\n        break;\n      default:\n        throw new Error('Invalid geometry type');\n    }\n\n    indexMap.feature++;\n  }\n\n  // Wrap each array in an accessor object with value and size keys\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\n/**\n * Fills (Multi)Point coordinates into points object of arrays\n *\n * @param geometry\n * @param points\n * @param indexMap\n * @param coordLength\n * @param properties\n */\nfunction handlePoint(\n  geometry: FlatPoint,\n  points: Points,\n  indexMap: {\n    pointPosition: number;\n    pointFeature: number;\n    linePosition?: number;\n    linePath?: number;\n    lineFeature?: number;\n    polygonPosition?: number;\n    polygonObject?: number;\n    polygonRing?: number;\n    polygonFeature?: number;\n    feature: number;\n  },\n  coordLength: number,\n  properties: {[x: string]: string | number | boolean | null}\n): void {\n  points.positions.set(geometry.data, indexMap.pointPosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(points, properties, indexMap.pointPosition, nPositions);\n  points.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.pointPosition,\n    indexMap.pointPosition + nPositions\n  );\n  points.featureIds.fill(\n    indexMap.pointFeature,\n    indexMap.pointPosition,\n    indexMap.pointPosition + nPositions\n  );\n\n  indexMap.pointPosition += nPositions;\n}\n\n/**\n * Fills (Multi)LineString coordinates into lines object of arrays\n *\n * @param geometry\n * @param lines\n * @param indexMap\n * @param coordLength\n * @param properties\n */\nfunction handleLineString(\n  geometry: FlatLineString,\n  lines: Lines,\n  indexMap: {\n    pointPosition?: number;\n    pointFeature?: number;\n    linePosition: number;\n    linePath: number;\n    lineFeature: number;\n    polygonPosition?: number;\n    polygonObject?: number;\n    polygonRing?: number;\n    polygonFeature?: number;\n    feature: number;\n  },\n  coordLength: number,\n  properties: {[x: string]: string | number | boolean | null}\n): void {\n  lines.positions.set(geometry.data, indexMap.linePosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n\n  lines.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.linePosition,\n    indexMap.linePosition + nPositions\n  );\n  lines.featureIds.fill(\n    indexMap.lineFeature,\n    indexMap.linePosition,\n    indexMap.linePosition + nPositions\n  );\n\n  for (let i = 0, il = geometry.indices.length; i < il; ++i) {\n    // Extract range of data we are working with, defined by start\n    // and end indices (these index into the geometry.data array)\n    const start = geometry.indices[i];\n    const end =\n      i === il - 1\n        ? geometry.data.length // last line, so read to end of data\n        : geometry.indices[i + 1]; // start index for next line\n\n    lines.pathIndices[indexMap.linePath++] = indexMap.linePosition;\n    indexMap.linePosition += (end - start) / coordLength;\n  }\n}\n\n/**\n * Fills (Multi)Polygon coordinates into polygons object of arrays\n *\n * @param geometry\n * @param polygons\n * @param indexMap\n * @param coordLength\n * @param properties\n */\nfunction handlePolygon(\n  geometry: FlatPolygon,\n  polygons: Polygons,\n  indexMap: {\n    pointPosition?: number;\n    pointFeature?: number;\n    linePosition?: number;\n    linePath?: number;\n    lineFeature?: number;\n    polygonPosition: number;\n    polygonObject: number;\n    polygonRing: number;\n    polygonFeature: number;\n    feature: number;\n  },\n  coordLength: number,\n  properties: {[x: string]: string | number | boolean | null}\n): void {\n  polygons.positions.set(geometry.data, indexMap.polygonPosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n  polygons.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.polygonPosition,\n    indexMap.polygonPosition + nPositions\n  );\n  polygons.featureIds.fill(\n    indexMap.polygonFeature,\n    indexMap.polygonPosition,\n    indexMap.polygonPosition + nPositions\n  );\n\n  // Unlike Point & LineString geometry.indices is a 2D array\n  for (let l = 0, ll = geometry.indices.length; l < ll; ++l) {\n    const startPosition = indexMap.polygonPosition;\n    polygons.polygonIndices[indexMap.polygonObject++] = startPosition;\n\n    const areas = geometry.areas[l];\n    const indices = geometry.indices[l];\n    const nextIndices = geometry.indices[l + 1];\n\n    for (let i = 0, il = indices.length; i < il; ++i) {\n      const start = indices[i];\n      const end =\n        i === il - 1\n          ? // last line, so either read to:\n            nextIndices === undefined\n            ? geometry.data.length // end of data (no next indices)\n            : nextIndices[0] // start of first line in nextIndices\n          : indices[i + 1]; // start index for next line\n\n      polygons.primitivePolygonIndices[indexMap.polygonRing++] = indexMap.polygonPosition;\n      indexMap.polygonPosition += (end - start) / coordLength;\n    }\n\n    const endPosition = indexMap.polygonPosition;\n    triangulatePolygon(polygons, areas, indices, {startPosition, endPosition, coordLength});\n  }\n}\n\n/**\n * Triangulate polygon using earcut\n *\n * @param polygons\n * @param areas\n * @param indices\n * @param param3\n */\nfunction triangulatePolygon(\n  polygons: Polygons,\n  areas: number[],\n  indices: number[],\n  {\n    startPosition,\n    endPosition,\n    coordLength\n  }: {startPosition: number; endPosition: number; coordLength: number}\n): void {\n  const start = startPosition * coordLength;\n  const end = endPosition * coordLength;\n\n  // Extract positions and holes for just this polygon\n  const polygonPositions = polygons.positions.subarray(start, end);\n\n  // Holes are referenced relative to outer polygon\n  const offset = indices[0];\n  const holes = indices.slice(1).map((n: number) => (n - offset) / coordLength);\n\n  // Compute triangulation\n  // @ts-expect-error TODO can earcut handle binary arrays? Add tests?\n  const triangles = earcut(polygonPositions, holes, coordLength, areas);\n\n  // Indices returned by triangulation are relative to start\n  // of polygon, so we need to offset\n  for (let t = 0, tl = triangles.length; t < tl; ++t) {\n    polygons.triangles.push(startPosition + triangles[t]);\n  }\n}\n\n/**\n * Wraps an object containing array into accessors\n *\n * @param obj\n * @param size\n */\nfunction wrapProps(\n  obj: {[key: string]: TypedArray},\n  size: number\n): {[key: string]: BinaryAttribute} {\n  const returnObj = {};\n  for (const key in obj) {\n    returnObj[key] = {value: obj[key], size};\n  }\n  return returnObj;\n}\n\n/**\n * Wrap each array in an accessor object with value and size keys\n *\n * @param points\n * @param lines\n * @param polygons\n * @param coordLength\n * @returns object\n */\nfunction makeAccessorObjects(\n  points: Points,\n  lines: Lines,\n  polygons: Polygons,\n  coordLength: number\n): BinaryFeatures {\n  return {\n    points: {\n      ...points,\n      positions: {value: points.positions, size: coordLength},\n      globalFeatureIds: {value: points.globalFeatureIds, size: 1},\n      featureIds: {value: points.featureIds, size: 1},\n      numericProps: wrapProps(points.numericProps, 1)\n    },\n    lines: {\n      ...lines,\n      positions: {value: lines.positions, size: coordLength},\n      pathIndices: {value: lines.pathIndices, size: 1},\n      globalFeatureIds: {value: lines.globalFeatureIds, size: 1},\n      featureIds: {value: lines.featureIds, size: 1},\n      numericProps: wrapProps(lines.numericProps, 1)\n    },\n    polygons: {\n      ...polygons,\n      positions: {value: polygons.positions, size: coordLength},\n      polygonIndices: {value: polygons.polygonIndices, size: 1},\n      primitivePolygonIndices: {value: polygons.primitivePolygonIndices, size: 1},\n      triangles: {value: new Uint32Array(polygons.triangles), size: 1},\n      globalFeatureIds: {value: polygons.globalFeatureIds, size: 1},\n      featureIds: {value: polygons.featureIds, size: 1},\n      numericProps: wrapProps(polygons.numericProps, 1)\n    }\n  };\n}\n\n/**\n * Add numeric properties to object\n *\n * @param object\n * @param properties\n * @param index\n * @param length\n */\nfunction fillNumericProperties(\n  object: Points | Lines | Polygons,\n  properties: {[x: string]: string | number | boolean | null},\n  index: number,\n  length: number\n): void {\n  for (const numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      const value = properties[numericPropName] as number;\n      object.numericProps[numericPropName].fill(value, index, index + length);\n    }\n  }\n}\n\n/**\n * Keep string properties in object\n *\n * @param properties\n * @param numericKeys\n * @returns object\n */\nfunction keepStringProperties(\n  properties: {[x: string]: string | number | boolean | null},\n  numericKeys: string[]\n) {\n  const props = {};\n  for (const key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\n\n/**\n *\n * Deduce correct array constructor to use for a given value\n *\n * @param x value to test\n * @param constructor previous constructor deduced\n * @returns PropArrayConstructor\n */\nfunction deduceArrayType(x: any, constructor: PropArrayConstructor): PropArrayConstructor {\n  if (constructor === Array || !Number.isFinite(x)) {\n    return Array;\n  }\n\n  // If this or previous value required 64bits use Float64Array\n  return constructor === Float64Array || Math.fround(x) !== x ? Float64Array : Float32Array;\n}\n"],"mappings":"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"}