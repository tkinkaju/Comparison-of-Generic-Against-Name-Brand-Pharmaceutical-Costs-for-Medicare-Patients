{"version":3,"file":"extract-geometry-info.js","names":["extractGeometryInfo","features","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","Set","feature","geometry","type","add","coordinates","length","point","coord","line","flattened","flat","polygon","Error","coordLength","size","Math","max"],"sources":["../../../src/lib/extract-geometry-info.ts"],"sourcesContent":["import {Feature, GeojsonGeometryInfo} from '@loaders.gl/schema';\n\n/**\n *  Initial scan over GeoJSON features\n *  Counts number of coordinates of each geometry type and\n *  keeps track of the max coordinate dimensions\n */\n// eslint-disable-next-line complexity, max-statements\nexport function extractGeometryInfo(features: Feature[]): GeojsonGeometryInfo {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set<number>();\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        const flattened = geometry.coordinates.flat();\n        polygonPositionsCount += flattened.length;\n\n        for (const coord of flattened) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          const flattened = polygon.flat();\n          polygonPositionsCount += flattened.length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flattened) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  };\n}\n"],"mappings":"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"}