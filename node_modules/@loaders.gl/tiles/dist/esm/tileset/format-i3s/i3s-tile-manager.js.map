{"version":3,"file":"i3s-tile-manager.js","names":["I3SPendingTilesRegister","STATUS","REQUESTED","COMPLETED","ERROR","I3STileManager","constructor","_statusMap","add","request","key","callback","frameState","frameNumber","viewport","id","status","pendingTilesRegister","register","then","data","actualFrameNumber","deregister","catch","error","update","newFrameNumber","newViewportId","find","hasPendingTiles","viewportId","isZero"],"sources":["../../../../src/tileset/format-i3s/i3s-tile-manager.ts"],"sourcesContent":["import {FrameState} from '../helpers/frame-state';\nimport {I3SPendingTilesRegister} from './i3s-pending-tiles-register';\n\nconst STATUS = {\n  REQUESTED: 'REQUESTED',\n  COMPLETED: 'COMPLETED',\n  ERROR: 'ERROR'\n};\n\n// A helper class to manage tile metadata fetching\nexport class I3STileManager {\n  private _statusMap: object;\n  private pendingTilesRegister = new I3SPendingTilesRegister();\n\n  constructor() {\n    this._statusMap = {};\n  }\n\n  /**\n   * Add request to map\n   * @param request - node metadata request\n   * @param key - unique key\n   * @param callback - callback after request completed\n   * @param frameState - frameState data\n   */\n  add(request, key, callback, frameState: FrameState) {\n    if (!this._statusMap[key]) {\n      const {\n        frameNumber,\n        viewport: {id}\n      } = frameState;\n      this._statusMap[key] = {request, callback, key, frameState, status: STATUS.REQUESTED};\n      // Register pending request for the frameNumber\n      this.pendingTilesRegister.register(id, frameNumber);\n      request()\n        .then((data) => {\n          this._statusMap[key].status = STATUS.COMPLETED;\n          const {\n            frameNumber: actualFrameNumber,\n            viewport: {id}\n          } = this._statusMap[key].frameState;\n          // Deregister pending request for the frameNumber\n          this.pendingTilesRegister.deregister(id, actualFrameNumber);\n          this._statusMap[key].callback(data, frameState);\n        })\n        .catch((error) => {\n          this._statusMap[key].status = STATUS.ERROR;\n          const {\n            frameNumber: actualFrameNumber,\n            viewport: {id}\n          } = this._statusMap[key].frameState;\n          // Deregister pending request for the frameNumber\n          this.pendingTilesRegister.deregister(id, actualFrameNumber);\n          callback(error);\n        });\n    }\n  }\n\n  /**\n   * Update request if it is still actual for the new frameState\n   * @param key - unique key\n   * @param frameState - frameState data\n   */\n  update(key, frameState: FrameState) {\n    if (this._statusMap[key]) {\n      // Deregister pending request for the old frameNumber\n      const {\n        frameNumber,\n        viewport: {id}\n      } = this._statusMap[key].frameState;\n      this.pendingTilesRegister.deregister(id, frameNumber);\n\n      // Register pending request for the new frameNumber\n      const {\n        frameNumber: newFrameNumber,\n        viewport: {id: newViewportId}\n      } = frameState;\n      this.pendingTilesRegister.register(newViewportId, newFrameNumber);\n      this._statusMap[key].frameState = frameState;\n    }\n  }\n\n  /**\n   * Find request in the map\n   * @param key - unique key\n   * @returns\n   */\n  find(key) {\n    return this._statusMap[key];\n  }\n\n  /**\n   * Check it there are pending tile headers for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   * @returns\n   */\n  hasPendingTiles(viewportId: string, frameNumber: number): boolean {\n    return !this.pendingTilesRegister.isZero(viewportId, frameNumber);\n  }\n}\n"],"mappings":"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"}