{"version":3,"file":"tileset-3d.js","names":["Matrix4","Vector3","Ellipsoid","Stats","RequestScheduler","assert","path","TilesetCache","calculateTransformProps","getFrameState","limitSelectedTiles","getZoomFromBoundingVolume","getZoomFromExtent","getZoomFromFullExtent","Tile3D","TILESET_TYPE","TilesetTraverser","Tileset3DTraverser","I3STilesetTraverser","DEFAULT_PROPS","description","ellipsoid","WGS84","modelMatrix","throttleRequests","maxRequests","maximumMemoryUsage","maximumTilesSelected","debounceTime","onTileLoad","onTileUnload","onTileError","onTraversalComplete","selectedTiles","contentLoader","undefined","viewDistanceScale","maximumScreenSpaceError","loadTiles","updateTransforms","viewportTraversersMap","loadOptions","fetch","attributions","basePath","i3s","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","Tileset3D","constructor","json","options","draco","meshopt","dds","ktx2","tileset","loader","type","url","dirname","lodMetricType","lodMetricValue","refine","root","roots","cartographicCenter","cartesianCenter","zoom","boundingVolume","traverseCounter","geometricError","_traverser","_initializeTraverser","_cache","_requestScheduler","_frameNumber","_pendingCount","_tiles","_emptyTiles","_requestedTiles","frameStateData","lastUpdatedVieports","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","id","_initializeStats","_extensionsUsed","dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","tilesetInitializationPromise","_initializeTileSet","destroy","_destroy","isLoaded","length","tiles","Object","values","frameNumber","queryParams","getQueryParamString","setProps","props","setOptions","getTileUrl","tilePath","isDataUrl","startsWith","hasExtension","extensionName","Boolean","indexOf","update","viewports","then","doUpdate","selectTiles","updatePromise","Promise","resolve","setTimeout","preparedViewports","Array","reset","viewportsToTraverse","viewport","_needTraverse","push","_initializeTileHeaders","includes","frameState","traverse","viewportId","traverserId","_onTraversalEnd","currentFrameStateData","filteredSelectedTiles","unselectedTiles","tile","unselect","requestedTiles","emptyTiles","_updateTiles","frameStateKey","frameStateDataValue","concat","_loadTiles","_unloadTiles","_updateStats","_tilesChanged","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","vertexCount","get","count","tilesetJson","I3S","calculateViewPropsI3S","TILES3D","_initializeTiles3DTileset","calculateViewPropsTiles3D","_initializeI3STileset","fullExtent","xmin","xmax","ymin","ymax","zmin","zmax","cartographicToCartesian","extent","store","console","warn","center","cartesianToCartographic","radii","parentTileHeader","rootTile","children","depth","stack","pop","incrementCount","header","childHeader","childTile","TraverserClass","onTraversalEnd","bind","_destroyTileHeaders","parentTile","_destroySubtree","loaded","_onStartTileLoading","loadContent","error","_onTileLoadError","_onEndTileLoading","_onTileLoad","message","toString","nodesInNodePages","nodePagesTile","addCount","updateContentTypes","_addTileToCache","isDracoGeometry","contentFormats","textureFormat","extensionsRemoved","gltf","decrementCount","add","_updateCacheStats","byteLength","unloadContent","child","_destroyTile","unloadTile","Error","version","v","tilesetVersion","properties","extensionsUsed","token","queryParamStrings","key","keys","join"],"sources":["../../../src/tileset/tileset-3d.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/*\n\n  The Tileset loading and rendering flow is as below,\n  A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n  `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n  to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n  `Tile3DLayer` will update rendering based on `selectedTiles`.\n  `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n  when new tiles are loaded.\n\n  As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n  During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n  after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n  Tile3DLayer\n       |\n   await load(tileset)\n       |\n   tileset.update()\n       |                async load tileHeader\n   tileset.traverse() -------------------------- Queued\n       |        resume traversal after fetched  |\n       |----------------------------------------|\n       |\n       |                     async load tile content\n  tilset.requestedTiles  ----------------------------- RequestScheduler\n                                                              |\n  tilset.selectedTiles (ready for rendering)                  |\n       |         Listen to                                    |\n    Tile3DLayer ----------- onTileLoad  ----------------------|\n       |                         |   notify new tile is available\n    updateLayers                 |\n                        tileset.update // trigger another round of update\n*/\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {\n  RequestScheduler,\n  assert,\n  path,\n  LoaderWithParser,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {TilesetCache} from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {FrameState, getFrameState, limitSelectedTiles} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume, getZoomFromExtent, getZoomFromFullExtent} from './helpers/zoom';\nimport {Tile3D} from './tile-3d';\nimport {TILESET_TYPE} from '../constants';\nimport {GeospatialViewport, Viewport} from '../types';\n\nimport {TilesetTraverser} from './tileset-traverser';\n\n// TODO - these should be moved into their respective modules\nimport {Tileset3DTraverser} from './format-3d-tiles/tileset-3d-traverser';\nimport {I3STilesetTraverser} from './format-i3s/i3s-tileset-traverser';\n\nexport type Tileset3DProps = {\n  // loading\n  throttleRequests?: boolean;\n  maxRequests?: number;\n  loadOptions?: LoaderOptions;\n  loadTiles?: boolean;\n  basePath?: string;\n  maximumMemoryUsage?: number;\n  maximumTilesSelected?: number;\n  debounceTime?: number;\n\n  // Metadata\n  description?: string;\n  attributions?: string[];\n\n  // Transforms\n  ellipsoid?: object;\n  modelMatrix?: Matrix4;\n\n  // Traversal\n  maximumScreenSpaceError?: number;\n  viewportTraversersMap?: any;\n  updateTransforms?: boolean;\n  viewDistanceScale?: number;\n\n  // Callbacks\n  onTileLoad?: (tile: Tile3D) => any;\n  onTileUnload?: (tile: Tile3D) => any;\n  onTileError?: (tile: Tile3D, message: string, url: string) => any;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n};\n\ntype Props = {\n  description: string;\n  ellipsoid: object;\n  modelMatrix: Matrix4;\n  throttleRequests: boolean;\n  maximumMemoryUsage: number;\n  maximumTilesSelected: number;\n  debounceTime: number;\n  onTileLoad: (tile: Tile3D) => any;\n  onTileUnload: (tile: Tile3D) => any;\n  onTileError: (tile: Tile3D, message: string, url: string) => any;\n  onTraversalComplete: (selectedTiles: Tile3D[]) => Tile3D[];\n  maximumScreenSpaceError: number;\n  viewportTraversersMap: any;\n  attributions: string[];\n  maxRequests: number;\n  loadTiles: boolean;\n  loadOptions: LoaderOptions;\n  updateTransforms: boolean;\n  viewDistanceScale: number;\n  basePath: string;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  i3s: {[key: string]: any};\n};\n\nconst DEFAULT_PROPS: Props = {\n  description: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to false to disable network request throttling\n  throttleRequests: true,\n\n  // Number of simultaneous requsts, if throttleRequests is true\n  maxRequests: 64,\n\n  maximumMemoryUsage: 32,\n  /** Maximum number limit of tiles selected for show. 0 means no limit */\n  maximumTilesSelected: 0,\n  /** Delay time before the tileset traversal. It prevents traversal requests spam.*/\n  debounceTime: 0,\n\n  /**\n   * Callback. Indicates this a tile's content was loaded\n   * @param tile {TileHeader}\n   */\n  onTileLoad: () => {},\n  /**\n   * Callback. Indicates this a tile's content was unloaded\n   * @param tile {TileHeader}\n   */\n  onTileUnload: () => {},\n  onTileError: () => {},\n  /**\n   * Callback. Allows post-process selectedTiles right after traversal.\n   * @param selectedTiles {TileHeader[]}\n   * @returns TileHeader[] - output array of tiles to return to deck.gl\n   */\n  onTraversalComplete: (selectedTiles: Tile3D[]) => selectedTiles,\n\n  // Optional async tile content loader\n  contentLoader: undefined,\n\n  // View distance scale modifier\n  viewDistanceScale: 1.0,\n\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8,\n\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n\n  loadOptions: {fetch: {}},\n\n  attributions: [],\n  basePath: '',\n\n  i3s: {}\n};\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points/Vertices';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nexport class Tileset3D {\n  // props: Tileset3DProps;\n  options: Props;\n  loadOptions: {[key: string]: any};\n\n  type: string;\n  tileset: {[key: string]: any};\n  loader: LoaderWithParser;\n  url: string;\n  basePath: string;\n  modelMatrix: Matrix4;\n  ellipsoid: any;\n  lodMetricType: string;\n  lodMetricValue: number;\n  refine: string;\n  root: Tile3D | null;\n  roots: {[key: string]: Tile3D};\n  asset: {[key: string]: any};\n\n  description: string;\n  properties: any;\n  extras: any;\n  attributions: any;\n  credits: any;\n\n  stats: Stats;\n\n  /** flags that contain information about data types in nested tiles */\n  contentFormats = {draco: false, meshopt: false, dds: false, ktx2: false};\n\n  traverseCounter: number;\n  geometricError: number;\n  selectedTiles: Tile3D[];\n  private updatePromise: Promise<number> | null = null;\n  tilesetInitializationPromise: Promise<void>;\n\n  cartographicCenter: Vector3 | null;\n  cartesianCenter: Vector3 | null;\n  zoom: number;\n  boundingVolume: any;\n\n  // METRICS\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce private\n  // The total amount of GPU memory in bytes used by the tileset.\n  gpuMemoryUsageInBytes: any;\n  dynamicScreenSpaceErrorComputedDensity: any;\n\n  // TRAVERSAL\n  _traverser: TilesetTraverser;\n  private _cache: TilesetCache;\n  _requestScheduler: RequestScheduler;\n\n  _frameNumber: number;\n  private _queryParamsString: string;\n  private _queryParams: any;\n  private _extensionsUsed: any;\n  private _tiles: {[id: string]: Tile3D};\n\n  // counter for tracking tiles requests\n  private _pendingCount: any;\n\n  // HOLD TRAVERSAL RESULTS\n  private lastUpdatedVieports: Viewport[] | Viewport | null;\n  private _requestedTiles: any;\n  private _emptyTiles: any;\n  private frameStateData: any;\n\n  maximumMemoryUsage: number;\n\n  /**\n   * Create a new Tileset3D\n   * @param json\n   * @param props\n   */\n  // eslint-disable-next-line max-statements\n  constructor(json: any, options?: Tileset3DProps) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_PROPS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    this.loadOptions = this.options.loadOptions || {};\n\n    this.root = null;\n    this.roots = {};\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n\n    this._queryParams = {};\n    this._queryParamsString = '';\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // EXTRACTED FROM TILESET\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n\n    this.tilesetInitializationPromise = this._initializeTileSet(json);\n  }\n\n  /** Release resources */\n  destroy(): void {\n    this._destroy();\n  }\n\n  /** Is the tileset loaded (update needs to have been called at least once) */\n  isLoaded(): boolean {\n    // Check that `_frameNumber !== 0` which means that update was called at least once\n    return this._pendingCount === 0 && this._frameNumber !== 0 && this._requestedTiles.length === 0;\n  }\n\n  get tiles(): object[] {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber(): number {\n    return this._frameNumber;\n  }\n\n  get queryParams(): string {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n\n  setProps(props: Tileset3DProps): void {\n    this.options = {...this.options, ...props};\n  }\n\n  /** @deprecated */\n  setOptions(options: Tileset3DProps): void {\n    this.options = {...this.options, ...options};\n  }\n\n  /**\n   * Return a loadable tile url for a specific tile subpath\n   * @param tilePath a tile subpath\n   */\n  getTileUrl(tilePath: string): string {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName: string): boolean {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports - list of viewports\n   * @deprecated\n   */\n  update(viewports: Viewport[] | Viewport | null = null) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.tilesetInitializationPromise.then(() => {\n      if (!viewports && this.lastUpdatedVieports) {\n        viewports = this.lastUpdatedVieports;\n      } else {\n        this.lastUpdatedVieports = viewports;\n      }\n      if (viewports) {\n        this.doUpdate(viewports);\n      }\n    });\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports.\n   * Do it with debounce delay to prevent update spam\n   * @param viewports viewports\n   * @returns Promise of new frameNumber\n   */\n  async selectTiles(viewports: Viewport[] | Viewport | null = null): Promise<number> {\n    await this.tilesetInitializationPromise;\n    if (viewports) {\n      this.lastUpdatedVieports = viewports;\n    }\n    if (!this.updatePromise) {\n      this.updatePromise = new Promise<number>((resolve) => {\n        setTimeout(() => {\n          if (this.lastUpdatedVieports) {\n            this.doUpdate(this.lastUpdatedVieports);\n          }\n          resolve(this._frameNumber);\n          this.updatePromise = null;\n        }, this.options.debounceTime);\n      });\n    }\n    return this.updatePromise;\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports viewports\n   */\n  // eslint-disable-next-line max-statements, complexity\n  private doUpdate(viewports: Viewport[] | Viewport): void {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n    if (this.traverseCounter > 0) {\n      return;\n    }\n    const preparedViewports = viewports instanceof Array ? viewports : [viewports];\n\n    this._cache.reset();\n    this._frameNumber++;\n    this.traverseCounter = preparedViewports.length;\n    const viewportsToTraverse: string[] = [];\n    // First loop to decrement traverseCounter\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    // Second loop to traverse\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const frameState = getFrameState(viewport as GeospatialViewport, this._frameNumber);\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  /**\n   * Check if traversal is needed for particular viewport\n   * @param {string} viewportId - id of a viewport\n   * @return {boolean}\n   */\n  _needTraverse(viewportId: string): boolean {\n    let traverserId = viewportId;\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * The callback to post-process tiles after traversal procedure\n   * @param frameState - frame state for tile culling\n   */\n  _onTraversalEnd(frameState: FrameState): void {\n    const id = frameState.viewport.id;\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {selectedTiles: [], _requestedTiles: [], _emptyTiles: []};\n    }\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    const [filteredSelectedTiles, unselectedTiles] = limitSelectedTiles(\n      selectedTiles,\n      frameState,\n      this.options.maximumTilesSelected\n    );\n    currentFrameStateData.selectedTiles = filteredSelectedTiles;\n    for (const tile of unselectedTiles) {\n      tile.unselect();\n    }\n\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this.traverseCounter--;\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  /**\n   * Update tiles relying on data from all traversers\n   */\n  _updateTiles(): void {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n    this._unloadTiles();\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map((t) => t.id));\n    const set2 = new Set(selectedTiles.map((t) => t.id));\n    let changed = oldSelectedTiles.filter((x) => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter((x) => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles() {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        } else {\n          // Calculate vertices for non point cloud tiles.\n          pointsRenderable += tile.content.vertexCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  async _initializeTileSet(tilesetJson) {\n    if (this.type === TILESET_TYPE.I3S) {\n      this.calculateViewPropsI3S();\n      tilesetJson.root = await tilesetJson.root;\n    }\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeTiles3DTileset(tilesetJson);\n      this.calculateViewPropsTiles3D();\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset\n   * For I3S there is extent (<1.8 version) or fullExtent (>=1.8 version) to calculate view props\n   * @returns\n   */\n  private calculateViewPropsI3S() {\n    // for I3S 1.8 try to calculate with fullExtent\n    const fullExtent = this.tileset.fullExtent;\n    if (fullExtent) {\n      const {xmin, xmax, ymin, ymax, zmin, zmax} = fullExtent;\n      this.cartographicCenter = new Vector3(\n        xmin + (xmax - xmin) / 2,\n        ymin + (ymax - ymin) / 2,\n        zmin + (zmax - zmin) / 2\n      );\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromFullExtent(fullExtent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // for I3S 1.6-1.7 try to calculate with extent\n    const extent = this.tileset.store?.extent;\n    if (extent) {\n      const [xmin, ymin, xmax, ymax] = extent;\n      this.cartographicCenter = new Vector3(xmin + (xmax - xmin) / 2, ymin + (ymax - ymin) / 2, 0);\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromExtent(extent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console.warn('Extent is not defined in the tileset header');\n    this.cartographicCenter = new Vector3();\n    this.zoom = 1;\n    return;\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset.\n   * For 3DTiles the root tile data is used to calculate view props.\n   * @returns\n   */\n  private calculateViewPropsTiles3D() {\n    const root = this.root as Tile3D;\n    assert(root);\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line no-console\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n\n    // cartographic coordinates are undefined at the center of the ellipsoid\n    if (center[0] !== 0 || center[1] !== 0 || center[2] !== 0) {\n      this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    } else {\n      this.cartographicCenter = new Vector3(0, 0, -Ellipsoid.WGS84.radii[0]);\n    }\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT);\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // 3DTiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack: Tile3D[] = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop() as Tile3D;\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3STilesetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      // We can't calculate tiles total in I3S in advance so we calculate it dynamically.\n      const nodesInNodePages = this.tileset?.nodePagesTile?.nodesInNodePages || 0;\n      this.stats.get(TILES_TOTAL).reset();\n      this.stats.get(TILES_TOTAL).addCount(nodesInNodePages);\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this.updateContentTypes(tile);\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  /**\n   * Update information about data types in nested tiles\n   * @param tile instance of a nested Tile3D\n   */\n  private updateContentTypes(tile: Tile3D) {\n    if (this.type === TILESET_TYPE.I3S) {\n      if (tile.header.isDracoGeometry) {\n        this.contentFormats.draco = true;\n      }\n      switch (tile.header.textureFormat) {\n        case 'dds':\n          this.contentFormats.dds = true;\n          break;\n        case 'ktx2':\n          this.contentFormats.ktx2 = true;\n          break;\n        default:\n      }\n    } else if (this.type === TILESET_TYPE.TILES3D) {\n      const {extensionsRemoved = []} = tile.content?.gltf || {};\n      if (extensionsRemoved.includes('KHR_draco_mesh_compression')) {\n        this.contentFormats.draco = true;\n      }\n      if (extensionsRemoved.includes('EXT_meshopt_compression')) {\n        this.contentFormats.meshopt = true;\n      }\n      if (extensionsRemoved.includes('KHR_texture_basisu')) {\n        this.contentFormats.ktx2 = true;\n      }\n    }\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= (tile.content && tile.content.byteLength) || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack: Tile3D[] = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile: Tile3D = stack.pop() as Tile3D;\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack: Tile3D[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeTiles3DTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token;\n    }\n  }\n}\n\nfunction getQueryParamString(queryParams): string {\n  const queryParamStrings: string[] = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n"],"mappings":"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"}