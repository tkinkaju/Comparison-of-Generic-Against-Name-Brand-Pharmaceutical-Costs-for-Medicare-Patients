{"version":3,"file":"tileset-traverser.js","names":["ManagedArray","TILE_REFINEMENT","DEFAULT_PROPS","loadSiblings","skipLevelOfDetail","maximumScreenSpaceError","updateTransforms","onTraversalEnd","viewportTraversersMap","basePath","TilesetTraverser","traversalFinished","frameState","constructor","options","Date","getTime","_traversalStack","_emptyTraversalStack","_frameNumber","root","selectedTiles","requestedTiles","emptyTiles","traverse","reset","updateTile","frameNumber","executeTraversal","stack","_selectionDepth","push","length","tile","pop","shouldRefine","canTraverse","updateChildTiles","updateAndPushChildren","hasRenderContent","parent","parentRefines","Boolean","_shouldRefine","stoppedRefining","id","loadTile","selectTile","refine","ADD","REPLACE","touchTile","newTime","lastUpdate","updateDebounceTime","children","child","depth","sort","compareDistanceToCamera","bind","checkRefines","hasVisibleChild","refines","isVisibleAndInRequestVolume","find","delete","childRefines","_inRequestVolume","executeEmptyTraversal","contentAvailable","updateTileVisibility","shouldSelectTile","_selectedFrame","shouldLoadTile","_requestedFrame","_priority","_getPriority","tileset","_cache","touch","_touchedFrame","useParentMetric","ignoreVisibility","hasChildren","hasTilesetContent","contentExpired","hasUnloadedContent","screenSpaceError","_screenSpaceError","getScreenSpaceError","viewportIds","key","value","viewport","updateVisibility","b","a","_distanceToCamera","anyChildrenVisible","anyVisible","allDescendantsLoaded"],"sources":["../../../src/tileset/tileset-traverser.ts"],"sourcesContent":["import {ManagedArray} from '../utils/managed-array';\nimport {TILE_REFINEMENT} from '../constants';\nimport {FrameState} from './helpers/frame-state';\n\nexport type TilesetTraverserProps = {\n  loadSiblings?: boolean;\n  skipLevelOfDetail?: boolean;\n  maximumScreenSpaceError?: number;\n  onTraversalEnd?: (frameState) => any;\n  viewportTraversersMap?: {[key: string]: any};\n  basePath?: string;\n  updateTransforms?: boolean;\n};\n\n// export type Props = {\n//   loadSiblings: boolean;\n//   skipLevelOfDetail: boolean;\n//   updateTransforms: boolean;\n//   maximumScreenSpaceError: number;\n//   onTraversalEnd: (frameState) => any;\n//   viewportTraversersMap: {[key: string]: any};\n//   basePath: string;\n// };\n\nexport const DEFAULT_PROPS: Required<TilesetTraverserProps> = {\n  loadSiblings: false,\n  skipLevelOfDetail: false,\n  maximumScreenSpaceError: 2,\n  updateTransforms: true,\n  onTraversalEnd: () => {},\n  viewportTraversersMap: {},\n  basePath: ''\n};\n\nexport class TilesetTraverser {\n  options: Required<TilesetTraverserProps>;\n\n  root: any;\n  requestedTiles: object;\n  selectedTiles: object;\n  emptyTiles: object;\n\n  protected lastUpdate: number = new Date().getTime();\n  protected readonly updateDebounceTime = 1000;\n  protected _traversalStack: ManagedArray;\n  protected _emptyTraversalStack: ManagedArray;\n  protected _frameNumber: number | null;\n\n  protected traversalFinished(frameState: FrameState): boolean {\n    return true;\n  }\n\n  // TODO nested props\n  constructor(options: TilesetTraverserProps) {\n    this.options = {...DEFAULT_PROPS, ...options};\n    // TRAVERSAL\n    // temporary storage to hold the traversed tiles during a traversal\n    this._traversalStack = new ManagedArray();\n    this._emptyTraversalStack = new ManagedArray();\n\n    // set in every traverse cycle\n    this._frameNumber = null;\n\n    // fulfill in traverse call\n    this.root = null;\n\n    // RESULT\n    // tiles should be rendered\n    this.selectedTiles = {};\n    // tiles should be loaded from server\n    this.requestedTiles = {};\n    // tiles does not have render content\n    this.emptyTiles = {};\n  }\n\n  // tiles should be visible\n  traverse(root, frameState, options) {\n    this.root = root; // for root screen space error\n    this.options = {...this.options, ...options};\n\n    // reset result\n    this.reset();\n\n    // update tile (visibility and expiration)\n    this.updateTile(root, frameState);\n\n    this._frameNumber = frameState.frameNumber;\n    this.executeTraversal(root, frameState);\n  }\n\n  reset() {\n    this.requestedTiles = {};\n    this.selectedTiles = {};\n    this.emptyTiles = {};\n    this._traversalStack.reset();\n    this._emptyTraversalStack.reset();\n  }\n\n  // execute traverse\n  // Depth-first traversal that traverses all visible tiles and marks tiles for selection.\n  // If skipLevelOfDetail is off then a tile does not refine until all children are loaded.\n  // This is the traditional replacement refinement approach and is called the base traversal.\n  // Tiles that have a greater screen space error than the base screen space error are part of the base traversal,\n  // all other tiles are part of the skip traversal. The skip traversal allows for skipping levels of the tree\n  // and rendering children and parent tiles simultaneously.\n  /* eslint-disable-next-line complexity, max-statements */\n  executeTraversal(root, frameState: FrameState) {\n    // stack to store traversed tiles, only visible tiles should be added to stack\n    // visible: visible in the current view frustum\n    const stack = this._traversalStack;\n    root._selectionDepth = 1;\n\n    stack.push(root);\n    while (stack.length > 0) {\n      // 1. pop tile\n      const tile = stack.pop();\n\n      // 2. check if tile needs to be refine, needs refine if a tile's LoD is not sufficient and tile has available children (available content)\n      let shouldRefine = false;\n      if (this.canTraverse(tile, frameState)) {\n        this.updateChildTiles(tile, frameState);\n        shouldRefine = this.updateAndPushChildren(\n          tile,\n          frameState,\n          stack,\n          tile.hasRenderContent ? tile._selectionDepth + 1 : tile._selectionDepth\n        );\n      }\n\n      // 3. decide if should render (select) this tile\n      //   - tile does not have render content\n      //   - tile has render content and tile is `add` type (pointcloud)\n      //   - tile has render content and tile is `replace` type (photogrammetry) and can't refine any further\n      const parent = tile.parent;\n      const parentRefines = Boolean(!parent || parent._shouldRefine);\n      const stoppedRefining = !shouldRefine;\n\n      if (!tile.hasRenderContent) {\n        this.emptyTiles[tile.id] = tile;\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n        // additive tiles\n      } else if (tile.refine === TILE_REFINEMENT.ADD) {\n        // Additive tiles are always loaded and selected\n        this.loadTile(tile, frameState);\n        this.selectTile(tile, frameState);\n\n        // replace tiles\n      } else if (tile.refine === TILE_REFINEMENT.REPLACE) {\n        // Always load tiles in the base traversal\n        // Select tiles that can't refine further\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n      }\n\n      // 3. update cache, most recent touched tiles have higher priority to be fetched from server\n      this.touchTile(tile, frameState);\n\n      // 4. update tile refine prop and parent refinement status to trickle down to the descendants\n      tile._shouldRefine = shouldRefine && parentRefines;\n    }\n\n    const newTime = new Date().getTime();\n    if (this.traversalFinished(frameState) || newTime - this.lastUpdate > this.updateDebounceTime) {\n      this.lastUpdate = newTime;\n      this.options.onTraversalEnd(frameState);\n    }\n  }\n\n  updateChildTiles(tile, frameState) {\n    const children = tile.children;\n    for (const child of children) {\n      this.updateTile(child, frameState);\n    }\n    return true;\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAndPushChildren(tile, frameState, stack, depth) {\n    const {loadSiblings, skipLevelOfDetail} = this.options;\n\n    const children = tile.children;\n\n    // sort children tiles\n    children.sort(this.compareDistanceToCamera.bind(this));\n\n    // For traditional replacement refinement only refine if all children are loaded.\n    // Empty tiles are exempt since it looks better if children stream in as they are loaded to fill the empty space.\n    const checkRefines =\n      tile.refine === TILE_REFINEMENT.REPLACE && tile.hasRenderContent && !skipLevelOfDetail;\n\n    let hasVisibleChild = false;\n    let refines = true;\n\n    for (const child of children) {\n      child._selectionDepth = depth;\n      if (child.isVisibleAndInRequestVolume) {\n        if (stack.find(child)) {\n          stack.delete(child);\n        }\n        stack.push(child);\n        hasVisibleChild = true;\n      } else if (checkRefines || loadSiblings) {\n        // Keep non-visible children loaded since they are still needed before the parent can refine.\n        // Or loadSiblings is true so always load tiles regardless of visibility.\n        this.loadTile(child, frameState);\n        this.touchTile(child, frameState);\n      }\n\n      if (checkRefines) {\n        let childRefines;\n        if (!child._inRequestVolume) {\n          childRefines = false;\n        } else if (!child.hasRenderContent) {\n          childRefines = this.executeEmptyTraversal(child, frameState);\n        } else {\n          childRefines = child.contentAvailable;\n        }\n        refines = refines && childRefines;\n\n        if (!refines) {\n          return false;\n        }\n      }\n    }\n\n    if (!hasVisibleChild) {\n      refines = false;\n    }\n    return refines;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTile(tile, frameState) {\n    this.updateTileVisibility(tile, frameState);\n  }\n\n  // tile to render in the browser\n  selectTile(tile, frameState) {\n    if (this.shouldSelectTile(tile)) {\n      // The tile can be selected right away and does not require traverseAndSelect\n      tile._selectedFrame = frameState.frameNumber;\n      this.selectedTiles[tile.id] = tile;\n    }\n  }\n\n  // tile to load from server\n  loadTile(tile, frameState) {\n    if (this.shouldLoadTile(tile)) {\n      tile._requestedFrame = frameState.frameNumber;\n      tile._priority = tile._getPriority();\n      this.requestedTiles[tile.id] = tile;\n    }\n  }\n\n  // cache tile\n  touchTile(tile, frameState) {\n    tile.tileset._cache.touch(tile);\n    tile._touchedFrame = frameState.frameNumber;\n  }\n\n  // tile should be visible\n  // tile should have children\n  // tile LoD (level of detail) is not sufficient under current viewport\n  canTraverse(tile, frameState, useParentMetric = false, ignoreVisibility = false) {\n    if (!tile.hasChildren) {\n      return false;\n    }\n\n    // cesium specific\n    if (tile.hasTilesetContent) {\n      // Traverse external this to visit its root tile\n      // Don't traverse if the subtree is expired because it will be destroyed\n      return !tile.contentExpired;\n    }\n\n    if (!ignoreVisibility && !tile.isVisibleAndInRequestVolume) {\n      return false;\n    }\n\n    return this.shouldRefine(tile, frameState, useParentMetric);\n  }\n\n  shouldLoadTile(tile) {\n    // if request tile is in current frame\n    // and has unexpired render content\n    return tile.hasUnloadedContent || tile.contentExpired;\n  }\n\n  shouldSelectTile(tile) {\n    // if select tile is in current frame\n    // and content available\n    return tile.contentAvailable && !this.options.skipLevelOfDetail;\n  }\n\n  // Decide if tile LoD (level of detail) is not sufficient under current viewport\n  shouldRefine(tile, frameState, useParentMetric) {\n    let screenSpaceError = tile._screenSpaceError;\n    if (useParentMetric) {\n      screenSpaceError = tile.getScreenSpaceError(frameState, true);\n    }\n\n    return screenSpaceError > this.options.maximumScreenSpaceError;\n  }\n\n  updateTileVisibility(tile, frameState) {\n    const viewportIds: string[] = [];\n    if (this.options.viewportTraversersMap) {\n      for (const key in this.options.viewportTraversersMap) {\n        const value = this.options.viewportTraversersMap[key];\n        if (value === frameState.viewport.id) {\n          viewportIds.push(key);\n        }\n      }\n    } else {\n      viewportIds.push(frameState.viewport.id);\n    }\n    tile.updateVisibility(frameState, viewportIds);\n  }\n\n  // UTILITIES\n\n  compareDistanceToCamera(b, a) {\n    return b._distanceToCamera - a._distanceToCamera;\n  }\n\n  anyChildrenVisible(tile, frameState) {\n    let anyVisible = false;\n    for (const child of tile.children) {\n      child.updateVisibility(frameState);\n      anyVisible = anyVisible || child.isVisibleAndInRequestVolume;\n    }\n    return anyVisible;\n  }\n\n  // Depth-first traversal that checks if all nearest descendants with content are loaded.\n  // Ignores visibility.\n  executeEmptyTraversal(root, frameState) {\n    let allDescendantsLoaded = true;\n    const stack = this._emptyTraversalStack;\n\n    stack.push(root);\n\n    while (stack.length > 0 && allDescendantsLoaded) {\n      const tile = stack.pop();\n\n      this.updateTile(tile, frameState);\n\n      if (!tile.isVisibleAndInRequestVolume) {\n        // Load tiles that aren't visible since they are still needed for the parent to refine\n        this.loadTile(tile, frameState);\n      }\n\n      this.touchTile(tile, frameState);\n\n      // Only traverse if the tile is empty - traversal stop at descendants with content\n      const traverse = !tile.hasRenderContent && this.canTraverse(tile, frameState, false, true);\n\n      if (traverse) {\n        const children = tile.children;\n        for (const child of children) {\n          // eslint-disable-next-line max-depth\n          if (stack.find(child)) {\n            stack.delete(child);\n          }\n          stack.push(child);\n        }\n      } else if (!tile.contentAvailable) {\n        allDescendantsLoaded = false;\n      }\n    }\n\n    return allDescendantsLoaded;\n  }\n}\n\n// TODO\n// enable expiration\n// enable optimization hint\n"],"mappings":"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"}