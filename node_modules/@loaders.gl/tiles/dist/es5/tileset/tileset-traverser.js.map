{"version":3,"file":"tileset-traverser.js","names":["DEFAULT_PROPS","loadSiblings","skipLevelOfDetail","maximumScreenSpaceError","updateTransforms","onTraversalEnd","viewportTraversersMap","basePath","TilesetTraverser","options","Date","getTime","_traversalStack","ManagedArray","_emptyTraversalStack","_frameNumber","root","selectedTiles","requestedTiles","emptyTiles","frameState","reset","updateTile","frameNumber","executeTraversal","stack","_selectionDepth","push","length","tile","pop","shouldRefine","canTraverse","updateChildTiles","updateAndPushChildren","hasRenderContent","parent","parentRefines","Boolean","_shouldRefine","stoppedRefining","id","loadTile","selectTile","refine","TILE_REFINEMENT","ADD","REPLACE","touchTile","newTime","traversalFinished","lastUpdate","updateDebounceTime","children","child","depth","sort","compareDistanceToCamera","bind","checkRefines","hasVisibleChild","refines","isVisibleAndInRequestVolume","find","delete","childRefines","_inRequestVolume","executeEmptyTraversal","contentAvailable","updateTileVisibility","shouldSelectTile","_selectedFrame","shouldLoadTile","_requestedFrame","_priority","_getPriority","tileset","_cache","touch","_touchedFrame","useParentMetric","ignoreVisibility","hasChildren","hasTilesetContent","contentExpired","hasUnloadedContent","screenSpaceError","_screenSpaceError","getScreenSpaceError","viewportIds","key","value","viewport","updateVisibility","b","a","_distanceToCamera","anyVisible","allDescendantsLoaded","traverse"],"sources":["../../../src/tileset/tileset-traverser.ts"],"sourcesContent":["import {ManagedArray} from '../utils/managed-array';\nimport {TILE_REFINEMENT} from '../constants';\nimport {FrameState} from './helpers/frame-state';\n\nexport type TilesetTraverserProps = {\n  loadSiblings?: boolean;\n  skipLevelOfDetail?: boolean;\n  maximumScreenSpaceError?: number;\n  onTraversalEnd?: (frameState) => any;\n  viewportTraversersMap?: {[key: string]: any};\n  basePath?: string;\n  updateTransforms?: boolean;\n};\n\n// export type Props = {\n//   loadSiblings: boolean;\n//   skipLevelOfDetail: boolean;\n//   updateTransforms: boolean;\n//   maximumScreenSpaceError: number;\n//   onTraversalEnd: (frameState) => any;\n//   viewportTraversersMap: {[key: string]: any};\n//   basePath: string;\n// };\n\nexport const DEFAULT_PROPS: Required<TilesetTraverserProps> = {\n  loadSiblings: false,\n  skipLevelOfDetail: false,\n  maximumScreenSpaceError: 2,\n  updateTransforms: true,\n  onTraversalEnd: () => {},\n  viewportTraversersMap: {},\n  basePath: ''\n};\n\nexport class TilesetTraverser {\n  options: Required<TilesetTraverserProps>;\n\n  root: any;\n  requestedTiles: object;\n  selectedTiles: object;\n  emptyTiles: object;\n\n  protected lastUpdate: number = new Date().getTime();\n  protected readonly updateDebounceTime = 1000;\n  protected _traversalStack: ManagedArray;\n  protected _emptyTraversalStack: ManagedArray;\n  protected _frameNumber: number | null;\n\n  protected traversalFinished(frameState: FrameState): boolean {\n    return true;\n  }\n\n  // TODO nested props\n  constructor(options: TilesetTraverserProps) {\n    this.options = {...DEFAULT_PROPS, ...options};\n    // TRAVERSAL\n    // temporary storage to hold the traversed tiles during a traversal\n    this._traversalStack = new ManagedArray();\n    this._emptyTraversalStack = new ManagedArray();\n\n    // set in every traverse cycle\n    this._frameNumber = null;\n\n    // fulfill in traverse call\n    this.root = null;\n\n    // RESULT\n    // tiles should be rendered\n    this.selectedTiles = {};\n    // tiles should be loaded from server\n    this.requestedTiles = {};\n    // tiles does not have render content\n    this.emptyTiles = {};\n  }\n\n  // tiles should be visible\n  traverse(root, frameState, options) {\n    this.root = root; // for root screen space error\n    this.options = {...this.options, ...options};\n\n    // reset result\n    this.reset();\n\n    // update tile (visibility and expiration)\n    this.updateTile(root, frameState);\n\n    this._frameNumber = frameState.frameNumber;\n    this.executeTraversal(root, frameState);\n  }\n\n  reset() {\n    this.requestedTiles = {};\n    this.selectedTiles = {};\n    this.emptyTiles = {};\n    this._traversalStack.reset();\n    this._emptyTraversalStack.reset();\n  }\n\n  // execute traverse\n  // Depth-first traversal that traverses all visible tiles and marks tiles for selection.\n  // If skipLevelOfDetail is off then a tile does not refine until all children are loaded.\n  // This is the traditional replacement refinement approach and is called the base traversal.\n  // Tiles that have a greater screen space error than the base screen space error are part of the base traversal,\n  // all other tiles are part of the skip traversal. The skip traversal allows for skipping levels of the tree\n  // and rendering children and parent tiles simultaneously.\n  /* eslint-disable-next-line complexity, max-statements */\n  executeTraversal(root, frameState: FrameState) {\n    // stack to store traversed tiles, only visible tiles should be added to stack\n    // visible: visible in the current view frustum\n    const stack = this._traversalStack;\n    root._selectionDepth = 1;\n\n    stack.push(root);\n    while (stack.length > 0) {\n      // 1. pop tile\n      const tile = stack.pop();\n\n      // 2. check if tile needs to be refine, needs refine if a tile's LoD is not sufficient and tile has available children (available content)\n      let shouldRefine = false;\n      if (this.canTraverse(tile, frameState)) {\n        this.updateChildTiles(tile, frameState);\n        shouldRefine = this.updateAndPushChildren(\n          tile,\n          frameState,\n          stack,\n          tile.hasRenderContent ? tile._selectionDepth + 1 : tile._selectionDepth\n        );\n      }\n\n      // 3. decide if should render (select) this tile\n      //   - tile does not have render content\n      //   - tile has render content and tile is `add` type (pointcloud)\n      //   - tile has render content and tile is `replace` type (photogrammetry) and can't refine any further\n      const parent = tile.parent;\n      const parentRefines = Boolean(!parent || parent._shouldRefine);\n      const stoppedRefining = !shouldRefine;\n\n      if (!tile.hasRenderContent) {\n        this.emptyTiles[tile.id] = tile;\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n        // additive tiles\n      } else if (tile.refine === TILE_REFINEMENT.ADD) {\n        // Additive tiles are always loaded and selected\n        this.loadTile(tile, frameState);\n        this.selectTile(tile, frameState);\n\n        // replace tiles\n      } else if (tile.refine === TILE_REFINEMENT.REPLACE) {\n        // Always load tiles in the base traversal\n        // Select tiles that can't refine further\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n      }\n\n      // 3. update cache, most recent touched tiles have higher priority to be fetched from server\n      this.touchTile(tile, frameState);\n\n      // 4. update tile refine prop and parent refinement status to trickle down to the descendants\n      tile._shouldRefine = shouldRefine && parentRefines;\n    }\n\n    const newTime = new Date().getTime();\n    if (this.traversalFinished(frameState) || newTime - this.lastUpdate > this.updateDebounceTime) {\n      this.lastUpdate = newTime;\n      this.options.onTraversalEnd(frameState);\n    }\n  }\n\n  updateChildTiles(tile, frameState) {\n    const children = tile.children;\n    for (const child of children) {\n      this.updateTile(child, frameState);\n    }\n    return true;\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAndPushChildren(tile, frameState, stack, depth) {\n    const {loadSiblings, skipLevelOfDetail} = this.options;\n\n    const children = tile.children;\n\n    // sort children tiles\n    children.sort(this.compareDistanceToCamera.bind(this));\n\n    // For traditional replacement refinement only refine if all children are loaded.\n    // Empty tiles are exempt since it looks better if children stream in as they are loaded to fill the empty space.\n    const checkRefines =\n      tile.refine === TILE_REFINEMENT.REPLACE && tile.hasRenderContent && !skipLevelOfDetail;\n\n    let hasVisibleChild = false;\n    let refines = true;\n\n    for (const child of children) {\n      child._selectionDepth = depth;\n      if (child.isVisibleAndInRequestVolume) {\n        if (stack.find(child)) {\n          stack.delete(child);\n        }\n        stack.push(child);\n        hasVisibleChild = true;\n      } else if (checkRefines || loadSiblings) {\n        // Keep non-visible children loaded since they are still needed before the parent can refine.\n        // Or loadSiblings is true so always load tiles regardless of visibility.\n        this.loadTile(child, frameState);\n        this.touchTile(child, frameState);\n      }\n\n      if (checkRefines) {\n        let childRefines;\n        if (!child._inRequestVolume) {\n          childRefines = false;\n        } else if (!child.hasRenderContent) {\n          childRefines = this.executeEmptyTraversal(child, frameState);\n        } else {\n          childRefines = child.contentAvailable;\n        }\n        refines = refines && childRefines;\n\n        if (!refines) {\n          return false;\n        }\n      }\n    }\n\n    if (!hasVisibleChild) {\n      refines = false;\n    }\n    return refines;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTile(tile, frameState) {\n    this.updateTileVisibility(tile, frameState);\n  }\n\n  // tile to render in the browser\n  selectTile(tile, frameState) {\n    if (this.shouldSelectTile(tile)) {\n      // The tile can be selected right away and does not require traverseAndSelect\n      tile._selectedFrame = frameState.frameNumber;\n      this.selectedTiles[tile.id] = tile;\n    }\n  }\n\n  // tile to load from server\n  loadTile(tile, frameState) {\n    if (this.shouldLoadTile(tile)) {\n      tile._requestedFrame = frameState.frameNumber;\n      tile._priority = tile._getPriority();\n      this.requestedTiles[tile.id] = tile;\n    }\n  }\n\n  // cache tile\n  touchTile(tile, frameState) {\n    tile.tileset._cache.touch(tile);\n    tile._touchedFrame = frameState.frameNumber;\n  }\n\n  // tile should be visible\n  // tile should have children\n  // tile LoD (level of detail) is not sufficient under current viewport\n  canTraverse(tile, frameState, useParentMetric = false, ignoreVisibility = false) {\n    if (!tile.hasChildren) {\n      return false;\n    }\n\n    // cesium specific\n    if (tile.hasTilesetContent) {\n      // Traverse external this to visit its root tile\n      // Don't traverse if the subtree is expired because it will be destroyed\n      return !tile.contentExpired;\n    }\n\n    if (!ignoreVisibility && !tile.isVisibleAndInRequestVolume) {\n      return false;\n    }\n\n    return this.shouldRefine(tile, frameState, useParentMetric);\n  }\n\n  shouldLoadTile(tile) {\n    // if request tile is in current frame\n    // and has unexpired render content\n    return tile.hasUnloadedContent || tile.contentExpired;\n  }\n\n  shouldSelectTile(tile) {\n    // if select tile is in current frame\n    // and content available\n    return tile.contentAvailable && !this.options.skipLevelOfDetail;\n  }\n\n  // Decide if tile LoD (level of detail) is not sufficient under current viewport\n  shouldRefine(tile, frameState, useParentMetric) {\n    let screenSpaceError = tile._screenSpaceError;\n    if (useParentMetric) {\n      screenSpaceError = tile.getScreenSpaceError(frameState, true);\n    }\n\n    return screenSpaceError > this.options.maximumScreenSpaceError;\n  }\n\n  updateTileVisibility(tile, frameState) {\n    const viewportIds: string[] = [];\n    if (this.options.viewportTraversersMap) {\n      for (const key in this.options.viewportTraversersMap) {\n        const value = this.options.viewportTraversersMap[key];\n        if (value === frameState.viewport.id) {\n          viewportIds.push(key);\n        }\n      }\n    } else {\n      viewportIds.push(frameState.viewport.id);\n    }\n    tile.updateVisibility(frameState, viewportIds);\n  }\n\n  // UTILITIES\n\n  compareDistanceToCamera(b, a) {\n    return b._distanceToCamera - a._distanceToCamera;\n  }\n\n  anyChildrenVisible(tile, frameState) {\n    let anyVisible = false;\n    for (const child of tile.children) {\n      child.updateVisibility(frameState);\n      anyVisible = anyVisible || child.isVisibleAndInRequestVolume;\n    }\n    return anyVisible;\n  }\n\n  // Depth-first traversal that checks if all nearest descendants with content are loaded.\n  // Ignores visibility.\n  executeEmptyTraversal(root, frameState) {\n    let allDescendantsLoaded = true;\n    const stack = this._emptyTraversalStack;\n\n    stack.push(root);\n\n    while (stack.length > 0 && allDescendantsLoaded) {\n      const tile = stack.pop();\n\n      this.updateTile(tile, frameState);\n\n      if (!tile.isVisibleAndInRequestVolume) {\n        // Load tiles that aren't visible since they are still needed for the parent to refine\n        this.loadTile(tile, frameState);\n      }\n\n      this.touchTile(tile, frameState);\n\n      // Only traverse if the tile is empty - traversal stop at descendants with content\n      const traverse = !tile.hasRenderContent && this.canTraverse(tile, frameState, false, true);\n\n      if (traverse) {\n        const children = tile.children;\n        for (const child of children) {\n          // eslint-disable-next-line max-depth\n          if (stack.find(child)) {\n            stack.delete(child);\n          }\n          stack.push(child);\n        }\n      } else if (!tile.contentAvailable) {\n        allDescendantsLoaded = false;\n      }\n    }\n\n    return allDescendantsLoaded;\n  }\n}\n\n// TODO\n// enable expiration\n// enable optimization hint\n"],"mappings":"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"}