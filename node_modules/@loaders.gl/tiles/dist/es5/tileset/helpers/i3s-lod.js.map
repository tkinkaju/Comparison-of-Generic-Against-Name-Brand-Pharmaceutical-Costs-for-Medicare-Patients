{"version":3,"file":"i3s-lod.js","names":["cameraPositionCartesian","Vector3","toEye","cameraPositionEnu","extraVertexEnu","projectedOriginVector","enuToCartesianMatrix","Matrix4","cartesianToEnuMatrix","getLodStatus","tile","frameState","lodMetricValue","isNaN","screenSize","getProjectedRadius","header","children","viewport","topDownViewport","mbsLat","mbs","mbsLon","mbsZ","mbsR","mbsCenterCartesian","boundingVolume","center","cameraPositionCartographic","unprojectPosition","cameraPosition","Ellipsoid","WGS84","cartographicToCartesian","copy","subtract","normalize","eastNorthUpToFixedFrame","invert","transform","projection","Math","sqrt","extraZ","extraVertexCartesian","extraVectorCartesian","radiusVector","cross","scale","sphereMbsBorderVertexCartesian","add","sphereMbsBorderVertexCartographic","cartesianToCartographic","projectedOrigin","project","projectedMbsBorderVertex","projectedRadius","magnitude"],"sources":["../../../../src/tileset/helpers/i3s-lod.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Tile3D} from '../tile-3d';\nimport {FrameState} from './frame-state';\n\nconst cameraPositionCartesian = new Vector3();\nconst toEye = new Vector3();\nconst cameraPositionEnu = new Vector3();\nconst extraVertexEnu = new Vector3();\nconst projectedOriginVector = new Vector3();\nconst enuToCartesianMatrix = new Matrix4();\nconst cartesianToEnuMatrix = new Matrix4();\n\n/**\n * For the maxScreenThreshold error metric, maxError means that you should replace the node with it's children\n   as soon as the nodes bounding sphere has a screen radius larger than maxError pixels.\n   In this sense a value of 0 means you should always load it's children,\n   or if it's a leaf node, you should always display it.\n * @param tile \n * @param frameState \n * @returns \n */\nexport function getLodStatus(tile: Tile3D, frameState: FrameState): 'DIG' | 'OUT' | 'DRAW' {\n  if (tile.lodMetricValue === 0 || isNaN(tile.lodMetricValue)) {\n    return 'DIG';\n  }\n  const screenSize = 2 * getProjectedRadius(tile, frameState);\n  if (screenSize < 2) {\n    return 'OUT';\n  }\n  if (!tile.header.children || screenSize <= tile.lodMetricValue) {\n    return 'DRAW';\n  } else if (tile.header.children) {\n    return 'DIG';\n  }\n  return 'OUT';\n}\n\n/**\n * Calculate size of MBS radius projected on the screen plane\n * @param tile\n * @param frameState\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport function getProjectedRadius(tile: Tile3D, frameState: FrameState): number {\n  const {topDownViewport: viewport} = frameState;\n  const mbsLat = tile.header.mbs[1];\n  const mbsLon = tile.header.mbs[0];\n  const mbsZ = tile.header.mbs[2];\n  const mbsR = tile.header.mbs[3];\n  const mbsCenterCartesian = [...tile.boundingVolume.center];\n  const cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);\n  Ellipsoid.WGS84.cartographicToCartesian(cameraPositionCartographic, cameraPositionCartesian);\n\n  // ---------------------------\n  // Calculate mbs border vertex\n  // ---------------------------\n  toEye.copy(cameraPositionCartesian).subtract(mbsCenterCartesian).normalize();\n  // Add extra vector to form plane\n  Ellipsoid.WGS84.eastNorthUpToFixedFrame(mbsCenterCartesian, enuToCartesianMatrix);\n  cartesianToEnuMatrix.copy(enuToCartesianMatrix).invert();\n  cameraPositionEnu.copy(cameraPositionCartesian).transform(cartesianToEnuMatrix);\n  // Mean Proportionals in Right Triangles - Altitude rule\n  // https://mathbitsnotebook.com/Geometry/RightTriangles/RTmeanRight.html\n  const projection = Math.sqrt(\n    cameraPositionEnu[0] * cameraPositionEnu[0] + cameraPositionEnu[1] * cameraPositionEnu[1]\n  );\n  const extraZ = (projection * projection) / cameraPositionEnu[2];\n  extraVertexEnu.copy([cameraPositionEnu[0], cameraPositionEnu[1], extraZ]);\n  const extraVertexCartesian = extraVertexEnu.transform(enuToCartesianMatrix);\n  const extraVectorCartesian = extraVertexCartesian.subtract(mbsCenterCartesian).normalize();\n  // We need radius vector orthogonal to toEye vector\n  const radiusVector = toEye.cross(extraVectorCartesian).normalize().scale(mbsR);\n  const sphereMbsBorderVertexCartesian = radiusVector.add(mbsCenterCartesian);\n  const sphereMbsBorderVertexCartographic = Ellipsoid.WGS84.cartesianToCartographic(\n    sphereMbsBorderVertexCartesian\n  );\n  // ---------------------------\n\n  // Project center vertex and border vertex and calculate projected radius of MBS\n  const projectedOrigin = viewport.project([mbsLon, mbsLat, mbsZ]);\n  const projectedMbsBorderVertex = viewport.project(\n    sphereMbsBorderVertexCartographic as [number, number, number]\n  );\n  const projectedRadius = projectedOriginVector\n    .copy(projectedOrigin)\n    .subtract(projectedMbsBorderVertex)\n    .magnitude();\n  return projectedRadius;\n}\n"],"mappings":"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"}