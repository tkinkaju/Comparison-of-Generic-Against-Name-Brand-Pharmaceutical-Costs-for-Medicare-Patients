{"version":3,"file":"frame-state.js","names":["scratchVector","Vector3","scratchPosition","cullingVolume","CullingVolume","Plane","getFrameState","viewport","frameNumber","cameraDirection","cameraUp","height","metersPerUnit","distanceScales","viewportCenterCartesian","worldToCartesian","center","enuToFixedTransform","Ellipsoid","WGS84","eastNorthUpToFixedFrame","cameraPositionCartographic","unprojectPosition","cameraPosition","cameraPositionCartesian","cartographicToCartesian","cameraDirectionCartesian","transformAsVector","scale","normalize","cameraUpCartesian","commonSpacePlanesToWGS84","ViewportClass","constructor","longitude","latitude","width","bearing","zoom","topDownViewport","pitch","camera","position","direction","up","sseDenominator","limitSelectedTiles","tiles","frameState","maximumTilesSelected","length","tuples","viewportLongitude","viewportLatitude","entries","index","tile","header","mbs","deltaLon","Math","abs","deltaLat","distance","sqrt","push","tuplesSorted","sort","a","b","selectedTiles","i","unselectedTiles","frustumPlanes","getFrustumPlanes","nearCenterCommon","closestPointOnPlane","near","nearCenterCartesian","cameraCartesian","planes","fromPointNormal","copy","subtract","dir","plane","posCommon","cartesianPos","refPoint","out","distanceToRef","normal","dot","add","point","cartographicPos"],"sources":["../../../../src/tileset/helpers/frame-state.ts"],"sourcesContent":["import {Tile3D} from '@loaders.gl/tiles';\nimport {Vector3} from '@math.gl/core';\nimport {CullingVolume, Plane} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {GeospatialViewport, Viewport} from '../../types';\n\nexport type FrameState = {\n  camera: {\n    position: number[];\n    direction: number[];\n    up: number[];\n  };\n  viewport: GeospatialViewport;\n  topDownViewport: GeospatialViewport; // Use it to calculate projected radius for a tile\n  height: number;\n  cullingVolume: CullingVolume;\n  frameNumber: number; // TODO: This can be the same between updates, what number is unique for between updates?\n  sseDenominator: number; // Assumes fovy = 60 degrees\n};\n\nconst scratchVector = new Vector3();\nconst scratchPosition = new Vector3();\nconst cullingVolume = new CullingVolume([\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane()\n]);\n\n// Extracts a frame state appropriate for tile culling from a deck.gl viewport\n// TODO - this could likely be generalized and merged back into deck.gl for other culling scenarios\nexport function getFrameState(viewport: GeospatialViewport, frameNumber: number): FrameState {\n  // Traverse and and request. Update _selectedTiles so that we know what to render.\n  // Traverse and and request. Update _selectedTiles so that we know what to render.\n  const {cameraDirection, cameraUp, height} = viewport;\n  const {metersPerUnit} = viewport.distanceScales;\n\n  // TODO - Ellipsoid.eastNorthUpToFixedFrame() breaks on raw array, create a Vector.\n  // TODO - Ellipsoid.eastNorthUpToFixedFrame() takes a cartesian, is that intuitive?\n  const viewportCenterCartesian = worldToCartesian(viewport, viewport.center);\n  const enuToFixedTransform = Ellipsoid.WGS84.eastNorthUpToFixedFrame(viewportCenterCartesian);\n\n  const cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);\n  const cameraPositionCartesian = Ellipsoid.WGS84.cartographicToCartesian(\n    cameraPositionCartographic,\n    new Vector3()\n  );\n\n  // These should still be normalized as the transform has scale 1 (goes from meters to meters)\n  const cameraDirectionCartesian = new Vector3(\n    // @ts-ignore\n    enuToFixedTransform.transformAsVector(new Vector3(cameraDirection).scale(metersPerUnit))\n  ).normalize();\n  const cameraUpCartesian = new Vector3(\n    // @ts-ignore\n    enuToFixedTransform.transformAsVector(new Vector3(cameraUp).scale(metersPerUnit))\n  ).normalize();\n\n  commonSpacePlanesToWGS84(viewport);\n\n  const ViewportClass = viewport.constructor;\n  const {longitude, latitude, width, bearing, zoom} = viewport;\n  // @ts-ignore\n  const topDownViewport = new ViewportClass({\n    longitude,\n    latitude,\n    height,\n    width,\n    bearing,\n    zoom,\n    pitch: 0\n  });\n\n  // TODO: make a file/class for frameState and document what needs to be attached to this so that traversal can function\n  return {\n    camera: {\n      position: cameraPositionCartesian,\n      direction: cameraDirectionCartesian,\n      up: cameraUpCartesian\n    },\n    viewport,\n    topDownViewport,\n    height,\n    cullingVolume,\n    frameNumber, // TODO: This can be the same between updates, what number is unique for between updates?\n    sseDenominator: 1.15 // Assumes fovy = 60 degrees\n  };\n}\n\n/**\n * Limit `tiles` array length with `maximumTilesSelected` number.\n * The criteria for this filtering is distance of a tile center\n * to the `frameState.viewport`'s longitude and latitude\n * @param tiles - tiles array to filter\n * @param frameState - frameState to calculate distances\n * @param maximumTilesSelected - maximal amount of tiles in the output array\n * @returns new tiles array\n */\nexport function limitSelectedTiles(\n  tiles: Tile3D[],\n  frameState: FrameState,\n  maximumTilesSelected: number\n): [Tile3D[], Tile3D[]] {\n  if (maximumTilesSelected === 0 || tiles.length <= maximumTilesSelected) {\n    return [tiles, []];\n  }\n  // Accumulate distances in couples array: [tileIndex: number, distanceToViewport: number]\n  const tuples: [number, number][] = [];\n  const {longitude: viewportLongitude, latitude: viewportLatitude} = frameState.viewport;\n  for (const [index, tile] of tiles.entries()) {\n    const [longitude, latitude] = tile.header.mbs;\n    const deltaLon = Math.abs(viewportLongitude - longitude);\n    const deltaLat = Math.abs(viewportLatitude - latitude);\n    const distance = Math.sqrt(deltaLat * deltaLat + deltaLon * deltaLon);\n    tuples.push([index, distance]);\n  }\n  const tuplesSorted = tuples.sort((a, b) => a[1] - b[1]);\n  const selectedTiles: Tile3D[] = [];\n  for (let i = 0; i < maximumTilesSelected; i++) {\n    selectedTiles.push(tiles[tuplesSorted[i][0]]);\n  }\n  const unselectedTiles: Tile3D[] = [];\n  for (let i = maximumTilesSelected; i < tuplesSorted.length; i++) {\n    unselectedTiles.push(tiles[tuplesSorted[i][0]]);\n  }\n\n  return [selectedTiles, unselectedTiles];\n}\n\nfunction commonSpacePlanesToWGS84(viewport) {\n  // Extract frustum planes based on current view.\n  const frustumPlanes = viewport.getFrustumPlanes();\n\n  // Get the near/far plane centers\n  const nearCenterCommon = closestPointOnPlane(frustumPlanes.near, viewport.cameraPosition);\n  const nearCenterCartesian = worldToCartesian(viewport, nearCenterCommon);\n  const cameraCartesian = worldToCartesian(viewport, viewport.cameraPosition, scratchPosition);\n\n  let i = 0;\n  cullingVolume.planes[i++].fromPointNormal(\n    nearCenterCartesian,\n    scratchVector.copy(nearCenterCartesian).subtract(cameraCartesian)\n  );\n\n  for (const dir in frustumPlanes) {\n    if (dir === 'near') {\n      continue; // eslint-disable-line no-continue\n    }\n    const plane = frustumPlanes[dir];\n    const posCommon = closestPointOnPlane(plane, nearCenterCommon, scratchPosition);\n    const cartesianPos = worldToCartesian(viewport, posCommon, scratchPosition);\n\n    cullingVolume.planes[i++].fromPointNormal(\n      cartesianPos,\n      // Want the normal to point into the frustum since that's what culling expects\n      scratchVector.copy(nearCenterCartesian).subtract(cartesianPos)\n    );\n  }\n}\n\nfunction closestPointOnPlane(\n  plane: {distance: number; normal: Vector3},\n  refPoint: [number, number, number] | Vector3,\n  out: Vector3 = new Vector3()\n): Vector3 {\n  const distanceToRef = plane.normal.dot(refPoint);\n  out\n    .copy(plane.normal)\n    .scale(plane.distance - distanceToRef)\n    .add(refPoint);\n  return out;\n}\n\nfunction worldToCartesian(\n  viewport: Viewport,\n  point: number[] | Vector3,\n  out: Vector3 = new Vector3()\n): Vector3 {\n  const cartographicPos = viewport.unprojectPosition(point);\n  return Ellipsoid.WGS84.cartographicToCartesian(cartographicPos, out);\n}\n"],"mappings":"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"}