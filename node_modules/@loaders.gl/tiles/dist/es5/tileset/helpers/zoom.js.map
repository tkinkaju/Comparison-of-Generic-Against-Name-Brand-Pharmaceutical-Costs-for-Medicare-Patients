{"version":3,"file":"zoom.js","names":["WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","scratchVector","Vector3","getZoomFromBoundingVolume","boundingVolume","cartorgraphicCenter","OrientedBoundingBox","halfAxes","obbSize","getObbSize","Math","log2","BoundingSphere","radius","width","height","zoomX","zoomY","getZoomFromFullExtent","fullExtent","cartesianCenter","extentVertex","Ellipsoid","WGS84","cartographicToCartesian","xmax","ymax","zmax","extentSize","sqrt","pow","getZoomFromExtent","extent","xmin","ymin","zmin","getColumn","axeY","axeZ","farthestVertex","add","size","len"],"sources":["../../../../src/tileset/helpers/zoom.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {Vector3} from '@math.gl/core';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {BoundingRectangle} from '../../types';\n\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nconst scratchVector = new Vector3();\n\n/**\n * Calculate appropriate zoom value for a particular boundingVolume\n * @param boundingVolume - the instance of bounding volume\n * @param cartorgraphicCenter - cartographic center of the bounding volume\n * @returns {number} - zoom value\n */\nexport function getZoomFromBoundingVolume(\n  boundingVolume: BoundingSphere | OrientedBoundingBox | BoundingRectangle,\n  cartorgraphicCenter: Vector3\n) {\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    // OrientedBoundingBox\n    const {halfAxes} = boundingVolume;\n    const obbSize = getObbSize(halfAxes);\n    // Use WGS84_RADIUS_Z to allign with BoundingSphere algorithm\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (obbSize + cartorgraphicCenter[2]));\n  } else if (boundingVolume instanceof BoundingSphere) {\n    // BoundingSphere\n    const {radius} = boundingVolume;\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (radius + cartorgraphicCenter[2]));\n  } else if (boundingVolume.width && boundingVolume.height) {\n    // BoundingRectangle\n    const {width, height} = boundingVolume;\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 1;\n}\n\n/**\n * Calculate initial zoom for the tileset from 3D `fullExtent` defined in\n * the tileset metadata\n * @param fullExtent - 3D extent of the tileset\n * @param fullExtent.xmin - minimal longitude in decimal degrees\n * @param fullExtent.xmax - maximal longitude in decimal degrees\n * @param fullExtent.ymin - minimal latitude in decimal degrees\n * @param fullExtent.ymax - maximal latitude in decimal degrees\n * @param fullExtent.zmin - minimal elevation in meters\n * @param fullExtent.zmax - maximal elevation in meters\n * @param cartorgraphicCenter - tileset center in cartographic coordinate system\n * @param cartesianCenter - tileset center in cartesian coordinate system\n * @returns - initial zoom for the tileset\n */\nexport function getZoomFromFullExtent(\n  fullExtent: {\n    xmin: number;\n    xmax: number;\n    ymin: number;\n    ymax: number;\n    zmin: number;\n    zmax: number;\n  },\n  cartorgraphicCenter: Vector3,\n  cartesianCenter: Vector3\n) {\n  const extentVertex = Ellipsoid.WGS84.cartographicToCartesian(\n    [fullExtent.xmax, fullExtent.ymax, fullExtent.zmax],\n    new Vector3()\n  );\n  const extentSize = Math.sqrt(\n    Math.pow(extentVertex[0] - cartesianCenter[0], 2) +\n      Math.pow(extentVertex[1] - cartesianCenter[1], 2) +\n      Math.pow(extentVertex[2] - cartesianCenter[2], 2)\n  );\n  return Math.log2(WGS84_RADIUS_Z / (extentSize + cartorgraphicCenter[2]));\n}\n\n/**\n * Calculate initial zoom for the tileset from 2D `extent` defined in\n * the tileset metadata\n * @param extent - 2D extent of the tileset. It is array of 4 elements [xmin, ymin, xmax, ymax]\n * @param extent[0] - minimal longitude in decimal degrees\n * @param extent[1] - minimal latitude in decimal degrees\n * @param extent[2] - maximal longitude in decimal degrees\n * @param extent[3] - maximal latitude in decimal degrees\n * @param cartorgraphicCenter - tileset center in cartographic coordinate system\n * @param cartesianCenter - tileset center in cartesian coordinate system\n * @returns - initial zoom for the tileset\n */\nexport function getZoomFromExtent(\n  extent: [number, number, number, number],\n  cartorgraphicCenter: Vector3,\n  cartesianCenter: Vector3\n) {\n  const [xmin, ymin, xmax, ymax] = extent;\n  return getZoomFromFullExtent(\n    {xmin, xmax, ymin, ymax, zmin: 0, zmax: 0},\n    cartorgraphicCenter,\n    cartesianCenter\n  );\n}\n\nfunction getObbSize(halfAxes) {\n  halfAxes.getColumn(0, scratchVector);\n  const axeY = halfAxes.getColumn(1);\n  const axeZ = halfAxes.getColumn(2);\n  const farthestVertex = scratchVector.add(axeY).add(axeZ);\n  const size = farthestVertex.len();\n  return size;\n}\n"],"mappings":"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"}