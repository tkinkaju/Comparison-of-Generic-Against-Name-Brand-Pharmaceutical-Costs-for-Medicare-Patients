{"version":3,"file":"tileset-3d.js","names":["DEFAULT_PROPS","description","ellipsoid","Ellipsoid","WGS84","modelMatrix","Matrix4","throttleRequests","maxRequests","maximumMemoryUsage","maximumTilesSelected","debounceTime","onTileLoad","onTileUnload","onTileError","onTraversalComplete","selectedTiles","contentLoader","undefined","viewDistanceScale","maximumScreenSpaceError","loadTiles","updateTransforms","viewportTraversersMap","loadOptions","fetch","attributions","basePath","i3s","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","Tileset3D","json","options","draco","meshopt","dds","ktx2","assert","tileset","loader","type","url","path","dirname","lodMetricType","lodMetricValue","refine","root","roots","cartographicCenter","cartesianCenter","zoom","boundingVolume","traverseCounter","geometricError","_traverser","_initializeTraverser","_cache","TilesetCache","_requestScheduler","RequestScheduler","_frameNumber","_pendingCount","_tiles","_emptyTiles","_requestedTiles","frameStateData","lastUpdatedVieports","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","Stats","id","_initializeStats","_extensionsUsed","dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","tilesetInitializationPromise","_initializeTileSet","_destroy","length","Object","values","getQueryParamString","props","tilePath","isDataUrl","startsWith","queryParams","extensionName","Boolean","indexOf","viewports","then","doUpdate","updatePromise","Promise","resolve","setTimeout","preparedViewports","Array","reset","viewportsToTraverse","viewport","_needTraverse","push","_initializeTileHeaders","includes","frameState","getFrameState","traverse","viewportId","traverserId","currentFrameStateData","limitSelectedTiles","filteredSelectedTiles","unselectedTiles","tile","unselect","requestedTiles","emptyTiles","_updateTiles","frameStateKey","frameStateDataValue","concat","_loadTiles","_unloadTiles","_updateStats","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","vertexCount","get","count","tilesetJson","TILESET_TYPE","I3S","calculateViewPropsI3S","TILES3D","_initializeTiles3DTileset","calculateViewPropsTiles3D","_initializeI3STileset","fullExtent","xmin","xmax","ymin","ymax","zmin","zmax","Vector3","cartographicToCartesian","getZoomFromFullExtent","extent","store","getZoomFromExtent","console","warn","center","cartesianToCartographic","radii","getZoomFromBoundingVolume","parentTileHeader","rootTile","Tile3D","children","depth","stack","pop","incrementCount","header","childHeader","childTile","TraverserClass","Tileset3DTraverser","I3STilesetTraverser","TilesetTraverser","onTraversalEnd","_onTraversalEnd","bind","parentTile","_destroySubtree","_onStartTileLoading","loadContent","loaded","_onTileLoadError","_onEndTileLoading","_onTileLoad","error","message","toString","nodesInNodePages","nodePagesTile","addCount","calculateTransformProps","updateContentTypes","_addTileToCache","isDracoGeometry","contentFormats","textureFormat","gltf","extensionsRemoved","decrementCount","add","_updateCacheStats","byteLength","unloadContent","child","_destroyTile","unloadTile","destroy","Error","version","v","tilesetVersion","properties","extensionsUsed","token","queryParamStrings","keys","key","join"],"sources":["../../../src/tileset/tileset-3d.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/*\n\n  The Tileset loading and rendering flow is as below,\n  A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n  `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n  to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n  `Tile3DLayer` will update rendering based on `selectedTiles`.\n  `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n  when new tiles are loaded.\n\n  As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n  During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n  after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n  Tile3DLayer\n       |\n   await load(tileset)\n       |\n   tileset.update()\n       |                async load tileHeader\n   tileset.traverse() -------------------------- Queued\n       |        resume traversal after fetched  |\n       |----------------------------------------|\n       |\n       |                     async load tile content\n  tilset.requestedTiles  ----------------------------- RequestScheduler\n                                                              |\n  tilset.selectedTiles (ready for rendering)                  |\n       |         Listen to                                    |\n    Tile3DLayer ----------- onTileLoad  ----------------------|\n       |                         |   notify new tile is available\n    updateLayers                 |\n                        tileset.update // trigger another round of update\n*/\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {\n  RequestScheduler,\n  assert,\n  path,\n  LoaderWithParser,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {TilesetCache} from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {FrameState, getFrameState, limitSelectedTiles} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume, getZoomFromExtent, getZoomFromFullExtent} from './helpers/zoom';\nimport {Tile3D} from './tile-3d';\nimport {TILESET_TYPE} from '../constants';\nimport {GeospatialViewport, Viewport} from '../types';\n\nimport {TilesetTraverser} from './tileset-traverser';\n\n// TODO - these should be moved into their respective modules\nimport {Tileset3DTraverser} from './format-3d-tiles/tileset-3d-traverser';\nimport {I3STilesetTraverser} from './format-i3s/i3s-tileset-traverser';\n\nexport type Tileset3DProps = {\n  // loading\n  throttleRequests?: boolean;\n  maxRequests?: number;\n  loadOptions?: LoaderOptions;\n  loadTiles?: boolean;\n  basePath?: string;\n  maximumMemoryUsage?: number;\n  maximumTilesSelected?: number;\n  debounceTime?: number;\n\n  // Metadata\n  description?: string;\n  attributions?: string[];\n\n  // Transforms\n  ellipsoid?: object;\n  modelMatrix?: Matrix4;\n\n  // Traversal\n  maximumScreenSpaceError?: number;\n  viewportTraversersMap?: any;\n  updateTransforms?: boolean;\n  viewDistanceScale?: number;\n\n  // Callbacks\n  onTileLoad?: (tile: Tile3D) => any;\n  onTileUnload?: (tile: Tile3D) => any;\n  onTileError?: (tile: Tile3D, message: string, url: string) => any;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n};\n\ntype Props = {\n  description: string;\n  ellipsoid: object;\n  modelMatrix: Matrix4;\n  throttleRequests: boolean;\n  maximumMemoryUsage: number;\n  maximumTilesSelected: number;\n  debounceTime: number;\n  onTileLoad: (tile: Tile3D) => any;\n  onTileUnload: (tile: Tile3D) => any;\n  onTileError: (tile: Tile3D, message: string, url: string) => any;\n  onTraversalComplete: (selectedTiles: Tile3D[]) => Tile3D[];\n  maximumScreenSpaceError: number;\n  viewportTraversersMap: any;\n  attributions: string[];\n  maxRequests: number;\n  loadTiles: boolean;\n  loadOptions: LoaderOptions;\n  updateTransforms: boolean;\n  viewDistanceScale: number;\n  basePath: string;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  i3s: {[key: string]: any};\n};\n\nconst DEFAULT_PROPS: Props = {\n  description: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to false to disable network request throttling\n  throttleRequests: true,\n\n  // Number of simultaneous requsts, if throttleRequests is true\n  maxRequests: 64,\n\n  maximumMemoryUsage: 32,\n  /** Maximum number limit of tiles selected for show. 0 means no limit */\n  maximumTilesSelected: 0,\n  /** Delay time before the tileset traversal. It prevents traversal requests spam.*/\n  debounceTime: 0,\n\n  /**\n   * Callback. Indicates this a tile's content was loaded\n   * @param tile {TileHeader}\n   */\n  onTileLoad: () => {},\n  /**\n   * Callback. Indicates this a tile's content was unloaded\n   * @param tile {TileHeader}\n   */\n  onTileUnload: () => {},\n  onTileError: () => {},\n  /**\n   * Callback. Allows post-process selectedTiles right after traversal.\n   * @param selectedTiles {TileHeader[]}\n   * @returns TileHeader[] - output array of tiles to return to deck.gl\n   */\n  onTraversalComplete: (selectedTiles: Tile3D[]) => selectedTiles,\n\n  // Optional async tile content loader\n  contentLoader: undefined,\n\n  // View distance scale modifier\n  viewDistanceScale: 1.0,\n\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8,\n\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n\n  loadOptions: {fetch: {}},\n\n  attributions: [],\n  basePath: '',\n\n  i3s: {}\n};\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points/Vertices';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nexport class Tileset3D {\n  // props: Tileset3DProps;\n  options: Props;\n  loadOptions: {[key: string]: any};\n\n  type: string;\n  tileset: {[key: string]: any};\n  loader: LoaderWithParser;\n  url: string;\n  basePath: string;\n  modelMatrix: Matrix4;\n  ellipsoid: any;\n  lodMetricType: string;\n  lodMetricValue: number;\n  refine: string;\n  root: Tile3D | null;\n  roots: {[key: string]: Tile3D};\n  asset: {[key: string]: any};\n\n  description: string;\n  properties: any;\n  extras: any;\n  attributions: any;\n  credits: any;\n\n  stats: Stats;\n\n  /** flags that contain information about data types in nested tiles */\n  contentFormats = {draco: false, meshopt: false, dds: false, ktx2: false};\n\n  traverseCounter: number;\n  geometricError: number;\n  selectedTiles: Tile3D[];\n  private updatePromise: Promise<number> | null = null;\n  tilesetInitializationPromise: Promise<void>;\n\n  cartographicCenter: Vector3 | null;\n  cartesianCenter: Vector3 | null;\n  zoom: number;\n  boundingVolume: any;\n\n  // METRICS\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce private\n  // The total amount of GPU memory in bytes used by the tileset.\n  gpuMemoryUsageInBytes: any;\n  dynamicScreenSpaceErrorComputedDensity: any;\n\n  // TRAVERSAL\n  _traverser: TilesetTraverser;\n  private _cache: TilesetCache;\n  _requestScheduler: RequestScheduler;\n\n  _frameNumber: number;\n  private _queryParamsString: string;\n  private _queryParams: any;\n  private _extensionsUsed: any;\n  private _tiles: {[id: string]: Tile3D};\n\n  // counter for tracking tiles requests\n  private _pendingCount: any;\n\n  // HOLD TRAVERSAL RESULTS\n  private lastUpdatedVieports: Viewport[] | Viewport | null;\n  private _requestedTiles: any;\n  private _emptyTiles: any;\n  private frameStateData: any;\n\n  maximumMemoryUsage: number;\n\n  /**\n   * Create a new Tileset3D\n   * @param json\n   * @param props\n   */\n  // eslint-disable-next-line max-statements\n  constructor(json: any, options?: Tileset3DProps) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_PROPS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    this.loadOptions = this.options.loadOptions || {};\n\n    this.root = null;\n    this.roots = {};\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n\n    this._queryParams = {};\n    this._queryParamsString = '';\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // EXTRACTED FROM TILESET\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n\n    this.tilesetInitializationPromise = this._initializeTileSet(json);\n  }\n\n  /** Release resources */\n  destroy(): void {\n    this._destroy();\n  }\n\n  /** Is the tileset loaded (update needs to have been called at least once) */\n  isLoaded(): boolean {\n    // Check that `_frameNumber !== 0` which means that update was called at least once\n    return this._pendingCount === 0 && this._frameNumber !== 0 && this._requestedTiles.length === 0;\n  }\n\n  get tiles(): object[] {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber(): number {\n    return this._frameNumber;\n  }\n\n  get queryParams(): string {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n\n  setProps(props: Tileset3DProps): void {\n    this.options = {...this.options, ...props};\n  }\n\n  /** @deprecated */\n  setOptions(options: Tileset3DProps): void {\n    this.options = {...this.options, ...options};\n  }\n\n  /**\n   * Return a loadable tile url for a specific tile subpath\n   * @param tilePath a tile subpath\n   */\n  getTileUrl(tilePath: string): string {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName: string): boolean {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports - list of viewports\n   * @deprecated\n   */\n  update(viewports: Viewport[] | Viewport | null = null) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.tilesetInitializationPromise.then(() => {\n      if (!viewports && this.lastUpdatedVieports) {\n        viewports = this.lastUpdatedVieports;\n      } else {\n        this.lastUpdatedVieports = viewports;\n      }\n      if (viewports) {\n        this.doUpdate(viewports);\n      }\n    });\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports.\n   * Do it with debounce delay to prevent update spam\n   * @param viewports viewports\n   * @returns Promise of new frameNumber\n   */\n  async selectTiles(viewports: Viewport[] | Viewport | null = null): Promise<number> {\n    await this.tilesetInitializationPromise;\n    if (viewports) {\n      this.lastUpdatedVieports = viewports;\n    }\n    if (!this.updatePromise) {\n      this.updatePromise = new Promise<number>((resolve) => {\n        setTimeout(() => {\n          if (this.lastUpdatedVieports) {\n            this.doUpdate(this.lastUpdatedVieports);\n          }\n          resolve(this._frameNumber);\n          this.updatePromise = null;\n        }, this.options.debounceTime);\n      });\n    }\n    return this.updatePromise;\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports viewports\n   */\n  // eslint-disable-next-line max-statements, complexity\n  private doUpdate(viewports: Viewport[] | Viewport): void {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n    if (this.traverseCounter > 0) {\n      return;\n    }\n    const preparedViewports = viewports instanceof Array ? viewports : [viewports];\n\n    this._cache.reset();\n    this._frameNumber++;\n    this.traverseCounter = preparedViewports.length;\n    const viewportsToTraverse: string[] = [];\n    // First loop to decrement traverseCounter\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    // Second loop to traverse\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const frameState = getFrameState(viewport as GeospatialViewport, this._frameNumber);\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  /**\n   * Check if traversal is needed for particular viewport\n   * @param {string} viewportId - id of a viewport\n   * @return {boolean}\n   */\n  _needTraverse(viewportId: string): boolean {\n    let traverserId = viewportId;\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * The callback to post-process tiles after traversal procedure\n   * @param frameState - frame state for tile culling\n   */\n  _onTraversalEnd(frameState: FrameState): void {\n    const id = frameState.viewport.id;\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {selectedTiles: [], _requestedTiles: [], _emptyTiles: []};\n    }\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    const [filteredSelectedTiles, unselectedTiles] = limitSelectedTiles(\n      selectedTiles,\n      frameState,\n      this.options.maximumTilesSelected\n    );\n    currentFrameStateData.selectedTiles = filteredSelectedTiles;\n    for (const tile of unselectedTiles) {\n      tile.unselect();\n    }\n\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this.traverseCounter--;\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  /**\n   * Update tiles relying on data from all traversers\n   */\n  _updateTiles(): void {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n    this._unloadTiles();\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map((t) => t.id));\n    const set2 = new Set(selectedTiles.map((t) => t.id));\n    let changed = oldSelectedTiles.filter((x) => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter((x) => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles() {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        } else {\n          // Calculate vertices for non point cloud tiles.\n          pointsRenderable += tile.content.vertexCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  async _initializeTileSet(tilesetJson) {\n    if (this.type === TILESET_TYPE.I3S) {\n      this.calculateViewPropsI3S();\n      tilesetJson.root = await tilesetJson.root;\n    }\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeTiles3DTileset(tilesetJson);\n      this.calculateViewPropsTiles3D();\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset\n   * For I3S there is extent (<1.8 version) or fullExtent (>=1.8 version) to calculate view props\n   * @returns\n   */\n  private calculateViewPropsI3S() {\n    // for I3S 1.8 try to calculate with fullExtent\n    const fullExtent = this.tileset.fullExtent;\n    if (fullExtent) {\n      const {xmin, xmax, ymin, ymax, zmin, zmax} = fullExtent;\n      this.cartographicCenter = new Vector3(\n        xmin + (xmax - xmin) / 2,\n        ymin + (ymax - ymin) / 2,\n        zmin + (zmax - zmin) / 2\n      );\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromFullExtent(fullExtent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // for I3S 1.6-1.7 try to calculate with extent\n    const extent = this.tileset.store?.extent;\n    if (extent) {\n      const [xmin, ymin, xmax, ymax] = extent;\n      this.cartographicCenter = new Vector3(xmin + (xmax - xmin) / 2, ymin + (ymax - ymin) / 2, 0);\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromExtent(extent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console.warn('Extent is not defined in the tileset header');\n    this.cartographicCenter = new Vector3();\n    this.zoom = 1;\n    return;\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset.\n   * For 3DTiles the root tile data is used to calculate view props.\n   * @returns\n   */\n  private calculateViewPropsTiles3D() {\n    const root = this.root as Tile3D;\n    assert(root);\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line no-console\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n\n    // cartographic coordinates are undefined at the center of the ellipsoid\n    if (center[0] !== 0 || center[1] !== 0 || center[2] !== 0) {\n      this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    } else {\n      this.cartographicCenter = new Vector3(0, 0, -Ellipsoid.WGS84.radii[0]);\n    }\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT);\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // 3DTiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack: Tile3D[] = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop() as Tile3D;\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3STilesetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      // We can't calculate tiles total in I3S in advance so we calculate it dynamically.\n      const nodesInNodePages = this.tileset?.nodePagesTile?.nodesInNodePages || 0;\n      this.stats.get(TILES_TOTAL).reset();\n      this.stats.get(TILES_TOTAL).addCount(nodesInNodePages);\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this.updateContentTypes(tile);\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  /**\n   * Update information about data types in nested tiles\n   * @param tile instance of a nested Tile3D\n   */\n  private updateContentTypes(tile: Tile3D) {\n    if (this.type === TILESET_TYPE.I3S) {\n      if (tile.header.isDracoGeometry) {\n        this.contentFormats.draco = true;\n      }\n      switch (tile.header.textureFormat) {\n        case 'dds':\n          this.contentFormats.dds = true;\n          break;\n        case 'ktx2':\n          this.contentFormats.ktx2 = true;\n          break;\n        default:\n      }\n    } else if (this.type === TILESET_TYPE.TILES3D) {\n      const {extensionsRemoved = []} = tile.content?.gltf || {};\n      if (extensionsRemoved.includes('KHR_draco_mesh_compression')) {\n        this.contentFormats.draco = true;\n      }\n      if (extensionsRemoved.includes('EXT_meshopt_compression')) {\n        this.contentFormats.meshopt = true;\n      }\n      if (extensionsRemoved.includes('KHR_texture_basisu')) {\n        this.contentFormats.ktx2 = true;\n      }\n    }\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= (tile.content && tile.content.byteLength) || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack: Tile3D[] = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile: Tile3D = stack.pop() as Tile3D;\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack: Tile3D[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeTiles3DTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token;\n    }\n  }\n}\n\nfunction getQueryParamString(queryParams): string {\n  const queryParamStrings: string[] = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n"],"mappings":"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"}