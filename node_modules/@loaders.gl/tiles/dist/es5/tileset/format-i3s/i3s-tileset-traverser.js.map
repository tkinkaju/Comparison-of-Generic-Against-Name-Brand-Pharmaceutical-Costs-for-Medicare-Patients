{"version":3,"file":"i3s-tileset-traverser.js","names":["I3STilesetTraverser","options","_tileManager","I3STileManager","frameState","hasPendingTiles","viewport","id","_frameNumber","tile","_lodJudge","getLodStatus","children","header","childTiles","tileset","child","extendedId","childTile","find","t","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","loadOptions","i3s","isTileHeader","load","Tile3D","push","frameNumber","traversalFinished","Date","getTime","lastUpdate","updateDebounceTime","executeTraversal","TilesetTraverser"],"sources":["../../../../src/tileset/format-i3s/i3s-tileset-traverser.ts"],"sourcesContent":["import {load} from '@loaders.gl/core';\nimport {TilesetTraverser} from '../tileset-traverser';\n\nimport {getLodStatus} from '../helpers/i3s-lod';\nimport {Tile3D} from '../tile-3d';\nimport {I3STileManager} from './i3s-tile-manager';\nimport {FrameState} from '../helpers/frame-state';\n\nexport class I3STilesetTraverser extends TilesetTraverser {\n  private _tileManager: I3STileManager;\n\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  /**\n   * Check if there are no penging tile header requests,\n   * that means the traversal is finished and we can call\n   * following-up callbacks.\n   */\n  traversalFinished(frameState: FrameState): boolean {\n    return !this._tileManager.hasPendingTiles(frameState.viewport.id, this._frameNumber || 0);\n  }\n\n  shouldRefine(tile, frameState: FrameState) {\n    tile._lodJudge = getLodStatus(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState: FrameState): boolean {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      const extendedId = `${child.id}-${frameState.viewport.id}`;\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find((t) => t.id === extendedId);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(extendedId);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            extendedId,\n            (header) => this._onTileLoad(header, tile, extendedId),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(extendedId, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n    return false;\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      ...tileset.loadOptions,\n      i3s: {\n        ...tileset.loadOptions.i3s,\n        isTileHeader: true\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  /**\n   * The callback to init Tile3D instance after loading the tile JSON\n   * @param {Object} header - the tile JSON from a dataset\n   * @param {Tile3D} tile - the parent Tile3D instance\n   * @param {string} extendedId - optional ID to separate copies of a tile for different viewports.\n   *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   * @return {void}\n   */\n  _onTileLoad(header, tile, extendedId) {\n    // after child tile is fetched\n    const childTile = new Tile3D(tile.tileset, header, tile, extendedId);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (\n      this._frameNumber === frameState.frameNumber &&\n      (this.traversalFinished(frameState) ||\n        new Date().getTime() - this.lastUpdate > this.updateDebounceTime)\n    ) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"mappings":"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"}