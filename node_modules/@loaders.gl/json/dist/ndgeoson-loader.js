"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._typecheckNDJSONLoader = exports.NDJSONLoader = void 0;
const parse_ndjson_1 = __importDefault(require("./lib/parse-ndjson"));
const parse_ndjson_in_batches_1 = __importDefault(require("./lib/parse-ndjson-in-batches"));
// __VERSION__ is injected by babel-plugin-version-inline
// @ts-ignore TS2304: Cannot find name '__VERSION__'.
const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';
const DEFAULT_NDGEOJSON_LOADER_OPTIONS = {
    geojson: {
        shape: 'object-row-table'
    },
    gis: {
        format: 'geojson'
    }
};
exports.NDJSONLoader = {
    name: 'NDJSON',
    id: 'ndjson',
    module: 'json',
    version: VERSION,
    extensions: ['ndjson', 'ndgeojson'],
    mimeTypes: [
        'application/geo+x-ndjson',
        'application/geo+x-ldjson',
        'application/jsonlines',
        'application/geo+json-seq',
        'application/x-ndjson'
    ],
    category: 'table',
    text: true,
    parse: async (arrayBuffer) => (0, parse_ndjson_1.default)(new TextDecoder().decode(arrayBuffer)),
    parseTextSync: parse_ndjson_1.default,
    parseInBatches: parse_ndjson_in_batches_1.default,
    options: DEFAULT_NDGEOJSON_LOADER_OPTIONS
};
exports._typecheckNDJSONLoader = exports.NDJSONLoader;
