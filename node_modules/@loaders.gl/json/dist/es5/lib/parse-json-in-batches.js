"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseJSONInBatches;
exports.rebuildJsonObject = rebuildJsonObject;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));
var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));
var _schema = require("@loaders.gl/schema");
var _loaderUtils = require("@loaders.gl/loader-utils");
var _streamingJsonParser = _interopRequireDefault(require("./parser/streaming-json-parser"));
var _jsonpath2 = _interopRequireDefault(require("./jsonpath/jsonpath"));
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _asyncIterator(iterable) { var method, async, sync, retry = 2; for ("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = "@@asyncIterator", sync = "@@iterator"; } throw new TypeError("Object is not async iterable"); }
function AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object.")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }
function parseJSONInBatches(_x, _x2) {
  return _parseJSONInBatches.apply(this, arguments);
}
function _parseJSONInBatches() {
  _parseJSONInBatches = (0, _wrapAsyncGenerator2.default)(_regenerator.default.mark(function _callee(binaryAsyncIterator, options) {
    var _options$json;
    var asyncIterator, metadata, _ref, jsonpaths, isFirstChunk, schema, shape, tableBatchBuilder, parser, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, rows, _jsonpath, initialBatch, _iterator2, _step2, row, _batch2, _batch, jsonpath, batch, finalBatch;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            asyncIterator = (0, _loaderUtils.makeTextDecoderIterator)(binaryAsyncIterator);
            metadata = options.metadata;
            _ref = options.json || {}, jsonpaths = _ref.jsonpaths;
            isFirstChunk = true;
            schema = null;
            shape = (options === null || options === void 0 ? void 0 : (_options$json = options.json) === null || _options$json === void 0 ? void 0 : _options$json.shape) || 'row-table';
            tableBatchBuilder = new _schema.TableBatchBuilder(schema, _objectSpread(_objectSpread({}, options), {}, {
              shape: shape
            }));
            parser = new _streamingJsonParser.default({
              jsonpaths: jsonpaths
            });
            _iteratorAbruptCompletion = false;
            _didIteratorError = false;
            _context.prev = 10;
            _iterator = _asyncIterator(asyncIterator);
          case 12:
            _context.next = 14;
            return (0, _awaitAsyncGenerator2.default)(_iterator.next());
          case 14:
            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {
              _context.next = 52;
              break;
            }
            chunk = _step.value;
            rows = parser.write(chunk);
            _jsonpath = rows.length > 0 && parser.getStreamingJsonPathAsString();
            if (!(rows.length > 0 && isFirstChunk)) {
              _context.next = 24;
              break;
            }
            if (!metadata) {
              _context.next = 23;
              break;
            }
            initialBatch = {
              shape: shape,
              batchType: 'partial-result',
              data: [],
              length: 0,
              bytesUsed: 0,
              container: parser.getPartialResult(),
              jsonpath: _jsonpath
            };
            _context.next = 23;
            return initialBatch;
          case 23:
            isFirstChunk = false;
          case 24:
            _iterator2 = _createForOfIteratorHelper(rows);
            _context.prev = 25;
            _iterator2.s();
          case 27:
            if ((_step2 = _iterator2.n()).done) {
              _context.next = 36;
              break;
            }
            row = _step2.value;
            tableBatchBuilder.addRow(row);
            _batch2 = tableBatchBuilder.getFullBatch({
              jsonpath: _jsonpath
            });
            if (!_batch2) {
              _context.next = 34;
              break;
            }
            _context.next = 34;
            return _batch2;
          case 34:
            _context.next = 27;
            break;
          case 36:
            _context.next = 41;
            break;
          case 38:
            _context.prev = 38;
            _context.t0 = _context["catch"](25);
            _iterator2.e(_context.t0);
          case 41:
            _context.prev = 41;
            _iterator2.f();
            return _context.finish(41);
          case 44:
            tableBatchBuilder.chunkComplete(chunk);
            _batch = tableBatchBuilder.getFullBatch({
              jsonpath: _jsonpath
            });
            if (!_batch) {
              _context.next = 49;
              break;
            }
            _context.next = 49;
            return _batch;
          case 49:
            _iteratorAbruptCompletion = false;
            _context.next = 12;
            break;
          case 52:
            _context.next = 58;
            break;
          case 54:
            _context.prev = 54;
            _context.t1 = _context["catch"](10);
            _didIteratorError = true;
            _iteratorError = _context.t1;
          case 58:
            _context.prev = 58;
            _context.prev = 59;
            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {
              _context.next = 63;
              break;
            }
            _context.next = 63;
            return (0, _awaitAsyncGenerator2.default)(_iterator.return());
          case 63:
            _context.prev = 63;
            if (!_didIteratorError) {
              _context.next = 66;
              break;
            }
            throw _iteratorError;
          case 66:
            return _context.finish(63);
          case 67:
            return _context.finish(58);
          case 68:
            jsonpath = parser.getStreamingJsonPathAsString();
            batch = tableBatchBuilder.getFinalBatch({
              jsonpath: jsonpath
            });
            if (!batch) {
              _context.next = 73;
              break;
            }
            _context.next = 73;
            return batch;
          case 73:
            if (!metadata) {
              _context.next = 77;
              break;
            }
            finalBatch = {
              shape: shape,
              batchType: 'final-result',
              container: parser.getPartialResult(),
              jsonpath: parser.getStreamingJsonPathAsString(),
              data: [],
              length: 0
            };
            _context.next = 77;
            return finalBatch;
          case 77:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[10, 54, 58, 68], [25, 38, 41, 44], [59,, 63, 67]]);
  }));
  return _parseJSONInBatches.apply(this, arguments);
}
function rebuildJsonObject(batch, data) {
  (0, _loaderUtils.assert)(batch.batchType === 'final-result');

  if (batch.jsonpath === '$') {
    return data;
  }

  if (batch.jsonpath && batch.jsonpath.length > 1) {
    var topLevelObject = batch.container;
    var streamingPath = new _jsonpath2.default(batch.jsonpath);
    streamingPath.setFieldAtPath(topLevelObject, data);
    return topLevelObject;
  }

  return batch.container;
}
//# sourceMappingURL=parse-json-in-batches.js.map