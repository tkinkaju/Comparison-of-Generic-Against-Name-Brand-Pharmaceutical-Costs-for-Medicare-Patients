{"version":3,"file":"parse-json-in-batches.js","names":["parseJSONInBatches","binaryAsyncIterator","options","asyncIterator","makeTextDecoderIterator","metadata","json","jsonpaths","isFirstChunk","schema","shape","tableBatchBuilder","TableBatchBuilder","parser","StreamingJSONParser","chunk","rows","write","jsonpath","length","getStreamingJsonPathAsString","initialBatch","batchType","data","bytesUsed","container","getPartialResult","row","addRow","batch","getFullBatch","chunkComplete","getFinalBatch","finalBatch","rebuildJsonObject","assert","topLevelObject","streamingPath","JSONPath","setFieldAtPath"],"sources":["../../../src/lib/parse-json-in-batches.ts"],"sourcesContent":["import type {Batch} from '@loaders.gl/schema';\nimport type {JSONLoaderOptions} from '../json-loader';\nimport {TableBatchBuilder} from '@loaders.gl/schema';\nimport {assert, makeTextDecoderIterator} from '@loaders.gl/loader-utils';\nimport StreamingJSONParser from './parser/streaming-json-parser';\nimport JSONPath from './jsonpath/jsonpath';\n\n// TODO - support batch size 0 = no batching/single batch?\n// eslint-disable-next-line max-statements, complexity\nexport default async function* parseJSONInBatches(\n  binaryAsyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options: JSONLoaderOptions\n): AsyncIterable<Batch> {\n  const asyncIterator = makeTextDecoderIterator(binaryAsyncIterator);\n\n  const {metadata} = options;\n  const {jsonpaths} = options.json || {};\n\n  let isFirstChunk: boolean = true;\n\n  // TODO fix Schema deduction\n  const schema = null; // new Schema([]);\n  const shape = options?.json?.shape || 'row-table';\n  // @ts-ignore\n  const tableBatchBuilder = new TableBatchBuilder(schema, {\n    ...options,\n    shape\n  });\n\n  const parser = new StreamingJSONParser({jsonpaths});\n\n  for await (const chunk of asyncIterator) {\n    const rows = parser.write(chunk);\n\n    const jsonpath = rows.length > 0 && parser.getStreamingJsonPathAsString();\n\n    if (rows.length > 0 && isFirstChunk) {\n      if (metadata) {\n        const initialBatch: Batch = {\n          // Common fields\n          shape,\n          batchType: 'partial-result',\n          data: [],\n          length: 0,\n          bytesUsed: 0,\n          // JSON additions\n          container: parser.getPartialResult(),\n          jsonpath\n        };\n        yield initialBatch;\n      }\n      isFirstChunk = false;\n      // schema = deduceSchema(rows);\n    }\n\n    // Add the row\n    for (const row of rows) {\n      tableBatchBuilder.addRow(row);\n      // If a batch has been completed, emit it\n      const batch = tableBatchBuilder.getFullBatch({jsonpath});\n      if (batch) {\n        yield batch;\n      }\n    }\n\n    tableBatchBuilder.chunkComplete(chunk);\n    const batch = tableBatchBuilder.getFullBatch({jsonpath});\n    if (batch) {\n      yield batch;\n    }\n  }\n\n  // yield final batch\n  const jsonpath = parser.getStreamingJsonPathAsString();\n  const batch = tableBatchBuilder.getFinalBatch({jsonpath});\n  if (batch) {\n    yield batch;\n  }\n\n  if (metadata) {\n    const finalBatch: Batch = {\n      shape,\n      batchType: 'final-result',\n      container: parser.getPartialResult(),\n      jsonpath: parser.getStreamingJsonPathAsString(),\n      data: [],\n      length: 0\n      // schema: null\n    };\n    yield finalBatch;\n  }\n}\n\nexport function rebuildJsonObject(batch, data) {\n  // Last batch will have this special type and will provide all the root object of the parsed file\n  assert(batch.batchType === 'final-result');\n\n  // The streamed JSON data is a top level array (jsonpath = '$'), just return the array of row objects\n  if (batch.jsonpath === '$') {\n    return data;\n  }\n\n  // (jsonpath !== '$') The streamed data is not a top level array, so stitch it back in to the top-level object\n  if (batch.jsonpath && batch.jsonpath.length > 1) {\n    const topLevelObject = batch.container;\n    const streamingPath = new JSONPath(batch.jsonpath);\n    streamingPath.setFieldAtPath(topLevelObject, data);\n    return topLevelObject;\n  }\n\n  // No jsonpath, in this case nothing was streamed.\n  return batch.container;\n}\n"],"mappings":"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"}