{"version":3,"file":"parse-ndjson-in-batches.js","names":["parseNDJSONInBatches","binaryAsyncIterator","options","textIterator","makeTextDecoderIterator","lineIterator","makeLineIterator","numberedLineIterator","makeNumberedLineIterator","schema","shape","tableBatchBuilder","TableBatchBuilder","counter","line","row","JSON","parse","addRow","chunkComplete","batch","getFullBatch","Error","getFinalBatch"],"sources":["../../../src/lib/parse-ndjson-in-batches.ts"],"sourcesContent":["import type {Batch} from '@loaders.gl/schema';\nimport {TableBatchBuilder} from '@loaders.gl/schema';\nimport {\n  LoaderOptions,\n  makeLineIterator,\n  makeNumberedLineIterator,\n  makeTextDecoderIterator\n} from '@loaders.gl/loader-utils';\n\nexport default async function* parseNDJSONInBatches(\n  binaryAsyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options?: LoaderOptions\n): AsyncIterable<Batch> {\n  const textIterator = makeTextDecoderIterator(binaryAsyncIterator);\n  const lineIterator = makeLineIterator(textIterator);\n  const numberedLineIterator = makeNumberedLineIterator(lineIterator);\n\n  const schema = null;\n  const shape = 'row-table';\n  // @ts-ignore\n  const tableBatchBuilder = new TableBatchBuilder(schema, {\n    ...options,\n    shape\n  });\n\n  for await (const {counter, line} of numberedLineIterator) {\n    try {\n      const row = JSON.parse(line);\n      tableBatchBuilder.addRow(row);\n      tableBatchBuilder.chunkComplete(line);\n      const batch = tableBatchBuilder.getFullBatch();\n      if (batch) {\n        yield batch;\n      }\n    } catch (error) {\n      throw new Error(`NDJSONLoader: failed to parse JSON on line ${counter}`);\n    }\n  }\n\n  const batch = tableBatchBuilder.getFinalBatch();\n  if (batch) {\n    yield batch;\n  }\n}\n"],"mappings":";;;;;;;;;;;AACA;AACA;AAKkC;AAAA;AAAA;AAAA;AAAA,SAEHA,oBAAoB;EAAA;AAAA;AAAA;EAAA,oFAApC,iBACbC,mBAAuE,EACvEC,OAAuB;IAAA;IAAA;MAAA;QAAA;UAAA;YAEjBC,YAAY,GAAG,IAAAC,oCAAuB,EAACH,mBAAmB,CAAC;YAC3DI,YAAY,GAAG,IAAAC,6BAAgB,EAACH,YAAY,CAAC;YAC7CI,oBAAoB,GAAG,IAAAC,qCAAwB,EAACH,YAAY,CAAC;YAE7DI,MAAM,GAAG,IAAI;YACbC,KAAK,GAAG,WAAW;YAEnBC,iBAAiB,GAAG,IAAIC,yBAAiB,CAACH,MAAM,kCACjDP,OAAO;cACVQ,KAAK,EAALA;YAAK,GACL;YAAA;YAAA;YAAA;YAAA,2BAEkCH,oBAAoB;UAAA;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAAA,2BAAtCM,OAAO,eAAPA,OAAO,EAAEC,IAAI,eAAJA,IAAI;YAAA;YAErBC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;YAC5BH,iBAAiB,CAACO,MAAM,CAACH,GAAG,CAAC;YAC7BJ,iBAAiB,CAACQ,aAAa,CAACL,IAAI,CAAC;YAC/BM,MAAK,GAAGT,iBAAiB,CAACU,YAAY,EAAE;YAAA,KAC1CD,MAAK;cAAA;cAAA;YAAA;YAAA;YACP,OAAMA,MAAK;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA,MAGP,IAAIE,KAAK,sDAA+CT,OAAO,EAAG;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;UAAA;YAAA;UAAA;YAItEO,KAAK,GAAGT,iBAAiB,CAACY,aAAa,EAAE;YAAA,KAC3CH,KAAK;cAAA;cAAA;YAAA;YAAA;YACP,OAAMA,KAAK;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAEd;EAAA;AAAA"}