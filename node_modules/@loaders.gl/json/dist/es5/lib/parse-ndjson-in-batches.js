"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseNDJSONInBatches;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));
var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));
var _schema = require("@loaders.gl/schema");
var _loaderUtils = require("@loaders.gl/loader-utils");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _asyncIterator(iterable) { var method, async, sync, retry = 2; for ("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = "@@asyncIterator", sync = "@@iterator"; } throw new TypeError("Object is not async iterable"); }
function AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object.")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }
function parseNDJSONInBatches(_x, _x2) {
  return _parseNDJSONInBatches.apply(this, arguments);
}
function _parseNDJSONInBatches() {
  _parseNDJSONInBatches = (0, _wrapAsyncGenerator2.default)(_regenerator.default.mark(function _callee(binaryAsyncIterator, options) {
    var textIterator, lineIterator, numberedLineIterator, schema, shape, tableBatchBuilder, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, counter, line, row, _batch, batch;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            textIterator = (0, _loaderUtils.makeTextDecoderIterator)(binaryAsyncIterator);
            lineIterator = (0, _loaderUtils.makeLineIterator)(textIterator);
            numberedLineIterator = (0, _loaderUtils.makeNumberedLineIterator)(lineIterator);
            schema = null;
            shape = 'row-table';
            tableBatchBuilder = new _schema.TableBatchBuilder(schema, _objectSpread(_objectSpread({}, options), {}, {
              shape: shape
            }));
            _iteratorAbruptCompletion = false;
            _didIteratorError = false;
            _context.prev = 8;
            _iterator = _asyncIterator(numberedLineIterator);
          case 10:
            _context.next = 12;
            return (0, _awaitAsyncGenerator2.default)(_iterator.next());
          case 12:
            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {
              _context.next = 30;
              break;
            }
            _step$value = _step.value, counter = _step$value.counter, line = _step$value.line;
            _context.prev = 14;
            row = JSON.parse(line);
            tableBatchBuilder.addRow(row);
            tableBatchBuilder.chunkComplete(line);
            _batch = tableBatchBuilder.getFullBatch();
            if (!_batch) {
              _context.next = 22;
              break;
            }
            _context.next = 22;
            return _batch;
          case 22:
            _context.next = 27;
            break;
          case 24:
            _context.prev = 24;
            _context.t0 = _context["catch"](14);
            throw new Error("NDJSONLoader: failed to parse JSON on line ".concat(counter));
          case 27:
            _iteratorAbruptCompletion = false;
            _context.next = 10;
            break;
          case 30:
            _context.next = 36;
            break;
          case 32:
            _context.prev = 32;
            _context.t1 = _context["catch"](8);
            _didIteratorError = true;
            _iteratorError = _context.t1;
          case 36:
            _context.prev = 36;
            _context.prev = 37;
            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {
              _context.next = 41;
              break;
            }
            _context.next = 41;
            return (0, _awaitAsyncGenerator2.default)(_iterator.return());
          case 41:
            _context.prev = 41;
            if (!_didIteratorError) {
              _context.next = 44;
              break;
            }
            throw _iteratorError;
          case 44:
            return _context.finish(41);
          case 45:
            return _context.finish(36);
          case 46:
            batch = tableBatchBuilder.getFinalBatch();
            if (!batch) {
              _context.next = 50;
              break;
            }
            _context.next = 50;
            return batch;
          case 50:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 32, 36, 46], [14, 24], [37,, 41, 45]]);
  }));
  return _parseNDJSONInBatches.apply(this, arguments);
}
//# sourceMappingURL=parse-ndjson-in-batches.js.map