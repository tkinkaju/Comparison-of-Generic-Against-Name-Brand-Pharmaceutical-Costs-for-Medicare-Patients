"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var MAX_BUFFER_LENGTH = Number.MAX_SAFE_INTEGER;
var STATE;
(function (STATE) {
  STATE[STATE["BEGIN"] = 0] = "BEGIN";
  STATE[STATE["VALUE"] = 1] = "VALUE";
  STATE[STATE["OPEN_OBJECT"] = 2] = "OPEN_OBJECT";
  STATE[STATE["CLOSE_OBJECT"] = 3] = "CLOSE_OBJECT";
  STATE[STATE["OPEN_ARRAY"] = 4] = "OPEN_ARRAY";
  STATE[STATE["CLOSE_ARRAY"] = 5] = "CLOSE_ARRAY";
  STATE[STATE["TEXT_ESCAPE"] = 6] = "TEXT_ESCAPE";
  STATE[STATE["STRING"] = 7] = "STRING";
  STATE[STATE["BACKSLASH"] = 8] = "BACKSLASH";
  STATE[STATE["END"] = 9] = "END";
  STATE[STATE["OPEN_KEY"] = 10] = "OPEN_KEY";
  STATE[STATE["CLOSE_KEY"] = 11] = "CLOSE_KEY";
  STATE[STATE["TRUE"] = 12] = "TRUE";
  STATE[STATE["TRUE2"] = 13] = "TRUE2";
  STATE[STATE["TRUE3"] = 14] = "TRUE3";
  STATE[STATE["FALSE"] = 15] = "FALSE";
  STATE[STATE["FALSE2"] = 16] = "FALSE2";
  STATE[STATE["FALSE3"] = 17] = "FALSE3";
  STATE[STATE["FALSE4"] = 18] = "FALSE4";
  STATE[STATE["NULL"] = 19] = "NULL";
  STATE[STATE["NULL2"] = 20] = "NULL2";
  STATE[STATE["NULL3"] = 21] = "NULL3";
  STATE[STATE["NUMBER_DECIMAL_POINT"] = 22] = "NUMBER_DECIMAL_POINT";
  STATE[STATE["NUMBER_DIGIT"] = 23] = "NUMBER_DIGIT";
})(STATE || (STATE = {}));
var Char = {
  tab: 0x09,
  lineFeed: 0x0a,
  carriageReturn: 0x0d,
  space: 0x20,

  doubleQuote: 0x22,
  plus: 0x2b,
  comma: 0x2c,
  minus: 0x2d,
  period: 0x2e,

  _0: 0x30,
  _9: 0x39,

  colon: 0x3a,

  E: 0x45,

  openBracket: 0x5b,
  backslash: 0x5c,
  closeBracket: 0x5d,

  a: 0x61,
  b: 0x62,
  e: 0x65,
  f: 0x66,
  l: 0x6c,
  n: 0x6e,
  r: 0x72,
  s: 0x73,
  t: 0x74,
  u: 0x75,

  openBrace: 0x7b,
  closeBrace: 0x7d
};

var stringTokenPattern = /[\\"\n]/g;
var DEFAULT_OPTIONS = {
  onready: function onready() {},
  onopenobject: function onopenobject() {},
  onkey: function onkey() {},
  oncloseobject: function oncloseobject() {},
  onopenarray: function onopenarray() {},
  onclosearray: function onclosearray() {},
  onvalue: function onvalue() {},
  onerror: function onerror() {},
  onend: function onend() {},
  onchunkparsed: function onchunkparsed() {}
};
var ClarinetParser = function () {

  function ClarinetParser() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, ClarinetParser);
    (0, _defineProperty2.default)(this, "options", DEFAULT_OPTIONS);
    (0, _defineProperty2.default)(this, "bufferCheckPosition", MAX_BUFFER_LENGTH);
    (0, _defineProperty2.default)(this, "q", '');
    (0, _defineProperty2.default)(this, "c", '');
    (0, _defineProperty2.default)(this, "p", '');
    (0, _defineProperty2.default)(this, "closed", false);
    (0, _defineProperty2.default)(this, "closedRoot", false);
    (0, _defineProperty2.default)(this, "sawRoot", false);
    (0, _defineProperty2.default)(this, "error", null);
    (0, _defineProperty2.default)(this, "state", STATE.BEGIN);
    (0, _defineProperty2.default)(this, "stack", []);
    (0, _defineProperty2.default)(this, "position", 0);
    (0, _defineProperty2.default)(this, "column", 0);
    (0, _defineProperty2.default)(this, "line", 1);
    (0, _defineProperty2.default)(this, "slashed", false);
    (0, _defineProperty2.default)(this, "unicodeI", 0);
    (0, _defineProperty2.default)(this, "unicodeS", null);
    (0, _defineProperty2.default)(this, "depth", 0);
    (0, _defineProperty2.default)(this, "textNode", void 0);
    (0, _defineProperty2.default)(this, "numberNode", void 0);
    this.options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);
    this.textNode = undefined;
    this.numberNode = '';
    this.emit('onready');
  }
  (0, _createClass2.default)(ClarinetParser, [{
    key: "end",
    value: function end() {
      if (this.state !== STATE.VALUE || this.depth !== 0) this._error('Unexpected end');
      this._closeValue();
      this.c = '';
      this.closed = true;
      this.emit('onend');
      return this;
    }
  }, {
    key: "resume",
    value: function resume() {
      this.error = null;
      return this;
    }
  }, {
    key: "close",
    value: function close() {
      return this.write(null);
    }

  }, {
    key: "emit",
    value:

    function emit(event, data) {
      var _this$options$event, _this$options;
      (_this$options$event = (_this$options = this.options)[event]) === null || _this$options$event === void 0 ? void 0 : _this$options$event.call(_this$options, data, this);
    }
  }, {
    key: "emitNode",
    value: function emitNode(event, data) {
      this._closeValue();
      this.emit(event, data);
    }

  }, {
    key: "write",
    value:
    function write(chunk) {
      if (this.error) {
        throw this.error;
      }
      if (this.closed) {
        return this._error('Cannot write after close. Assign an onready handler.');
      }
      if (chunk === null) {
        return this.end();
      }
      var i = 0;
      var c = chunk.charCodeAt(0);
      var p = this.p;
      while (c) {
        p = c;
        this.c = c = chunk.charCodeAt(i++);
        if (p !== c) {
          this.p = p;
        } else {
          p = this.p;
        }
        if (!c) break;

        this.position++;
        if (c === Char.lineFeed) {
          this.line++;
          this.column = 0;
        } else this.column++;
        switch (this.state) {
          case STATE.BEGIN:
            if (c === Char.openBrace) this.state = STATE.OPEN_OBJECT;else if (c === Char.openBracket) this.state = STATE.OPEN_ARRAY;else if (!isWhitespace(c)) {
              this._error('Non-whitespace before {[.');
            }
            continue;
          case STATE.OPEN_KEY:
          case STATE.OPEN_OBJECT:
            if (isWhitespace(c)) continue;
            if (this.state === STATE.OPEN_KEY) this.stack.push(STATE.CLOSE_KEY);else if (c === Char.closeBrace) {
              this.emit('onopenobject');
              this.depth++;
              this.emit('oncloseobject');
              this.depth--;
              this.state = this.stack.pop() || STATE.VALUE;
              continue;
            } else this.stack.push(STATE.CLOSE_OBJECT);
            if (c === Char.doubleQuote) this.state = STATE.STRING;else this._error('Malformed object key should start with "');
            continue;
          case STATE.CLOSE_KEY:
          case STATE.CLOSE_OBJECT:
            if (isWhitespace(c)) continue;
            if (c === Char.colon) {
              if (this.state === STATE.CLOSE_OBJECT) {
                this.stack.push(STATE.CLOSE_OBJECT);
                this._closeValue('onopenobject');
                this.depth++;
              } else this._closeValue('onkey');
              this.state = STATE.VALUE;
            } else if (c === Char.closeBrace) {
              this.emitNode('oncloseobject');
              this.depth--;
              this.state = this.stack.pop() || STATE.VALUE;
            } else if (c === Char.comma) {
              if (this.state === STATE.CLOSE_OBJECT) this.stack.push(STATE.CLOSE_OBJECT);
              this._closeValue();
              this.state = STATE.OPEN_KEY;
            } else this._error('Bad object');
            continue;
          case STATE.OPEN_ARRAY:
          case STATE.VALUE:
            if (isWhitespace(c)) continue;
            if (this.state === STATE.OPEN_ARRAY) {
              this.emit('onopenarray');
              this.depth++;
              this.state = STATE.VALUE;
              if (c === Char.closeBracket) {
                this.emit('onclosearray');
                this.depth--;
                this.state = this.stack.pop() || STATE.VALUE;
                continue;
              } else {
                this.stack.push(STATE.CLOSE_ARRAY);
              }
            }
            if (c === Char.doubleQuote) this.state = STATE.STRING;else if (c === Char.openBrace) this.state = STATE.OPEN_OBJECT;else if (c === Char.openBracket) this.state = STATE.OPEN_ARRAY;else if (c === Char.t) this.state = STATE.TRUE;else if (c === Char.f) this.state = STATE.FALSE;else if (c === Char.n) this.state = STATE.NULL;else if (c === Char.minus) {
              this.numberNode += '-';
            } else if (Char._0 <= c && c <= Char._9) {
              this.numberNode += String.fromCharCode(c);
              this.state = STATE.NUMBER_DIGIT;
            } else this._error('Bad value');
            continue;
          case STATE.CLOSE_ARRAY:
            if (c === Char.comma) {
              this.stack.push(STATE.CLOSE_ARRAY);
              this._closeValue('onvalue');
              this.state = STATE.VALUE;
            } else if (c === Char.closeBracket) {
              this.emitNode('onclosearray');
              this.depth--;
              this.state = this.stack.pop() || STATE.VALUE;
            } else if (isWhitespace(c)) continue;else this._error('Bad array');
            continue;
          case STATE.STRING:
            if (this.textNode === undefined) {
              this.textNode = '';
            }

            var starti = i - 1;
            var slashed = this.slashed;
            var unicodeI = this.unicodeI;
            STRING_BIGLOOP: while (true) {
              while (unicodeI > 0) {
                this.unicodeS += String.fromCharCode(c);
                c = chunk.charCodeAt(i++);
                this.position++;
                if (unicodeI === 4) {
                  this.textNode += String.fromCharCode(parseInt(this.unicodeS, 16));
                  unicodeI = 0;
                  starti = i - 1;
                } else {
                  unicodeI++;
                }
                if (!c) break STRING_BIGLOOP;
              }
              if (c === Char.doubleQuote && !slashed) {
                this.state = this.stack.pop() || STATE.VALUE;
                this.textNode += chunk.substring(starti, i - 1);
                this.position += i - 1 - starti;
                break;
              }
              if (c === Char.backslash && !slashed) {
                slashed = true;
                this.textNode += chunk.substring(starti, i - 1);
                this.position += i - 1 - starti;
                c = chunk.charCodeAt(i++);
                this.position++;
                if (!c) break;
              }
              if (slashed) {
                slashed = false;
                if (c === Char.n) {
                  this.textNode += '\n';
                } else if (c === Char.r) {
                  this.textNode += '\r';
                } else if (c === Char.t) {
                  this.textNode += '\t';
                } else if (c === Char.f) {
                  this.textNode += '\f';
                } else if (c === Char.b) {
                  this.textNode += '\b';
                } else if (c === Char.u) {
                  unicodeI = 1;
                  this.unicodeS = '';
                } else {
                  this.textNode += String.fromCharCode(c);
                }
                c = chunk.charCodeAt(i++);
                this.position++;
                starti = i - 1;
                if (!c) break;else continue;
              }
              stringTokenPattern.lastIndex = i;
              var reResult = stringTokenPattern.exec(chunk);
              if (reResult === null) {
                i = chunk.length + 1;
                this.textNode += chunk.substring(starti, i - 1);
                this.position += i - 1 - starti;
                break;
              }
              i = reResult.index + 1;
              c = chunk.charCodeAt(reResult.index);
              if (!c) {
                this.textNode += chunk.substring(starti, i - 1);
                this.position += i - 1 - starti;
                break;
              }
            }
            this.slashed = slashed;
            this.unicodeI = unicodeI;
            continue;
          case STATE.TRUE:
            if (c === Char.r) this.state = STATE.TRUE2;else this._error("Invalid true started with t".concat(c));
            continue;
          case STATE.TRUE2:
            if (c === Char.u) this.state = STATE.TRUE3;else this._error("Invalid true started with tr".concat(c));
            continue;
          case STATE.TRUE3:
            if (c === Char.e) {
              this.emit('onvalue', true);
              this.state = this.stack.pop() || STATE.VALUE;
            } else this._error("Invalid true started with tru".concat(c));
            continue;
          case STATE.FALSE:
            if (c === Char.a) this.state = STATE.FALSE2;else this._error("Invalid false started with f".concat(c));
            continue;
          case STATE.FALSE2:
            if (c === Char.l) this.state = STATE.FALSE3;else this._error("Invalid false started with fa".concat(c));
            continue;
          case STATE.FALSE3:
            if (c === Char.s) this.state = STATE.FALSE4;else this._error("Invalid false started with fal".concat(c));
            continue;
          case STATE.FALSE4:
            if (c === Char.e) {
              this.emit('onvalue', false);
              this.state = this.stack.pop() || STATE.VALUE;
            } else this._error("Invalid false started with fals".concat(c));
            continue;
          case STATE.NULL:
            if (c === Char.u) this.state = STATE.NULL2;else this._error("Invalid null started with n".concat(c));
            continue;
          case STATE.NULL2:
            if (c === Char.l) this.state = STATE.NULL3;else this._error("Invalid null started with nu".concat(c));
            continue;
          case STATE.NULL3:
            if (c === Char.l) {
              this.emit('onvalue', null);
              this.state = this.stack.pop() || STATE.VALUE;
            } else this._error("Invalid null started with nul".concat(c));
            continue;
          case STATE.NUMBER_DECIMAL_POINT:
            if (c === Char.period) {
              this.numberNode += '.';
              this.state = STATE.NUMBER_DIGIT;
            } else this._error('Leading zero not followed by .');
            continue;
          case STATE.NUMBER_DIGIT:
            if (Char._0 <= c && c <= Char._9) this.numberNode += String.fromCharCode(c);else if (c === Char.period) {
              if (this.numberNode.indexOf('.') !== -1) this._error('Invalid number has two dots');
              this.numberNode += '.';
            } else if (c === Char.e || c === Char.E) {
              if (this.numberNode.indexOf('e') !== -1 || this.numberNode.indexOf('E') !== -1) this._error('Invalid number has two exponential');
              this.numberNode += 'e';
            } else if (c === Char.plus || c === Char.minus) {
              if (!(p === Char.e || p === Char.E)) this._error('Invalid symbol in number');
              this.numberNode += String.fromCharCode(c);
            } else {
              this._closeNumber();
              i--;
              this.state = this.stack.pop() || STATE.VALUE;
            }
            continue;
          default:
            this._error("Unknown state: ".concat(this.state));
        }
      }
      if (this.position >= this.bufferCheckPosition) {
        checkBufferLength(this);
      }
      this.emit('onchunkparsed');
      return this;
    }
  }, {
    key: "_closeValue",
    value: function _closeValue() {
      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'onvalue';
      if (this.textNode !== undefined) {
        this.emit(event, this.textNode);
      }
      this.textNode = undefined;
    }
  }, {
    key: "_closeNumber",
    value: function _closeNumber() {
      if (this.numberNode) this.emit('onvalue', parseFloat(this.numberNode));
      this.numberNode = '';
    }
  }, {
    key: "_error",
    value: function _error() {
      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this._closeValue();
      message += "\nLine: ".concat(this.line, "\nColumn: ").concat(this.column, "\nChar: ").concat(this.c);
      var error = new Error(message);
      this.error = error;
      this.emit('onerror', error);
    }
  }]);
  return ClarinetParser;
}();
exports.default = ClarinetParser;
function isWhitespace(c) {
  return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;
}
function checkBufferLength(parser) {
  var maxAllowed = Math.max(MAX_BUFFER_LENGTH, 10);
  var maxActual = 0;
  for (var _i = 0, _arr = ['textNode', 'numberNode']; _i < _arr.length; _i++) {
    var buffer = _arr[_i];
    var len = parser[buffer] === undefined ? 0 : parser[buffer].length;
    if (len > maxAllowed) {
      switch (buffer) {
        case 'text':
          break;
        default:
          parser._error("Max buffer length exceeded: ".concat(buffer));
      }
    }
    maxActual = Math.max(maxActual, len);
  }
  parser.bufferCheckPosition = MAX_BUFFER_LENGTH - maxActual + parser.position;
}
//# sourceMappingURL=clarinet.js.map