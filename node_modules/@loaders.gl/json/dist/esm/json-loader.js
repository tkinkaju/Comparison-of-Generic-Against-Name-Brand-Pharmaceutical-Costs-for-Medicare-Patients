import parseJSONSync from './lib/parse-json';
import parseJSONInBatches from './lib/parse-json-in-batches';

const VERSION = typeof "3.3.3" !== 'undefined' ? "3.3.3" : 'latest';

const DEFAULT_JSON_LOADER_OPTIONS = {
  json: {
    shape: 'row-table',
    table: false,
    jsonpaths: []
  }
};

export const JSONLoader = {
  name: 'JSON',
  id: 'json',
  module: 'json',
  version: VERSION,
  extensions: ['json', 'geojson'],
  mimeTypes: ['application/json'],
  category: 'table',
  text: true,
  parse,
  parseTextSync,
  parseInBatches,
  options: DEFAULT_JSON_LOADER_OPTIONS
};
async function parse(arrayBuffer, options) {
  return parseTextSync(new TextDecoder().decode(arrayBuffer), options);
}
function parseTextSync(text, options) {
  const jsonOptions = {
    ...options,
    json: {
      ...DEFAULT_JSON_LOADER_OPTIONS.json,
      ...(options === null || options === void 0 ? void 0 : options.json)
    }
  };
  return parseJSONSync(text, jsonOptions);
}
function parseInBatches(asyncIterator, options) {
  const jsonOptions = {
    ...options,
    json: {
      ...DEFAULT_JSON_LOADER_OPTIONS.json,
      ...(options === null || options === void 0 ? void 0 : options.json)
    }
  };
  return parseJSONInBatches(asyncIterator, jsonOptions);
}
//# sourceMappingURL=json-loader.js.map