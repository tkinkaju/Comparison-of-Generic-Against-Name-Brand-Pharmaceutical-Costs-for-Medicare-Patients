import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
export default class JSONPath {
  constructor() {
    let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    _defineProperty(this, "path", void 0);
    this.path = ['$'];
    if (path instanceof JSONPath) {
      this.path = [...path.path];
      return;
    }
    if (Array.isArray(path)) {
      this.path.push(...path);
      return;
    }

    if (typeof path === 'string') {
      this.path = path.split('.');
      if (this.path[0] !== '$') {
        throw new Error('JSONPaths must start with $');
      }
    }
  }
  clone() {
    return new JSONPath(this);
  }
  toString() {
    return this.path.join('.');
  }
  push(name) {
    this.path.push(name);
  }
  pop() {
    return this.path.pop();
  }
  set(name) {
    this.path[this.path.length - 1] = name;
  }
  equals(other) {
    if (!this || !other || this.path.length !== other.path.length) {
      return false;
    }
    for (let i = 0; i < this.path.length; ++i) {
      if (this.path[i] !== other.path[i]) {
        return false;
      }
    }
    return true;
  }

  setFieldAtPath(object, value) {
    const path = [...this.path];
    path.shift();
    const field = path.pop();
    for (const component of path) {
      object = object[component];
    }
    object[field] = value;
  }

  getFieldAtPath(object) {
    const path = [...this.path];
    path.shift();
    const field = path.pop();
    for (const component of path) {
      object = object[component];
    }
    return object[field];
  }
}
//# sourceMappingURL=jsonpath.js.map