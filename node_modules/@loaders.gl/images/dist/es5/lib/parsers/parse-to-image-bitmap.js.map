{"version":3,"file":"parse-to-image-bitmap.js","names":["EMPTY_OBJECT","imagebitmapOptionsSupported","parseToImageBitmap","arrayBuffer","options","url","isSVG","parseToImage","image","blob","getBlob","imagebitmapOptions","imagebitmap","safeCreateImageBitmap","isEmptyObject","createImageBitmap","console","warn","object","key"],"sources":["../../../../src/lib/parsers/parse-to-image-bitmap.ts"],"sourcesContent":["import type {ImageLoaderOptions} from '../../image-loader';\nimport {isSVG, getBlob} from './svg-utils';\nimport parseToImage from './parse-to-image';\n\nconst EMPTY_OBJECT = {};\n\nlet imagebitmapOptionsSupported = true;\n\n/**\n * Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\n * ImageBitmaps are supported on worker threads, but not supported on Edge, IE11 and Safari\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap#Browser_compatibility\n *\n * TODO - createImageBitmap supports source rect (5 param overload), pass through?\n */\nexport default async function parseToImageBitmap(\n  arrayBuffer: ArrayBuffer,\n  options: ImageLoaderOptions,\n  url?: string\n): Promise<ImageBitmap> {\n  let blob;\n\n  // Cannot parse SVG directly to ImageBitmap, parse to Image first\n  if (isSVG(url)) {\n    // Note: this only works on main thread\n    const image = await parseToImage(arrayBuffer, options, url);\n    blob = image;\n  } else {\n    // Create blob from the array buffer\n    blob = getBlob(arrayBuffer, url);\n  }\n\n  const imagebitmapOptions = options && options.imagebitmap;\n\n  return await safeCreateImageBitmap(blob, imagebitmapOptions);\n}\n\n/**\n * Safely creates an imageBitmap with options\n * *\n * Firefox crashes if imagebitmapOptions is supplied\n * Avoid supplying if not provided or supported, remember if not supported\n */\nasync function safeCreateImageBitmap(\n  blob: Blob,\n  imagebitmapOptions: ImageBitmapOptions | null = null\n): Promise<ImageBitmap> {\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n\n  if (imagebitmapOptions) {\n    try {\n      // @ts-ignore Options\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n      imagebitmapOptionsSupported = false;\n    }\n  }\n\n  return await createImageBitmap(blob);\n}\n\nfunction isEmptyObject(object) {\n  // @ts-ignore\n  for (const key in object || EMPTY_OBJECT) {\n    return false;\n  }\n  return true;\n}\n"],"mappings":";;;;;;;;;AACA;AACA;AAEA,IAAMA,YAAY,GAAG,CAAC,CAAC;AAEvB,IAAIC,2BAA2B,GAAG,IAAI;;AAAC,SASTC,kBAAkB;EAAA;AAAA;AAAA;EAAA,gFAAjC,iBACbC,WAAwB,EACxBC,OAA2B,EAC3BC,GAAY;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,KAKR,IAAAC,eAAK,EAACD,GAAG,CAAC;cAAA;cAAA;YAAA;YAAA;YAAA,OAEQ,IAAAE,qBAAY,EAACJ,WAAW,EAAEC,OAAO,EAAEC,GAAG,CAAC;UAAA;YAArDG,KAAK;YACXC,IAAI,GAAGD,KAAK;YAAC;YAAA;UAAA;YAGbC,IAAI,GAAG,IAAAC,iBAAO,EAACP,WAAW,EAAEE,GAAG,CAAC;UAAC;YAG7BM,kBAAkB,GAAGP,OAAO,IAAIA,OAAO,CAACQ,WAAW;YAAA;YAAA,OAE5CC,qBAAqB,CAACJ,IAAI,EAAEE,kBAAkB,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC7D;EAAA;AAAA;AAAA,SAQcE,qBAAqB;EAAA;AAAA;AAAA;EAAA,mFAApC,kBACEJ,IAAU;IAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YACVE,kBAA6C,8DAAG,IAAI;YAEpD,IAAIG,aAAa,CAACH,kBAAkB,CAAC,IAAI,CAACV,2BAA2B,EAAE;cACrEU,kBAAkB,GAAG,IAAI;YAC3B;YAAC,KAEGA,kBAAkB;cAAA;cAAA;YAAA;YAAA;YAAA;YAAA,OAGLI,iBAAiB,CAACN,IAAI,EAAEE,kBAAkB,CAAC;UAAA;YAAA;UAAA;YAAA;YAAA;YAExDK,OAAO,CAACC,IAAI,cAAO;YACnBhB,2BAA2B,GAAG,KAAK;UAAC;YAAA;YAAA,OAI3Bc,iBAAiB,CAACN,IAAI,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACrC;EAAA;AAAA;AAED,SAASK,aAAa,CAACI,MAAM,EAAE;EAE7B,KAAK,IAAMC,GAAG,IAAID,MAAM,IAAIlB,YAAY,EAAE;IACxC,OAAO,KAAK;EACd;EACA,OAAO,IAAI;AACb"}