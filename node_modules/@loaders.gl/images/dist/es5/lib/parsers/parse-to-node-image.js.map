{"version":3,"file":"parse-to-node-image.js","names":["parseToNodeImage","arrayBuffer","options","getBinaryImageMetadata","mimeType","_parseImageNode","globalThis","assert"],"sources":["../../../../src/lib/parsers/parse-to-node-image.ts"],"sourcesContent":["import type {ImageLoaderOptions} from '../../image-loader';\nimport type {ImageDataType} from '../../types';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {getBinaryImageMetadata} from '../category-api/binary-image-api';\n\n// Note: These types should be consistent with loaders.gl/polyfills\n\ntype NDArray = {\n  shape: number[];\n  data: Uint8Array;\n  width: number;\n  height: number;\n  components: number;\n  layers: number[];\n};\n\ntype ParseImageNode = (arrayBuffer: ArrayBuffer, mimeType: string) => Promise<NDArray>;\n\n// Use polyfills if installed to parsed image using get-pixels\nexport default async function parseToNodeImage(\n  arrayBuffer: ArrayBuffer,\n  options: ImageLoaderOptions\n): Promise<ImageDataType> {\n  const {mimeType} = getBinaryImageMetadata(arrayBuffer) || {};\n\n  // @ts-ignore\n  const _parseImageNode: ParseImageNode = globalThis._parseImageNode;\n  assert(_parseImageNode); // '@loaders.gl/polyfills not installed'\n\n  // @ts-expect-error TODO should we throw error in this case?\n  return await _parseImageNode(arrayBuffer, mimeType);\n}\n"],"mappings":";;;;;;;;;AAEA;AACA;AAAwE,SAgB1CA,gBAAgB;EAAA;AAAA;AAAA;EAAA,8EAA/B,iBACbC,WAAwB,EACxBC,OAA2B;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,OAER,IAAAC,sCAAsB,EAACF,WAAW,CAAC,IAAI,CAAC,CAAC,EAArDG,QAAQ,QAARA,QAAQ;YAGTC,eAA+B,GAAGC,UAAU,CAACD,eAAe;YAClE,IAAAE,mBAAM,EAACF,eAAe,CAAC;;YAAC;YAAA,OAGXA,eAAe,CAACJ,WAAW,EAAEG,QAAQ,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACpD;EAAA;AAAA"}