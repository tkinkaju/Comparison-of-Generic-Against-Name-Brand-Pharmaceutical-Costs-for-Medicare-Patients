{"version":3,"file":"parse-image.js","names":["parseImage","arrayBuffer","options","context","imageOptions","image","imageType","type","url","loadType","getLoadableImageType","parseToImageBitmap","parseToImage","parseToNodeImage","assert","getImageData","getDefaultImageType","isImageTypeSupported"],"sources":["../../../../src/lib/parsers/parse-image.ts"],"sourcesContent":["import type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\nimport type {ImageType} from '../../types';\nimport type {ImageLoaderOptions} from '../../image-loader';\nimport {isImageTypeSupported, getDefaultImageType} from '../category-api/image-type';\nimport {getImageData} from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\n\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport default async function parseImage(\n  arrayBuffer: ArrayBuffer,\n  options?: ImageLoaderOptions,\n  context?: LoaderContext\n): Promise<ImageType> {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n\n  const {url} = context || {};\n\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n"],"mappings":";;;;;;;;;AACA;AAGA;AACA;AACA;AACA;AACA;AAAqD,SAIvBA,UAAU;EAAA;AAAA;AAAA;EAAA,wEAAzB,iBACbC,WAAwB,EACxBC,OAA4B,EAC5BC,OAAuB;IAAA;IAAA;MAAA;QAAA;UAAA;YAEvBD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;YACjBE,YAAY,GAAGF,OAAO,CAACG,KAAK,IAAI,CAAC,CAAC;YAGlCC,SAAS,GAAGF,YAAY,CAACG,IAAI,IAAI,MAAM;YAAA,OAE/BJ,OAAO,IAAI,CAAC,CAAC,EAApBK,GAAG,QAAHA,GAAG;YAGJC,QAAQ,GAAGC,oBAAoB,CAACJ,SAAS,CAAC;YAAA,cAGxCG,QAAQ;YAAA,gCACT,aAAa,uBAGb,OAAO,wBAGP,MAAM;YAAA;UAAA;YAAA;YAAA,OALK,IAAAE,2BAAkB,EAACV,WAAW,EAAEC,OAAO,EAAEM,GAAG,CAAC;UAAA;YAA3DH,KAAK;YAAA;UAAA;YAAA;YAAA,OAGS,IAAAO,qBAAY,EAACX,WAAW,EAAEC,OAAO,EAAEM,GAAG,CAAC;UAAA;YAArDH,KAAK;YAAA;UAAA;YAAA;YAAA,OAIS,IAAAQ,yBAAgB,EAACZ,WAAW,EAAEC,OAAO,CAAC;UAAA;YAApDG,KAAK;YAAA;UAAA;YAGL,IAAAS,mBAAM,EAAC,KAAK,CAAC;UAAC;YAIlB,IAAIR,SAAS,KAAK,MAAM,EAAE;cACxBD,KAAK,GAAG,IAAAU,4BAAY,EAACV,KAAK,CAAC;YAC7B;YAAC,iCAEMA,KAAK;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACb;EAAA;AAAA;AAGD,SAASK,oBAAoB,CAACH,IAAI,EAAE;EAClC,QAAQA,IAAI;IACV,KAAK,MAAM;IACX,KAAK,MAAM;MAGT,OAAO,IAAAS,8BAAmB,GAAE;IAC9B;MAEE,IAAAC,+BAAoB,EAACV,IAAI,CAAC;MAC1B,OAAOA,IAAI;EAAC;AAElB"}