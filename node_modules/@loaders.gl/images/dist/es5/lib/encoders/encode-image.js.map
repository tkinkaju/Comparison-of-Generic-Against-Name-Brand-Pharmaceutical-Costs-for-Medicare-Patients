{"version":3,"file":"encode-image.js","names":["_encodeImageNode","globalThis","encodeImage","image","options","type","mimeType","encodeImageInBrowser","qualityParamSupported","jpegQuality","getImageSize","width","height","canvas","document","createElement","drawImageToCanvas","Promise","resolve","toBlob","error","blob","Error","arrayBuffer","x","y","ImageBitmap","context","getContext","transferFromImageBitmap","data","clampedArray","Uint8ClampedArray","imageData","ImageData","putImageData","drawImage"],"sources":["../../../../src/lib/encoders/encode-image.ts"],"sourcesContent":["// Image loading/saving for browser and Node.js\nimport {getImageSize} from '../category-api/parsed-image-api';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_encodeImageNode} = globalThis;\n\n/**\n * Returns data bytes representing a compressed image in PNG or JPG format,\n * This data can be saved using file system (f) methods or used in a request.\n * @param image - ImageBitmap Image or Canvas\n * @param options\n * param opt.type='png' - png, jpg or image/png, image/jpg are valid\n * param mimeType= - Whether to include a data URI header\n */\nexport async function encodeImage(\n  image: any,\n  options?: {[key: string]: any}\n): Promise<ArrayBuffer> {\n  options = options || {};\n  options.image = options.image || ({} as {[key: string]: any});\n\n  return _encodeImageNode\n    ? _encodeImageNode(image, {type: options.image.mimeType})\n    : encodeImageInBrowser(image, options);\n}\n\n// In case we get exceptions from canvas.toBlob(resolve, type, quality)\nlet qualityParamSupported = true;\n\n/**\n *\n * @param image\n * @param options\n * @note Based on canvas.toBlob\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n */\nasync function encodeImageInBrowser(image, options) {\n  const {mimeType, jpegQuality} = options.image;\n\n  const {width, height} = getImageSize(image);\n\n  // create a canvas and resize it to the size of our image\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  drawImageToCanvas(image, canvas);\n\n  // The actual encoding is done asynchronously with `canvas.toBlob()`\n  const blob = await new Promise<Blob | null>((resolve) => {\n    // get it back as a Blob\n    if (jpegQuality && qualityParamSupported) {\n      try {\n        canvas.toBlob(resolve, mimeType, jpegQuality);\n        return;\n      } catch (error) {\n        qualityParamSupported = false;\n      }\n    }\n    canvas.toBlob(resolve, mimeType);\n  });\n\n  if (!blob) {\n    throw new Error('image encoding failed');\n  }\n\n  return await blob.arrayBuffer();\n}\n\nfunction drawImageToCanvas(image, canvas, x = 0, y = 0) {\n  // Try optimized path for ImageBitmaps via bitmaprenderer context\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const context = canvas.getContext('bitmaprenderer');\n    if (context) {\n      // transfer the ImageBitmap to it\n      context.transferFromImageBitmap(image);\n      return canvas;\n    }\n  }\n\n  // Available on most platforms, except IE11 and Andriod WebViews...\n  const context = canvas.getContext('2d');\n  if (image.data) {\n    // ImageData constructor expects clamped array even though getImageData does not return a clamped array...\n    const clampedArray = new Uint8ClampedArray(image.data);\n    const imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  // Fall back to generic image/image bitmap rendering path\n  context.drawImage(image, 0, 0);\n  return canvas;\n}\n"],"mappings":"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"}