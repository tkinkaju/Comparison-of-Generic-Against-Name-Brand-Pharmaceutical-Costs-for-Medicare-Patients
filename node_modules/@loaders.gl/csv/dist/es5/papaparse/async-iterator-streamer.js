"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AsyncIteratorStreamer;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _papaparse = _interopRequireDefault(require("./papaparse"));
function _asyncIterator(iterable) { var method, async, sync, retry = 2; for ("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = "@@asyncIterator", sync = "@@iterator"; } throw new TypeError("Object is not async iterable"); }
function AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object.")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }
var ChunkStreamer = _papaparse.default.ChunkStreamer;
function AsyncIteratorStreamer(config) {
  config = config || {};
  ChunkStreamer.call(this, config);
  this.textDecoder = new TextDecoder(this._config.encoding);

  this.stream = function () {
    var _ref = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(asyncIterator) {
      var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this._input = asyncIterator;
              _context.prev = 1;
              _iteratorAbruptCompletion = false;
              _didIteratorError = false;
              _context.prev = 4;
              _iterator = _asyncIterator(asyncIterator);
            case 6:
              _context.next = 8;
              return _iterator.next();
            case 8:
              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {
                _context.next = 14;
                break;
              }
              chunk = _step.value;
              this.parseChunk(this.getStringChunk(chunk));
            case 11:
              _iteratorAbruptCompletion = false;
              _context.next = 6;
              break;
            case 14:
              _context.next = 20;
              break;
            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](4);
              _didIteratorError = true;
              _iteratorError = _context.t0;
            case 20:
              _context.prev = 20;
              _context.prev = 21;
              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {
                _context.next = 25;
                break;
              }
              _context.next = 25;
              return _iterator.return();
            case 25:
              _context.prev = 25;
              if (!_didIteratorError) {
                _context.next = 28;
                break;
              }
              throw _iteratorError;
            case 28:
              return _context.finish(25);
            case 29:
              return _context.finish(20);
            case 30:

              this._finished = true;
              this.parseChunk('');
              _context.next = 37;
              break;
            case 34:
              _context.prev = 34;
              _context.t1 = _context["catch"](1);
              this._sendError(_context.t1);
            case 37:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[1, 34], [4, 16, 20, 30], [21,, 25, 29]]);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
  this._nextChunk = function nextChunk() {
  };

  this.getStringChunk = function (chunk) {
    return typeof chunk === 'string' ? chunk : this.textDecoder.decode(chunk, {
      stream: true
    });
  };
}
AsyncIteratorStreamer.prototype = Object.create(ChunkStreamer.prototype);
AsyncIteratorStreamer.prototype.constructor = AsyncIteratorStreamer;
//# sourceMappingURL=async-iterator-streamer.js.map