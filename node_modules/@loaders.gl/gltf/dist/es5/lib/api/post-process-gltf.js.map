{"version":3,"file":"post-process-gltf.js","names":["COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessor","gltf","options","json","buffers","images","baseUri","assert","_resolveTree","bufferViews","map","bufView","i","_resolveBufferView","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","scenes","scene","_resolveScene","undefined","index","_get","array","object","console","warn","id","getNode","children","child","getMesh","length","reduce","accum","meshIndex","primitives","concat","camera","getCamera","getSkin","inverseBindMatrices","getAccessor","primitive","attributes","attribute","indices","getMaterial","normalTexture","getTexture","occlusionTexture","occlustionTexture","emissiveTexture","emmisiveTexture","emissiveFactor","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","getBufferView","bytesPerComponent","components","bytesPerElement","buffer","getAccessorArrayTypeAndLength","ArrayType","byteLength","byteOffset","cutBuffer","arrayBuffer","slice","byteStride","_getValueFromInterleavedBuffer","count","value","result","Uint8Array","elementOffset","set","getSampler","source","getImage","parameters","key","glEnum","_enumSamplerParameter","preloadedImage","bufferIndex","data","perspective","orthographic","postProcessGLTF","postProcess"],"sources":["../../../../src/lib/api/post-process-gltf.ts"],"sourcesContent":["import {assert} from '../utils/assert';\nimport {getAccessorArrayTypeAndLength} from '../gltf-utils/gltf-utils';\nimport {BufferView} from '../types/gltf-json-schema';\nimport {BufferView as BufferViewPostprocessed} from '../types/gltf-postprocessed-schema';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_T]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  baseUri: string = '';\n  json: Record<string, any> = {};\n  buffers: [] = [];\n  images: [] = [];\n\n  postProcess(gltf, options = {}) {\n    const {json, buffers = [], images = [], baseUri = ''} = gltf;\n    assert(json);\n\n    this.baseUri = baseUri;\n    this.json = json;\n    this.buffers = buffers;\n    this.images = images;\n\n    this._resolveTree(this.json, options);\n\n    return this.json;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // cross-link index resolution, enum lookup, convenience calculations\n  // eslint-disable-next-line complexity\n  _resolveTree(json, options = {}) {\n    if (json.bufferViews) {\n      json.bufferViews = json.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (json.images) {\n      json.images = json.images.map((image, i) => this._resolveImage(image, i));\n    }\n    if (json.samplers) {\n      json.samplers = json.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (json.textures) {\n      json.textures = json.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (json.accessors) {\n      json.accessors = json.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (json.materials) {\n      json.materials = json.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (json.meshes) {\n      json.meshes = json.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (json.nodes) {\n      json.nodes = json.nodes.map((node, i) => this._resolveNode(node, i));\n    }\n    if (json.skins) {\n      json.skins = json.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (json.scenes) {\n      json.scenes = json.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (json.scene !== undefined) {\n      json.scene = json.scenes[this.json.scene];\n    }\n  }\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene, index) {\n    // scene = {...scene};\n    scene.id = scene.id || `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map((node) => this.getNode(node));\n    return scene;\n  }\n\n  _resolveNode(node, index) {\n    // node = {...node};\n    node.id = node.id || `node-${index}`;\n    if (node.children) {\n      node.children = node.children.map((child) => this.getNode(child));\n    }\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    } else if (node.meshes !== undefined && node.meshes.length) {\n      node.mesh = node.meshes.reduce(\n        (accum, meshIndex) => {\n          const mesh = this.getMesh(meshIndex);\n          accum.id = mesh.id;\n          accum.primitives = accum.primitives.concat(mesh.primitives);\n          return accum;\n        },\n        {primitives: []}\n      );\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n    return node;\n  }\n\n  _resolveSkin(skin, index) {\n    // skin = {...skin};\n    skin.id = skin.id || `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    return skin;\n  }\n\n  _resolveMesh(mesh, index) {\n    // mesh = {...mesh};\n    mesh.id = mesh.id || `mesh-${index}`;\n    if (mesh.primitives) {\n      mesh.primitives = mesh.primitives.map((primitive) => {\n        primitive = {...primitive};\n        const attributes = primitive.attributes;\n        primitive.attributes = {};\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (primitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(primitive.indices);\n        }\n        if (primitive.material !== undefined) {\n          primitive.material = this.getMaterial(primitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n\n  _resolveMaterial(material, index) {\n    // material = {...material};\n    material.id = material.id || `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture = {...material.normalTexture};\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlustionTexture = {...material.occlustionTexture};\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emmisiveTexture = {...material.emmisiveTexture};\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n    if (!material.emissiveFactor) {\n      material.emissiveFactor = material.emmisiveTexture ? [1, 1, 1] : [0, 0, 0];\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {...material.pbrMetallicRoughness};\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {...mr.baseColorTexture};\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {...mr.metallicRoughnessTexture};\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n\n  _resolveAccessor(accessor, index) {\n    // accessor = {...accessor};\n    accessor.id = accessor.id || `accessor-${index}`;\n    if (accessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor.componentType);\n    accessor.components = getSizeFromAccessorType(accessor.type);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n\n    // Create TypedArray for the accessor\n    // Note: The canonical way to instantiate is to ignore this array and create\n    // WebGLBuffer's using the bufferViews.\n    if (accessor.bufferView) {\n      const buffer = accessor.bufferView.buffer;\n      const {ArrayType, byteLength} = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);\n      const byteOffset =\n        (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;\n      let cutBuffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n      if (accessor.bufferView.byteStride) {\n        cutBuffer = this._getValueFromInterleavedBuffer(\n          buffer,\n          byteOffset,\n          accessor.bufferView.byteStride,\n          accessor.bytesPerElement,\n          accessor.count\n        );\n      }\n      accessor.value = new ArrayType(cutBuffer);\n    }\n\n    return accessor;\n  }\n\n  /**\n   * Take values of particular accessor from interleaved buffer\n   * various parts of the buffer\n   * @param buffer\n   * @param byteOffset\n   * @param byteStride\n   * @param bytesPerElement\n   * @param count\n   * @returns\n   */\n  _getValueFromInterleavedBuffer(buffer, byteOffset, byteStride, bytesPerElement, count) {\n    const result = new Uint8Array(count * bytesPerElement);\n    for (let i = 0; i < count; i++) {\n      const elementOffset = byteOffset + i * byteStride;\n      result.set(\n        new Uint8Array(buffer.arrayBuffer.slice(elementOffset, elementOffset + bytesPerElement)),\n        i * bytesPerElement\n      );\n    }\n    return result.buffer;\n  }\n\n  _resolveTexture(texture, index) {\n    // texture = {...texture};\n    texture.id = texture.id || `texture-${index}`;\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n    return texture;\n  }\n\n  _resolveSampler(sampler, index) {\n    // sampler = {...sampler};\n    sampler.id = sampler.id || `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index) {\n    // image = {...image};\n    image.id = image.id || `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // Check if image has been preloaded by the GLTFLoader\n    // If so, link it into the JSON and drop the URI\n    const preloadedImage = this.images[index];\n    if (preloadedImage) {\n      image.image = preloadedImage;\n    }\n\n    return image;\n  }\n\n  _resolveBufferView(bufferView: BufferView, index: number): BufferViewPostprocessed {\n    // bufferView = {...bufferView};\n    const bufferIndex = bufferView.buffer;\n    const result: BufferViewPostprocessed = {\n      id: `bufferView-${index}`,\n      ...bufferView,\n      buffer: this.buffers[bufferIndex]\n    };\n\n    // @ts-expect-error\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    // @ts-expect-error\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n\n    if ('byteOffset' in bufferView) {\n      byteOffset += bufferView.byteOffset;\n    }\n\n    result.data = new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    return result;\n  }\n\n  _resolveCamera(camera, index) {\n    camera.id = camera.id || `camera-${index}`;\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n    return camera;\n  }\n}\n\nexport function postProcessGLTF(gltf, options?) {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n"],"mappings":"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"}