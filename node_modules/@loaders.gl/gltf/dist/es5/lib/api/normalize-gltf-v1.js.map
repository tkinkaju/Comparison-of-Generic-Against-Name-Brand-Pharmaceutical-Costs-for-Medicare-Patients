{"version":3,"file":"normalize-gltf-v1.js","names":["GLTF_ARRAYS","accessors","animations","buffers","bufferViews","images","materials","meshes","nodes","samplers","scenes","skins","textures","GLTF_KEYS","accessor","buffer","bufferView","image","material","mesh","node","sampler","scene","skin","texture","GLTFV1Normalizer","gltf","options","json","asset","version","undefined","console","warn","normalize","Error","_addAsset","_convertTopLevelObjectsToArrays","KHR_binary_glTF","preprocess","_convertObjectIdsToArrayIndices","_updateObjects","_updateMaterial","generator","arrayName","_convertTopLevelObjectToArray","mapName","objectMap","Array","isArray","id","object","index","length","push","idToIndexMap","_convertIdsToIndices","_convertIdToIndex","_convertTextureIds","_convertMeshIds","_convertNodeIds","_convertSceneIds","source","primitives","primitive","attributes","indices","attributeName","children","map","child","topLevelArrayName","key","Number","isFinite","type","pbrMetallicRoughness","baseColorFactor","metallicFactor","roughnessFactor","textureId","values","tex","texture2d_0","diffuseTex","textureIndex","findIndex","baseColorTexture","normalizeGLTFV1"],"sources":["../../../../src/lib/api/normalize-gltf-v1.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport * as KHR_binary_glTF from '../extensions/KHR_binary_gltf';\n\n// Binary format changes (mainly implemented by GLBLoader)\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\n\n// JSON format changes:\n// https://github.com/khronosgroup/gltf/issues/605\n\n// - [x] Top-level JSON objects are arrays now\n// - [ ] Removed indirection from animation: sampler now refers directly to accessors, #712\n// - [ ] material.parameter.value and technique.parameter.value must be an array, #690\n// - [ ] Node can have only one mesh #821\n// - [ ] Added reqs on JSON encoding\n// - [ ] Added reqs on binary data alignment #802 (comment)\n\n// Additions:\n// - [ ] Added accessor.normalized, #691, #706\n// - [ ] Added glExtensionsUsed property and 5125 (UNSIGNED_INT) accessor.componentType value, #619\n// - [ ] Added extensionsRequired property, #720, #721\n// - [ ] Added \"STEP\" as valid animation.sampler.interpolation value, #712\n\n// Removals:\n// - [x] Removed buffer.type, #786, #629\n// - [ ] Removed revision number from profile.version, #709\n// - [ ] Removed technique.functions.scissor and removed 3089 (SCISSOR_TEST) as a valid value for technique.states.enable, #681\n// - [ ] Techniques, programs, and shaders were moved out to KHR_technique_webgl extension.\n\n// Other edits:\n// - [x] asset is now required, #642\n// - [ ] buffer.byteLength and bufferView.byteLength are now required, #560.\n// - [ ] accessor.min and accessor.max are now required, #593, and clarified that the JSON value and binary data must be the same, #628.\n// - [ ] Clarified animation.sampler and animation.channel restrictions, #712\n// - [ ] skin.inverseBindMatrices is now optional, #461.\n// - [ ] Attribute parameters can't have a value defined in the technique or parameter, #563 (comment).\n// - [ ] Only TEXCOORD and COLOR attribute semantics can be written in the form [semantic]_[set_index], #563 (comment).\n// - [ ] TEXCOORD and COLOR attribute semantics must be written in the form [semantic]_[set_index], e.g., just TEXCOORD should be TEXCOORD_0, and just COLOR should be COLOR_0, #649\n// - [ ] camera.perspective.aspectRatio and camera.perspective.yfov must now be > 0, not >= 0, #563 (comment).\n// - [ ] Application-specific parameter semantics must start with an underscore, e.g., _TEMPERATURE and _SIMULATION_TIME, #563 (comment).\n// - [ ] Properties in technique.parameters must be defined in technique.uniforms or technique.attributes,\n\n// #563 (comment).\n// - [ ] technique.parameter.count can only be defined when the semantic is JOINTMATRIX or an application-specific semantic is used. It can never be defined for attribute parameters; only uniforms, d2f6945\n// - [ ] technique.parameter.semantic is required when the parameter is an attribute, 28e113d\n// - [ ] Mesh-only models are allowed, e.g., without materials, #642\n// - [ ] Skeleton hierarchies (nodes containing jointName) must be separated from non-skeleton hierarchies., #647\n// - [ ] technique.states.functions.blendColor and technique.states.functions.depthRange parameters now must match WebGL function min/max, #707\n\nconst GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\n\nconst GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\n\n/**\n * Converts (normalizes) glTF v1 to v2\n */\nclass GLTFV1Normalizer {\n  idToIndexMap = {\n    animations: {},\n    accessors: {},\n    buffers: {},\n    bufferViews: {},\n    images: {},\n    materials: {},\n    meshes: {},\n    nodes: {},\n    samplers: {},\n    scenes: {},\n    skins: {},\n    textures: {}\n  };\n\n  json;\n\n  // constructor() {}\n\n  /**\n   * Convert (normalize) glTF < 2.0 to glTF 2.0\n   * @param gltf - object with json and binChunks\n   * @param options\n   * @param options normalize Whether to actually normalize\n   */\n  normalize(gltf, options) {\n    this.json = gltf.json;\n    const json = gltf.json;\n\n    // Check version\n    switch (json.asset && json.asset.version) {\n      // We are converting to v2 format. Return if there is nothing to do\n      case '2.0':\n        return;\n\n      // This class is written to convert 1.0\n      case undefined:\n      case '1.0':\n        break;\n\n      default:\n        // eslint-disable-next-line no-undef, no-console\n        console.warn(`glTF: Unknown version ${json.asset.version}`);\n        return;\n    }\n\n    if (!options.normalize) {\n      // We are still missing a few conversion tricks, remove once addressed\n      throw new Error('glTF v1 is not supported.');\n    }\n\n    // eslint-disable-next-line no-undef, no-console\n    console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n\n    this._addAsset(json);\n\n    // In glTF2 top-level fields are Arrays not Object maps\n    this._convertTopLevelObjectsToArrays(json);\n\n    // Extract bufferView indices for images\n    // (this extension needs to be invoked early in the normalization process)\n    // TODO can this be handled by standard extension processing instead of called explicitly?\n    KHR_binary_glTF.preprocess(gltf);\n\n    // Convert object references from ids to indices\n    this._convertObjectIdsToArrayIndices(json);\n\n    this._updateObjects(json);\n\n    this._updateMaterial(json);\n  }\n\n  // asset is now required, #642 https://github.com/KhronosGroup/glTF/issues/639\n  _addAsset(json) {\n    json.asset = json.asset || {};\n    // We are normalizing to glTF v2, so change version to \"2.0\"\n    json.asset.version = '2.0';\n    json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n  }\n\n  _convertTopLevelObjectsToArrays(json) {\n    // TODO check that all arrays are covered\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertTopLevelObjectToArray(json, arrayName);\n    }\n  }\n\n  /** Convert one top level object to array */\n  _convertTopLevelObjectToArray(json, mapName) {\n    const objectMap = json[mapName];\n    if (!objectMap || Array.isArray(objectMap)) {\n      return;\n    }\n\n    // Rewrite the top-level field as an array\n    json[mapName] = [];\n    // Copy the map key into object.id\n    for (const id in objectMap) {\n      const object = objectMap[id];\n      object.id = object.id || id; // Mutates the loaded object\n      const index = json[mapName].length;\n      json[mapName].push(object);\n      this.idToIndexMap[mapName][id] = index;\n    }\n  }\n\n  /** Go through all objects in all top-level arrays and replace ids with indices */\n  _convertObjectIdsToArrayIndices(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertIdsToIndices(json, arrayName);\n    }\n    if ('scene' in json) {\n      json.scene = this._convertIdToIndex(json.scene, 'scene');\n    }\n\n    // Convert any index references that are not using array names\n\n    // texture.source (image)\n    for (const texture of json.textures) {\n      this._convertTextureIds(texture);\n    }\n    for (const mesh of json.meshes) {\n      this._convertMeshIds(mesh);\n    }\n    for (const node of json.nodes) {\n      this._convertNodeIds(node);\n    }\n    for (const node of json.scenes) {\n      this._convertSceneIds(node);\n    }\n  }\n\n  _convertTextureIds(texture) {\n    if (texture.source) {\n      texture.source = this._convertIdToIndex(texture.source, 'image');\n    }\n  }\n\n  _convertMeshIds(mesh) {\n    for (const primitive of mesh.primitives) {\n      const {attributes, indices, material} = primitive;\n      for (const attributeName in attributes) {\n        attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n      }\n      if (indices) {\n        primitive.indices = this._convertIdToIndex(indices, 'accessor');\n      }\n      if (material) {\n        primitive.material = this._convertIdToIndex(material, 'material');\n      }\n    }\n  }\n\n  _convertNodeIds(node) {\n    if (node.children) {\n      node.children = node.children.map((child) => this._convertIdToIndex(child, 'node'));\n    }\n    if (node.meshes) {\n      node.meshes = node.meshes.map((mesh) => this._convertIdToIndex(mesh, 'mesh'));\n    }\n  }\n\n  _convertSceneIds(scene) {\n    if (scene.nodes) {\n      scene.nodes = scene.nodes.map((node) => this._convertIdToIndex(node, 'node'));\n    }\n  }\n\n  /** Go through all objects in a top-level array and replace ids with indices */\n  _convertIdsToIndices(json, topLevelArrayName) {\n    if (!json[topLevelArrayName]) {\n      console.warn(`gltf v1: json doesn't contain attribute ${topLevelArrayName}`); // eslint-disable-line no-console, no-undef\n      json[topLevelArrayName] = [];\n    }\n    for (const object of json[topLevelArrayName]) {\n      for (const key in object) {\n        const id = object[key];\n        const index = this._convertIdToIndex(id, key);\n        object[key] = index;\n      }\n    }\n  }\n\n  _convertIdToIndex(id, key) {\n    const arrayName = GLTF_KEYS[key];\n    if (arrayName in this.idToIndexMap) {\n      const index = this.idToIndexMap[arrayName][id];\n      if (!Number.isFinite(index)) {\n        throw new Error(`gltf v1: failed to resolve ${key} with id ${id}`);\n      }\n      return index;\n    }\n    return id;\n  }\n\n  /**\n   *\n   * @param {*} json\n   */\n  _updateObjects(json) {\n    for (const buffer of this.json.buffers) {\n      // - [x] Removed buffer.type, #786, #629\n      delete buffer.type;\n    }\n  }\n\n  /**\n   * Update material (set pbrMetallicRoughness)\n   * @param {*} json\n   */\n  _updateMaterial(json) {\n    for (const material of json.materials) {\n      material.pbrMetallicRoughness = {\n        baseColorFactor: [1, 1, 1, 1],\n        metallicFactor: 1,\n        roughnessFactor: 1\n      };\n\n      const textureId =\n        material.values?.tex || material.values?.texture2d_0 || material.values?.diffuseTex;\n      const textureIndex = json.textures.findIndex((texture) => texture.id === textureId);\n      if (textureIndex !== -1) {\n        material.pbrMetallicRoughness.baseColorTexture = {index: textureIndex};\n      }\n    }\n  }\n}\n\nexport function normalizeGLTFV1(gltf, options = {}) {\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}\n"],"mappings":"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"}