{"version":3,"file":"gltf-scenegraph.js","names":["DEFAULT_GLTF_JSON","asset","version","generator","buffers","GLTFScenegraph","gltf","json","sourceBuffers","byteLength","key","data","extras","extensionName","isExtension","getUsedExtensions","find","name","extensions","isRequired","getRequiredExtensions","getExtension","extensionsRequired","extensionsUsed","extensionsRemoved","object","index","getObject","array","Error","bufferView","getBufferView","bufferIndex","buffer","binChunk","assert","byteOffset","Uint8Array","arrayBuffer","accessor","getAccessor","getBuffer","getAccessorArrayTypeAndLength","ArrayType","length","image","registerUsedExtension","extension","extensionData","addExtension","registerRequiredExtension","ext","push","_removeStringFromArray","Array","isArray","includes","sceneIndex","scene","nodeIndices","scenes","nodes","node","meshIndex","matrix","nodeData","mesh","attributes","indices","material","mode","accessors","_addAttributes","glTFMesh","primitives","indicesAccessor","_addIndices","Number","isFinite","meshes","accessorIndices","imageData","mimeTypeOpt","metadata","getBinaryImageMetadata","mimeType","bufferViewIndex","addBufferView","glTFImage","images","glTFBufferView","padToNBytes","bufferViews","glTFAccessor","type","getAccessorTypeFromSize","size","componentType","count","max","min","sourceBuffer","minMax","_getAccessorMinMax","accessorDefaults","getComponentTypeFromArray","Math","round","addAccessor","Object","assign","texture","imageIndex","glTFTexture","source","textures","pbrMaterialInfo","materials","totalByteLength","ArrayBuffer","targetArray","dstByteOffset","copyToArray","binary","string","found","indexOf","splice","result","attributeKey","attributeData","attrName","_getGltfAttributeName","addBinaryBuffer","value","attributeName","toLowerCase","initValues","subarray","componentIndex"],"sources":["../../../../src/lib/api/gltf-scenegraph.ts"],"sourcesContent":["import type {\n  GLTF,\n  GLTFScene,\n  GLTFNode,\n  GLTFMesh,\n  GLTFSkin,\n  GLTFMaterial,\n  GLTFAccessor,\n  GLTFSampler,\n  GLTFTexture,\n  GLTFImage,\n  GLTFBuffer,\n  GLTFBufferView,\n  GLTFWithBuffers\n} from '../types/gltf-types';\n\nimport {getBinaryImageMetadata} from '@loaders.gl/images';\nimport {padToNBytes, copyToArray} from '@loaders.gl/loader-utils';\nimport {assert} from '../utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from '../gltf-utils/gltf-utils';\n\nconst DEFAULT_GLTF_JSON: GLTF = {\n  asset: {\n    version: '2.0',\n    generator: 'loaders.gl'\n  },\n  buffers: []\n};\n\ntype Extension = {[key: string]: any};\n/**\n * Class for structured access to GLTF data\n */\nexport default class GLTFScenegraph {\n  // internal\n  gltf: GLTFWithBuffers;\n  sourceBuffers: any[];\n  byteLength: number;\n\n  constructor(gltf?: {json: GLTF; buffers?: any[]}) {\n    // @ts-ignore\n    this.gltf = gltf || {\n      json: {...DEFAULT_GLTF_JSON},\n      buffers: []\n    };\n    this.sourceBuffers = [];\n    this.byteLength = 0;\n\n    // Initialize buffers\n    if (this.gltf.buffers && this.gltf.buffers[0]) {\n      this.byteLength = this.gltf.buffers[0].byteLength;\n      this.sourceBuffers = [this.gltf.buffers[0]];\n    }\n  }\n\n  // Accessors\n\n  get json(): GLTF {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key: string): unknown {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key: string): {[key: string]: unknown} {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension<T = Extension>(extensionName: string): T | null {\n    const isExtension = this.getUsedExtensions().find((name) => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension<T = Extension>(extensionName: string): T | null {\n    const isRequired = this.getRequiredExtensions().find((name) => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions(): string[] {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions(): string[] {\n    return this.json.extensionsUsed || [];\n  }\n\n  getRemovedExtensions(): string[] {\n    return (this.json.extensionsRemoved || []) as string[];\n  }\n\n  getObjectExtension<T = Extension>(object: {[key: string]: any}, extensionName: string): T | null {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index: number): GLTFScene {\n    return this.getObject('scenes', index) as GLTFScene;\n  }\n\n  getNode(index: number): GLTFNode {\n    return this.getObject('nodes', index) as GLTFNode;\n  }\n\n  getSkin(index: number): GLTFSkin {\n    return this.getObject('skins', index) as GLTFSkin;\n  }\n\n  getMesh(index: number): GLTFMesh {\n    return this.getObject('meshes', index) as GLTFMesh;\n  }\n\n  getMaterial(index: number): GLTFMaterial {\n    return this.getObject('materials', index) as GLTFMaterial;\n  }\n\n  getAccessor(index: number): GLTFAccessor {\n    return this.getObject('accessors', index) as GLTFAccessor;\n  }\n\n  // getCamera(index: number): object | null {\n  //   return null; // TODO: fix thi: object  as null;\n  // }\n\n  getTexture(index: number): GLTFTexture {\n    return this.getObject('textures', index) as GLTFTexture;\n  }\n\n  getSampler(index: number): GLTFSampler {\n    return this.getObject('samplers', index) as GLTFSampler;\n  }\n\n  getImage(index: number): GLTFImage {\n    return this.getObject('images', index) as GLTFImage;\n  }\n\n  getBufferView(index: number | object): GLTFBufferView {\n    return this.getObject('bufferViews', index) as GLTFBufferView;\n  }\n\n  getBuffer(index: number): GLTFBuffer {\n    return this.getObject('buffers', index) as GLTFBuffer;\n  }\n\n  getObject(array: string, index: number | object): object {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && (this.json[array] as {}[])[index];\n    if (!object) {\n      throw new Error(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  /**\n   * Accepts buffer view index or buffer view object\n   * @returns a `Uint8Array`\n   */\n  getTypedArrayForBufferView(bufferView: number | object): Uint8Array {\n    bufferView = this.getBufferView(bufferView);\n    // @ts-ignore\n    const bufferIndex = bufferView.buffer;\n\n    // Get hold of the arrayBuffer\n    // const buffer = this.getBuffer(bufferIndex);\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n\n    // @ts-ignore\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    // @ts-ignore\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  /** Accepts accessor index or accessor object\n   * @returns a typed array with type that matches the types\n   */\n  getTypedArrayForAccessor(accessor: number | object): any {\n    // @ts-ignore\n    accessor = this.getAccessor(accessor);\n    // @ts-ignore\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    // @ts-ignore\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  /** accepts accessor index or accessor object\n   * returns a `Uint8Array`\n   */\n  getTypedArrayForImageData(image: number | object): Uint8Array {\n    // @ts-ignore\n    image = this.getAccessor(image);\n    // @ts-ignore\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  /**\n   * Add an extra application-defined key to the top-level data structure\n   */\n  addApplicationData(key: string, data: object): GLTFScenegraph {\n    this.json[key] = data;\n    return this;\n  }\n\n  /**\n   * `extras` - Standard GLTF field for storing application specific data\n   */\n  addExtraData(key: string, data: object): GLTFScenegraph {\n    this.json.extras = this.json.extras || {};\n    (this.json.extras as Record<string, unknown>)[key] = data;\n    return this;\n  }\n\n  addObjectExtension(object: object, extensionName: string, data: object): GLTFScenegraph {\n    // @ts-ignore\n    object.extensions = object.extensions || {};\n    // TODO - clobber or merge?\n    // @ts-ignore\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  setObjectExtension(object: object, extensionName: string, data: object): void {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  removeObjectExtension(object: object, extensionName: string): object {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    const extension = extensions[extensionName];\n    delete extensions[extensionName];\n    return extension;\n  }\n\n  /**\n   * Add to standard GLTF top level extension object, mark as used\n   */\n  addExtension(extensionName: string, extensionData: object = {}): object {\n    assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    (this.json.extensions as Record<string, unknown>)[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Standard GLTF top level extension object, mark as used and required\n   */\n  addRequiredExtension(extensionName, extensionData: object = {}): object {\n    assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Add extensionName to list of used extensions\n   */\n  registerUsedExtension(extensionName: string): void {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find((ext) => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  /**\n   * Add extensionName to list of required extensions\n   */\n  registerRequiredExtension(extensionName: string): void {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find((ext) => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  /**\n   * Removes an extension from the top-level list\n   */\n  removeExtension(extensionName: string): void {\n    if (!this.getExtension(extensionName)) {\n      return;\n    }\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n    if (!Array.isArray(this.json.extensionsRemoved)) {\n      this.json.extensionsRemoved = [];\n    }\n    const extensionsRemoved = this.json.extensionsRemoved as string[];\n    if (!extensionsRemoved.includes(extensionName)) {\n      extensionsRemoved.push(extensionName);\n    }\n  }\n\n  /**\n   *  Set default scene which is to be displayed at load time\n   */\n  setDefaultScene(sceneIndex: number): void {\n    this.json.scene = sceneIndex;\n  }\n\n  /**\n   * @todo: add more properties for scene initialization:\n   *   name`, `extensions`, `extras`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-scene\n   */\n  addScene(scene: {nodeIndices: number[]}): number {\n    const {nodeIndices} = scene;\n    this.json.scenes = this.json.scenes || [];\n    this.json.scenes.push({nodes: nodeIndices});\n    return this.json.scenes.length - 1;\n  }\n\n  /**\n   * @todo: add more properties for node initialization:\n   *   `name`, `extensions`, `extras`, `camera`, `children`, `skin`, `rotation`, `scale`, `translation`, `weights`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#node\n   */\n  addNode(node: {meshIndex: number; matrix?: number[]}): number {\n    const {meshIndex, matrix} = node;\n    this.json.nodes = this.json.nodes || [];\n    const nodeData = {mesh: meshIndex};\n    if (matrix) {\n      // @ts-ignore\n      nodeData.matrix = matrix;\n    }\n    this.json.nodes.push(nodeData);\n    return this.json.nodes.length - 1;\n  }\n\n  /** Adds a mesh to the json part */\n  addMesh(mesh: {attributes: object; indices?: object; material?: number; mode?: number}): number {\n    const {attributes, indices, material, mode = 4} = mesh;\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          mode\n        }\n      ]\n    };\n\n    if (indices) {\n      const indicesAccessor = this._addIndices(indices);\n      // @ts-ignore\n      glTFMesh.primitives[0].indices = indicesAccessor;\n    }\n\n    if (Number.isFinite(material)) {\n      // @ts-ignore\n      glTFMesh.primitives[0].material = material;\n    }\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes: object): number {\n    // @ts-ignore\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  /**\n   * Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes as glTF image\n   * @param imageData\n   * @param mimeType\n   */\n  addImage(imageData: any, mimeTypeOpt?: string): number {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    const metadata = getBinaryImageMetadata(imageData);\n    const mimeType = mimeTypeOpt || metadata?.mimeType;\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  /**\n   * Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n   * @param buffer\n   */\n  addBufferView(buffer: any): number {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padToNBytes(byteLength, 4);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  /**\n   * Adds an accessor to a bufferView\n   * @param bufferViewIndex\n   * @param accessor\n   */\n  addAccessor(bufferViewIndex: number, accessor: object): number {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      // @ts-ignore\n      type: getAccessorTypeFromSize(accessor.size),\n      // @ts-ignore\n      componentType: accessor.componentType,\n      // @ts-ignore\n      count: accessor.count,\n      // @ts-ignore\n      max: accessor.max,\n      // @ts-ignore\n      min: accessor.min\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  /**\n   * Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes buffers as glTF accessors, but this could be optimized\n   * @param sourceBuffer\n   * @param accessor\n   */\n  addBinaryBuffer(sourceBuffer: any, accessor: object = {size: 3}): number {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n    // @ts-ignore\n    let minMax = {min: accessor.min, max: accessor.max};\n    if (!minMax.min || !minMax.max) {\n      // @ts-ignore\n      minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);\n    }\n\n    const accessorDefaults = {\n      // @ts-ignore\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      // @ts-ignore\n      count: Math.round(sourceBuffer.length / accessor.size),\n      min: minMax.min,\n      max: minMax.max\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  /**\n   * Adds a texture to the json part\n   * @todo: add more properties for texture initialization\n   * `sampler`, `name`, `extensions`, `extras`\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\n   */\n  addTexture(texture: {imageIndex: number}): number {\n    const {imageIndex} = texture;\n    const glTFTexture = {\n      source: imageIndex\n    };\n\n    this.json.textures = this.json.textures || [];\n    this.json.textures.push(glTFTexture);\n    return this.json.textures.length - 1;\n  }\n\n  /** Adds a material to the json part */\n  addMaterial(pbrMaterialInfo: Object): number {\n    this.json.materials = this.json.materials || [];\n    this.json.materials.push(pbrMaterialInfo);\n    return this.json.materials.length - 1;\n  }\n\n  /** Pack the binary chunk */\n  createBinaryChunk(): void {\n    // Encoder expects this array undefined or empty\n    this.gltf.buffers = [];\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (const sourceBuffer of this.sourceBuffers || []) {\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    if (this.json?.buffers?.[0]) {\n      this.json.buffers[0].byteLength = totalByteLength;\n    } else {\n      this.json.buffers = [{byteLength: totalByteLength}];\n    }\n\n    // Save generated arrayBuffer\n    this.gltf.binary = arrayBuffer;\n\n    // Put arrayBuffer to sourceBuffers for possible additional writing data in the chunk\n    this.sourceBuffers = [arrayBuffer];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n\n  /**\n   * Add attributes to buffers and create `attributes` object which is part of `mesh`\n   */\n  _addAttributes(attributes = {}) {\n    const result = {};\n    for (const attributeKey in attributes) {\n      const attributeData = attributes[attributeKey];\n      const attrName = this._getGltfAttributeName(attributeKey);\n      const accessor = this.addBinaryBuffer(attributeData.value, attributeData);\n      result[attrName] = accessor;\n    }\n    return result;\n  }\n\n  /**\n   * Add indices to buffers\n   */\n  _addIndices(indices) {\n    return this.addBinaryBuffer(indices, {size: 1});\n  }\n\n  /**\n   * Deduce gltf specific attribue name from input attribute name\n   */\n  _getGltfAttributeName(attributeName) {\n    switch (attributeName.toLowerCase()) {\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return 'POSITION';\n      case 'normal':\n      case 'normals':\n        return 'NORMAL';\n      case 'color':\n      case 'colors':\n        return 'COLOR_0';\n      case 'texcoord':\n      case 'texcoords':\n        return 'TEXCOORD_0';\n      default:\n        return attributeName;\n    }\n  }\n\n  /**\n   * Calculate `min` and `max` arrays of accessor according to spec:\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-accessor\n   */\n  _getAccessorMinMax(buffer, size) {\n    const result = {min: null, max: null};\n    if (buffer.length < size) {\n      return result;\n    }\n    // @ts-ignore\n    result.min = [];\n    // @ts-ignore\n    result.max = [];\n    const initValues = buffer.subarray(0, size);\n    for (const value of initValues) {\n      // @ts-ignore\n      result.min.push(value);\n      // @ts-ignore\n      result.max.push(value);\n    }\n\n    for (let index = size; index < buffer.length; index += size) {\n      for (let componentIndex = 0; componentIndex < size; componentIndex++) {\n        // @ts-ignore\n        result.min[0 + componentIndex] = Math.min(\n          // @ts-ignore\n          result.min[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n        // @ts-ignore\n        result.max[0 + componentIndex] = Math.max(\n          // @ts-ignore\n          result.max[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n      }\n    }\n    return result;\n  }\n}\n"],"mappings":"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"}