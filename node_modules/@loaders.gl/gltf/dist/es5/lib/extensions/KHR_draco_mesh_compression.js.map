{"version":3,"file":"KHR_draco_mesh_compression.js","names":["makeMeshPrimitiveIterator","KHR_DRACO_MESH_COMPRESSION","name","preprocess","gltfData","options","context","scenegraph","Scenegraph","primitive","getObjectExtension","decode","gltf","decompressMeshes","promises","push","decompressPrimitive","Promise","all","removeExtension","encode","json","meshes","mesh","compressMesh","addRequiredExtension","dracoExtension","buffer","getTypedArrayForBufferView","bufferView","bufferCopy","sliceArrayBuffer","byteOffset","parse","dracoOptions","DracoLoader","decodedData","decodedAttributes","getGLTFAccessors","attributes","Object","entries","attributeName","decodedAttribute","accessorIndex","accessor","getAccessor","min","max","indices","getGLTFAccessor","checkPrimitive","mode","DracoWriter","Error","compressedData","encodeSync","parseSync","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","glTFMesh","primitives","extensions","keys","length"],"sources":["../../../../src/lib/extensions/KHR_draco_mesh_compression.ts"],"sourcesContent":["// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n/* eslint-disable camelcase */\n\n/* eslint-disable camelcase */\nimport type {\n  GLTF,\n  GLTFAccessor,\n  GLTFMeshPrimitive,\n  GLTF_KHR_draco_mesh_compression\n} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {DracoLoaderOptions, DracoMesh} from '@loaders.gl/draco';\nimport {sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {default as Scenegraph} from '../api/gltf-scenegraph';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\n\nconst KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\n\n/** Extension name */\nexport const name = KHR_DRACO_MESH_COMPRESSION;\n\nexport function preprocess(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): void {\n  const scenegraph = new Scenegraph(gltfData);\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      // TODO - Remove fallback accessors to make sure we don't load unnecessary buffers\n    }\n  }\n}\n\nexport async function decode(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const scenegraph = new Scenegraph(gltfData);\n  const promises: Promise<void>[] = [];\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      promises.push(decompressPrimitive(scenegraph, primitive, options, context));\n    }\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extension\n  scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n}\n\nexport function encode(gltfData, options: GLTFLoaderOptions = {}): void {\n  const scenegraph = new Scenegraph(gltfData);\n\n  for (const mesh of scenegraph.json.meshes || []) {\n    // eslint-disable-next-line camelcase\n    // @ts-ignore\n    compressMesh(mesh, options);\n    // NOTE: Only add the extension if something was actually compressed\n    scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n}\n\n// DECODE\n\n// Unpacks one mesh primitive and removes the extension from the primitive\n// DracoDecoder needs to be imported and registered by app\n// Returns: Promise that resolves when all pending draco decoder jobs for this mesh complete\n\n// TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n\nasync function decompressPrimitive(\n  scenegraph: Scenegraph,\n  primitive: GLTFMeshPrimitive,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  const dracoExtension = scenegraph.getObjectExtension<GLTF_KHR_draco_mesh_compression>(\n    primitive,\n    KHR_DRACO_MESH_COMPRESSION\n  );\n  if (!dracoExtension) {\n    return;\n  }\n\n  const buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);\n  // TODO - parse does not yet deal well with byte offsets embedded in typed arrays. Copy buffer\n  // TODO - remove when `parse` is fixed to handle `byteOffset`s\n  const bufferCopy = sliceArrayBuffer(buffer.buffer, buffer.byteOffset); // , buffer.byteLength);\n\n  const {parse} = context;\n  const dracoOptions: DracoLoaderOptions = {...options};\n\n  // TODO - remove hack: The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n  const decodedData = (await parse(bufferCopy, DracoLoader, dracoOptions, context)) as DracoMesh;\n\n  const decodedAttributes: {[key: string]: GLTFAccessor} = getGLTFAccessors(decodedData.attributes);\n\n  // Restore min/max values\n  for (const [attributeName, decodedAttribute] of Object.entries(decodedAttributes)) {\n    if (attributeName in primitive.attributes) {\n      const accessorIndex: number = primitive.attributes[attributeName];\n      const accessor = scenegraph.getAccessor(accessorIndex);\n      if (accessor?.min && accessor?.max) {\n        decodedAttribute.min = accessor.min;\n        decodedAttribute.max = accessor.max;\n      }\n    }\n  }\n\n  // @ts-ignore\n  primitive.attributes = decodedAttributes;\n  if (decodedData.indices) {\n    // @ts-ignore\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  // Extension has been processed, delete it\n  // delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n  checkPrimitive(primitive);\n}\n\n// ENCODE\n\n// eslint-disable-next-line max-len\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\nfunction compressMesh(attributes, indices, mode: number = 4, options, context: LoaderContext) {\n  if (!options.DracoWriter) {\n    throw new Error('options.gltf.DracoWriter not provided');\n  }\n\n  // TODO - use DracoWriter using encode w/ registered DracoWriter...\n  const compressedData = options.DracoWriter.encodeSync({attributes});\n\n  // Draco compression may change the order and number of vertices in a mesh.\n  // To satisfy the requirement that accessors properties be correct for both\n  // compressed and uncompressed data, generators should create uncompressed\n  // attributes and indices using data that has been decompressed from the Draco buffer,\n  // rather than the original source data.\n  // @ts-ignore TODO this needs to be fixed\n  const decodedData = context?.parseSync?.({attributes});\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  const bufferViewIndex = options.addBufferView(compressedData);\n\n  const glTFMesh = {\n    primitives: [\n      {\n        attributes: fauxAccessors, // TODO - verify with spec\n        mode, // GL.POINTS\n        extensions: {\n          [KHR_DRACO_MESH_COMPRESSION]: {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors // TODO - verify with spec\n          }\n        }\n      }\n    ]\n  };\n\n  return glTFMesh;\n}\n\n// UTILS\n\nfunction checkPrimitive(primitive: GLTFMeshPrimitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction* makeMeshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n"],"mappings":"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"}