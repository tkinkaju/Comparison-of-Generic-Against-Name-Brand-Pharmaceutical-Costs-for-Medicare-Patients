{"version":3,"file":"KHR_draco_mesh_compression.js","names":["DracoLoader","sliceArrayBuffer","default","Scenegraph","getGLTFAccessors","getGLTFAccessor","KHR_DRACO_MESH_COMPRESSION","name","preprocess","gltfData","options","context","scenegraph","primitive","makeMeshPrimitiveIterator","getObjectExtension","decode","gltf","decompressMeshes","promises","push","decompressPrimitive","Promise","all","removeExtension","encode","mesh","json","meshes","compressMesh","addRequiredExtension","dracoExtension","buffer","getTypedArrayForBufferView","bufferView","bufferCopy","byteOffset","parse","dracoOptions","decodedData","decodedAttributes","attributes","attributeName","decodedAttribute","Object","entries","accessorIndex","accessor","getAccessor","min","max","indices","checkPrimitive","mode","DracoWriter","Error","compressedData","encodeSync","parseSync","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","glTFMesh","primitives","extensions","keys","length"],"sources":["../../../../src/lib/extensions/KHR_draco_mesh_compression.ts"],"sourcesContent":["// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n/* eslint-disable camelcase */\n\n/* eslint-disable camelcase */\nimport type {\n  GLTF,\n  GLTFAccessor,\n  GLTFMeshPrimitive,\n  GLTF_KHR_draco_mesh_compression\n} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {DracoLoaderOptions, DracoMesh} from '@loaders.gl/draco';\nimport {sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {default as Scenegraph} from '../api/gltf-scenegraph';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\n\nconst KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\n\n/** Extension name */\nexport const name = KHR_DRACO_MESH_COMPRESSION;\n\nexport function preprocess(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): void {\n  const scenegraph = new Scenegraph(gltfData);\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      // TODO - Remove fallback accessors to make sure we don't load unnecessary buffers\n    }\n  }\n}\n\nexport async function decode(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const scenegraph = new Scenegraph(gltfData);\n  const promises: Promise<void>[] = [];\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      promises.push(decompressPrimitive(scenegraph, primitive, options, context));\n    }\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extension\n  scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n}\n\nexport function encode(gltfData, options: GLTFLoaderOptions = {}): void {\n  const scenegraph = new Scenegraph(gltfData);\n\n  for (const mesh of scenegraph.json.meshes || []) {\n    // eslint-disable-next-line camelcase\n    // @ts-ignore\n    compressMesh(mesh, options);\n    // NOTE: Only add the extension if something was actually compressed\n    scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n}\n\n// DECODE\n\n// Unpacks one mesh primitive and removes the extension from the primitive\n// DracoDecoder needs to be imported and registered by app\n// Returns: Promise that resolves when all pending draco decoder jobs for this mesh complete\n\n// TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n\nasync function decompressPrimitive(\n  scenegraph: Scenegraph,\n  primitive: GLTFMeshPrimitive,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  const dracoExtension = scenegraph.getObjectExtension<GLTF_KHR_draco_mesh_compression>(\n    primitive,\n    KHR_DRACO_MESH_COMPRESSION\n  );\n  if (!dracoExtension) {\n    return;\n  }\n\n  const buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);\n  // TODO - parse does not yet deal well with byte offsets embedded in typed arrays. Copy buffer\n  // TODO - remove when `parse` is fixed to handle `byteOffset`s\n  const bufferCopy = sliceArrayBuffer(buffer.buffer, buffer.byteOffset); // , buffer.byteLength);\n\n  const {parse} = context;\n  const dracoOptions: DracoLoaderOptions = {...options};\n\n  // TODO - remove hack: The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n  const decodedData = (await parse(bufferCopy, DracoLoader, dracoOptions, context)) as DracoMesh;\n\n  const decodedAttributes: {[key: string]: GLTFAccessor} = getGLTFAccessors(decodedData.attributes);\n\n  // Restore min/max values\n  for (const [attributeName, decodedAttribute] of Object.entries(decodedAttributes)) {\n    if (attributeName in primitive.attributes) {\n      const accessorIndex: number = primitive.attributes[attributeName];\n      const accessor = scenegraph.getAccessor(accessorIndex);\n      if (accessor?.min && accessor?.max) {\n        decodedAttribute.min = accessor.min;\n        decodedAttribute.max = accessor.max;\n      }\n    }\n  }\n\n  // @ts-ignore\n  primitive.attributes = decodedAttributes;\n  if (decodedData.indices) {\n    // @ts-ignore\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  // Extension has been processed, delete it\n  // delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n  checkPrimitive(primitive);\n}\n\n// ENCODE\n\n// eslint-disable-next-line max-len\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\nfunction compressMesh(attributes, indices, mode: number = 4, options, context: LoaderContext) {\n  if (!options.DracoWriter) {\n    throw new Error('options.gltf.DracoWriter not provided');\n  }\n\n  // TODO - use DracoWriter using encode w/ registered DracoWriter...\n  const compressedData = options.DracoWriter.encodeSync({attributes});\n\n  // Draco compression may change the order and number of vertices in a mesh.\n  // To satisfy the requirement that accessors properties be correct for both\n  // compressed and uncompressed data, generators should create uncompressed\n  // attributes and indices using data that has been decompressed from the Draco buffer,\n  // rather than the original source data.\n  // @ts-ignore TODO this needs to be fixed\n  const decodedData = context?.parseSync?.({attributes});\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  const bufferViewIndex = options.addBufferView(compressedData);\n\n  const glTFMesh = {\n    primitives: [\n      {\n        attributes: fauxAccessors, // TODO - verify with spec\n        mode, // GL.POINTS\n        extensions: {\n          [KHR_DRACO_MESH_COMPRESSION]: {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors // TODO - verify with spec\n          }\n        }\n      }\n    ]\n  };\n\n  return glTFMesh;\n}\n\n// UTILS\n\nfunction checkPrimitive(primitive: GLTFMeshPrimitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction* makeMeshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n"],"mappings":"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"}