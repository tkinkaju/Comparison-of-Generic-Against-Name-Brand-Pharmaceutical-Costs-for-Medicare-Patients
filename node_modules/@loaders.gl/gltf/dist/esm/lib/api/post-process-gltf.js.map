{"version":3,"file":"post-process-gltf.js","names":["assert","getAccessorArrayTypeAndLength","COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessor","postProcess","gltf","options","json","buffers","images","baseUri","_resolveTree","bufferViews","map","bufView","i","_resolveBufferView","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","scenes","scene","_resolveScene","undefined","getScene","index","_get","getNode","getSkin","getMesh","getMaterial","getAccessor","getCamera","getTexture","getSampler","getImage","getBufferView","getBuffer","array","object","console","warn","id","children","child","length","reduce","accum","meshIndex","primitives","concat","camera","inverseBindMatrices","primitive","attributes","attribute","indices","normalTexture","occlusionTexture","occlustionTexture","emissiveTexture","emmisiveTexture","emissiveFactor","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","bytesPerComponent","components","bytesPerElement","buffer","ArrayType","byteLength","byteOffset","cutBuffer","arrayBuffer","slice","byteStride","_getValueFromInterleavedBuffer","count","value","result","Uint8Array","elementOffset","set","source","parameters","key","glEnum","_enumSamplerParameter","preloadedImage","bufferIndex","data","_resolveCamera","perspective","orthographic","postProcessGLTF"],"sources":["../../../../src/lib/api/post-process-gltf.ts"],"sourcesContent":["import {assert} from '../utils/assert';\nimport {getAccessorArrayTypeAndLength} from '../gltf-utils/gltf-utils';\nimport {BufferView} from '../types/gltf-json-schema';\nimport {BufferView as BufferViewPostprocessed} from '../types/gltf-postprocessed-schema';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_T]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  baseUri: string = '';\n  json: Record<string, any> = {};\n  buffers: [] = [];\n  images: [] = [];\n\n  postProcess(gltf, options = {}) {\n    const {json, buffers = [], images = [], baseUri = ''} = gltf;\n    assert(json);\n\n    this.baseUri = baseUri;\n    this.json = json;\n    this.buffers = buffers;\n    this.images = images;\n\n    this._resolveTree(this.json, options);\n\n    return this.json;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // cross-link index resolution, enum lookup, convenience calculations\n  // eslint-disable-next-line complexity\n  _resolveTree(json, options = {}) {\n    if (json.bufferViews) {\n      json.bufferViews = json.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (json.images) {\n      json.images = json.images.map((image, i) => this._resolveImage(image, i));\n    }\n    if (json.samplers) {\n      json.samplers = json.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (json.textures) {\n      json.textures = json.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (json.accessors) {\n      json.accessors = json.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (json.materials) {\n      json.materials = json.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (json.meshes) {\n      json.meshes = json.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (json.nodes) {\n      json.nodes = json.nodes.map((node, i) => this._resolveNode(node, i));\n    }\n    if (json.skins) {\n      json.skins = json.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (json.scenes) {\n      json.scenes = json.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (json.scene !== undefined) {\n      json.scene = json.scenes[this.json.scene];\n    }\n  }\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene, index) {\n    // scene = {...scene};\n    scene.id = scene.id || `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map((node) => this.getNode(node));\n    return scene;\n  }\n\n  _resolveNode(node, index) {\n    // node = {...node};\n    node.id = node.id || `node-${index}`;\n    if (node.children) {\n      node.children = node.children.map((child) => this.getNode(child));\n    }\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    } else if (node.meshes !== undefined && node.meshes.length) {\n      node.mesh = node.meshes.reduce(\n        (accum, meshIndex) => {\n          const mesh = this.getMesh(meshIndex);\n          accum.id = mesh.id;\n          accum.primitives = accum.primitives.concat(mesh.primitives);\n          return accum;\n        },\n        {primitives: []}\n      );\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n    return node;\n  }\n\n  _resolveSkin(skin, index) {\n    // skin = {...skin};\n    skin.id = skin.id || `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    return skin;\n  }\n\n  _resolveMesh(mesh, index) {\n    // mesh = {...mesh};\n    mesh.id = mesh.id || `mesh-${index}`;\n    if (mesh.primitives) {\n      mesh.primitives = mesh.primitives.map((primitive) => {\n        primitive = {...primitive};\n        const attributes = primitive.attributes;\n        primitive.attributes = {};\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (primitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(primitive.indices);\n        }\n        if (primitive.material !== undefined) {\n          primitive.material = this.getMaterial(primitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n\n  _resolveMaterial(material, index) {\n    // material = {...material};\n    material.id = material.id || `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture = {...material.normalTexture};\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlustionTexture = {...material.occlustionTexture};\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emmisiveTexture = {...material.emmisiveTexture};\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n    if (!material.emissiveFactor) {\n      material.emissiveFactor = material.emmisiveTexture ? [1, 1, 1] : [0, 0, 0];\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {...material.pbrMetallicRoughness};\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {...mr.baseColorTexture};\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {...mr.metallicRoughnessTexture};\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n\n  _resolveAccessor(accessor, index) {\n    // accessor = {...accessor};\n    accessor.id = accessor.id || `accessor-${index}`;\n    if (accessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor.componentType);\n    accessor.components = getSizeFromAccessorType(accessor.type);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n\n    // Create TypedArray for the accessor\n    // Note: The canonical way to instantiate is to ignore this array and create\n    // WebGLBuffer's using the bufferViews.\n    if (accessor.bufferView) {\n      const buffer = accessor.bufferView.buffer;\n      const {ArrayType, byteLength} = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);\n      const byteOffset =\n        (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;\n      let cutBuffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n      if (accessor.bufferView.byteStride) {\n        cutBuffer = this._getValueFromInterleavedBuffer(\n          buffer,\n          byteOffset,\n          accessor.bufferView.byteStride,\n          accessor.bytesPerElement,\n          accessor.count\n        );\n      }\n      accessor.value = new ArrayType(cutBuffer);\n    }\n\n    return accessor;\n  }\n\n  /**\n   * Take values of particular accessor from interleaved buffer\n   * various parts of the buffer\n   * @param buffer\n   * @param byteOffset\n   * @param byteStride\n   * @param bytesPerElement\n   * @param count\n   * @returns\n   */\n  _getValueFromInterleavedBuffer(buffer, byteOffset, byteStride, bytesPerElement, count) {\n    const result = new Uint8Array(count * bytesPerElement);\n    for (let i = 0; i < count; i++) {\n      const elementOffset = byteOffset + i * byteStride;\n      result.set(\n        new Uint8Array(buffer.arrayBuffer.slice(elementOffset, elementOffset + bytesPerElement)),\n        i * bytesPerElement\n      );\n    }\n    return result.buffer;\n  }\n\n  _resolveTexture(texture, index) {\n    // texture = {...texture};\n    texture.id = texture.id || `texture-${index}`;\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n    return texture;\n  }\n\n  _resolveSampler(sampler, index) {\n    // sampler = {...sampler};\n    sampler.id = sampler.id || `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index) {\n    // image = {...image};\n    image.id = image.id || `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // Check if image has been preloaded by the GLTFLoader\n    // If so, link it into the JSON and drop the URI\n    const preloadedImage = this.images[index];\n    if (preloadedImage) {\n      image.image = preloadedImage;\n    }\n\n    return image;\n  }\n\n  _resolveBufferView(bufferView: BufferView, index: number): BufferViewPostprocessed {\n    // bufferView = {...bufferView};\n    const bufferIndex = bufferView.buffer;\n    const result: BufferViewPostprocessed = {\n      id: `bufferView-${index}`,\n      ...bufferView,\n      buffer: this.buffers[bufferIndex]\n    };\n\n    // @ts-expect-error\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    // @ts-expect-error\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n\n    if ('byteOffset' in bufferView) {\n      byteOffset += bufferView.byteOffset;\n    }\n\n    result.data = new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    return result;\n  }\n\n  _resolveCamera(camera, index) {\n    camera.id = camera.id || `camera-${index}`;\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n    return camera;\n  }\n}\n\nexport function postProcessGLTF(gltf, options?) {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n"],"mappings":"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"}