{"version":3,"file":"draco-builder.js","names":["GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","noop","DracoBuilder","draco","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","dracoMetadataBuilder","MetadataBuilder","destroyEncodedObject","object","destroy","mesh","options","log","_setOptions","pointcloud","_encodePointCloud","_encodeMesh","attributes","indices","dracoPointCloud","PointCloud","metadata","_addGeometryMetadata","_getAttributesFromMesh","_createDracoPointCloud","dracoData","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","Error","num_points","num_attributes","dracoInt8ArrayToArrayBuffer","dracoMesh","Mesh","_createDracoMesh","EncodeMeshToDracoBuffer","SetSpeedOptions","speed","dracoMethod","method","SetEncodingMethod","attribute","quantization","bits","dracoPosition","SetAttributeQuantization","optionalMetadata","attributesMetadata","positions","_getPositionAttribute","vertexCount","length","attributeName","uniqueId","_addAttributeToMesh","_addAttributeMetadata","name","error","ArrayBuffer","isView","type","_getDracoAttributeType","size","numFaces","AddFacesToMesh","builder","buffer","constructor","Int8Array","AddInt8Attribute","Int16Array","AddInt16Attribute","Int32Array","AddInt32Attribute","Uint8Array","Uint8ClampedArray","AddUInt8Attribute","Uint16Array","AddUInt16Attribute","Uint32Array","AddUInt32Attribute","Float32Array","AddFloatAttribute","toLowerCase","COLOR","TEX_COORD","GENERIC","dracoType","dracoGeometry","dracoMetadata","Metadata","_populateDracoMetadata","AddMetadata","uniqueAttributeId","dracoAttributeMetadata","SetMetadataForAttribute","getEntries","key","value","Math","trunc","AddIntEntry","AddDoubleEntry","AddIntEntryArray","AddStringEntry","byteLength","outputBuffer","outputData","i","GetValue","container","hasEntriesFunc","entries","hasOwnProperty","Object"],"sources":["../../../src/lib/draco-builder.ts"],"sourcesContent":["/* eslint-disable camelcase */\n// This code is inspired by example code in the DRACO repository\nimport type {\n  Draco3D,\n  DracoInt8Array,\n  Encoder,\n  Mesh,\n  MeshBuilder,\n  PointCloud,\n  Metadata,\n  MetadataBuilder,\n  draco_GeometryAttribute_Type\n} from '../draco3d/draco3d-types';\n\nimport type {TypedArray} from '@loaders.gl/schema';\nimport type {DracoMesh} from './draco-types';\n\nexport type DracoBuildOptions = {\n  pointcloud?: boolean;\n  metadata?: {[key: string]: string};\n  attributesMetadata?: {};\n  log?: any;\n\n  // draco encoding options\n  speed?: [number, number];\n  method?: string;\n  quantization?: {[attributeName: string]: number};\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nconst noop = () => {};\n\nexport default class DracoBuilder {\n  draco: Draco3D;\n  dracoEncoder: Encoder;\n  dracoMeshBuilder: MeshBuilder;\n  dracoMetadataBuilder: MetadataBuilder;\n  log: any;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n  }\n\n  destroy(): void {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.destroyEncodedObject(this.dracoMetadataBuilder);\n    // @ts-ignore\n    this.dracoMeshBuilder = null;\n    // @ts-ignore\n    this.dracoEncoder = null;\n    // @ts-ignore\n    this.draco = null;\n  }\n\n  // TBD - when does this need to be called?\n  destroyEncodedObject(object): void {\n    if (object) {\n      this.draco.destroy(object);\n    }\n  }\n\n  /**\n   * Encode mesh or point cloud\n   * @param mesh =({})\n   * @param options\n   */\n  encodeSync(mesh: DracoMesh, options: DracoBuildOptions = {}): ArrayBuffer {\n    this.log = noop; // TODO\n    this._setOptions(options);\n\n    return options.pointcloud\n      ? this._encodePointCloud(mesh, options)\n      : this._encodeMesh(mesh, options);\n  }\n\n  // PRIVATE\n\n  _getAttributesFromMesh(mesh: DracoMesh) {\n    // TODO - Change the encodePointCloud interface instead?\n    const attributes = {...mesh, ...mesh.attributes};\n    // Fold indices into the attributes\n    if (mesh.indices) {\n      attributes.indices = mesh.indices;\n    }\n    return attributes;\n  }\n\n  _encodePointCloud(pointcloud: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoPointCloud = new this.draco.PointCloud();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoPointCloud, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(pointcloud);\n\n    // Build a `DracoPointCloud` from the input data\n    this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(\n        dracoPointCloud,\n        false,\n        dracoData\n      );\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  _encodeMesh(mesh: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoMesh = new this.draco.Mesh();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoMesh, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(mesh);\n\n    // Build a `DracoMesh` from the input data\n    this._createDracoMesh(dracoMesh, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  /**\n   * Set encoding options.\n   * @param {{speed?: any; method?: any; quantization?: any;}} options\n   */\n  _setOptions(options: DracoBuildOptions): void {\n    if ('speed' in options) {\n      // @ts-ignore\n      this.dracoEncoder.SetSpeedOptions(...options.speed);\n    }\n    if ('method' in options) {\n      const dracoMethod = this.draco[options.method || 'MESH_SEQUENTIAL_ENCODING'];\n      // assert(dracoMethod)\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in options) {\n      for (const attribute in options.quantization) {\n        const bits = options.quantization[attribute];\n        const dracoPosition = this.draco[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  /**\n   * @param {Mesh} dracoMesh\n   * @param {object} attributes\n   * @returns {Mesh}\n   */\n  _createDracoMesh(dracoMesh: Mesh, attributes, options: DracoBuildOptions): Mesh {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoMesh, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  /**\n   * @param {} dracoPointCloud\n   * @param {object} attributes\n   */\n  _createDracoPointCloud(\n    dracoPointCloud: PointCloud,\n    attributes: object,\n    options: DracoBuildOptions\n  ): PointCloud {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(\n          dracoPointCloud,\n          attributeName,\n          attribute,\n          vertexCount\n        );\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoPointCloud, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  /**\n   * @param mesh\n   * @param attributeName\n   * @param attribute\n   * @param vertexCount\n   */\n  _addAttributeToMesh(\n    mesh: PointCloud,\n    attributeName: string,\n    attribute: TypedArray,\n    vertexCount: number\n  ) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return -1;\n    }\n\n    const type = this._getDracoAttributeType(attributeName);\n    // @ts-ignore TODO/fix types\n    const size = attribute.length / vertexCount;\n\n    if (type === 'indices') {\n      // @ts-ignore TODO/fix types\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n\n      // @ts-ignore assumes mesh is a Mesh, not a point cloud\n      this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n      return -1;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    const builder = this.dracoMeshBuilder;\n    const {buffer} = attribute;\n\n    switch (attribute.constructor) {\n      case Int8Array:\n        return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n      case Int16Array:\n        return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n      case Int32Array:\n        return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n      case Uint8Array:\n      case Uint8ClampedArray:\n        return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n      case Uint16Array:\n        return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n      case Uint32Array:\n        return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n      case Float32Array:\n      default:\n        return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n    }\n  }\n\n  /**\n   * DRACO can compress attributes of know type better\n   * TODO - expose an attribute type map?\n   * @param attributeName\n   */\n  _getDracoAttributeType(attributeName: string): draco_GeometryAttribute_Type | 'indices' {\n    switch (attributeName.toLowerCase()) {\n      case 'indices':\n        return 'indices';\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return this.draco.POSITION;\n      case 'normal':\n      case 'normals':\n        return this.draco.NORMAL;\n      case 'color':\n      case 'colors':\n        return this.draco.COLOR;\n      case 'texcoord':\n      case 'texcoords':\n        return this.draco.TEX_COORD;\n      default:\n        return this.draco.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName);\n      if (dracoType === this.draco.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Add metadata for the geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param metadata\n   */\n  _addGeometryMetadata(dracoGeometry: PointCloud, metadata: {[key: string]: string}) {\n    const dracoMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoMetadata, metadata);\n    this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n  }\n\n  /**\n   * Add metadata for an attribute to geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param uniqueAttributeId\n   * @param metadata\n   */\n  _addAttributeMetadata(\n    dracoGeometry: PointCloud,\n    uniqueAttributeId: number,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    // Note: Draco JS IDL doesn't seem to expose draco.AttributeMetadata, however it seems to\n    // create such objects automatically from draco.Metadata object.\n    const dracoAttributeMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n    // Draco3d doc note: Directly add attribute metadata to geometry.\n    // You can do this without explicitly adding |GeometryMetadata| to mesh.\n    this.dracoMeshBuilder.SetMetadataForAttribute(\n      dracoGeometry,\n      uniqueAttributeId,\n      dracoAttributeMetadata\n    );\n  }\n\n  /**\n   * Add contents of object or map to a WASM Draco Metadata Object\n   * @param dracoMetadata - WASM Draco Object\n   * @param metadata\n   */\n  _populateDracoMetadata(\n    dracoMetadata: Metadata,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    for (const [key, value] of getEntries(metadata)) {\n      switch (typeof value) {\n        case 'number':\n          if (Math.trunc(value) === value) {\n            this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n          } else {\n            this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n          }\n          break;\n        case 'object':\n          if (value instanceof Int32Array) {\n            this.dracoMetadataBuilder.AddIntEntryArray(dracoMetadata, key, value, value.length);\n          }\n          break;\n        case 'string':\n        default:\n          this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n      }\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Copy encoded data to buffer\n * @param dracoData\n */\nfunction dracoInt8ArrayToArrayBuffer(dracoData: DracoInt8Array) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/** Enable iteration over either an object or a map */\nfunction getEntries(container) {\n  const hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}\n"],"mappings":"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"}