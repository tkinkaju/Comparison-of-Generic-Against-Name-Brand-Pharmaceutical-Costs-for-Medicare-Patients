{"version":3,"file":"draco-parser.js","names":["getMeshBoundingBox","getDracoSchema","GEOMETRY_TYPE","TRIANGULAR_MESH","POINT_CLOUD","DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR","TEX_COORD","DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","INDEX_ITEM_SIZE","DracoParser","constructor","draco","decoder","Decoder","metadataQuerier","MetadataQuerier","destroy","parseSync","arrayBuffer","options","buffer","DecoderBuffer","Init","byteLength","_disableAttributeTransforms","geometry_type","GetEncodedGeometryType","dracoGeometry","Mesh","PointCloud","dracoStatus","DecodeBufferToMesh","DecodeBufferToPointCloud","Error","ok","ptr","message","error_msg","loaderData","_getDracoLoaderData","geometry","_getMeshData","boundingBox","attributes","schema","indices","data","loader","header","vertexCount","num_points","metadata","_getTopLevelMetadata","_getDracoAttributes","num_attributes","num_faces","dracoAttributes","attributeId","dracoAttribute","GetAttribute","_getAttributeMetadata","unique_id","attribute_type","data_type","num_components","byte_offset","byte_stride","normalized","attribute_index","quantization","_getQuantizationTransform","quantization_transform","octahedron","_getOctahedronTransform","octahedron_transform","_getMeshAttributes","positionAttribute","topology","mode","value","_getTriangleStripIndices","size","_getTriangleListIndices","loaderAttribute","Object","values","attributeName","_deduceAttributeName","name","_getAttributeValues","byteOffset","byteStride","numFaces","numIndices","_malloc","GetTrianglesUInt32Array","HEAPF32","slice","_free","dracoArray","DracoInt32Array","GetTriangleStripsFromMesh","getUint32Array","attribute","TypedArrayCtor","numComponents","numPoints","numValues","BYTES_PER_ELEMENT","dataType","getDracoDataType","GetAttributeDataArrayForAllPoints","uniqueId","attributeUniqueId","entries","extraAttributes","thisAttributeType","dracoAttributeConstant","attributeType","entryName","attributeNameEntry","string","dracoMetadata","GetMetadata","_getDracoMetadata","GetAttributeMetadata","result","numEntries","NumEntries","entryIndex","GetEntryName","_getDracoMetadataField","GetIntEntryArray","intArray","getInt32Array","int","GetIntEntry","GetStringEntry","double","GetDoubleEntry","quantizedAttributes","octahedronAttributes","skipAttributes","dracoAttributeName","SkipAttributeTransform","skip","map","type","includes","transform","AttributeQuantizationTransform","InitFromAttribute","quantization_bits","range","min_values","i","min_value","DT_FLOAT32","DT_INT8","DT_INT16","DT_INT32","DT_UINT8","DT_UINT16","DT_UINT32","DT_INVALID","GetValue"],"sources":["../../../src/lib/draco-parser.ts"],"sourcesContent":["/* eslint-disable camelcase */\n\nimport type {TypedArray, MeshAttribute, MeshGeometry} from '@loaders.gl/schema';\n\n// Draco types (input)\nimport type {\n  Draco3D,\n  Decoder,\n  Mesh,\n  PointCloud,\n  PointAttribute,\n  Metadata,\n  MetadataQuerier,\n  DracoInt32Array,\n  draco_DataType\n} from '../draco3d/draco3d-types';\n\n// Parsed data types (output)\nimport type {\n  DracoMesh,\n  DracoLoaderData,\n  DracoAttribute,\n  DracoMetadataEntry,\n  DracoQuantizationTransform,\n  DracoOctahedronTransform\n} from './draco-types';\n\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\nimport {getDracoSchema} from './utils/get-draco-schema';\n\n/**\n * @param topology - How triangle indices should be generated (mesh only)\n * @param attributeNameEntry\n * @param extraAttributes\n * @param quantizedAttributes\n * @param octahedronAttributes\n */\nexport type DracoParseOptions = {\n  topology?: 'triangle-list' | 'triangle-strip';\n  attributeNameEntry?: string;\n  extraAttributes?: {[uniqueId: string]: number};\n  quantizedAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n  octahedronAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n};\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\n\nconst DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\n\nconst INDEX_ITEM_SIZE = 4;\n\nexport default class DracoParser {\n  draco: Draco3D;\n  decoder: Decoder;\n  metadataQuerier: MetadataQuerier;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.decoder = new this.draco.Decoder();\n    this.metadataQuerier = new this.draco.MetadataQuerier();\n  }\n\n  /**\n   * Destroy draco resources\n   */\n  destroy(): void {\n    this.draco.destroy(this.decoder);\n    this.draco.destroy(this.metadataQuerier);\n  }\n\n  /**\n   * NOTE: caller must call `destroyGeometry` on the return value after using it\n   * @param arrayBuffer\n   * @param options\n   */\n  parseSync(arrayBuffer: ArrayBuffer, options: DracoParseOptions = {}): DracoMesh {\n    const buffer = new this.draco.DecoderBuffer();\n    buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n\n    this._disableAttributeTransforms(options);\n\n    const geometry_type = this.decoder.GetEncodedGeometryType(buffer);\n    const dracoGeometry =\n      geometry_type === this.draco.TRIANGULAR_MESH\n        ? new this.draco.Mesh()\n        : new this.draco.PointCloud();\n\n    try {\n      let dracoStatus;\n      switch (geometry_type) {\n        case this.draco.TRIANGULAR_MESH:\n          dracoStatus = this.decoder.DecodeBufferToMesh(buffer, dracoGeometry as Mesh);\n          break;\n\n        case this.draco.POINT_CLOUD:\n          dracoStatus = this.decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n          break;\n\n        default:\n          throw new Error('DRACO: Unknown geometry type.');\n      }\n\n      if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n        const message = `DRACO decompression failed: ${dracoStatus.error_msg()}`;\n        // console.error(message);\n        throw new Error(message);\n      }\n\n      const loaderData = this._getDracoLoaderData(dracoGeometry, geometry_type, options);\n\n      const geometry = this._getMeshData(dracoGeometry, loaderData, options);\n\n      const boundingBox = getMeshBoundingBox(geometry.attributes);\n\n      const schema = getDracoSchema(geometry.attributes, loaderData, geometry.indices);\n\n      const data: DracoMesh = {\n        loader: 'draco',\n        loaderData,\n        header: {\n          vertexCount: dracoGeometry.num_points(),\n          boundingBox\n        },\n        ...geometry,\n        schema\n      };\n      return data;\n    } finally {\n      this.draco.destroy(buffer);\n      if (dracoGeometry) {\n        this.draco.destroy(dracoGeometry);\n      }\n    }\n  }\n\n  // Draco specific \"loader data\"\n\n  /**\n   * Extract\n   * @param dracoGeometry\n   * @param geometry_type\n   * @param options\n   * @returns\n   */\n  _getDracoLoaderData(\n    dracoGeometry: Mesh | PointCloud,\n    geometry_type,\n    options: DracoParseOptions\n  ): DracoLoaderData {\n    const metadata = this._getTopLevelMetadata(dracoGeometry);\n    const attributes = this._getDracoAttributes(dracoGeometry, options);\n\n    return {\n      geometry_type,\n      num_attributes: dracoGeometry.num_attributes(),\n      num_points: dracoGeometry.num_points(),\n      num_faces: dracoGeometry instanceof this.draco.Mesh ? dracoGeometry.num_faces() : 0,\n      metadata,\n      attributes\n    };\n  }\n\n  /**\n   * Extract all draco provided information and metadata for each attribute\n   * @param dracoGeometry\n   * @param options\n   * @returns\n   */\n  _getDracoAttributes(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: DracoAttribute} {\n    const dracoAttributes: {[unique_id: number]: DracoAttribute} = {};\n\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      // Note: Draco docs do not seem clear on `GetAttribute` ids just being a zero-based index,\n      // but it does seems to work this way\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n\n      const metadata = this._getAttributeMetadata(dracoGeometry, attributeId);\n\n      dracoAttributes[dracoAttribute.unique_id()] = {\n        unique_id: dracoAttribute.unique_id(),\n        attribute_type: dracoAttribute.attribute_type(),\n        data_type: dracoAttribute.data_type(),\n        num_components: dracoAttribute.num_components(),\n\n        byte_offset: dracoAttribute.byte_offset(),\n        byte_stride: dracoAttribute.byte_stride(),\n        normalized: dracoAttribute.normalized(),\n        attribute_index: attributeId,\n\n        metadata\n      };\n\n      // Add transformation parameters for any attributes app wants untransformed\n      const quantization = this._getQuantizationTransform(dracoAttribute, options);\n      if (quantization) {\n        dracoAttributes[dracoAttribute.unique_id()].quantization_transform = quantization;\n      }\n\n      const octahedron = this._getOctahedronTransform(dracoAttribute, options);\n      if (octahedron) {\n        dracoAttributes[dracoAttribute.unique_id()].octahedron_transform = octahedron;\n      }\n    }\n\n    return dracoAttributes;\n  }\n\n  /**\n   * Get standard loaders.gl mesh category data\n   * Extracts the geometry from draco\n   * @param dracoGeometry\n   * @param options\n   */\n  _getMeshData(\n    dracoGeometry: Mesh | PointCloud,\n    loaderData: DracoLoaderData,\n    options: DracoParseOptions\n  ): MeshGeometry {\n    const attributes = this._getMeshAttributes(loaderData, dracoGeometry, options);\n\n    const positionAttribute = attributes.POSITION;\n    if (!positionAttribute) {\n      throw new Error('DRACO: No position attribute found.');\n    }\n\n    // For meshes, we need indices to define the faces.\n    if (dracoGeometry instanceof this.draco.Mesh) {\n      switch (options.topology) {\n        case 'triangle-strip':\n          return {\n            topology: 'triangle-strip',\n            mode: 4, // GL.TRIANGLES\n            attributes,\n            indices: {\n              value: this._getTriangleStripIndices(dracoGeometry),\n              size: 1\n            }\n          };\n        case 'triangle-list':\n        default:\n          return {\n            topology: 'triangle-list',\n            mode: 5, // GL.TRIANGLE_STRIP\n            attributes,\n            indices: {\n              value: this._getTriangleListIndices(dracoGeometry),\n              size: 1\n            }\n          };\n      }\n    }\n\n    // PointCloud - must come last as Mesh inherits from PointCloud\n    return {\n      topology: 'point-list',\n      mode: 0, // GL.POINTS\n      attributes\n    };\n  }\n\n  _getMeshAttributes(\n    loaderData: DracoLoaderData,\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[attributeName: string]: MeshAttribute} {\n    const attributes: {[key: string]: MeshAttribute} = {};\n\n    for (const loaderAttribute of Object.values(loaderData.attributes)) {\n      const attributeName = this._deduceAttributeName(loaderAttribute, options);\n      loaderAttribute.name = attributeName;\n      const {value, size} = this._getAttributeValues(dracoGeometry, loaderAttribute);\n      attributes[attributeName] = {\n        value,\n        size,\n        byteOffset: loaderAttribute.byte_offset,\n        byteStride: loaderAttribute.byte_stride,\n        normalized: loaderAttribute.normalized\n      };\n    }\n\n    return attributes;\n  }\n\n  // MESH INDICES EXTRACTION\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleListIndices(dracoGeometry: Mesh) {\n    // Example on how to retrieve mesh and attributes.\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    const byteLength = numIndices * INDEX_ITEM_SIZE;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      this.decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n      return new Uint32Array(this.draco.HEAPF32.buffer, ptr, numIndices).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n  }\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleStripIndices(dracoGeometry: Mesh) {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      /* const numStrips = */ this.decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n      return getUint32Array(dracoArray);\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  /**\n   *\n   * @param dracoGeometry\n   * @param dracoAttribute\n   * @param attributeName\n   */\n  _getAttributeValues(\n    dracoGeometry: Mesh | PointCloud,\n    attribute: DracoAttribute\n  ): {value: TypedArray; size: number} {\n    const TypedArrayCtor = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[attribute.data_type];\n    const numComponents = attribute.num_components;\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n\n    const byteLength = numValues * TypedArrayCtor.BYTES_PER_ELEMENT;\n    const dataType = getDracoDataType(this.draco, TypedArrayCtor);\n\n    let value: TypedArray;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attribute.attribute_index);\n      this.decoder.GetAttributeDataArrayForAllPoints(\n        dracoGeometry,\n        dracoAttribute,\n        dataType,\n        byteLength,\n        ptr\n      );\n      value = new TypedArrayCtor(this.draco.HEAPF32.buffer, ptr, numValues).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n\n    return {value, size: numComponents};\n  }\n\n  // Attribute names\n\n  /** \n   * DRACO does not store attribute names - We need to deduce an attribute name\n   * for each attribute\n  _getAttributeNames(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: string} {\n    const attributeNames: {[unique_id: number]: string} = {};\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n      const attributeName = this._deduceAttributeName(dracoAttribute, options);\n      attributeNames[attributeName] = attributeName;\n    }\n    return attributeNames;\n  }\n   */\n\n  /**\n   * Deduce an attribute name.\n   * @note DRACO does not save attribute names, just general type (POSITION, COLOR)\n   * to help optimize compression. We generate GLTF compatible names for the Draco-recognized\n   * types\n   * @param attributeData\n   */\n  _deduceAttributeName(attribute: DracoAttribute, options: DracoParseOptions): string {\n    // Deduce name based on application provided map\n    const uniqueId = attribute.unique_id;\n    for (const [attributeName, attributeUniqueId] of Object.entries(\n      options.extraAttributes || {}\n    )) {\n      if (attributeUniqueId === uniqueId) {\n        return attributeName;\n      }\n    }\n\n    // Deduce name based on attribute type\n    const thisAttributeType = attribute.attribute_type;\n    for (const dracoAttributeConstant in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n      const attributeType = this.draco[dracoAttributeConstant];\n      if (attributeType === thisAttributeType) {\n        // TODO - Return unique names if there multiple attributes per type\n        // (e.g. multiple TEX_COORDS or COLORS)\n        return DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[dracoAttributeConstant];\n      }\n    }\n\n    // Look up in metadata\n    // TODO - shouldn't this have priority?\n    const entryName = options.attributeNameEntry || 'name';\n    if (attribute.metadata[entryName]) {\n      return attribute.metadata[entryName].string;\n    }\n\n    // Attribute of \"GENERIC\" type, we need to assign some name\n    return `CUSTOM_ATTRIBUTE_${uniqueId}`;\n  }\n\n  // METADATA EXTRACTION\n\n  /** Get top level metadata */\n  _getTopLevelMetadata(dracoGeometry: Mesh | PointCloud) {\n    const dracoMetadata = this.decoder.GetMetadata(dracoGeometry);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /** Get per attribute metadata */\n  _getAttributeMetadata(dracoGeometry: Mesh | PointCloud, attributeId: number) {\n    const dracoMetadata = this.decoder.GetAttributeMetadata(dracoGeometry, attributeId);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /**\n   * Extract metadata field values\n   * @param dracoMetadata\n   * @returns\n   */\n  _getDracoMetadata(dracoMetadata: Metadata): {[entry: string]: DracoMetadataEntry} {\n    // The not so wonderful world of undocumented Draco APIs :(\n    if (!dracoMetadata || !dracoMetadata.ptr) {\n      return {};\n    }\n    const result = {};\n    const numEntries = this.metadataQuerier.NumEntries(dracoMetadata);\n    for (let entryIndex = 0; entryIndex < numEntries; entryIndex++) {\n      const entryName = this.metadataQuerier.GetEntryName(dracoMetadata, entryIndex);\n      result[entryName] = this._getDracoMetadataField(dracoMetadata, entryName);\n    }\n    return result;\n  }\n\n  /**\n   * Extracts possible values for one metadata entry by name\n   * @param dracoMetadata\n   * @param entryName\n   */\n  _getDracoMetadataField(dracoMetadata: Metadata, entryName: string): DracoMetadataEntry {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      // Draco metadata fields can hold int32 arrays\n      this.metadataQuerier.GetIntEntryArray(dracoMetadata, entryName, dracoArray);\n      const intArray = getInt32Array(dracoArray);\n      return {\n        int: this.metadataQuerier.GetIntEntry(dracoMetadata, entryName),\n        string: this.metadataQuerier.GetStringEntry(dracoMetadata, entryName),\n        double: this.metadataQuerier.GetDoubleEntry(dracoMetadata, entryName),\n        intArray\n      };\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  // QUANTIZED ATTRIBUTE SUPPORT (NO DECOMPRESSION)\n\n  /** Skip transforms for specific attribute types */\n  _disableAttributeTransforms(options: DracoParseOptions) {\n    const {quantizedAttributes = [], octahedronAttributes = []} = options;\n    const skipAttributes = [...quantizedAttributes, ...octahedronAttributes];\n    for (const dracoAttributeName of skipAttributes) {\n      this.decoder.SkipAttributeTransform(this.draco[dracoAttributeName]);\n    }\n  }\n\n  /**\n   * Extract (and apply?) Position Transform\n   * @todo not used\n   */\n  _getQuantizationTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoQuantizationTransform | null {\n    const {quantizedAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const skip = quantizedAttributes.map((type) => this.decoder[type]).includes(attribute_type);\n    if (skip) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits(),\n            range: transform.range(),\n            min_values: new Float32Array([1, 2, 3]).map((i) => transform.min_value(i))\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  _getOctahedronTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoOctahedronTransform | null {\n    const {octahedronAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const octahedron = octahedronAttributes\n      .map((type) => this.decoder[type])\n      .includes(attribute_type);\n    if (octahedron) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits()\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  // HELPERS\n}\n\n/**\n * Get draco specific data type by TypedArray constructor type\n * @param attributeType\n * @returns draco specific data type\n */\nfunction getDracoDataType(draco: Draco3D, attributeType: any): draco_DataType {\n  switch (attributeType) {\n    case Float32Array:\n      return draco.DT_FLOAT32;\n    case Int8Array:\n      return draco.DT_INT8;\n    case Int16Array:\n      return draco.DT_INT16;\n    case Int32Array:\n      return draco.DT_INT32;\n    case Uint8Array:\n      return draco.DT_UINT8;\n    case Uint16Array:\n      return draco.DT_UINT16;\n    case Uint32Array:\n      return draco.DT_UINT32;\n    default:\n      return draco.DT_INVALID;\n  }\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getInt32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getUint32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n"],"mappings":"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"}