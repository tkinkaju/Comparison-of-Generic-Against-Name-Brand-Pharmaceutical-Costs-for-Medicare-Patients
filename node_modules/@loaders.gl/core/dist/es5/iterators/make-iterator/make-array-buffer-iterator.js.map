{"version":3,"file":"make-array-buffer-iterator.js","names":["makeArrayBufferIterator","DEFAULT_CHUNK_SIZE","arrayBuffer","options","chunkSize","byteOffset","byteLength","chunkByteLength","Math","min","chunk","ArrayBuffer","sourceArray","Uint8Array","chunkArray","set"],"sources":["../../../../src/iterators/make-iterator/make-array-buffer-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big ArrayBuffer into chunks and yields them one-by-one\n * @param blob ArrayBuffer to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeArrayBufferIterator(\n  arrayBuffer: ArrayBuffer,\n  options: IteratorOptions = {}\n): Iterable<ArrayBuffer> {\n  const {chunkSize = DEFAULT_CHUNK_SIZE} = options;\n\n  let byteOffset = 0;\n\n  while (byteOffset < arrayBuffer.byteLength) {\n    // Create a chunk of the right size\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    // Copy data from the big chunk\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    // yield the chunk\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n"],"mappings":";;;;;;;;wCAUiBA,uBAAuB;AARxC,IAAMC,kBAAkB,GAAG,GAAG,GAAG,IAAI;;AAQ9B,SAAUD,uBAAuB,CACtCE,WAAwB;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;IAAA;MAAA;QAAA;UACxBC,OAAwB,2DAAG,CAAC,CAAC;UAAA,qBAEYA,OAAO,CAAzCC,SAAS,EAATA,SAAS,mCAAGH,kBAAkB;UAEjCI,UAAU,GAAG,CAAC;QAAA;UAAA,MAEXA,UAAU,GAAGH,WAAW,CAACI,UAAU;YAAA;YAAA;UAAA;UAElCC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAACP,WAAW,CAACI,UAAU,GAAGD,UAAU,EAAED,SAAS,CAAC;UAC1EM,KAAK,GAAG,IAAIC,WAAW,CAACJ,eAAe,CAAC;UAGxCK,WAAW,GAAG,IAAIC,UAAU,CAACX,WAAW,EAAEG,UAAU,EAAEE,eAAe,CAAC;UACtEO,UAAU,GAAG,IAAID,UAAU,CAACH,KAAK,CAAC;UACxCI,UAAU,CAACC,GAAG,CAACH,WAAW,CAAC;;UAG3BP,UAAU,IAAIE,eAAe;UAAC;UAC9B,OAAMG,KAAK;QAAA;UAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"}