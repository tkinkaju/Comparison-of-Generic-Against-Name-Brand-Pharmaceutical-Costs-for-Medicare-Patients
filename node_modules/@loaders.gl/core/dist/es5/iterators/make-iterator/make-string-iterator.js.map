{"version":3,"file":"make-string-iterator.js","names":["makeStringIterator","DEFAULT_CHUNK_SIZE","string","options","chunkSize","offset","textEncoder","TextEncoder","length","chunkLength","Math","min","chunk","slice","encode"],"sources":["../../../../src/iterators/make-iterator/make-string-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big string into chunks and yields them one-by-one as ArrayBuffers\n * @param blob string to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeStringIterator(\n  string: string,\n  options?: IteratorOptions\n): Iterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  const textEncoder = new TextEncoder();\n  while (offset < string.length) {\n    // Create a chunk of the right size\n    const chunkLength = Math.min(string.length - offset, chunkSize);\n    const chunk = string.slice(offset, offset + chunkLength);\n    offset += chunkLength;\n\n    // yield an ArrayBuffer chunk\n    yield textEncoder.encode(chunk);\n  }\n}\n"],"mappings":";;;;;;;;wCAUiBA,kBAAkB;AARnC,IAAMC,kBAAkB,GAAG,GAAG,GAAG,IAAI;;AAQ9B,SAAUD,kBAAkB,CACjCE,MAAc,EACdC,OAAyB;EAAA;EAAA;IAAA;MAAA;QAAA;UAEnBC,SAAS,GAAG,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,SAAS,KAAIH,kBAAkB;UAEtDI,MAAM,GAAG,CAAC;UACRC,WAAW,GAAG,IAAIC,WAAW,EAAE;QAAA;UAAA,MAC9BF,MAAM,GAAGH,MAAM,CAACM,MAAM;YAAA;YAAA;UAAA;UAErBC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAACT,MAAM,CAACM,MAAM,GAAGH,MAAM,EAAED,SAAS,CAAC;UACzDQ,KAAK,GAAGV,MAAM,CAACW,KAAK,CAACR,MAAM,EAAEA,MAAM,GAAGI,WAAW,CAAC;UACxDJ,MAAM,IAAII,WAAW;;UAAC;UAGtB,OAAMH,WAAW,CAACQ,MAAM,CAACF,KAAK,CAAC;QAAA;UAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"}