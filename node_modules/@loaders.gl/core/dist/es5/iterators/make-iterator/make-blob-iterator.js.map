{"version":3,"file":"make-blob-iterator.js","names":["DEFAULT_CHUNK_SIZE","makeBlobIterator","blob","options","chunkSize","offset","size","end","slice","arrayBuffer","chunk"],"sources":["../../../../src/iterators/make-iterator/make-blob-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB â€” biggest value that keeps UI responsive\n\n/**\n * Returns an iterator that breaks a big Blob into chunks and yields them one-by-one\n * @param blob Blob or File object\n * @param options\n * @param options.chunkSize\n */\nexport async function* makeBlobIterator(\n  blob: Blob,\n  options?: IteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  while (offset < blob.size) {\n    const end = offset + chunkSize;\n\n    const chunk = await blob.slice(offset, end).arrayBuffer();\n\n    offset = end;\n    yield chunk;\n  }\n}\n"],"mappings":";;;;;;;;;;AAEA,IAAMA,kBAAkB,GAAG,IAAI,GAAG,IAAI;;AAAC,SAQhBC,gBAAgB;EAAA;AAAA;AAAA;EAAA,gFAAhC,iBACLC,IAAU,EACVC,OAAyB;IAAA;IAAA;MAAA;QAAA;UAAA;YAEnBC,SAAS,GAAG,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,SAAS,KAAIJ,kBAAkB;YAEtDK,MAAM,GAAG,CAAC;UAAA;YAAA,MACPA,MAAM,GAAGH,IAAI,CAACI,IAAI;cAAA;cAAA;YAAA;YACjBC,GAAG,GAAGF,MAAM,GAAGD,SAAS;YAAA;YAAA,0CAEVF,IAAI,CAACM,KAAK,CAACH,MAAM,EAAEE,GAAG,CAAC,CAACE,WAAW,EAAE;UAAA;YAAnDC,KAAK;YAEXL,MAAM,GAAGE,GAAG;YAAC;YACb,OAAMG,KAAK;UAAA;YAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAEd;EAAA;AAAA"}