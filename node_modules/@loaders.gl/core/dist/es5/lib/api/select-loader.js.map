{"version":3,"file":"select-loader.js","names":["EXT_PATTERN","selectLoader","data","loaders","options","context","validHTTPResponse","loader","selectLoaderSync","nothrow","isBlob","slice","arrayBuffer","Error","getNoValidLoaderMessage","Array","isArray","normalizeLoader","candidateLoaders","concat","ignoreRegisteredLoaders","push","getRegisteredLoaders","normalizeLoaders","selectLoaderInternal","getResourceUrlAndType","url","type","testUrl","reason","mimeType","findLoaderByMIMEType","findLoaderByUrl","findLoaderByInitialBytes","getFirstCharacters","fallbackMimeType","log","name","Response","status","message","path","filename","firstCharacters","match","exec","extension","findLoaderByExtension","toLowerCase","extensions","loaderExtension","mimeTypes","includes","id","testDataAgainstText","ArrayBuffer","isView","testDataAgainstBinary","buffer","byteOffset","testText","tests","some","test","startsWith","testBinary","compareArrayBuffers","byteLength","magic","getMagicString","length","dataView","DataView","i","String","fromCharCode","getUint8"],"sources":["../../../../src/lib/api/select-loader.ts"],"sourcesContent":["import type {LoaderContext, LoaderOptions, Loader} from '@loaders.gl/loader-utils';\nimport {compareArrayBuffers, path} from '@loaders.gl/loader-utils';\nimport {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {log} from '../utils/log';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {getRegisteredLoaders} from './register-loaders';\nimport {isBlob} from '../../javascript-utils/is-type';\n\nconst EXT_PATTERN = /\\.([^.]+)$/;\n\n// TODO - Need a variant that peeks at streams for parseInBatches\n// TODO - Detect multiple matching loaders? Use heuristics to grade matches?\n// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?\n\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport async function selectLoader(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[] | Loader = [],\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<Loader | null> {\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  // First make a sync attempt, disabling exceptions\n  let loader = selectLoaderSync(data, loaders, {...options, nothrow: true}, context);\n  if (loader) {\n    return loader;\n  }\n\n  // For Blobs and Files, try to asynchronously read a small initial slice and test again with that\n  // to see if we can detect by initial content\n  if (isBlob(data)) {\n    data = await (data as Blob).slice(0, 10).arrayBuffer();\n    loader = selectLoaderSync(data, loaders, options, context);\n  }\n\n  // no loader available\n  if (!loader && !options?.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport function selectLoaderSync(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[] | Loader = [],\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Loader | null {\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  // eslint-disable-next-line complexity\n  // if only a single loader was provided (not as array), force its use\n  // TODO - Should this behavior be kept and documented?\n  if (loaders && !Array.isArray(loaders)) {\n    // TODO - remove support for legacy loaders\n    return normalizeLoader(loaders);\n  }\n\n  // Build list of candidate loaders that will be searched in order for a match\n  let candidateLoaders: Loader[] = [];\n  // First search supplied loaders\n  if (loaders) {\n    candidateLoaders = candidateLoaders.concat(loaders);\n  }\n  // Then fall back to registered loaders\n  if (!options?.ignoreRegisteredLoaders) {\n    candidateLoaders.push(...getRegisteredLoaders());\n  }\n\n  // TODO - remove support for legacy loaders\n  normalizeLoaders(candidateLoaders);\n\n  const loader = selectLoaderInternal(data, candidateLoaders, options, context);\n\n  // no loader available\n  if (!loader && !options?.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n/** Implements loaders selection logic */\n// eslint-disable-next-line complexity\nfunction selectLoaderInternal(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[],\n  options?: LoaderOptions,\n  context?: LoaderContext\n) {\n  const {url, type} = getResourceUrlAndType(data);\n\n  const testUrl = url || context?.url;\n\n  let loader: Loader | null = null;\n  let reason: string = '';\n\n  // if options.mimeType is supplied, it takes precedence\n  if (options?.mimeType) {\n    loader = findLoaderByMIMEType(loaders, options?.mimeType);\n    reason = `match forced by supplied MIME type ${options?.mimeType}`;\n  }\n\n  // Look up loader by url\n  loader = loader || findLoaderByUrl(loaders, testUrl);\n  reason = reason || (loader ? `matched url ${testUrl}` : '');\n\n  // Look up loader by mime type\n  loader = loader || findLoaderByMIMEType(loaders, type);\n  reason = reason || (loader ? `matched MIME type ${type}` : '');\n\n  // Look for loader via initial bytes (Note: not always accessible (e.g. Response, stream, async iterator)\n  loader = loader || findLoaderByInitialBytes(loaders, data);\n  reason = reason || (loader ? `matched initial data ${getFirstCharacters(data)}` : '');\n\n  // Look up loader by fallback mime type\n  loader = loader || findLoaderByMIMEType(loaders, options?.fallbackMimeType);\n  reason = reason || (loader ? `matched fallback MIME type ${type}` : '');\n\n  if (reason) {\n    log.log(1, `selectLoader selected ${loader?.name}: ${reason}.`);\n  }\n\n  return loader;\n}\n\n/** Check HTTP Response */\nfunction validHTTPResponse(data: any): boolean {\n  // HANDLE HTTP status\n  if (data instanceof Response) {\n    // 204 - NO CONTENT. This handles cases where e.g. a tile server responds with 204 for a missing tile\n    if (data.status === 204) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** Generate a helpful message to help explain why loader selection failed. */\nfunction getNoValidLoaderMessage(data): string {\n  const {url, type} = getResourceUrlAndType(data);\n\n  let message = 'No valid loader found (';\n  message += url ? `${path.filename(url)}, ` : 'no url provided, ';\n  message += `MIME type: ${type ? `\"${type}\"` : 'not provided'}, `;\n  // First characters are only accessible when called on data (string or arrayBuffer).\n  const firstCharacters: string = data ? getFirstCharacters(data) : '';\n  message += firstCharacters ? ` first bytes: \"${firstCharacters}\"` : 'first bytes: not available';\n  message += ')';\n  return message;\n}\n\nfunction normalizeLoaders(loaders: Loader[]): void {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\n// TODO - Would be nice to support http://example.com/file.glb?parameter=1\n// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\nfunction findLoaderByUrl(loaders: Loader[], url?: string): Loader | null {\n  // Get extension\n  const match = url && EXT_PATTERN.exec(url);\n  const extension = match && match[1];\n  return extension ? findLoaderByExtension(loaders, extension) : null;\n}\n\nfunction findLoaderByExtension(loaders: Loader[], extension: string): Loader | null {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByMIMEType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n\n    // Support referring to loaders using the \"unregistered tree\"\n    // https://en.wikipedia.org/wiki/Media_type#Unregistered_tree\n    if (mimeType === `application/x.${loader.id}`) {\n      return loader;\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByInitialBytes(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testDataAgainstText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      // Typed Arrays can have offsets into underlying buffer\n      if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testDataAgainstBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n    // TODO Handle streaming case (requires creating a new AsyncIterator)\n  }\n  return null;\n}\n\nfunction testDataAgainstText(data, loader) {\n  if (loader.testText) {\n    return loader.testText(data);\n  }\n\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some((test) => data.startsWith(test));\n}\n\nfunction testDataAgainstBinary(data, byteOffset, loader) {\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some((test) => testBinary(data, byteOffset, loader, test));\n}\n\nfunction testBinary(data, byteOffset, loader, test) {\n  if (test instanceof ArrayBuffer) {\n    return compareArrayBuffers(test, data, test.byteLength);\n  }\n  switch (typeof test) {\n    case 'function':\n      return test(data, loader);\n\n    case 'string':\n      // Magic bytes check: If `test` is a string, check if binary data starts with that strings\n      const magic = getMagicString(data, byteOffset, test.length);\n      return test === magic;\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data, length: number = 5) {\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    // Typed Arrays can have offsets into underlying buffer\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength < byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n"],"mappings":"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"}