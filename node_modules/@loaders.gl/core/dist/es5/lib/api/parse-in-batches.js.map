{"version":3,"file":"parse-in-batches.js","names":["parseInBatches","data","loaders","options","context","assert","Array","isArray","isLoaderObject","undefined","getResourceUrlAndType","url","selectLoader","loader","normalizeOptions","getLoaderContext","parse","parseWithLoaderInBatches","makeMetadataBatchIterator","iterator","metadataBatch","parseToOutputIterator","outputIterator","metadata","batchType","_loader","_context","bytesUsed","parseChunkInBatches","concatenateArrayBuffersAsync","transformedIterator","arrayBuffer","mimeType","mimeTypes","parsedData","batch","shape","length","getAsyncIterableFromData","inputIterator","applyInputTransforms","transforms","iteratorChain","transformBatches"],"sources":["../../../../src/lib/api/parse-in-batches.ts"],"sourcesContent":["import type {Batch} from '@loaders.gl/schema';\nimport type {\n  BatchableDataType,\n  Loader,\n  LoaderWithParser,\n  LoaderContext,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {assert, concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getLoaderContext} from '../loader-utils/loader-context';\nimport {getAsyncIterableFromData} from '../loader-utils/get-data';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\n// Ensure `parse` is available in context if loader falls back to `parse`\nimport {parse} from './parse';\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport async function parseInBatches(\n  data: BatchableDataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>> {\n  assert(!context || typeof context === 'object'); // parseInBatches no longer accepts final url\n\n  // Signature: parseInBatches(data, options, url) - Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader and normalizes it\n  // Note - only uses URL and contentType for streams and iterator inputs\n  const loader = await selectLoader(data as ArrayBuffer, loaders as Loader[], options);\n  // Note: if options.nothrow was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    // @ts-ignore\n    return null;\n  }\n\n  // Normalize options\n  // @ts-ignore\n  options = normalizeOptions(options, loader, loaders, url);\n  // @ts-ignore\n  context = getLoaderContext(\n    // @ts-ignore\n    {url, parseInBatches, parse, loaders: loaders as Loader[]},\n    options,\n    context\n  );\n\n  return await parseWithLoaderInBatches(loader as LoaderWithParser, data, options, context);\n}\n\n/**\n * Loader has been selected and context has been prepared, see if we need to emit a metadata batch\n */\nasync function parseWithLoaderInBatches(\n  loader: LoaderWithParser,\n  data: BatchableDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n): Promise<AsyncIterable<any>> {\n  const outputIterator = await parseToOutputIterator(loader, data, options, context);\n\n  // Generate metadata batch if requested\n  if (!options.metadata) {\n    return outputIterator;\n  }\n\n  const metadataBatch = {\n    batchType: 'metadata',\n    metadata: {\n      _loader: loader,\n      _context: context\n    },\n    // Populate with some default fields to avoid crashing\n    data: [],\n    bytesUsed: 0\n  };\n\n  async function* makeMetadataBatchIterator(iterator) {\n    yield metadataBatch;\n    yield* iterator;\n  }\n\n  return makeMetadataBatchIterator(outputIterator);\n}\n\n/**\n * Prep work is done, now it is time to start parsing into an output operator\n * The approach depends on which parse function the loader exposes\n * `parseInBatches` (preferred), `parse` (fallback)\n */\nasync function parseToOutputIterator(\n  loader: LoaderWithParser,\n  data: BatchableDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n): Promise<AsyncIterable<any>> {\n  // Get an iterator from the input\n  const inputIterator = await getAsyncIterableFromData(data, options);\n\n  // Apply any iterator transforms (options.transforms)\n  const transformedIterator = await applyInputTransforms(inputIterator, options?.transforms || []);\n\n  // If loader supports parseInBatches, we are done\n  if (loader.parseInBatches) {\n    return loader.parseInBatches(transformedIterator, options, context);\n  }\n\n  // Fallback: load atomically using `parse` concatenating input iterator into single chunk\n  async function* parseChunkInBatches() {\n    const arrayBuffer = await concatenateArrayBuffersAsync(transformedIterator);\n    // Call `parse` instead of `loader.parse` to ensure we can call workers etc.\n    const parsedData = await parse(\n      arrayBuffer,\n      loader,\n      // TODO - Hack: supply loaders MIME type to ensure we match it\n      {...options, mimeType: loader.mimeTypes[0]},\n      context\n    );\n    // yield a single batch, the output from loader.parse()\n    // TODO - run through batch builder to apply options etc...\n    const batch: Batch = {\n      mimeType: loader.mimeTypes[0],\n      shape: Array.isArray(parsedData) ? 'row-table' : 'unknown',\n      batchType: 'data',\n      data: parsedData,\n      length: Array.isArray(parsedData) ? parsedData.length : 1\n    };\n    yield batch;\n  }\n\n  return parseChunkInBatches();\n}\n\ntype TransformBatches = (\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n) => AsyncIterable<ArrayBuffer>;\n\n/**\n * Create an iterator chain with any transform iterators (crypto, decompression)\n * @param inputIterator\n * @param options\n */\nasync function applyInputTransforms(\n  inputIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  transforms: TransformBatches[] = []\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  let iteratorChain = inputIterator;\n  for await (const transformBatches of transforms) {\n    iteratorChain = transformBatches(iteratorChain);\n  }\n  return iteratorChain;\n}\n"],"mappings":"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"}