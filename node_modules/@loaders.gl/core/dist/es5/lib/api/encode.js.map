{"version":3,"file":"encode.js","names":["encode","data","writer","options","globalOptions","getLoaderOptions","canEncodeWithWorker","processOnWorker","encodeSync","encodeText","TextEncoder","encodeInBatches","batches","chunks","batch","push","concatenateArrayBuffers","isBrowser","encodeURLtoURL","tmpInputFilename","getTemporaryFilename","writeFile","tmpOutputFilename","outputFilename","fetchFile","response","arrayBuffer","Error","text","TextDecoder","decode","dataIterator","getIterator","inputUrl","outputUrl","resolvePath","table","start","end","length","filename"],"sources":["../../../../src/lib/api/encode.ts"],"sourcesContent":["import {Writer, LoaderOptions, canEncodeWithWorker} from '@loaders.gl/loader-utils';\nimport {processOnWorker} from '@loaders.gl/worker-utils';\nimport {concatenateArrayBuffers, resolvePath} from '@loaders.gl/loader-utils';\nimport {isBrowser} from '@loaders.gl/loader-utils';\nimport {writeFile} from '../fetch/write-file';\nimport {fetchFile} from '../fetch/fetch-file';\nimport {getLoaderOptions} from './loader-options';\n\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport async function encode(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): Promise<ArrayBuffer> {\n  const globalOptions = getLoaderOptions();\n  options = {...globalOptions, ...options};\n  if (canEncodeWithWorker(writer, options)) {\n    return await processOnWorker(writer, data, options);\n  }\n\n  // TODO Merge default writer options with options argument like it is done in load module.\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  if (writer.encodeText) {\n    return new TextEncoder().encode(await writer.encodeText(data, options));\n  }\n\n  if (writer.encodeInBatches) {\n    // Create an iterator representing the data\n    // TODO - Assumes this is a table\n    const batches = encodeInBatches(data, writer, options);\n\n    // Concatenate the output\n    const chunks: any[] = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    // @ts-ignore\n    return concatenateArrayBuffers(...chunks);\n  }\n\n  if (!isBrowser && writer.encodeURLtoURL) {\n    // TODO - how to generate filenames with correct extensions?\n    const tmpInputFilename = getTemporaryFilename('input');\n    await writeFile(tmpInputFilename, data);\n\n    const tmpOutputFilename = getTemporaryFilename('output');\n\n    const outputFilename = await encodeURLtoURL(\n      tmpInputFilename,\n      tmpOutputFilename,\n      writer,\n      options\n    );\n\n    const response = await fetchFile(outputFilename);\n    return response.arrayBuffer();\n  }\n\n  throw new Error('Writer could not encode data');\n}\n\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport function encodeSync(data: any, writer: Writer, options?: LoaderOptions): ArrayBuffer {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\n\n/**\n * Encode loaded data to text using the specified Writer\n * @note This is a convenience function not intended for production use on large input data.\n * It is not optimized for performance. Data maybe converted from text to binary and back.\n * @throws if the writer does not generate text output\n */\nexport async function encodeText(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): Promise<string> {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n\n  if (writer.text && (writer.encode || writer.encodeInBatches)) {\n    const arrayBuffer = await encode(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  throw new Error('Writer could not encode data as text');\n}\n\n/**\n * Encode loaded data into a sequence (iterator) of binary ArrayBuffers using the specified Writer.\n */\nexport function encodeInBatches(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): AsyncIterable<ArrayBuffer> {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\n\n/**\n * Encode data stored in a file (on disk) to another file.\n * @note Node.js only. This function enables using command-line converters as \"writers\".\n */\nexport async function encodeURLtoURL(\n  inputUrl,\n  outputUrl,\n  writer: Writer,\n  options\n): Promise<string> {\n  inputUrl = resolvePath(inputUrl);\n  outputUrl = resolvePath(outputUrl);\n  if (isBrowser || !writer.encodeURLtoURL) {\n    throw new Error();\n  }\n  const outputFilename = await writer.encodeURLtoURL(inputUrl, outputUrl, options);\n  return outputFilename;\n}\n\n/**\n * @todo TODO - this is an unacceptable hack!!!\n */\nfunction getIterator(data) {\n  const dataIterator = [{table: data, start: 0, end: data.length}];\n  return dataIterator;\n}\n\n/**\n * @todo Move to utils\n */\nfunction getTemporaryFilename(filename: string): string {\n  return `/tmp/${filename}`;\n}\n"],"mappings":"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"}