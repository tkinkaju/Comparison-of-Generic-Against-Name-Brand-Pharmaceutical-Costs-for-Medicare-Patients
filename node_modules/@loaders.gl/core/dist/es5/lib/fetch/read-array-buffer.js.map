{"version":3,"file":"read-array-buffer.js","names":["readArrayBuffer","file","start","length","fs","_readToArrayBuffer","Blob","slice","readBlob","blob","Promise","resolve","reject","fileReader","FileReader","onload","event","target","result","onerror","error","readAsArrayBuffer"],"sources":["../../../../src/lib/fetch/read-array-buffer.ts"],"sourcesContent":["//\nimport {fs} from '@loaders.gl/loader-utils';\n\n/**\n * Reads a chunk from a random access file\n * @param file\n * @param start\n * @param length\n * @returns\n */\nexport async function readArrayBuffer(\n  file: Blob | ArrayBuffer | string | number,\n  start: number,\n  length: number\n): Promise<ArrayBuffer> {\n  if (typeof file === 'number') {\n    return await fs._readToArrayBuffer(file, start, length);\n  }\n  // TODO - we can do better for ArrayBuffer and string\n  if (!(file instanceof Blob)) {\n    file = new Blob([file]);\n  }\n  const slice = file.slice(start, start + length);\n  return await readBlob(slice);\n}\n\n/**\n * Read a slice of a Blob or File, without loading the entire file into memory\n * The trick when reading File objects is to read successive \"slices\" of the File\n * Per spec https://w3c.github.io/FileAPI/, slicing a File only updates the start and end fields\n * Actually reading from file happens in `readAsArrayBuffer`\n * @param blob to read\n */\nexport async function readBlob(blob: Blob): Promise<ArrayBuffer> {\n  return await new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = (event: ProgressEvent<FileReader>) =>\n      resolve(event?.target?.result as ArrayBuffer);\n    // TODO - reject with a proper Error\n    fileReader.onerror = (error: ProgressEvent<FileReader>) => reject(error);\n    fileReader.readAsArrayBuffer(blob);\n  });\n}\n"],"mappings":";;;;;;;;;;AACA;AAA4C,SAStBA,eAAe;EAAA;AAAA;AAAA;EAAA,6EAA9B,iBACLC,IAA0C,EAC1CC,KAAa,EACbC,MAAc;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAEV,OAAOF,IAAI,KAAK,QAAQ;cAAA;cAAA;YAAA;YAAA;YAAA,OACbG,eAAE,CAACC,kBAAkB,CAACJ,IAAI,EAAEC,KAAK,EAAEC,MAAM,CAAC;UAAA;YAAA;UAAA;YAGzD,IAAI,EAAEF,IAAI,YAAYK,IAAI,CAAC,EAAE;cAC3BL,IAAI,GAAG,IAAIK,IAAI,CAAC,CAACL,IAAI,CAAC,CAAC;YACzB;YACMM,KAAK,GAAGN,IAAI,CAACM,KAAK,CAACL,KAAK,EAAEA,KAAK,GAAGC,MAAM,CAAC;YAAA;YAAA,OAClCK,QAAQ,CAACD,KAAK,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC7B;EAAA;AAAA;AAAA,SASqBC,QAAQ;EAAA;AAAA;AAAA;EAAA,sEAAvB,kBAAwBC,IAAU;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAC1B,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;cAC5C,IAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE;cACnCD,UAAU,CAACE,MAAM,GAAG,UAACC,KAAgC;gBAAA;gBAAA,OACnDL,OAAO,CAACK,KAAK,aAALA,KAAK,wCAALA,KAAK,CAAEC,MAAM,kDAAb,cAAeC,MAAM,CAAgB;cAAA;cAE/CL,UAAU,CAACM,OAAO,GAAG,UAACC,KAAgC;gBAAA,OAAKR,MAAM,CAACQ,KAAK,CAAC;cAAA;cACxEP,UAAU,CAACQ,iBAAiB,CAACZ,IAAI,CAAC;YACpC,CAAC,CAAC;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACH;EAAA;AAAA"}