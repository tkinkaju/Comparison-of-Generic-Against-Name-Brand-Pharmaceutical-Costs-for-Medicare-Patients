{"version":3,"file":"loader-context.js","names":["getLoaderContext","context","options","previousContext","resolvedContext","fetch","getFetchFunction","Array","isArray","loaders","getLoadersFromContext","candidateLoaders","contextLoaders","length"],"sources":["../../../../src/lib/loader-utils/loader-context.ts"],"sourcesContent":["import type {Loader, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\nimport {getFetchFunction} from './option-utils';\n\n/**\n * \"sub\" loaders invoked by other loaders get a \"context\" injected on `this`\n * The context will inject core methods like `parse` and contain information\n * about loaders and options passed in to the top-level `parse` call.\n *\n * @param context\n * @param options\n * @param previousContext\n */\nexport function getLoaderContext(\n  context: Omit<LoaderContext, 'fetch'> & Partial<Pick<LoaderContext, 'fetch'>>,\n  options?: LoaderOptions,\n  previousContext: LoaderContext | null = null\n): LoaderContext {\n  // For recursive calls, we already have a context\n  // TODO - add any additional loaders to context?\n  if (previousContext) {\n    return previousContext;\n  }\n\n  const resolvedContext: LoaderContext = {\n    fetch: getFetchFunction(options, context),\n    ...context\n  };\n\n  // Recursive loading does not use single loader\n  if (!Array.isArray(resolvedContext.loaders)) {\n    resolvedContext.loaders = null;\n  }\n\n  return resolvedContext;\n}\n\n// eslint-disable-next-line complexity\nexport function getLoadersFromContext(\n  loaders: Loader[] | Loader | undefined,\n  context?: LoaderContext\n) {\n  // A single non-array loader is force selected, but only on top-level (context === null)\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  // Create a merged list\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  // If no loaders, return null to look in globally registered loaders\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n"],"mappings":";;;;;;;;;;AACA;AAAgD;AAAA;AAWzC,SAASA,gBAAgB,CAC9BC,OAA6E,EAC7EC,OAAuB,EAER;EAAA,IADfC,eAAqC,uEAAG,IAAI;EAI5C,IAAIA,eAAe,EAAE;IACnB,OAAOA,eAAe;EACxB;EAEA,IAAMC,eAA8B;IAClCC,KAAK,EAAE,IAAAC,6BAAgB,EAACJ,OAAO,EAAED,OAAO;EAAC,GACtCA,OAAO,CACX;;EAGD,IAAI,CAACM,KAAK,CAACC,OAAO,CAACJ,eAAe,CAACK,OAAO,CAAC,EAAE;IAC3CL,eAAe,CAACK,OAAO,GAAG,IAAI;EAChC;EAEA,OAAOL,eAAe;AACxB;;AAGO,SAASM,qBAAqB,CACnCD,OAAsC,EACtCR,OAAuB,EACvB;EAEA,IAAI,CAACA,OAAO,IAAIQ,OAAO,IAAI,CAACF,KAAK,CAACC,OAAO,CAACC,OAAO,CAAC,EAAE;IAClD,OAAOA,OAAO;EAChB;;EAGA,IAAIE,gBAAgB;EACpB,IAAIF,OAAO,EAAE;IACXE,gBAAgB,GAAGJ,KAAK,CAACC,OAAO,CAACC,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;EACjE;EACA,IAAIR,OAAO,IAAIA,OAAO,CAACQ,OAAO,EAAE;IAC9B,IAAMG,cAAc,GAAGL,KAAK,CAACC,OAAO,CAACP,OAAO,CAACQ,OAAO,CAAC,GAAGR,OAAO,CAACQ,OAAO,GAAG,CAACR,OAAO,CAACQ,OAAO,CAAC;IAC3FE,gBAAgB,GAAGA,gBAAgB,8CAAOA,gBAAgB,oCAAKC,cAAc,KAAIA,cAAc;EACjG;EAEA,OAAOD,gBAAgB,IAAIA,gBAAgB,CAACE,MAAM,GAAGF,gBAAgB,GAAG,IAAI;AAC9E"}