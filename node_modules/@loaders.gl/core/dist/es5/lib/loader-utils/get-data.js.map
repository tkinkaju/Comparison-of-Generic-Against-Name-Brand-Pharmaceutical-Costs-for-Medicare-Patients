{"version":3,"file":"get-data.js","names":["ERR_DATA","getArrayBufferOrStringFromDataSync","data","loader","options","text","isBuffer","buffer","ArrayBuffer","arrayBuffer","binary","textDecoder","TextDecoder","decode","isView","byteLength","length","byteOffset","slice","Error","getArrayBufferOrStringFromData","isArrayBuffer","isBlob","makeResponse","isResponse","response","checkResponse","isReadableStream","makeIterator","isIterable","isAsyncIterable","concatenateArrayBuffersAsync","getAsyncIterableFromData","isIterator","body","Symbol","asyncIterator","getIterableFromData","getReadableStream","oneChunk","iterator"],"sources":["../../../../src/lib/loader-utils/get-data.ts"],"sourcesContent":["import type {\n  DataType,\n  SyncDataType,\n  BatchableDataType,\n  Loader,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {\n  isResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isBlob,\n  isBuffer\n} from '../../javascript-utils/is-type';\nimport {makeIterator} from '../../iterators/make-iterator/make-iterator';\nimport {checkResponse, makeResponse} from '../utils/response-utils';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(\n  data: SyncDataType,\n  loader: Loader,\n  options: LoaderOptions\n): ArrayBuffer | string {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (isBuffer(data)) {\n    // @ts-ignore\n    data = data.buffer;\n  }\n\n  if (data instanceof ArrayBuffer) {\n    const arrayBuffer = data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  // We may need to handle offsets\n  if (ArrayBuffer.isView(data)) {\n    // TextDecoder is invoked on typed arrays and will handle offsets\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(data);\n    }\n\n    let arrayBuffer = data.buffer;\n\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\n    // TODO - this is a potentially unnecessary copy\n    const byteLength = data.byteLength || data.length;\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(\n  data: DataType,\n  loader: Loader,\n  options: LoaderOptions\n): Promise<ArrayBuffer | string> {\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data as string | ArrayBuffer, loader, options);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isBlob(data)) {\n    data = await makeResponse(data);\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    await checkResponse(response);\n    return loader.binary ? await response.arrayBuffer() : await response.text();\n  }\n\n  if (isReadableStream(data)) {\n    // @ts-expect-error TS2559 options type\n    data = makeIterator(data as ReadableStream, options);\n  }\n\n  if (isIterable(data) || isAsyncIterable(data)) {\n    // Assume arrayBuffer iterator - attempt to concatenate\n    return concatenateArrayBuffersAsync(data as AsyncIterable<ArrayBuffer>);\n  }\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIterableFromData(\n  data: BatchableDataType,\n  options: LoaderOptions\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  if (isIterator(data)) {\n    return data as AsyncIterable<ArrayBuffer>;\n  }\n\n  if (isResponse(data)) {\n    const response = data as Response;\n    // Note Since this function is not async, we currently can't load error message, just status\n    await checkResponse(response);\n    // TODO - bug in polyfill, body can be a Promise under Node.js\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    const body = await response.body;\n    // TODO - body can be null?\n    return makeIterator(body as ReadableStream<Uint8Array>, options as any);\n  }\n\n  if (isBlob(data) || isReadableStream(data)) {\n    return makeIterator(data as Blob | ReadableStream, options as any);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIterableFromData(data);\n}\n\nexport async function getReadableStream(data: BatchableDataType): Promise<ReadableStream> {\n  if (isReadableStream(data)) {\n    return data as ReadableStream;\n  }\n  if (isResponse(data)) {\n    // @ts-ignore\n    return data.body;\n  }\n  const response = await makeResponse(data);\n  // @ts-ignore\n  return response.body;\n}\n\n// HELPERS\n\nfunction getIterableFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer;\n    })();\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return (function* oneChunk() {\n      yield data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"],"mappings":"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"}