{"version":3,"file":"read-file.js","names":["isBrowser","resolvePath","fs","toArrayBuffer","assert","readFileSync","url","options","buffer","nothrow"],"sources":["../../../../src/lib/fetch/read-file.ts"],"sourcesContent":["// File read\nimport {isBrowser, resolvePath, fs, toArrayBuffer} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\n\n// TODO - this is not tested\n// const isDataURL = (url) => url.startsWith('data:');\n\n/**\n * In a few cases (data URIs, node.js) \"files\" can be read synchronously\n */\nexport function readFileSync(url: string, options: object = {}) {\n  url = resolvePath(url);\n\n  // Only support this if we can also support sync data URL decoding in browser\n  // if (isDataURL(url)) {\n  //   return decodeDataUri(url);\n  // }\n\n  if (!isBrowser) {\n    const buffer = fs.readFileSync(url, options);\n    return typeof buffer !== 'string' ? toArrayBuffer(buffer) : buffer;\n  }\n\n  // @ts-ignore\n  if (!options.nothrow) {\n    // throw new Error('Cant load URI synchronously');\n    assert(false);\n  }\n\n  return null;\n}\n"],"mappings":";AACA,SAAQA,SAAS,EAAEC,WAAW,EAAEC,EAAE,EAAEC,aAAa,QAAO,0BAA0B;AAClF,SAAQC,MAAM,QAAO,0BAA0B;;AAQ/C,OAAO,SAASC,YAAY,CAACC,GAAW,EAAwB;EAAA,IAAtBC,OAAe,uEAAG,CAAC,CAAC;EAC5DD,GAAG,GAAGL,WAAW,CAACK,GAAG,CAAC;;EAOtB,IAAI,CAACN,SAAS,EAAE;IACd,MAAMQ,MAAM,GAAGN,EAAE,CAACG,YAAY,CAACC,GAAG,EAAEC,OAAO,CAAC;IAC5C,OAAO,OAAOC,MAAM,KAAK,QAAQ,GAAGL,aAAa,CAACK,MAAM,CAAC,GAAGA,MAAM;EACpE;;EAGA,IAAI,CAACD,OAAO,CAACE,OAAO,EAAE;IAEpBL,MAAM,CAAC,KAAK,CAAC;EACf;EAEA,OAAO,IAAI;AACb"}