{"version":3,"file":"resource-utils.js","names":["isResponse","isBlob","parseMIMEType","parseMIMETypeFromURL","QUERY_STRING_PATTERN","getResourceUrlAndType","resource","url","stripQueryString","contentTypeHeader","headers","get","type","name","getResourceContentLength","size","length","ArrayBuffer","byteLength","isView","replace"],"sources":["../../../../src/lib/utils/resource-utils.ts"],"sourcesContent":["import {isResponse, isBlob} from '../../javascript-utils/is-type';\nimport {parseMIMEType, parseMIMETypeFromURL} from './mime-type-utils';\n\nconst QUERY_STRING_PATTERN = /\\?.*/;\n\n/**\n * Returns an object with `url` and (MIME) `type` fields\n * If it cannot determine url or type, the corresponding value will be an empty string\n *\n * @param resource Any type, but only Responses, string URLs and data URLs are processed\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceUrlAndType(resource: any): {url: string; type: string} {\n  // If resource is a response, it contains the information directly\n  if (isResponse(resource)) {\n    const url = stripQueryString(resource.url || '');\n    const contentTypeHeader = resource.headers.get('content-type') || '';\n    return {\n      url,\n      type: parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(url)\n    };\n  }\n\n  // If the resource is a Blob or a File (subclass of Blob)\n  if (isBlob(resource)) {\n    return {\n      // File objects have a \"name\" property. Blob objects don't have any\n      // url (name) information\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      // TODO this could mess up data URL but it doesn't matter as it is just used for inference\n      url: stripQueryString(resource),\n      // If a data url\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  // Unknown\n  return {\n    url: '',\n    type: ''\n  };\n}\n\n/**\n  * Returns (approximate) content length for a resource if it can be determined.\n  * Returns -1 if content length cannot be determined.\n  * @param resource\n\n  * @note string parameters are NOT assumed to be URLs\n  */\nexport function getResourceContentLength(resource: any): number {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    // TODO - handle data URL?\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}\n"],"mappings":"AAAA,SAAQA,UAAU,EAAEC,MAAM,QAAO,gCAAgC;AACjE,SAAQC,aAAa,EAAEC,oBAAoB,QAAO,mBAAmB;AAErE,MAAMC,oBAAoB,GAAG,MAAM;;AAUnC,OAAO,SAASC,qBAAqB,CAACC,QAAa,EAA+B;EAEhF,IAAIN,UAAU,CAACM,QAAQ,CAAC,EAAE;IACxB,MAAMC,GAAG,GAAGC,gBAAgB,CAACF,QAAQ,CAACC,GAAG,IAAI,EAAE,CAAC;IAChD,MAAME,iBAAiB,GAAGH,QAAQ,CAACI,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE;IACpE,OAAO;MACLJ,GAAG;MACHK,IAAI,EAAEV,aAAa,CAACO,iBAAiB,CAAC,IAAIN,oBAAoB,CAACI,GAAG;IACpE,CAAC;EACH;;EAGA,IAAIN,MAAM,CAACK,QAAQ,CAAC,EAAE;IACpB,OAAO;MAGLC,GAAG,EAAEC,gBAAgB,CAACF,QAAQ,CAACO,IAAI,IAAI,EAAE,CAAC;MAC1CD,IAAI,EAAEN,QAAQ,CAACM,IAAI,IAAI;IACzB,CAAC;EACH;EAEA,IAAI,OAAON,QAAQ,KAAK,QAAQ,EAAE;IAChC,OAAO;MAELC,GAAG,EAAEC,gBAAgB,CAACF,QAAQ,CAAC;MAE/BM,IAAI,EAAET,oBAAoB,CAACG,QAAQ;IACrC,CAAC;EACH;;EAGA,OAAO;IACLC,GAAG,EAAE,EAAE;IACPK,IAAI,EAAE;EACR,CAAC;AACH;;AASA,OAAO,SAASE,wBAAwB,CAACR,QAAa,EAAU;EAC9D,IAAIN,UAAU,CAACM,QAAQ,CAAC,EAAE;IACxB,OAAOA,QAAQ,CAACI,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;EACjD;EACA,IAAIT,MAAM,CAACK,QAAQ,CAAC,EAAE;IACpB,OAAOA,QAAQ,CAACS,IAAI;EACtB;EACA,IAAI,OAAOT,QAAQ,KAAK,QAAQ,EAAE;IAEhC,OAAOA,QAAQ,CAACU,MAAM;EACxB;EACA,IAAIV,QAAQ,YAAYW,WAAW,EAAE;IACnC,OAAOX,QAAQ,CAACY,UAAU;EAC5B;EACA,IAAID,WAAW,CAACE,MAAM,CAACb,QAAQ,CAAC,EAAE;IAChC,OAAOA,QAAQ,CAACY,UAAU;EAC5B;EACA,OAAO,CAAC,CAAC;AACX;AAEA,SAASV,gBAAgB,CAACD,GAAG,EAAE;EAC7B,OAAOA,GAAG,CAACa,OAAO,CAAChB,oBAAoB,EAAE,EAAE,CAAC;AAC9C"}