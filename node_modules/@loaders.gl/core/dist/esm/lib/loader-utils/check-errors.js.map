{"version":3,"file":"check-errors.js","names":["checkFetchResponseStatus","response","ok","errorMessage","status","statusText","text","getErrorText","error","Error","checkFetchResponseStatusSync","matches","match","slice"],"sources":["../../../../src/lib/loader-utils/check-errors.ts"],"sourcesContent":["export async function checkFetchResponseStatus(response) {\n  if (!response.ok) {\n    let errorMessage = `fetch failed ${response.status} ${response.statusText}`;\n    try {\n      const text = await response.text();\n      if (text) {\n        errorMessage += `: ${getErrorText(text)}`;\n      }\n    } catch (error) {\n      // ignore error\n    }\n    throw new Error(errorMessage);\n  }\n}\n\nexport function checkFetchResponseStatusSync(response) {\n  if (!response.ok) {\n    throw new Error(`fetch failed ${response.status}`);\n  }\n}\n\nfunction getErrorText(text) {\n  // Look for HTML error texts\n  const matches = text.match('<pre>(.*)</pre>');\n  return matches ? matches[1] : ` ${text.slice(0, 10)}...`;\n}\n"],"mappings":"AAAA,OAAO,eAAeA,wBAAwB,CAACC,QAAQ,EAAE;EACvD,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,IAAIC,YAAY,0BAAmBF,QAAQ,CAACG,MAAM,cAAIH,QAAQ,CAACI,UAAU,CAAE;IAC3E,IAAI;MACF,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,EAAE;MAClC,IAAIA,IAAI,EAAE;QACRH,YAAY,gBAASI,YAAY,CAACD,IAAI,CAAC,CAAE;MAC3C;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IAEhB;IACA,MAAM,IAAIC,KAAK,CAACN,YAAY,CAAC;EAC/B;AACF;AAEA,OAAO,SAASO,4BAA4B,CAACT,QAAQ,EAAE;EACrD,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAM,IAAIO,KAAK,wBAAiBR,QAAQ,CAACG,MAAM,EAAG;EACpD;AACF;AAEA,SAASG,YAAY,CAACD,IAAI,EAAE;EAE1B,MAAMK,OAAO,GAAGL,IAAI,CAACM,KAAK,CAAC,iBAAiB,CAAC;EAC7C,OAAOD,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC,cAAOL,IAAI,CAACO,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,QAAK;AAC1D"}