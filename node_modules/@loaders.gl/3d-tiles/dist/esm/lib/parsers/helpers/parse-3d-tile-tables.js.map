{"version":3,"file":"parse-3d-tile-tables.js","names":["getStringFromArrayBuffer","SIZEOF_UINT32","DEPRECATION_WARNING","parse3DTileTablesHeaderSync","tile","arrayBuffer","byteOffset","view","DataView","batchLength","header","featureTableJsonByteLength","getUint32","featureTableBinaryByteLength","batchTableJsonByteLength","batchTableBinaryByteLength","console","warn","parse3DTileTablesSync","options","parse3DTileFeatureTable","parse3DTileBatchTable","featureTableJson","BATCH_LENGTH","featureTableString","JSON","parse","featureTableBinary","Uint8Array","batchTableString","batchTableJson","batchTableBinary"],"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-tables.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {getStringFromArrayBuffer} from './parse-utils';\n\nconst SIZEOF_UINT32 = 4;\nconst DEPRECATION_WARNING = 'b3dm tile in legacy format.';\n\n// eslint-disable-next-line max-statements\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  const view = new DataView(arrayBuffer);\n  let batchLength;\n\n  tile.header = tile.header || {};\n\n  let featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  // First legacy header format - [batchLength] [batchTableByteLength] ('batchTableJsonByteLength': JSON starts with a quotation mark or the glTF magic)\n  // Second legacy format - [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength] (Second legacy format is similar as first but here we check 'batchTableBinaryByteLength' instead)\n  // Current header format - [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength]\n  // First byte will be 0x22 or 0x67. The minimum uint32 expected is 0x22000000 = 570425344 = 570MB.\n  if (batchTableJsonByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32 * 2;\n    batchLength = featureTableJsonByteLength;\n    batchTableJsonByteLength = featureTableBinaryByteLength;\n    batchTableBinaryByteLength = 0;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n\n    console.warn(DEPRECATION_WARNING); // eslint-disable-line\n  } else if (batchTableBinaryByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32;\n    batchLength = batchTableJsonByteLength;\n    batchTableJsonByteLength = featureTableJsonByteLength;\n    batchTableBinaryByteLength = featureTableBinaryByteLength;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n\n    console.warn(DEPRECATION_WARNING); // eslint-disable-line\n  }\n\n  tile.header.featureTableJsonByteLength = featureTableJsonByteLength;\n  tile.header.featureTableBinaryByteLength = featureTableBinaryByteLength;\n  tile.header.batchTableJsonByteLength = batchTableJsonByteLength;\n  tile.header.batchTableBinaryByteLength = batchTableBinaryByteLength;\n  tile.header.batchLength = batchLength;\n\n  return byteOffset;\n}\n\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  const {featureTableJsonByteLength, featureTableBinaryByteLength, batchLength} = tile.header;\n\n  tile.featureTableJson = {\n    BATCH_LENGTH: batchLength || 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    const featureTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      featureTableJsonByteLength\n    );\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n  byteOffset += featureTableJsonByteLength;\n\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n\n  /*\n  const featureTable = parseFeatureTable(featureTableJson, featureTableBinary);\n\n  const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n  featureTable.featuresLength = batchLength;\n  */\n\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  const {batchTableJsonByteLength, batchTableBinaryByteLength} = tile.header;\n\n  if (batchTableJsonByteLength > 0) {\n    const batchTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}\n"],"mappings":"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"}