{"version":3,"file":"parse-3d-tile-point-cloud.js","names":["DracoLoader","GL","Vector3","Tile3DFeatureTable","Tile3DBatchTable","parse3DTileHeaderSync","parse3DTileTablesHeaderSync","parse3DTileTablesSync","normalize3DTileColorAttribute","normalize3DTileNormalAttribute","normalize3DTilePositionAttribute","parsePointCloud3DTile","tile","arrayBuffer","byteOffset","options","context","initializeTile","featureTable","batchTable","parsePointCloudTables","parseDraco","parsePositions","parseColors","parseNormals","attributes","positions","colors","normals","batchIds","isQuantized","isTranslucent","isRGB565","isOctEncoded16P","featureTableJson","featureTableBinary","pointsLength","getGlobalProperty","Number","isFinite","Error","featuresLength","pointCount","rtcCenter","FLOAT","parseBatchIds","hasProperty","getPropertyArray","UNSIGNED_SHORT","quantizedRange","quantizedVolumeScale","quantizedVolumeOffset","UNSIGNED_BYTE","constantRGBA","batchFeatureLength","batchTableJson","batchTableBinary","dracoBuffer","dracoFeatureTableProperties","dracoBatchTableProperties","batchTableDraco","extensions","properties","featureTableDraco","getExtension","dracoByteOffset","dracoByteLength","byteLength","slice","hasPositions","POSITION","hasColors","RGB","RGBA","hasNormals","NORMAL","hasBatchIds","BATCH_ID","dracoData","buffer","featureTableProperties","batchTableProperties","dequantizeInShader","loadDraco","parse","dracoOptions","draco","extraAttributes","data","decodedPositions","value","decodedColors","COLOR_0","decodedNormals","decodedBatchIds","isQuantizedDraco","quantization","isOctEncodedDraco","range","minValues","quantizationBits","octEncodedRange","batchTableAttributes","attributeName","Object","keys","toLowerCase","undefined"],"sources":["../../../../src/lib/parsers/parse-3d-tile-point-cloud.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {GL} from '@loaders.gl/math';\nimport {Vector3} from '@math.gl/core';\n\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\nimport {parse3DTileTablesHeaderSync, parse3DTileTablesSync} from './helpers/parse-3d-tile-tables';\nimport {normalize3DTileColorAttribute} from './helpers/normalize-3d-tile-colors';\nimport {normalize3DTileNormalAttribute} from './helpers/normalize-3d-tile-normals';\nimport {normalize3DTilePositionAttribute} from './helpers/normalize-3d-tile-positions';\n\nexport async function parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  initializeTile(tile);\n\n  const {featureTable, batchTable} = parsePointCloudTables(tile);\n\n  await parseDraco(tile, featureTable, batchTable, options, context);\n\n  parsePositions(tile, featureTable, options);\n  parseColors(tile, featureTable, batchTable);\n  parseNormals(tile, featureTable);\n\n  return byteOffset;\n}\n\nfunction initializeTile(tile) {\n  // Initialize point cloud tile defaults\n  tile.attributes = {\n    positions: null,\n    colors: null,\n    normals: null,\n    batchIds: null\n  };\n  tile.isQuantized = false;\n  tile.isTranslucent = false;\n  tile.isRGB565 = false;\n  tile.isOctEncoded16P = false;\n}\n\nfunction parsePointCloudTables(tile) {\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n\n  const pointsLength = featureTable.getGlobalProperty('POINTS_LENGTH');\n  if (!Number.isFinite(pointsLength)) {\n    throw new Error('POINTS_LENGTH must be defined');\n  }\n  featureTable.featuresLength = pointsLength;\n\n  tile.featuresLength = pointsLength;\n  tile.pointsLength = pointsLength;\n  tile.pointCount = pointsLength;\n\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n\n  const batchTable = parseBatchIds(tile, featureTable);\n\n  return {featureTable, batchTable};\n}\n\nfunction parsePositions(tile, featureTable, options) {\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      const positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n\n      tile.isQuantized = true;\n      tile.quantizedRange = (1 << 16) - 1;\n\n      tile.quantizedVolumeScale = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_SCALE',\n        GL.FLOAT,\n        3\n      );\n      if (!tile.quantizedVolumeScale) {\n        throw new Error('QUANTIZED_VOLUME_SCALE must be defined for quantized positions.');\n      }\n\n      tile.quantizedVolumeOffset = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_OFFSET',\n        GL.FLOAT,\n        3\n      );\n      if (!tile.quantizedVolumeOffset) {\n        throw new Error('QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.');\n      }\n\n      tile.attributes.positions = normalize3DTilePositionAttribute(tile, positions, options);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n\nfunction parseColors(tile, featureTable, batchTable) {\n  if (!tile.attributes.colors) {\n    let colors = null;\n    if (featureTable.hasProperty('RGBA')) {\n      colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasProperty('RGB565')) {\n      colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n\n    tile.attributes.colors = normalize3DTileColorAttribute(tile, colors, batchTable);\n  }\n\n  if (featureTable.hasProperty('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n}\n\nfunction parseNormals(tile, featureTable) {\n  if (!tile.attributes.normals) {\n    let normals = null;\n    if (featureTable.hasProperty('NORMAL')) {\n      normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('NORMAL_OCT16P')) {\n      normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n\n    tile.attributes.normals = normalize3DTileNormalAttribute(tile, normals);\n  }\n}\n\nfunction parseBatchIds(tile, featureTable) {\n  let batchTable: Tile3DBatchTable | null = null;\n  if (!tile.batchIds && featureTable.hasProperty('BATCH_ID')) {\n    tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n\n    if (tile.batchIds) {\n      const batchFeatureLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n      if (!batchFeatureLength) {\n        throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n      }\n      const {batchTableJson, batchTableBinary} = tile;\n      batchTable = new Tile3DBatchTable(batchTableJson, batchTableBinary, batchFeatureLength);\n    }\n  }\n  return batchTable;\n}\n\n// eslint-disable-next-line complexity\nasync function parseDraco(tile, featureTable, batchTable, options, context) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n  const batchTableDraco =\n    tile.batchTableJson &&\n    tile.batchTableJson.extensions &&\n    tile.batchTableJson.extensions['3DTILES_draco_point_compression'];\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n    if (!dracoFeatureTableProperties || !Number.isFinite(dracoByteOffset) || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = tile.featureTableBinary.slice(dracoByteOffset, dracoByteOffset + dracoByteLength);\n\n    tile.hasPositions = Number.isFinite(dracoFeatureTableProperties.POSITION);\n    tile.hasColors =\n      Number.isFinite(dracoFeatureTableProperties.RGB) ||\n      Number.isFinite(dracoFeatureTableProperties.RGBA);\n    tile.hasNormals = Number.isFinite(dracoFeatureTableProperties.NORMAL);\n    tile.hasBatchIds = Number.isFinite(dracoFeatureTableProperties.BATCH_ID);\n    tile.isTranslucent = Number.isFinite(dracoFeatureTableProperties.RGBA);\n  }\n\n  if (!dracoBuffer) {\n    return true;\n  }\n\n  const dracoData = {\n    buffer: dracoBuffer,\n    properties: {...dracoFeatureTableProperties, ...dracoBatchTableProperties},\n    featureTableProperties: dracoFeatureTableProperties,\n    batchTableProperties: dracoBatchTableProperties,\n    dequantizeInShader: false\n  };\n\n  return await loadDraco(tile, dracoData, options, context);\n}\n\n// eslint-disable-next-line complexity, max-statements\nexport async function loadDraco(tile, dracoData, options, context) {\n  const {parse} = context;\n  const dracoOptions = {\n    ...options,\n    draco: {\n      ...options.draco,\n      extraAttributes: dracoData.batchTableProperties || {}\n    }\n  };\n\n  // The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n\n  const data = await parse(dracoData.buffer, DracoLoader, dracoOptions);\n\n  const decodedPositions = data.attributes.POSITION && data.attributes.POSITION.value;\n  const decodedColors = data.attributes.COLOR_0 && data.attributes.COLOR_0.value;\n  const decodedNormals = data.attributes.NORMAL && data.attributes.NORMAL.value;\n  const decodedBatchIds = data.attributes.BATCH_ID && data.attributes.BATCH_ID.value;\n  const isQuantizedDraco = decodedPositions && data.attributes.POSITION.value.quantization;\n  const isOctEncodedDraco = decodedNormals && data.attributes.NORMAL.value.quantization;\n  if (isQuantizedDraco) {\n    // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n    // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n    const quantization = data.POSITION.data.quantization;\n    const range = quantization.range;\n    tile.quantizedVolumeScale = new Vector3(range, range, range);\n    tile.quantizedVolumeOffset = new Vector3(quantization.minValues);\n    tile.quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n    tile.isQuantizedDraco = true;\n  }\n  if (isOctEncodedDraco) {\n    tile.octEncodedRange = (1 << data.NORMAL.data.quantization.quantizationBits) - 1.0;\n    tile.isOctEncodedDraco = true;\n  }\n\n  // Extra batch table attributes\n  const batchTableAttributes = {};\n  if (dracoData.batchTableProperties) {\n    for (const attributeName of Object.keys(dracoData.batchTableProperties)) {\n      if (data.attributes[attributeName] && data.attributes[attributeName].value) {\n        batchTableAttributes[attributeName.toLowerCase()] = data.attributes[attributeName].value;\n      }\n    }\n  }\n\n  tile.attributes = {\n    positions: decodedPositions,\n    colors: normalize3DTileColorAttribute(tile, decodedColors, undefined),\n    normals: decodedNormals,\n    batchIds: decodedBatchIds,\n    ...batchTableAttributes\n  };\n}\n\n// TODO - this is the remaining code from Cesium's parser\n/*\n  const batchTable = new Tile3DBatchTable(tile);\n\n  // parseDracoBuffer(tile, featureTable, batchTable);\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n/*\n\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n\n\n  if (!tile.colors) {\n    if (featureTable.hasProperty('RGBA')) {\n      tile.colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      tile.colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasPropertry('RGB565')) {\n      tile.colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n  }\n\n  if (!tile.attributes.normals) {\n    if (featureTable.getPropertry('NORMAL')) {\n      tile.attributes.normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.getProperty('NORMAL_OCT16P')) {\n      tile.attributes.normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n  }\n\n  if (!tile.batchIds) {\n    if (featureTable.hasProperty('BATCH_ID')) {\n      tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n\n  if (featureTable.getPropertry('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n\n  if (tile.batchIds) {\n    const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n    if (!defined(batchLength)) {\n      throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n    }\n\n    if (defined(batchTableBinary)) {\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n    }\n\n    if (defined(pointCloud._batchTableLoaded)) {\n      pointCloud._batchTableLoaded(batchLength, batchTableJson, batchTableBinary);\n    }\n  }\n\n  // If points are not batched and there are per-point properties, use these properties for styling purposes\n  var styleableProperties;\n  if (!hasBatchIds && defined(batchTableBinary)) {\n    tile.styleableProperties = Cesium3DTileBatchTable.getBinaryProperties(\n      pointsLength,\n      batchTableJson,\n      batchTableBinary\n    );\n  }\n\n  tile.draco = draco;\n}\n\n// Separate parsing and decoding of Draco\nexport function parseDracoBuffer(tile, featureTable, batchTable) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n\n  const batchTableDraco = batchTable.getExtension('3DTILES_draco_point_compression');\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n    if (!dracoFeatureTableProperties || !dracoByteOffset || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = arraySlice(\n      featureTableBinary,\n      dracoByteOffset,\n      dracoByteOffset + dracoByteLength\n    );\n    tile.hasPositions = dracoFeatureTableProperties.POSITION;\n    tile.hasColors = dracoFeatureTableProperties.RGB || dracoFeatureTableProperties.RGBA;\n    tile.hasNormals = dracoFeatureTableProperties.NORMAL;\n    tile.hasBatchIds = dracoFeatureTableProperties.BATCH_ID;\n    tile.isTranslucent = dracoFeatureTableProperties.RGBA;\n  }\n\n  if (dracoBuffer) {\n    tile.draco = {\n      buffer: dracoBuffer,\n      properties: {...dracoFeatureTableProperties, ...dracoBatchTableProperties},\n      featureTableProperties: dracoFeatureTableProperties,\n      batchTableProperties: dracoBatchTableProperties,\n      dequantizeInShader: false\n    };\n\n    tile.decodingState = DECODING_STATE.NEEDS_DECODE;\n  }\n}\n\n/*\nfunction decodeDraco(tile, context) {\n  if (tile.decodingState === DECODING_STATE.READY) {\n    return false;\n  }\n  if (tile.decodingState === DECODING_STATE.NEEDS_DECODE) {\n    var parsedContent = tile._parsedContent;\n    var draco = parsedContent.draco;\n    var decodePromise = DracoLoader.decodePointCloud(draco, context);\n    if (defined(decodePromise)) {\n      tile.decodingState = DECODING_STATE.DECODING;\n      decodePromise.then(function(result) {\n        tile.decodingState = DECODING_STATE.READY;\n        var decodedPositions = defined(result.POSITION) ? result.POSITION.array : undefined;\n        var decodedRgb = defined(result.RGB) ? result.RGB.array : undefined;\n        var decodedRgba = defined(result.RGBA) ? result.RGBA.array : undefined;\n        var decodedNormals = defined(result.NORMAL) ? result.NORMAL.array : undefined;\n        var decodedBatchIds = defined(result.BATCH_ID) ? result.BATCH_ID.array : undefined;\n        var isQuantizedDraco = defined(decodedPositions) && defined(result.POSITION.data.quantization);\n        var isOctEncodedDraco = defined(decodedNormals) && defined(result.NORMAL.data.quantization);\n        if (isQuantizedDraco) {\n          // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n          // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n          var quantization = result.POSITION.data.quantization;\n          var range = quantization.range;\n          tile._quantizedVolumeScale = Cartesian3.fromElements(range, range, range);\n          tile._quantizedVolumeOffset = Cartesian3.unpack(quantization.minValues);\n          tile._quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n          tile._isQuantizedDraco = true;\n        }\n        if (isOctEncodedDraco) {\n          tile._octEncodedRange = (1 << result.NORMAL.data.quantization.quantizationBits) - 1.0;\n          tile._isOctEncodedDraco = true;\n        }\n        var styleableProperties = parsedContent.styleableProperties;\n        var batchTableProperties = draco.batchTableProperties;\n        for (var name in batchTableProperties) {\n          if (batchTableProperties.hasOwnProperty(name)) {\n            var property = result[name];\n            if (!defined(styleableProperties)) {\n              styleableProperties = {};\n            }\n            styleableProperties[name] = {\n              typedArray : property.array,\n              componentCount : property.data.componentsPerAttribute\n            };\n          }\n        }\n        parsedContent.positions = defaultValue(decodedPositions, parsedContent.positions);\n        parsedContent.colors = defaultValue(defaultValue(decodedRgba, decodedRgb), parsedContent.colors);\n        parsedContent.normals = defaultValue(decodedNormals, parsedContent.normals);\n        parsedContent.batchIds = defaultValue(decodedBatchIds, parsedContent.batchIds);\n        parsedContent.styleableProperties = styleableProperties;\n      }).otherwise(function(error) {\n        tile.decodingState = DECODING_STATE.FAILED;\n        tile._readyPromise.reject(error);\n      });\n    }\n  }\n  return true;\n}\n*/\n"],"mappings":"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"}