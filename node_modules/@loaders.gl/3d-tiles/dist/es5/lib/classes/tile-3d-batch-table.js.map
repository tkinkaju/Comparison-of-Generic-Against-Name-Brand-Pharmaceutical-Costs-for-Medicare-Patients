{"version":3,"file":"tile-3d-batch-table.js","names":["defined","x","undefined","clone","y","IGNORED_PROPERTY_FIELDS","HIERARCHY","extensions","extras","Tile3DBatchTableParser","json","binary","featureCount","options","assert","_extensions","_properties","propertyName","_binaryProperties","_initializeBinaryProperties","_hierarchy","initializeHierarchy","extensionName","batchId","className","_checkBatchId","result","traverseHierarchy","hierarchy","instanceIndex","classId","classIds","instanceClass","classes","name","getExactClassName","_hasPropertyInHierarchy","results","length","propertyNames","Object","keys","push","_getPropertyNamesInHierarchy","binaryProperty","_getBinaryProperty","propertyValues","hierarchyProperty","_getHierarchyProperty","value","_setBinaryProperty","_setHierarchyProperty","Array","valid","Error","index","unpack","typedArray","pack","binaryProperties","property","_initializeBinaryProperty","tile3DAccessor","type","accessor","createTypedArrayFromAccessor","buffer","byteOffset","values","componentCount","size","unpacker","packer","instances","hasOwnProperty","indexOf","indexInClass","classIndexes","batchTable"],"sources":["../../../../src/lib/classes/tile-3d-batch-table.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\nimport {createTypedArrayFromAccessor} from './helpers/tile-3d-accessor-utils';\nimport {initializeHierarchy, traverseHierarchy} from './tile-3d-batch-table-hierarchy';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nconst clone = (x, y) => x;\n\n// These top level fields in the batch table json are not properties\nconst IGNORED_PROPERTY_FIELDS = {\n  HIERARCHY: true, // Deprecated HIERARCHY property\n  extensions: true,\n  extras: true\n};\n\n// The size of this array equals the maximum instance count among all loaded tiles, which has the potential to be large.\nexport default class Tile3DBatchTableParser {\n  json;\n  binary;\n  featureCount;\n  _extensions;\n  // Copy all top-level property fields from the json object, ignoring special fields\n  _properties;\n  _binaryProperties;\n  // TODO: hierarchy support is only partially implemented and not tested\n  _hierarchy;\n\n  constructor(json, binary, featureCount, options = {}) {\n    assert(featureCount >= 0);\n    this.json = json || {};\n    this.binary = binary;\n    this.featureCount = featureCount;\n\n    this._extensions = this.json?.extensions || {};\n\n    // Copy all top-level property fields from the json object, ignoring special fields\n    this._properties = {};\n    for (const propertyName in this.json) {\n      if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n        this._properties[propertyName] = this.json[propertyName];\n      }\n    }\n\n    this._binaryProperties = this._initializeBinaryProperties();\n\n    // TODO: hierarchy support is only partially implemented and not tested\n    if (options['3DTILES_batch_table_hierarchy']) {\n      this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n    }\n  }\n\n  getExtension(extensionName) {\n    return this.json && this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  memorySizeInBytes(): number {\n    return 0;\n  }\n\n  isClass(batchId, className: string): boolean {\n    this._checkBatchId(batchId);\n    assert(typeof className === 'string', className);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      // PERFORMANCE_IDEA : cache results in the ancestor classes\n      //   to speed up this check if this area becomes a hotspot\n      // PERFORMANCE_IDEA : treat class names as integers for faster comparisons\n      const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n        const classId = hierarchy.classIds[instanceIndex];\n        const instanceClass = hierarchy.classes[classId];\n        return instanceClass.name === className;\n      });\n      return defined(result);\n    }\n\n    return false;\n  }\n\n  isExactClass(batchId, className) {\n    assert(typeof className === 'string', className);\n\n    return this.getExactClassName(batchId) === className;\n  }\n\n  getExactClassName(batchId) {\n    this._checkBatchId(batchId);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const classId = this._hierarchy.classIds[batchId];\n      const instanceClass = this._hierarchy.classes[classId];\n      return instanceClass.name;\n    }\n\n    return undefined;\n  }\n\n  hasProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n  }\n\n  getPropertyNames(batchId, results) {\n    this._checkBatchId(batchId);\n\n    results = defined(results) ? results : [];\n    results.length = 0;\n\n    const propertyNames = Object.keys(this._properties);\n    results.push(...propertyNames);\n\n    if (this._hierarchy) {\n      this._getPropertyNamesInHierarchy(batchId, results);\n    }\n\n    return results;\n  }\n\n  getProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (defined(binaryProperty)) {\n        return this._getBinaryProperty(binaryProperty, batchId);\n      }\n    }\n\n    const propertyValues = this._properties[name];\n    if (defined(propertyValues)) {\n      return clone(propertyValues[batchId], true);\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const hierarchyProperty = this._getHierarchyProperty(batchId, name);\n      if (defined(hierarchyProperty)) {\n        return hierarchyProperty;\n      }\n    }\n\n    return undefined;\n  }\n\n  setProperty(batchId, name, value) {\n    const featureCount = this.featureCount;\n\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (binaryProperty) {\n        this._setBinaryProperty(binaryProperty, batchId, value);\n        return;\n      }\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      if (this._setHierarchyProperty(this, batchId, name, value)) {\n        return;\n      }\n    }\n\n    let propertyValues = this._properties[name];\n    if (!defined(propertyValues)) {\n      // Property does not exist. Create it.\n      this._properties[name] = new Array(featureCount);\n      propertyValues = this._properties[name];\n    }\n\n    propertyValues[batchId] = clone(value, true);\n  }\n\n  // PRIVATE METHODS\n\n  _checkBatchId(batchId) {\n    const valid = batchId >= 0 && batchId < this.featureCount;\n    if (!valid) {\n      throw new Error('batchId not in range [0, featureCount - 1].');\n    }\n  }\n\n  _getBinaryProperty(binaryProperty, index) {\n    return binaryProperty.unpack(binaryProperty.typedArray, index);\n  }\n\n  _setBinaryProperty(binaryProperty, index, value) {\n    binaryProperty.pack(value, binaryProperty.typedArray, index);\n  }\n\n  _initializeBinaryProperties() {\n    let binaryProperties: Record<string, any> | null = null;\n    for (const name in this._properties) {\n      const property = this._properties[name];\n      const binaryProperty = this._initializeBinaryProperty(name, property);\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      if (binaryProperty) {\n        binaryProperties = binaryProperties || {};\n        binaryProperties[name] = binaryProperty;\n      }\n    }\n    return binaryProperties;\n  }\n\n  _initializeBinaryProperty(name, property) {\n    if ('byteOffset' in property) {\n      // This is a binary property\n      const tile3DAccessor = property;\n\n      assert(this.binary, `Property ${name} requires a batch table binary.`);\n      assert(tile3DAccessor.type, `Property ${name} requires a type.`);\n\n      const accessor = createTypedArrayFromAccessor(\n        tile3DAccessor,\n        this.binary.buffer,\n        this.binary.byteOffset | 0,\n        this.featureCount\n      );\n\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      return {\n        typedArray: accessor.values,\n        componentCount: accessor.size,\n        unpack: accessor.unpacker,\n        pack: accessor.packer\n      };\n    }\n\n    return null;\n  }\n\n  //  EXTENSION SUPPORT: 3DTILES_batch_table_hierarchy\n\n  _hasPropertyInHierarchy(batchId, name) {\n    if (!this._hierarchy) {\n      return false;\n    }\n\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      return defined(instances[name]);\n    });\n\n    return defined(result);\n  }\n\n  _getPropertyNamesInHierarchy(batchId, results) {\n    traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      for (const name in instances) {\n        if (instances.hasOwnProperty(name)) {\n          if (results.indexOf(name) === -1) {\n            results.push(name);\n          }\n        }\n      }\n    });\n  }\n\n  _getHierarchyProperty(batchId, name) {\n    return traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        if (defined(propertyValues.typedArray)) {\n          return this._getBinaryProperty(propertyValues, indexInClass);\n        }\n        return clone(propertyValues[indexInClass], true);\n      }\n      return null;\n    });\n  }\n\n  _setHierarchyProperty(batchTable, batchId, name, value) {\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        assert(instanceIndex === batchId, `Inherited property \"${name}\" is read-only.`);\n        if (defined(propertyValues.typedArray)) {\n          this._setBinaryProperty(propertyValues, indexInClass, value);\n        } else {\n          propertyValues[indexInClass] = clone(value, true);\n        }\n        return true;\n      }\n      return false;\n    });\n    return defined(result);\n  }\n}\n"],"mappings":"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"}