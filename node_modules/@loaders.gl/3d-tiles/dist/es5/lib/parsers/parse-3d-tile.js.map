{"version":3,"file":"parse-3d-tile.js","names":["parse3DTile","arrayBuffer","byteOffset","options","context","tile","type","getMagicString","TILE3D_TYPE","COMPOSITE","BATCHED_3D_MODEL","GLTF","INSTANCED_3D_MODEL","POINT_CLOUD","parseComposite3DTile","parseBatchedModel3DTile","parseGltf3DTile","parseInstancedModel3DTile","parsePointCloud3DTile","Error"],"sources":["../../../../src/lib/parsers/parse-3d-tile.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {TILE3D_TYPE} from '../constants';\nimport {getMagicString} from './helpers/parse-utils';\n\nimport {parsePointCloud3DTile} from './parse-3d-tile-point-cloud';\nimport {parseBatchedModel3DTile} from './parse-3d-tile-batched-model';\nimport {parseInstancedModel3DTile} from './parse-3d-tile-instanced-model';\nimport {parseComposite3DTile} from './parse-3d-tile-composite';\nimport {parseGltf3DTile} from './parse-3d-tile-gltf';\n\n// Extracts\nexport async function parse3DTile(arrayBuffer, byteOffset = 0, options, context, tile = {}) {\n  // @ts-expect-error\n  tile.byteOffset = byteOffset;\n  // @ts-expect-error\n  tile.type = getMagicString(arrayBuffer, byteOffset);\n\n  // @ts-expect-error\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      // Note: We pass this function as argument so that embedded tiles can be parsed recursively\n      return await parseComposite3DTile(\n        tile,\n        arrayBuffer,\n        byteOffset,\n        options,\n        context,\n        parse3DTile\n      );\n\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return await parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.GLTF:\n      return await parseGltf3DTile(tile, arrayBuffer, options, context);\n\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return await parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    case TILE3D_TYPE.POINT_CLOUD:\n      return await parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context);\n\n    default:\n      // @ts-expect-error\n      throw new Error(`3DTileLoader: unknown type ${tile.type}`); // eslint-disable-line\n  }\n}\n"],"mappings":";;;;;;;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAqD,SAG/BA,WAAW;EAAA;AAAA;AAAA;EAAA,yEAA1B,iBAA2BC,WAAW;IAAA;MAAA;MAAA;MAAA;MAAA;IAAA;MAAA;QAAA;UAAA;YAAEC,UAAU,2DAAG,CAAC;YAAEC,OAAO;YAAEC,OAAO;YAAEC,IAAI,2DAAG,CAAC,CAAC;YAExFA,IAAI,CAACH,UAAU,GAAGA,UAAU;YAE5BG,IAAI,CAACC,IAAI,GAAG,IAAAC,0BAAc,EAACN,WAAW,EAAEC,UAAU,CAAC;;YAAC,cAG5CG,IAAI,CAACC,IAAI;YAAA,gCACVE,sBAAW,CAACC,SAAS,uBAWrBD,sBAAW,CAACE,gBAAgB,wBAG5BF,sBAAW,CAACG,IAAI,wBAGhBH,sBAAW,CAACI,kBAAkB,wBAG9BJ,sBAAW,CAACK,WAAW;YAAA;UAAA;YAAA;YAAA,OAlBb,IAAAC,0CAAoB,EAC/BT,IAAI,EACJJ,WAAW,EACXC,UAAU,EACVC,OAAO,EACPC,OAAO,EACPJ,WAAW,CACZ;UAAA;YAAA;UAAA;YAAA;YAAA,OAGY,IAAAe,gDAAuB,EAACV,IAAI,EAAEJ,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,CAAC;UAAA;YAAA;UAAA;YAAA;YAAA,OAGxE,IAAAY,gCAAe,EAACX,IAAI,EAAEJ,WAAW,EAAEE,OAAO,EAAEC,OAAO,CAAC;UAAA;YAAA;UAAA;YAAA;YAAA,OAGpD,IAAAa,oDAAyB,EAACZ,IAAI,EAAEJ,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,CAAC;UAAA;YAAA;UAAA;YAAA;YAAA,OAG1E,IAAAc,4CAAqB,EAACb,IAAI,EAAEJ,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,CAAC;UAAA;YAAA;UAAA;YAAA,MAI7E,IAAIe,KAAK,sCAA+Bd,IAAI,CAACC,IAAI,EAAG;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAE/D;EAAA;AAAA"}