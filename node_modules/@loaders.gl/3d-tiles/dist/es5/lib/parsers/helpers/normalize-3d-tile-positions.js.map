{"version":3,"file":"normalize-3d-tile-positions.js","names":["normalize3DTilePositionAttribute","tile","positions","options","isQuantized","decodeQuantizedPositions","type","GL","UNSIGNED_SHORT","value","size","normalized","scratchPosition","Vector3","decodedArray","Float32Array","pointCount","i","set","scale","quantizedRange","multiply","quantizedVolumeScale","add","quantizedVolumeOffset","toArray"],"sources":["../../../../../src/lib/parsers/helpers/normalize-3d-tile-positions.ts"],"sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {GL} from '@loaders.gl/math';\n\n// Prepare attribute for positions\nexport function normalize3DTilePositionAttribute(tile, positions, options) {\n  if (!tile.isQuantized) {\n    return positions;\n  }\n\n  // For quantized posititions, either expand to Float32Array or return custom accessor\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/blob/master/specification/TileFormats/Instanced3DModel/README.md#quantized-positions\n\n  // Optionally decodes quantized positions on GPU, for simpler renderers that don't accept normalized attributes\n  if (options['3d-tiles'] && options['3d-tiles'].decodeQuantizedPositions) {\n    tile.isQuantized = false;\n    return decodeQuantizedPositions(tile, positions);\n  }\n\n  // Default: Use normalized shorts directly, no copying/processing.\n  // NOTE: The \"missing\" offset/scaling operations are automatically added to modelMatrix if `tile.isQuantized === true`\n  return {\n    type: GL.UNSIGNED_SHORT,\n    value: positions,\n    size: 3,\n    normalized: true\n  };\n}\n\n// Pre-scale quantized positions on CPU\nfunction decodeQuantizedPositions(tile, positions) {\n  const scratchPosition = new Vector3();\n  const decodedArray = new Float32Array(tile.pointCount * 3);\n\n  for (let i = 0; i < tile.pointCount; i++) {\n    // POSITION = POSITION_QUANTIZED / 65535.0 * QUANTIZED_VOLUME_SCALE + QUANTIZED_VOLUME_OFFSET\n    scratchPosition\n      .set(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2])\n      .scale(1 / tile.quantizedRange)\n      .multiply(tile.quantizedVolumeScale)\n      .add(tile.quantizedVolumeOffset)\n      .toArray(decodedArray, i * 3);\n  }\n\n  return decodedArray;\n}\n"],"mappings":";;;;;;AAAA;AACA;AAGO,SAASA,gCAAgC,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAE;EACzE,IAAI,CAACF,IAAI,CAACG,WAAW,EAAE;IACrB,OAAOF,SAAS;EAClB;;EAMA,IAAIC,OAAO,CAAC,UAAU,CAAC,IAAIA,OAAO,CAAC,UAAU,CAAC,CAACE,wBAAwB,EAAE;IACvEJ,IAAI,CAACG,WAAW,GAAG,KAAK;IACxB,OAAOC,wBAAwB,CAACJ,IAAI,EAAEC,SAAS,CAAC;EAClD;;EAIA,OAAO;IACLI,IAAI,EAAEC,QAAE,CAACC,cAAc;IACvBC,KAAK,EAAEP,SAAS;IAChBQ,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE;EACd,CAAC;AACH;;AAGA,SAASN,wBAAwB,CAACJ,IAAI,EAAEC,SAAS,EAAE;EACjD,IAAMU,eAAe,GAAG,IAAIC,aAAO,EAAE;EACrC,IAAMC,YAAY,GAAG,IAAIC,YAAY,CAACd,IAAI,CAACe,UAAU,GAAG,CAAC,CAAC;EAE1D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,IAAI,CAACe,UAAU,EAAEC,CAAC,EAAE,EAAE;IAExCL,eAAe,CACZM,GAAG,CAAChB,SAAS,CAACe,CAAC,GAAG,CAAC,CAAC,EAAEf,SAAS,CAACe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEf,SAAS,CAACe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CACjEE,KAAK,CAAC,CAAC,GAAGlB,IAAI,CAACmB,cAAc,CAAC,CAC9BC,QAAQ,CAACpB,IAAI,CAACqB,oBAAoB,CAAC,CACnCC,GAAG,CAACtB,IAAI,CAACuB,qBAAqB,CAAC,CAC/BC,OAAO,CAACX,YAAY,EAAEG,CAAC,GAAG,CAAC,CAAC;EACjC;EAEA,OAAOH,YAAY;AACrB"}