{"version":3,"file":"parse-3d-implicit-tiles.js","names":["QUADTREE_DEVISION_COUNT","OCTREE_DEVISION_COUNT","SUBDIVISION_COUNT_MAP","QUADTREE","OCTREE","parseImplicitTiles","params","options","parentData","mortonIndex","x","y","z","childIndex","globalData","level","subtree","subdivisionScheme","subtreeLevels","maximumLevel","contentUrlTemplate","subtreesUriTemplate","basePath","tile","children","lodMetricValue","contentUrl","childrenPerTile","childX","childY","childZ","levelOffset","childTileMortonIndex","concatBits","tileAvailabilityIndex","childTileX","childTileY","childTileZ","isChildSubtreeAvailable","getAvailabilityResult","childSubtreeAvailability","lev","subtreePath","childSubtreeUrl","replaceContentUrlTemplate","load","Tile3DSubtreeLoader","childSubtree","isTileAvailable","tileAvailability","isContentAvailable","contentAvailability","childTileLevel","pData","index","currentTile","length","globalLevel","childCoordinates","formattedTile","formatTileData","push","availabilityData","Boolean","constant","explicitBitstream","getBooleanValueFromBitstream","refine","getRefine","lodMetricType","getTileType","rootLodMetricValue","rootBoundingVolume","uri","replace","boundingVolume","calculateBoundingVolumeForChildTile","content","id","type","geometricError","transform","region","west","south","east","north","minimumHeight","maximumHeight","boundingVolumesCount","sizeX","sizeY","sizeZ","childWest","childEast","childSouth","childNorth","childMinimumHeight","childMaximumHeight","console","warn","first","second","parseInt","toString","templateUrl","mapUrl","generateMapUrl","matched","items","key","availabilityIndex","availabilityBuffer","byteIndex","Math","floor","bitIndex","bitValue"],"sources":["../../../../../src/lib/parsers/helpers/parse-3d-implicit-tiles.ts"],"sourcesContent":["import type {Availability, BoundingVolume, Subtree} from '../../../types';\nimport {Tile3DSubtreeLoader} from '../../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\n\nconst QUADTREE_DEVISION_COUNT = 4;\nconst OCTREE_DEVISION_COUNT = 8;\n\nconst SUBDIVISION_COUNT_MAP = {\n  QUADTREE: QUADTREE_DEVISION_COUNT,\n  OCTREE: OCTREE_DEVISION_COUNT\n};\n\n/**\n * Recursively parse implicit tiles tree\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling\n * TODO Check out do we able to use Tile3D class as return type here.\n * @param subtree\n * @param lodMetricValue\n * @param options\n * @param parentData\n * @param childIndex\n * @param level\n * @param globalData\n */\n// eslint-disable-next-line max-statements\nexport async function parseImplicitTiles(params: {\n  subtree: Subtree;\n  options: any;\n  parentData?: {mortonIndex: number; x: number; y: number; z: number};\n  childIndex?: number;\n  level?: number;\n  globalData?: {level: number; mortonIndex: number; x: number; y: number; z: number};\n}) {\n  const {\n    options,\n    parentData = {\n      mortonIndex: 0,\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    childIndex = 0,\n    globalData = {\n      level: 0,\n      mortonIndex: 0,\n      x: 0,\n      y: 0,\n      z: 0\n    }\n  } = params;\n  let {subtree, level = 0} = params;\n  const {\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    basePath\n  } = options;\n\n  const tile = {children: [], lodMetricValue: 0, contentUrl: ''};\n\n  const childrenPerTile = SUBDIVISION_COUNT_MAP[subdivisionScheme];\n\n  const childX = childIndex & 0b01;\n  const childY = (childIndex >> 1) & 0b01;\n  const childZ = (childIndex >> 2) & 0b01;\n\n  const levelOffset = (childrenPerTile ** level - 1) / (childrenPerTile - 1);\n  let childTileMortonIndex = concatBits(parentData.mortonIndex, childIndex);\n  let tileAvailabilityIndex = levelOffset + childTileMortonIndex;\n\n  // Local tile coordinates\n  let childTileX = concatBits(parentData.x, childX);\n  let childTileY = concatBits(parentData.y, childY);\n  let childTileZ = concatBits(parentData.z, childZ);\n\n  let isChildSubtreeAvailable = false;\n\n  if (level + 1 > subtreeLevels) {\n    isChildSubtreeAvailable = getAvailabilityResult(\n      subtree.childSubtreeAvailability,\n      childTileMortonIndex\n    );\n  }\n\n  const x = concatBits(globalData.x, childTileX);\n  const y = concatBits(globalData.y, childTileY);\n  const z = concatBits(globalData.z, childTileZ);\n  const lev = level + globalData.level;\n\n  if (isChildSubtreeAvailable) {\n    const subtreePath = `${basePath}/${subtreesUriTemplate}`;\n    const childSubtreeUrl = replaceContentUrlTemplate(subtreePath, lev, x, y, z);\n    const childSubtree = await load(childSubtreeUrl, Tile3DSubtreeLoader);\n\n    subtree = childSubtree;\n\n    globalData.mortonIndex = childTileMortonIndex;\n    globalData.x = childTileX;\n    globalData.y = childTileY;\n    globalData.z = childTileZ;\n    globalData.level = level;\n\n    childTileMortonIndex = 0;\n    tileAvailabilityIndex = 0;\n    childTileX = 0;\n    childTileY = 0;\n    childTileZ = 0;\n    level = 0;\n  }\n\n  const isTileAvailable = getAvailabilityResult(subtree.tileAvailability, tileAvailabilityIndex);\n\n  if (!isTileAvailable || level > maximumLevel) {\n    return tile;\n  }\n\n  const isContentAvailable = getAvailabilityResult(\n    subtree.contentAvailability,\n    tileAvailabilityIndex\n  );\n\n  if (isContentAvailable) {\n    tile.contentUrl = replaceContentUrlTemplate(contentUrlTemplate, lev, x, y, z);\n  }\n\n  const childTileLevel = level + 1;\n  const pData = {mortonIndex: childTileMortonIndex, x: childTileX, y: childTileY, z: childTileZ};\n\n  for (let index = 0; index < childrenPerTile; index++) {\n    const currentTile = await parseImplicitTiles({\n      subtree,\n      options,\n      parentData: pData,\n      childIndex: index,\n      level: childTileLevel,\n      globalData\n    });\n\n    if (currentTile.contentUrl || currentTile.children.length) {\n      const globalLevel = lev + 1;\n      const childCoordinates = {childTileX, childTileY, childTileZ};\n      const formattedTile = formatTileData(currentTile, globalLevel, childCoordinates, options);\n      // @ts-ignore\n      tile.children.push(formattedTile);\n    }\n  }\n\n  return tile;\n}\n\nfunction getAvailabilityResult(availabilityData: Availability, index: number): boolean {\n  if ('constant' in availabilityData) {\n    return Boolean(availabilityData.constant);\n  }\n\n  if (availabilityData.explicitBitstream) {\n    return getBooleanValueFromBitstream(index, availabilityData.explicitBitstream);\n  }\n\n  return false;\n}\n\n/**\n * Do formatting of implicit tile data.\n * TODO Check out do we able to use Tile3D class as type here.\n * @param tile\n * @param lodMetricValue\n * @param options\n * @returns\n */\nfunction formatTileData(\n  tile,\n  level: number,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number},\n  options: any\n) {\n  const {\n    basePath,\n    refine,\n    getRefine,\n    lodMetricType,\n    getTileType,\n    rootLodMetricValue,\n    rootBoundingVolume\n  } = options;\n  const uri = tile.contentUrl && tile.contentUrl.replace(`${basePath}/`, '');\n  const lodMetricValue = rootLodMetricValue / 2 ** level;\n  const boundingVolume = calculateBoundingVolumeForChildTile(\n    level,\n    rootBoundingVolume,\n    childCoordinates\n  );\n\n  return {\n    children: tile.children,\n    contentUrl: tile.contentUrl,\n    content: {uri},\n    id: tile.contentUrl,\n    refine: getRefine(refine),\n    type: getTileType(tile),\n    lodMetricType,\n    lodMetricValue,\n    geometricError: lodMetricValue,\n    transform: tile.transform,\n    boundingVolume\n  };\n}\n\n/**\n * Calculate child bounding volume.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subdivision-rules\n * @param level\n * @param rootBoundingVolume\n * @param childCoordinates\n */\nfunction calculateBoundingVolumeForChildTile(\n  level: number,\n  rootBoundingVolume: BoundingVolume,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number}\n): BoundingVolume | null {\n  if (rootBoundingVolume.region) {\n    const {childTileX, childTileY, childTileZ} = childCoordinates;\n    const [west, south, east, north, minimumHeight, maximumHeight] = rootBoundingVolume.region;\n    const boundingVolumesCount = 2 ** level;\n\n    const sizeX = (east - west) / boundingVolumesCount;\n    const sizeY = (north - south) / boundingVolumesCount;\n    const sizeZ = (maximumHeight - minimumHeight) / boundingVolumesCount;\n\n    const [childWest, childEast] = [west + sizeX * childTileX, west + sizeX * (childTileX + 1)];\n    const [childSouth, childNorth] = [south + sizeY * childTileY, south + sizeY * (childTileY + 1)];\n    const [childMinimumHeight, childMaximumHeight] = [\n      minimumHeight + sizeZ * childTileZ,\n      minimumHeight + sizeZ * (childTileZ + 1)\n    ];\n\n    return {\n      region: [childWest, childSouth, childEast, childNorth, childMinimumHeight, childMaximumHeight]\n    };\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn('Unsupported bounding volume type: ', rootBoundingVolume);\n  return null;\n}\n\n/**\n * Do binary concatenation\n * @param first\n * @param second\n */\nfunction concatBits(first: number, second: number): number {\n  return parseInt(first.toString(2) + second.toString(2), 2);\n}\n\n/**\n * Replace implicit tile content url with real coordinates.\n * @param templateUrl\n * @param level\n * @param x\n * @param y\n * @param z\n */\nexport function replaceContentUrlTemplate(\n  templateUrl: string,\n  level: number,\n  x: number,\n  y: number,\n  z: number\n): string {\n  const mapUrl = generateMapUrl({level, x, y, z});\n  return templateUrl.replace(/{level}|{x}|{y}|{z}/gi, (matched) => mapUrl[matched]);\n}\n\n/**\n * Get Map object for content url generation\n * @param items\n */\nfunction generateMapUrl(items: {[key: string]: number}): {[key: string]: string} {\n  const mapUrl = {};\n\n  for (const key in items) {\n    mapUrl[`{${key}}`] = items[key];\n  }\n  return mapUrl;\n}\n\n/**\n * Get boolean value from bistream by index\n * A boolean value is encoded as a single bit, either 0 (false) or 1 (true).\n * Multiple boolean values are packed tightly in the same buffer.\n * These buffers of tightly-packed bits are sometimes referred to as bitstreams.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/implicit-revisions/specification/Metadata#booleans\n * @param availabilitiIndex\n */\nfunction getBooleanValueFromBitstream(\n  availabilityIndex: number,\n  availabilityBuffer: Uint8Array\n): boolean {\n  const byteIndex = Math.floor(availabilityIndex / 8);\n  const bitIndex = availabilityIndex % 8;\n  const bitValue = (availabilityBuffer[byteIndex] >> bitIndex) & 1;\n\n  return bitValue === 1;\n}\n"],"mappings":";;;;;;;;;;;AACA;AACA;AAEA,IAAMA,uBAAuB,GAAG,CAAC;AACjC,IAAMC,qBAAqB,GAAG,CAAC;AAE/B,IAAMC,qBAAqB,GAAG;EAC5BC,QAAQ,EAAEH,uBAAuB;EACjCI,MAAM,EAAEH;AACV,CAAC;;AAAC,SAeoBI,kBAAkB;EAAA;AAAA;AAAA;EAAA,gFAAjC,iBAAkCC,MAOxC;IAAA;IAAA;MAAA;QAAA;UAAA;YAEGC,OAAO,GAeLD,MAAM,CAfRC,OAAO,uBAeLD,MAAM,CAdRE,UAAU,EAAVA,UAAU,mCAAG;cACXC,WAAW,EAAE,CAAC;cACdC,CAAC,EAAE,CAAC;cACJC,CAAC,EAAE,CAAC;cACJC,CAAC,EAAE;YACL,CAAC,4CASCN,MAAM,CARRO,UAAU,EAAVA,UAAU,mCAAG,CAAC,4CAQZP,MAAM,CAPRQ,UAAU,EAAVA,UAAU,mCAAG;cACXC,KAAK,EAAE,CAAC;cACRN,WAAW,EAAE,CAAC;cACdC,CAAC,EAAE,CAAC;cACJC,CAAC,EAAE,CAAC;cACJC,CAAC,EAAE;YACL,CAAC;YAEEI,OAAO,GAAeV,MAAM,CAA5BU,OAAO,kBAAeV,MAAM,CAAnBS,KAAK,EAALA,KAAK,8BAAG,CAAC;YAErBE,iBAAiB,GAMfV,OAAO,CANTU,iBAAiB,EACjBC,aAAa,GAKXX,OAAO,CALTW,aAAa,EACbC,YAAY,GAIVZ,OAAO,CAJTY,YAAY,EACZC,kBAAkB,GAGhBb,OAAO,CAHTa,kBAAkB,EAClBC,mBAAmB,GAEjBd,OAAO,CAFTc,mBAAmB,EACnBC,QAAQ,GACNf,OAAO,CADTe,QAAQ;YAGJC,IAAI,GAAG;cAACC,QAAQ,EAAE,EAAE;cAAEC,cAAc,EAAE,CAAC;cAAEC,UAAU,EAAE;YAAE,CAAC;YAExDC,eAAe,GAAGzB,qBAAqB,CAACe,iBAAiB,CAAC;YAE1DW,MAAM,GAAGf,UAAU,GAAG,CAAI;YAC1BgB,MAAM,GAAIhB,UAAU,IAAI,CAAC,GAAI,CAAI;YACjCiB,MAAM,GAAIjB,UAAU,IAAI,CAAC,GAAI,CAAI;YAEjCkB,WAAW,GAAG,CAAC,SAAAJ,eAAe,EAAIZ,KAAK,IAAG,CAAC,KAAKY,eAAe,GAAG,CAAC,CAAC;YACtEK,oBAAoB,GAAGC,UAAU,CAACzB,UAAU,CAACC,WAAW,EAAEI,UAAU,CAAC;YACrEqB,qBAAqB,GAAGH,WAAW,GAAGC,oBAAoB;YAG1DG,UAAU,GAAGF,UAAU,CAACzB,UAAU,CAACE,CAAC,EAAEkB,MAAM,CAAC;YAC7CQ,UAAU,GAAGH,UAAU,CAACzB,UAAU,CAACG,CAAC,EAAEkB,MAAM,CAAC;YAC7CQ,UAAU,GAAGJ,UAAU,CAACzB,UAAU,CAACI,CAAC,EAAEkB,MAAM,CAAC;YAE7CQ,uBAAuB,GAAG,KAAK;YAEnC,IAAIvB,KAAK,GAAG,CAAC,GAAGG,aAAa,EAAE;cAC7BoB,uBAAuB,GAAGC,qBAAqB,CAC7CvB,OAAO,CAACwB,wBAAwB,EAChCR,oBAAoB,CACrB;YACH;YAEMtB,CAAC,GAAGuB,UAAU,CAACnB,UAAU,CAACJ,CAAC,EAAEyB,UAAU,CAAC;YACxCxB,CAAC,GAAGsB,UAAU,CAACnB,UAAU,CAACH,CAAC,EAAEyB,UAAU,CAAC;YACxCxB,CAAC,GAAGqB,UAAU,CAACnB,UAAU,CAACF,CAAC,EAAEyB,UAAU,CAAC;YACxCI,GAAG,GAAG1B,KAAK,GAAGD,UAAU,CAACC,KAAK;YAAA,KAEhCuB,uBAAuB;cAAA;cAAA;YAAA;YACnBI,WAAW,aAAMpB,QAAQ,cAAID,mBAAmB;YAChDsB,eAAe,GAAGC,yBAAyB,CAACF,WAAW,EAAED,GAAG,EAAE/B,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;YAAA;YAAA,OACjD,IAAAiC,UAAI,EAACF,eAAe,EAAEG,wCAAmB,CAAC;UAAA;YAA/DC,YAAY;YAElB/B,OAAO,GAAG+B,YAAY;YAEtBjC,UAAU,CAACL,WAAW,GAAGuB,oBAAoB;YAC7ClB,UAAU,CAACJ,CAAC,GAAGyB,UAAU;YACzBrB,UAAU,CAACH,CAAC,GAAGyB,UAAU;YACzBtB,UAAU,CAACF,CAAC,GAAGyB,UAAU;YACzBvB,UAAU,CAACC,KAAK,GAAGA,KAAK;YAExBiB,oBAAoB,GAAG,CAAC;YACxBE,qBAAqB,GAAG,CAAC;YACzBC,UAAU,GAAG,CAAC;YACdC,UAAU,GAAG,CAAC;YACdC,UAAU,GAAG,CAAC;YACdtB,KAAK,GAAG,CAAC;UAAC;YAGNiC,eAAe,GAAGT,qBAAqB,CAACvB,OAAO,CAACiC,gBAAgB,EAAEf,qBAAqB,CAAC;YAAA,MAE1F,CAACc,eAAe,IAAIjC,KAAK,GAAGI,YAAY;cAAA;cAAA;YAAA;YAAA,iCACnCI,IAAI;UAAA;YAGP2B,kBAAkB,GAAGX,qBAAqB,CAC9CvB,OAAO,CAACmC,mBAAmB,EAC3BjB,qBAAqB,CACtB;YAED,IAAIgB,kBAAkB,EAAE;cACtB3B,IAAI,CAACG,UAAU,GAAGkB,yBAAyB,CAACxB,kBAAkB,EAAEqB,GAAG,EAAE/B,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;YAC/E;YAEMwC,cAAc,GAAGrC,KAAK,GAAG,CAAC;YAC1BsC,KAAK,GAAG;cAAC5C,WAAW,EAAEuB,oBAAoB;cAAEtB,CAAC,EAAEyB,UAAU;cAAExB,CAAC,EAAEyB,UAAU;cAAExB,CAAC,EAAEyB;YAAU,CAAC;YAErFiB,KAAK,GAAG,CAAC;UAAA;YAAA,MAAEA,KAAK,GAAG3B,eAAe;cAAA;cAAA;YAAA;YAAA;YAAA,OACftB,kBAAkB,CAAC;cAC3CW,OAAO,EAAPA,OAAO;cACPT,OAAO,EAAPA,OAAO;cACPC,UAAU,EAAE6C,KAAK;cACjBxC,UAAU,EAAEyC,KAAK;cACjBvC,KAAK,EAAEqC,cAAc;cACrBtC,UAAU,EAAVA;YACF,CAAC,CAAC;UAAA;YAPIyC,WAAW;YASjB,IAAIA,WAAW,CAAC7B,UAAU,IAAI6B,WAAW,CAAC/B,QAAQ,CAACgC,MAAM,EAAE;cACnDC,WAAW,GAAGhB,GAAG,GAAG,CAAC;cACrBiB,gBAAgB,GAAG;gBAACvB,UAAU,EAAVA,UAAU;gBAAEC,UAAU,EAAVA,UAAU;gBAAEC,UAAU,EAAVA;cAAU,CAAC;cACvDsB,aAAa,GAAGC,cAAc,CAACL,WAAW,EAAEE,WAAW,EAAEC,gBAAgB,EAAEnD,OAAO,CAAC;cAEzFgB,IAAI,CAACC,QAAQ,CAACqC,IAAI,CAACF,aAAa,CAAC;YACnC;UAAC;YAhB0CL,KAAK,EAAE;YAAA;YAAA;UAAA;YAAA,iCAmB7C/B,IAAI;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACZ;EAAA;AAAA;AAED,SAASgB,qBAAqB,CAACuB,gBAA8B,EAAER,KAAa,EAAW;EACrF,IAAI,UAAU,IAAIQ,gBAAgB,EAAE;IAClC,OAAOC,OAAO,CAACD,gBAAgB,CAACE,QAAQ,CAAC;EAC3C;EAEA,IAAIF,gBAAgB,CAACG,iBAAiB,EAAE;IACtC,OAAOC,4BAA4B,CAACZ,KAAK,EAAEQ,gBAAgB,CAACG,iBAAiB,CAAC;EAChF;EAEA,OAAO,KAAK;AACd;;AAUA,SAASL,cAAc,CACrBrC,IAAI,EACJR,KAAa,EACb2C,gBAA8E,EAC9EnD,OAAY,EACZ;EACA,IACEe,QAAQ,GAONf,OAAO,CAPTe,QAAQ;IACR6C,MAAM,GAMJ5D,OAAO,CANT4D,MAAM;IACNC,SAAS,GAKP7D,OAAO,CALT6D,SAAS;IACTC,aAAa,GAIX9D,OAAO,CAJT8D,aAAa;IACbC,WAAW,GAGT/D,OAAO,CAHT+D,WAAW;IACXC,kBAAkB,GAEhBhE,OAAO,CAFTgE,kBAAkB;IAClBC,kBAAkB,GAChBjE,OAAO,CADTiE,kBAAkB;EAEpB,IAAMC,GAAG,GAAGlD,IAAI,CAACG,UAAU,IAAIH,IAAI,CAACG,UAAU,CAACgD,OAAO,WAAIpD,QAAQ,QAAK,EAAE,CAAC;EAC1E,IAAMG,cAAc,GAAG8C,kBAAkB,YAAG,CAAC,EAAIxD,KAAK;EACtD,IAAM4D,cAAc,GAAGC,mCAAmC,CACxD7D,KAAK,EACLyD,kBAAkB,EAClBd,gBAAgB,CACjB;EAED,OAAO;IACLlC,QAAQ,EAAED,IAAI,CAACC,QAAQ;IACvBE,UAAU,EAAEH,IAAI,CAACG,UAAU;IAC3BmD,OAAO,EAAE;MAACJ,GAAG,EAAHA;IAAG,CAAC;IACdK,EAAE,EAAEvD,IAAI,CAACG,UAAU;IACnByC,MAAM,EAAEC,SAAS,CAACD,MAAM,CAAC;IACzBY,IAAI,EAAET,WAAW,CAAC/C,IAAI,CAAC;IACvB8C,aAAa,EAAbA,aAAa;IACb5C,cAAc,EAAdA,cAAc;IACduD,cAAc,EAAEvD,cAAc;IAC9BwD,SAAS,EAAE1D,IAAI,CAAC0D,SAAS;IACzBN,cAAc,EAAdA;EACF,CAAC;AACH;;AASA,SAASC,mCAAmC,CAC1C7D,KAAa,EACbyD,kBAAkC,EAClCd,gBAA8E,EACvD;EACvB,IAAIc,kBAAkB,CAACU,MAAM,EAAE;IAC7B,IAAO/C,UAAU,GAA4BuB,gBAAgB,CAAtDvB,UAAU;MAAEC,UAAU,GAAgBsB,gBAAgB,CAA1CtB,UAAU;MAAEC,UAAU,GAAIqB,gBAAgB,CAA9BrB,UAAU;IACzC,yDAAiEmC,kBAAkB,CAACU,MAAM;MAAnFC,IAAI;MAAEC,KAAK;MAAEC,IAAI;MAAEC,KAAK;MAAEC,aAAa;MAAEC,aAAa;IAC7D,IAAMC,oBAAoB,YAAG,CAAC,EAAI1E,KAAK;IAEvC,IAAM2E,KAAK,GAAG,CAACL,IAAI,GAAGF,IAAI,IAAIM,oBAAoB;IAClD,IAAME,KAAK,GAAG,CAACL,KAAK,GAAGF,KAAK,IAAIK,oBAAoB;IACpD,IAAMG,KAAK,GAAG,CAACJ,aAAa,GAAGD,aAAa,IAAIE,oBAAoB;IAEpE,IAAOI,SAAS,GAAgBV,IAAI,GAAGO,KAAK,GAAGvD,UAAU;MAAvC2D,SAAS,GAAgCX,IAAI,GAAGO,KAAK,IAAIvD,UAAU,GAAG,CAAC,CAAC;IAC1F,IAAO4D,UAAU,GAAiBX,KAAK,GAAGO,KAAK,GAAGvD,UAAU;MAAzC4D,UAAU,GAAiCZ,KAAK,GAAGO,KAAK,IAAIvD,UAAU,GAAG,CAAC,CAAC;IAC9F,IAAO6D,kBAAkB,GACvBV,aAAa,GAAGK,KAAK,GAAGvD,UAAU;MADT6D,kBAAkB,GAE3CX,aAAa,GAAGK,KAAK,IAAIvD,UAAU,GAAG,CAAC,CAAC;IAG1C,OAAO;MACL6C,MAAM,EAAE,CAACW,SAAS,EAAEE,UAAU,EAAED,SAAS,EAAEE,UAAU,EAAEC,kBAAkB,EAAEC,kBAAkB;IAC/F,CAAC;EACH;;EAGAC,OAAO,CAACC,IAAI,CAAC,oCAAoC,EAAE5B,kBAAkB,CAAC;EACtE,OAAO,IAAI;AACb;;AAOA,SAASvC,UAAU,CAACoE,KAAa,EAAEC,MAAc,EAAU;EACzD,OAAOC,QAAQ,CAACF,KAAK,CAACG,QAAQ,CAAC,CAAC,CAAC,GAAGF,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAC5D;;AAUO,SAAS5D,yBAAyB,CACvC6D,WAAmB,EACnB1F,KAAa,EACbL,CAAS,EACTC,CAAS,EACTC,CAAS,EACD;EACR,IAAM8F,MAAM,GAAGC,cAAc,CAAC;IAAC5F,KAAK,EAALA,KAAK;IAAEL,CAAC,EAADA,CAAC;IAAEC,CAAC,EAADA,CAAC;IAAEC,CAAC,EAADA;EAAC,CAAC,CAAC;EAC/C,OAAO6F,WAAW,CAAC/B,OAAO,CAAC,uBAAuB,EAAE,UAACkC,OAAO;IAAA,OAAKF,MAAM,CAACE,OAAO,CAAC;EAAA,EAAC;AACnF;;AAMA,SAASD,cAAc,CAACE,KAA8B,EAA2B;EAC/E,IAAMH,MAAM,GAAG,CAAC,CAAC;EAEjB,KAAK,IAAMI,IAAG,IAAID,KAAK,EAAE;IACvBH,MAAM,YAAKI,IAAG,OAAI,GAAGD,KAAK,CAACC,IAAG,CAAC;EACjC;EACA,OAAOJ,MAAM;AACf;;AAUA,SAASxC,4BAA4B,CACnC6C,iBAAyB,EACzBC,kBAA8B,EACrB;EACT,IAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACJ,iBAAiB,GAAG,CAAC,CAAC;EACnD,IAAMK,QAAQ,GAAGL,iBAAiB,GAAG,CAAC;EACtC,IAAMM,QAAQ,GAAIL,kBAAkB,CAACC,SAAS,CAAC,IAAIG,QAAQ,GAAI,CAAC;EAEhE,OAAOC,QAAQ,KAAK,CAAC;AACvB"}