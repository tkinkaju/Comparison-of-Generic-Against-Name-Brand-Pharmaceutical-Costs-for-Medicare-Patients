"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeImplicitTileData = normalizeImplicitTileData;
exports.normalizeImplicitTileHeaders = normalizeImplicitTileHeaders;
exports.normalizeTileData = normalizeTileData;
exports.normalizeTileHeaders = normalizeTileHeaders;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _tile3dSubtreeLoader = require("../../tile-3d-subtree-loader");
var _core = require("@loaders.gl/core");
var _tiles = require("@loaders.gl/tiles");
var _parse3dImplicitTiles = require("./helpers/parse-3d-implicit-tiles");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function getTileType(tile) {
  if (!tile.contentUrl) {
    return _tiles.TILE_TYPE.EMPTY;
  }
  var contentUrl = tile.contentUrl;
  var fileExtension = contentUrl.split('.').pop();
  switch (fileExtension) {
    case 'pnts':
      return _tiles.TILE_TYPE.POINTCLOUD;
    case 'i3dm':
    case 'b3dm':
    case 'glb':
    case 'gltf':
      return _tiles.TILE_TYPE.SCENEGRAPH;
    default:
      return fileExtension;
  }
}
function getRefine(refine) {
  switch (refine) {
    case 'REPLACE':
    case 'replace':
      return _tiles.TILE_REFINEMENT.REPLACE;
    case 'ADD':
    case 'add':
      return _tiles.TILE_REFINEMENT.ADD;
    default:
      return refine;
  }
}
function resolveUri(uri, basePath) {
  var urlSchemeRegex = /^[a-z][0-9a-z+.-]*:/i;
  if (urlSchemeRegex.test(basePath)) {
    var url = new URL(uri, "".concat(basePath, "/"));
    return decodeURI(url.toString());
  } else if (uri.startsWith('/')) {
    return uri;
  }
  return "".concat(basePath, "/").concat(uri);
}
function normalizeTileData(tile, options) {
  if (!tile) {
    return null;
  }
  if (tile.content) {
    var contentUri = tile.content.uri || tile.content.url;
    tile.contentUrl = resolveUri(contentUri, options.basePath);
  }
  tile.id = tile.contentUrl;
  tile.lodMetricType = _tiles.LOD_METRIC_TYPE.GEOMETRIC_ERROR;
  tile.lodMetricValue = tile.geometricError;
  tile.transformMatrix = tile.transform;
  tile.type = getTileType(tile);
  tile.refine = getRefine(tile.refine);
  return tile;
}

function normalizeTileHeaders(_x, _x2) {
  return _normalizeTileHeaders.apply(this, arguments);
}
function _normalizeTileHeaders() {
  _normalizeTileHeaders = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(tileset, options) {
    var basePath, root, rootImplicitTilingExtension, stack, tile, children, _iterator, _step, childHeader, childImplicitTilingExtension;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            basePath = tileset.basePath;
            rootImplicitTilingExtension = getImplicitTilingExtensionData(tileset === null || tileset === void 0 ? void 0 : tileset.root);
            if (!(rootImplicitTilingExtension && tileset.root)) {
              _context.next = 8;
              break;
            }
            _context.next = 5;
            return normalizeImplicitTileHeaders(tileset.root, tileset, rootImplicitTilingExtension, options);
          case 5:
            root = _context.sent;
            _context.next = 9;
            break;
          case 8:
            root = normalizeTileData(tileset.root, tileset);
          case 9:
            stack = [];
            stack.push(root);
          case 11:
            if (!(stack.length > 0)) {
              _context.next = 40;
              break;
            }
            tile = stack.pop() || {};
            children = tile.children || [];
            _iterator = _createForOfIteratorHelper(children);
            _context.prev = 15;
            _iterator.s();
          case 17:
            if ((_step = _iterator.n()).done) {
              _context.next = 30;
              break;
            }
            childHeader = _step.value;
            childImplicitTilingExtension = getImplicitTilingExtensionData(childHeader);
            if (!childImplicitTilingExtension) {
              _context.next = 26;
              break;
            }
            _context.next = 23;
            return normalizeImplicitTileHeaders(childHeader, tileset, childImplicitTilingExtension, options);
          case 23:
            childHeader = _context.sent;
            _context.next = 27;
            break;
          case 26:
            normalizeTileData(childHeader, {
              basePath: basePath
            });
          case 27:
            stack.push(childHeader);
          case 28:
            _context.next = 17;
            break;
          case 30:
            _context.next = 35;
            break;
          case 32:
            _context.prev = 32;
            _context.t0 = _context["catch"](15);
            _iterator.e(_context.t0);
          case 35:
            _context.prev = 35;
            _iterator.f();
            return _context.finish(35);
          case 38:
            _context.next = 11;
            break;
          case 40:
            return _context.abrupt("return", root);
          case 41:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[15, 32, 35, 38]]);
  }));
  return _normalizeTileHeaders.apply(this, arguments);
}
function normalizeImplicitTileHeaders(_x3, _x4, _x5, _x6) {
  return _normalizeImplicitTileHeaders.apply(this, arguments);
}
function _normalizeImplicitTileHeaders() {
  _normalizeImplicitTileHeaders = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(tile, tileset, implicitTilingExtension, options) {
    var _tileset$root;
    var basePath, subdivisionScheme, maximumLevel, subtreeLevels, subtreesUriTemplate, replacedUrlTemplate, subtreeUrl, subtree, contentUrlTemplate, refine, rootLodMetricValue, rootBoundingVolume, implicitOptions;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            basePath = tileset.basePath;
            subdivisionScheme = implicitTilingExtension.subdivisionScheme, maximumLevel = implicitTilingExtension.maximumLevel, subtreeLevels = implicitTilingExtension.subtreeLevels, subtreesUriTemplate = implicitTilingExtension.subtrees.uri;
            replacedUrlTemplate = (0, _parse3dImplicitTiles.replaceContentUrlTemplate)(subtreesUriTemplate, 0, 0, 0, 0);
            subtreeUrl = resolveUri(replacedUrlTemplate, basePath);
            _context2.next = 6;
            return (0, _core.load)(subtreeUrl, _tile3dSubtreeLoader.Tile3DSubtreeLoader, options);
          case 6:
            subtree = _context2.sent;
            contentUrlTemplate = resolveUri(tile.content.uri, basePath);
            refine = tileset === null || tileset === void 0 ? void 0 : (_tileset$root = tileset.root) === null || _tileset$root === void 0 ? void 0 : _tileset$root.refine;
            rootLodMetricValue = tile.geometricError;
            rootBoundingVolume = tile.boundingVolume;
            implicitOptions = {
              contentUrlTemplate: contentUrlTemplate,
              subtreesUriTemplate: subtreesUriTemplate,
              subdivisionScheme: subdivisionScheme,
              subtreeLevels: subtreeLevels,
              maximumLevel: maximumLevel,
              refine: refine,
              basePath: basePath,
              lodMetricType: _tiles.LOD_METRIC_TYPE.GEOMETRIC_ERROR,
              rootLodMetricValue: rootLodMetricValue,
              rootBoundingVolume: rootBoundingVolume,
              getTileType: getTileType,
              getRefine: getRefine
            };
            _context2.next = 14;
            return normalizeImplicitTileData(tile, subtree, implicitOptions);
          case 14:
            return _context2.abrupt("return", _context2.sent);
          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _normalizeImplicitTileHeaders.apply(this, arguments);
}
function normalizeImplicitTileData(_x7, _x8, _x9) {
  return _normalizeImplicitTileData.apply(this, arguments);
}
function _normalizeImplicitTileData() {
  _normalizeImplicitTileData = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(tile, rootSubtree, options) {
    var _yield$parseImplicitT, children, contentUrl;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (tile) {
              _context3.next = 2;
              break;
            }
            return _context3.abrupt("return", null);
          case 2:
            tile.lodMetricType = _tiles.LOD_METRIC_TYPE.GEOMETRIC_ERROR;
            tile.lodMetricValue = tile.geometricError;
            tile.transformMatrix = tile.transform;
            _context3.next = 7;
            return (0, _parse3dImplicitTiles.parseImplicitTiles)({
              subtree: rootSubtree,
              options: options
            });
          case 7:
            _yield$parseImplicitT = _context3.sent;
            children = _yield$parseImplicitT.children;
            contentUrl = _yield$parseImplicitT.contentUrl;
            if (contentUrl) {
              tile.contentUrl = contentUrl;
              tile.content = {
                uri: contentUrl.replace("".concat(options.basePath, "/"), '')
              };
            }
            tile.refine = getRefine(tile.refine);
            tile.type = getTileType(tile);
            tile.children = children;
            tile.id = tile.contentUrl;
            return _context3.abrupt("return", tile);
          case 16:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _normalizeImplicitTileData.apply(this, arguments);
}
function getImplicitTilingExtensionData(tile) {
  var _tile$extensions;
  return (tile === null || tile === void 0 ? void 0 : (_tile$extensions = tile.extensions) === null || _tile$extensions === void 0 ? void 0 : _tile$extensions['3DTILES_implicit_tiling']) || (tile === null || tile === void 0 ? void 0 : tile.implicitTiling);
}
//# sourceMappingURL=parse-3d-tile-header.js.map