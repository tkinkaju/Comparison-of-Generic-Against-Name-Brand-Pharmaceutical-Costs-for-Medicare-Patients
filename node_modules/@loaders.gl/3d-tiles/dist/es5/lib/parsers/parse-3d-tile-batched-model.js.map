{"version":3,"file":"parse-3d-tile-batched-model.js","names":["parseBatchedModel3DTile","tile","arrayBuffer","byteOffset","options","context","parseBatchedModel","extractGLTF","GLTF_FORMAT","EMBEDDED","extensions","gltf","CESIUM_RTC","rtcCenter","center","parse3DTileHeaderSync","parse3DTileTablesHeaderSync","parse3DTileTablesSync","parse3DTileGLTFViewSync","featureTable","Tile3DFeatureTable","featureTableJson","featureTableBinary","getGlobalProperty","GL","FLOAT"],"sources":["../../../../src/lib/parsers/parse-3d-tile-batched-model.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {GL} from '@loaders.gl/math'; // math.gl/geometry;\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\n// import Tile3DBatchTable from '../classes/tile-3d-batch-table';\n\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\nimport {parse3DTileTablesHeaderSync, parse3DTileTablesSync} from './helpers/parse-3d-tile-tables';\nimport {parse3DTileGLTFViewSync, extractGLTF, GLTF_FORMAT} from './helpers/parse-3d-tile-gltf-view';\n\nexport async function parseBatchedModel3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parseBatchedModel(tile, arrayBuffer, byteOffset, options, context);\n  await extractGLTF(tile, GLTF_FORMAT.EMBEDDED, options, context);\n\n  const extensions = tile?.gltf?.extensions;\n  if (extensions && extensions.CESIUM_RTC) {\n    tile.rtcCenter = extensions.CESIUM_RTC.center;\n  }\n\n  return byteOffset;\n}\n\nfunction parseBatchedModel(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n\n  byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n\n  return byteOffset;\n}\n"],"mappings":";;;;;;;;;AAGA;AACA;AAGA;AACA;AACA;AAAoG,SAE9EA,uBAAuB;EAAA;AAAA;AAAA;EAAA,qFAAtC,iBAAuCC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAC3FF,UAAU,GAAGG,iBAAiB,CAACL,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,CAAC;YAAC;YAAA,OAC1E,IAAAE,gCAAW,EAACN,IAAI,EAAEO,gCAAW,CAACC,QAAQ,EAAEL,OAAO,EAAEC,OAAO,CAAC;UAAA;YAEzDK,UAAU,GAAGT,IAAI,aAAJA,IAAI,qCAAJA,IAAI,CAAEU,IAAI,+CAAV,WAAYD,UAAU;YACzC,IAAIA,UAAU,IAAIA,UAAU,CAACE,UAAU,EAAE;cACvCX,IAAI,CAACY,SAAS,GAAGH,UAAU,CAACE,UAAU,CAACE,MAAM;YAC/C;YAAC,iCAEMX,UAAU;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAClB;EAAA;AAAA;AAED,SAASG,iBAAiB,CAACL,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAC1EF,UAAU,GAAG,IAAAY,wCAAqB,EAACd,IAAI,EAAEC,WAAW,EAAEC,UAAU,CAAC;EAEjEA,UAAU,GAAG,IAAAa,8CAA2B,EAACf,IAAI,EAAEC,WAAW,EAAEC,UAAU,CAAC;EACvEA,UAAU,GAAG,IAAAc,wCAAqB,EAAChB,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,CAAC;EAE1ED,UAAU,GAAG,IAAAe,4CAAuB,EAACjB,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,CAAC;EAE5E,IAAMe,YAAY,GAAG,IAAIC,2BAAkB,CAACnB,IAAI,CAACoB,gBAAgB,EAAEpB,IAAI,CAACqB,kBAAkB,CAAC;EAC3FrB,IAAI,CAACY,SAAS,GAAGM,YAAY,CAACI,iBAAiB,CAAC,YAAY,EAAEC,QAAE,CAACC,KAAK,EAAE,CAAC,CAAC;EAE1E,OAAOtB,UAAU;AACnB"}