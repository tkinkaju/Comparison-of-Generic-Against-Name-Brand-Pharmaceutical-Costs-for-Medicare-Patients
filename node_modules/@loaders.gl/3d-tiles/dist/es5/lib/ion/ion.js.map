{"version":3,"file":"ion.js","names":["CESIUM_ION_URL","getIonTilesetMetadata","accessToken","assetId","getIonAssets","assets","items","item","type","id","getIonAssetMetadata","ionAssetMetadata","url","assert","headers","Authorization","fetchFile","fetch","response","ok","Error","statusText","json","metadata","tilesetInfo"],"sources":["../../../../src/lib/ion/ion.ts"],"sourcesContent":["// Minimal support to load tilsets from the Cesium ION services\n\nimport {fetchFile} from '@loaders.gl/core';\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {type, url} = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetchFile(url, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  return await response.json();\n}\n\n// Return metadata for a specific asset associated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const headers = {Authorization: `Bearer ${accessToken}`};\n\n  const url = `${CESIUM_ION_URL}/${assetId}`;\n  // https://cesium.com/docs/rest-api/#operation/getAsset\n  // Retrieves metadata information about a specific asset.\n  let response = await fetchFile(`${url}`, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  let metadata = await response.json();\n\n  // https://cesium.com/docs/rest-api/#operation/getAssetEndpoint\n  // Retrieves information and credentials that allow you to access the tiled asset data for visualization and analysis.\n  response = await fetchFile(`${url}/endpoint`, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  const tilesetInfo = await response.json();\n\n  // extract dataset description\n  metadata = {\n    ...metadata,\n    ...tilesetInfo\n  };\n\n  return metadata;\n}\n"],"mappings":"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"}