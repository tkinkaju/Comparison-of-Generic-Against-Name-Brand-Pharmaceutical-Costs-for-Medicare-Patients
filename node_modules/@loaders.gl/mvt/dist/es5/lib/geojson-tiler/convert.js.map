{"version":3,"file":"convert.js","names":["convert","data","options","features","type","i","length","convertFeature","geometry","geojson","index","coords","coordinates","tolerance","Math","pow","maxZoom","extent","id","promoteId","properties","generateId","convertPoint","p","convertLine","lineMetrics","line","push","createFeature","convertLines","polygon","newPolygon","geometries","singleGeometry","Error","out","projectX","projectY","ring","isPolygon","x0","y0","size","j","x","y","sqrt","last","simplify","abs","start","end","rings","geom","sin","PI","y2","log"],"sources":["../../../../src/lib/geojson-tiler/convert.ts"],"sourcesContent":["// loaders.gl, MIT license\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\n\n/* eslint-disable */\n// @ts-nocheck\n\nimport type {Feature} from '@loaders.gl/schema';\nimport type {GeoJSONTileFeature} from './tile';\n\nimport {simplify} from './simplify';\nimport {createFeature} from './feature';\n\n// converts GeoJSON feature into an intermediate projected JSON vector format with simplification data\n\nexport function convert(data: Feature, options): GeoJSONTileFeature[] {\n  const features = [];\n  if (data.type === 'FeatureCollection') {\n    for (let i = 0; i < data.features.length; i++) {\n      convertFeature(features, data.features[i], options, i);\n    }\n  } else if (data.type === 'Feature') {\n    convertFeature(features, data, options);\n  } else {\n    // single geometry or a geometry collection\n    convertFeature(features, {geometry: data}, options);\n  }\n\n  return features;\n}\n\nexport type ConvertFeatureOptions = {\n  maxZoom?: number;\n  tolerance: number;\n  extent: number;\n  lineMetrics: boolean;\n};\n\nfunction convertFeature(\n  features: GeoJSONTileFeature[],\n  geojson: Feature,\n  options: ConvertFeatureOptions,\n  index: number\n): void {\n  if (!geojson.geometry) {\n    return;\n  }\n\n  const coords = geojson.geometry.coordinates;\n  const type = geojson.geometry.type;\n  const tolerance = Math.pow(options.tolerance / ((1 << options.maxZoom) * options.extent), 2);\n  let geometry = [];\n  let id = geojson.id;\n  if (options.promoteId) {\n    id = geojson.properties[options.promoteId];\n  } else if (options.generateId) {\n    id = index || 0;\n  }\n  if (type === 'Point') {\n    convertPoint(coords, geometry);\n  } else if (type === 'MultiPoint') {\n    for (const p of coords) {\n      convertPoint(p, geometry);\n    }\n  } else if (type === 'LineString') {\n    convertLine(coords, geometry, tolerance, false);\n  } else if (type === 'MultiLineString') {\n    if (options.lineMetrics) {\n      // explode into linestrings to be able to track metrics\n      for (const line of coords) {\n        geometry = [];\n        convertLine(line, geometry, tolerance, false);\n        features.push(createFeature(id, 'LineString', geometry, geojson.properties));\n      }\n      return;\n    } else {\n      convertLines(coords, geometry, tolerance, false);\n    }\n  } else if (type === 'Polygon') {\n    convertLines(coords, geometry, tolerance, true);\n  } else if (type === 'MultiPolygon') {\n    for (const polygon of coords) {\n      const newPolygon = [];\n      convertLines(polygon, newPolygon, tolerance, true);\n      geometry.push(newPolygon);\n    }\n  } else if (type === 'GeometryCollection') {\n    for (const singleGeometry of geojson.geometry.geometries) {\n      convertFeature(\n        features,\n        {\n          id,\n          geometry: singleGeometry,\n          properties: geojson.properties\n        },\n        options,\n        index\n      );\n    }\n    return;\n  } else {\n    throw new Error('Input data is not a valid GeoJSON object.');\n  }\n\n  features.push(createFeature(id, type, geometry, geojson.properties));\n}\n\nfunction convertPoint(coords, out): void {\n  out.push(projectX(coords[0]), projectY(coords[1]), 0);\n}\n\nfunction convertLine(ring: number[], out, tolerance: number, isPolygon: boolean): void {\n  let x0, y0;\n  let size = 0;\n\n  for (let j = 0; j < ring.length; j++) {\n    const x = projectX(ring[j][0]);\n    const y = projectY(ring[j][1]);\n\n    out.push(x, y, 0);\n\n    if (j > 0) {\n      if (isPolygon) {\n        size += (x0 * y - x * y0) / 2; // area\n      } else {\n        size += Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)); // length\n      }\n    }\n    x0 = x;\n    y0 = y;\n  }\n\n  const last = out.length - 3;\n  out[2] = 1;\n  simplify(out, 0, last, tolerance);\n  out[last + 2] = 1;\n\n  out.size = Math.abs(size);\n  out.start = 0;\n  out.end = out.size;\n}\n\nfunction convertLines(rings: number[][], out, tolerance: number, isPolygon: boolean): void {\n  for (let i = 0; i < rings.length; i++) {\n    const geom = [];\n    convertLine(rings[i], geom, tolerance, isPolygon);\n    out.push(geom);\n  }\n}\n\nfunction projectX(x: number): number {\n  return x / 360 + 0.5;\n}\n\nfunction projectY(y: number): number {\n  const sin = Math.sin((y * Math.PI) / 180);\n  const y2 = 0.5 - (0.25 * Math.log((1 + sin) / (1 - sin))) / Math.PI;\n  return y2 < 0 ? 0 : y2 > 1 ? 1 : y2;\n}\n"],"mappings":"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"}