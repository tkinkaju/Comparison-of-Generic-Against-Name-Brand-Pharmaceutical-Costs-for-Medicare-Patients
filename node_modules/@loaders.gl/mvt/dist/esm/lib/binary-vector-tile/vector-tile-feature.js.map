{"version":3,"file":"vector-tile-feature.js","names":["classifyRings","project","readFeature","endPos","cmd","cmdLen","length","x","y","i","TEST_EXPORTS","VectorTileFeature","constructor","pbf","end","extent","keys","values","geometryInfo","properties","type","id","_pbf","_geometry","_keys","_values","_geometryInfo","readFields","loadGeometry","pos","readVarint","indices","data","readSVarint","push","start","Error","_toBinaryCoordinates","transform","geom","geometry","coordLength","pointFeaturesCount","pointPositionsCount","lineFeaturesCount","linePathsCount","linePositionsCount","polygonFeaturesCount","polygonObjectsCount","polygonRingsCount","polygonPositionsCount","result","toBinaryCoordinates","options","z","size","Math","pow","x0","y0"],"sources":["../../../../src/lib/binary-vector-tile/vector-tile-feature.ts"],"sourcesContent":["// This code is forked from https://github.com/mapbox/vector-tile-js under BSD 3-clause license.\n\nimport Protobuf from 'pbf';\nimport {FlatFeature, FlatIndexedGeometry, GeojsonGeometryInfo} from '@loaders.gl/schema';\nimport {classifyRings, project, readFeature} from '../../helpers/binary-util-functions';\n\n// Reduce GC by reusing variables\nlet endPos: number;\nlet cmd: number;\nlet cmdLen: number;\nlet length: number;\nlet x: number;\nlet y: number;\nlet i: number;\n\nexport const TEST_EXPORTS = {\n  classifyRings\n};\n\nexport default class VectorTileFeature {\n  properties: {[x: string]: string | number | boolean | null};\n  extent: any;\n  type: number;\n  id: number | null;\n  _pbf: Protobuf;\n  _geometry: number;\n  _keys: string[];\n  _values: (string | number | boolean | null)[];\n  _geometryInfo: GeojsonGeometryInfo;\n\n  // eslint-disable-next-line max-params\n  constructor(\n    pbf: Protobuf,\n    end: number,\n    extent: any,\n    keys: string[],\n    values: (string | number | boolean | null)[],\n    geometryInfo: GeojsonGeometryInfo\n  ) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    this._geometryInfo = geometryInfo;\n\n    pbf.readFields(readFeature, this, end);\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  loadGeometry(): FlatIndexedGeometry {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    endPos = pbf.readVarint() + pbf.pos;\n    cmd = 1;\n    length = 0;\n    x = 0;\n    y = 0;\n    i = 0;\n\n    // Note: I attempted to replace the `data` array with a\n    // Float32Array, but performance was worse, both using\n    // `set()` and direct index access. Also, we cannot\n    // know how large the buffer should be, so it would\n    // increase memory usage\n    const indices: number[] = []; // Indices where geometries start\n    const data: number[] = []; // Flat array of coordinate data\n\n    while (pbf.pos < endPos) {\n      if (length <= 0) {\n        cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // New line\n          indices.push(i);\n        }\n        data.push(x, y);\n        i += 2;\n      } else if (cmd === 7) {\n        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n        if (i > 0) {\n          const start = indices[indices.length - 1]; // start index of polygon\n          data.push(data[start], data[start + 1]); // closePolygon\n          i += 2;\n        }\n      } else {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    return {data, indices};\n  }\n\n  /**\n   *\n   * @param transform\n   * @returns result\n   */\n  _toBinaryCoordinates(transform) {\n    // Expands the protobuf data to an intermediate Flat GeoJSON\n    // data format, which maps closely to the binary data buffers.\n    // It is similar to GeoJSON, but rather than storing the coordinates\n    // in multidimensional arrays, we have a 1D `data` with all the\n    // coordinates, and then index into this using the `indices`\n    // parameter, e.g.\n    //\n    // geometry: {\n    //   type: 'Point', data: [1,2], indices: [0]\n    // }\n    // geometry: {\n    //   type: 'LineString', data: [1,2,3,4,...], indices: [0]\n    // }\n    // geometry: {\n    //   type: 'Polygon', data: [1,2,3,4,...], indices: [[0, 2]]\n    // }\n    // Thus the indices member lets us look up the relevant range\n    // from the data array.\n    // The Multi* versions of the above types share the same data\n    // structure, just with multiple elements in the indices array\n    const geom = this.loadGeometry();\n    let geometry;\n\n    // Apply the supplied transformation to data\n    transform(geom.data, this);\n\n    const coordLength = 2;\n\n    // eslint-disable-next-line default-case\n    switch (this.type) {\n      case 1: // Point\n        this._geometryInfo.pointFeaturesCount++;\n        this._geometryInfo.pointPositionsCount += geom.indices.length;\n        geometry = {type: 'Point', ...geom};\n        break;\n\n      case 2: // LineString\n        this._geometryInfo.lineFeaturesCount++;\n        this._geometryInfo.linePathsCount += geom.indices.length;\n        this._geometryInfo.linePositionsCount += geom.data.length / coordLength;\n        geometry = {type: 'LineString', ...geom};\n        break;\n\n      case 3: // Polygon\n        geometry = classifyRings(geom);\n\n        // Unlike Point & LineString geom.indices is a 2D array, thanks\n        // to the classifyRings method\n        this._geometryInfo.polygonFeaturesCount++;\n        this._geometryInfo.polygonObjectsCount += geometry.indices.length;\n\n        for (const indices of geometry.indices) {\n          this._geometryInfo.polygonRingsCount += indices.length;\n        }\n        this._geometryInfo.polygonPositionsCount += geometry.data.length / coordLength;\n\n        break;\n      default:\n        throw new Error(`Invalid geometry type: ${this.type}`);\n    }\n\n    const result: FlatFeature = {type: 'Feature', geometry, properties: this.properties};\n\n    if (this.id !== null) {\n      result.id = this.id;\n    }\n\n    return result;\n  }\n\n  toBinaryCoordinates(\n    options: {x: number; y: number; z: number} | ((data: number[], feature: {extent: any}) => void)\n  ): FlatFeature {\n    if (typeof options === 'function') {\n      return this._toBinaryCoordinates(options);\n    }\n    const {x, y, z} = options;\n    const size = this.extent * Math.pow(2, z);\n    const x0 = this.extent * x;\n    const y0 = this.extent * y;\n\n    return this._toBinaryCoordinates((data: number[]) => project(data, x0, y0, size));\n  }\n}\n"],"mappings":";;AAIA,SAAQA,aAAa,EAAEC,OAAO,EAAEC,WAAW,QAAO,qCAAqC;;AAGvF,IAAIC,MAAc;AAClB,IAAIC,GAAW;AACf,IAAIC,MAAc;AAClB,IAAIC,MAAc;AAClB,IAAIC,CAAS;AACb,IAAIC,CAAS;AACb,IAAIC,CAAS;AAEb,OAAO,MAAMC,YAAY,GAAG;EAC1BV;AACF,CAAC;AAED,eAAe,MAAMW,iBAAiB,CAAC;EAYrCC,WAAW,CACTC,GAAa,EACbC,GAAW,EACXC,MAAW,EACXC,IAAc,EACdC,MAA4C,EAC5CC,YAAiC,EACjC;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAEA,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;IACpB,IAAI,CAACJ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACK,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,EAAE,GAAG,IAAI;;IAGd,IAAI,CAACC,IAAI,GAAGT,GAAG;IACf,IAAI,CAACU,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACC,KAAK,GAAGR,IAAI;IACjB,IAAI,CAACS,OAAO,GAAGR,MAAM;IACrB,IAAI,CAACS,aAAa,GAAGR,YAAY;IAEjCL,GAAG,CAACc,UAAU,CAACzB,WAAW,EAAE,IAAI,EAAEY,GAAG,CAAC;EACxC;;EAGAc,YAAY,GAAwB;IAClC,MAAMf,GAAG,GAAG,IAAI,CAACS,IAAI;IACrBT,GAAG,CAACgB,GAAG,GAAG,IAAI,CAACN,SAAS;IAExBpB,MAAM,GAAGU,GAAG,CAACiB,UAAU,EAAE,GAAGjB,GAAG,CAACgB,GAAG;IACnCzB,GAAG,GAAG,CAAC;IACPE,MAAM,GAAG,CAAC;IACVC,CAAC,GAAG,CAAC;IACLC,CAAC,GAAG,CAAC;IACLC,CAAC,GAAG,CAAC;;IAOL,MAAMsB,OAAiB,GAAG,EAAE;IAC5B,MAAMC,IAAc,GAAG,EAAE;;IAEzB,OAAOnB,GAAG,CAACgB,GAAG,GAAG1B,MAAM,EAAE;MACvB,IAAIG,MAAM,IAAI,CAAC,EAAE;QACfD,MAAM,GAAGQ,GAAG,CAACiB,UAAU,EAAE;QACzB1B,GAAG,GAAGC,MAAM,GAAG,GAAG;QAClBC,MAAM,GAAGD,MAAM,IAAI,CAAC;MACtB;MAEAC,MAAM,EAAE;MAER,IAAIF,GAAG,KAAK,CAAC,IAAIA,GAAG,KAAK,CAAC,EAAE;QAC1BG,CAAC,IAAIM,GAAG,CAACoB,WAAW,EAAE;QACtBzB,CAAC,IAAIK,GAAG,CAACoB,WAAW,EAAE;QAEtB,IAAI7B,GAAG,KAAK,CAAC,EAAE;UAEb2B,OAAO,CAACG,IAAI,CAACzB,CAAC,CAAC;QACjB;QACAuB,IAAI,CAACE,IAAI,CAAC3B,CAAC,EAAEC,CAAC,CAAC;QACfC,CAAC,IAAI,CAAC;MACR,CAAC,MAAM,IAAIL,GAAG,KAAK,CAAC,EAAE;QAEpB,IAAIK,CAAC,GAAG,CAAC,EAAE;UACT,MAAM0B,KAAK,GAAGJ,OAAO,CAACA,OAAO,CAACzB,MAAM,GAAG,CAAC,CAAC;UACzC0B,IAAI,CAACE,IAAI,CAACF,IAAI,CAACG,KAAK,CAAC,EAAEH,IAAI,CAACG,KAAK,GAAG,CAAC,CAAC,CAAC;UACvC1B,CAAC,IAAI,CAAC;QACR;MACF,CAAC,MAAM;QACL,MAAM,IAAI2B,KAAK,2BAAoBhC,GAAG,EAAG;MAC3C;IACF;IAEA,OAAO;MAAC4B,IAAI;MAAED;IAAO,CAAC;EACxB;;EAOAM,oBAAoB,CAACC,SAAS,EAAE;IAqB9B,MAAMC,IAAI,GAAG,IAAI,CAACX,YAAY,EAAE;IAChC,IAAIY,QAAQ;;IAGZF,SAAS,CAACC,IAAI,CAACP,IAAI,EAAE,IAAI,CAAC;IAE1B,MAAMS,WAAW,GAAG,CAAC;;IAGrB,QAAQ,IAAI,CAACrB,IAAI;MACf,KAAK,CAAC;QACJ,IAAI,CAACM,aAAa,CAACgB,kBAAkB,EAAE;QACvC,IAAI,CAAChB,aAAa,CAACiB,mBAAmB,IAAIJ,IAAI,CAACR,OAAO,CAACzB,MAAM;QAC7DkC,QAAQ,GAAG;UAACpB,IAAI,EAAE,OAAO;UAAE,GAAGmB;QAAI,CAAC;QACnC;MAEF,KAAK,CAAC;QACJ,IAAI,CAACb,aAAa,CAACkB,iBAAiB,EAAE;QACtC,IAAI,CAAClB,aAAa,CAACmB,cAAc,IAAIN,IAAI,CAACR,OAAO,CAACzB,MAAM;QACxD,IAAI,CAACoB,aAAa,CAACoB,kBAAkB,IAAIP,IAAI,CAACP,IAAI,CAAC1B,MAAM,GAAGmC,WAAW;QACvED,QAAQ,GAAG;UAACpB,IAAI,EAAE,YAAY;UAAE,GAAGmB;QAAI,CAAC;QACxC;MAEF,KAAK,CAAC;QACJC,QAAQ,GAAGxC,aAAa,CAACuC,IAAI,CAAC;;QAI9B,IAAI,CAACb,aAAa,CAACqB,oBAAoB,EAAE;QACzC,IAAI,CAACrB,aAAa,CAACsB,mBAAmB,IAAIR,QAAQ,CAACT,OAAO,CAACzB,MAAM;QAEjE,KAAK,MAAMyB,OAAO,IAAIS,QAAQ,CAACT,OAAO,EAAE;UACtC,IAAI,CAACL,aAAa,CAACuB,iBAAiB,IAAIlB,OAAO,CAACzB,MAAM;QACxD;QACA,IAAI,CAACoB,aAAa,CAACwB,qBAAqB,IAAIV,QAAQ,CAACR,IAAI,CAAC1B,MAAM,GAAGmC,WAAW;QAE9E;MACF;QACE,MAAM,IAAIL,KAAK,kCAA2B,IAAI,CAAChB,IAAI,EAAG;IAAC;IAG3D,MAAM+B,MAAmB,GAAG;MAAC/B,IAAI,EAAE,SAAS;MAAEoB,QAAQ;MAAErB,UAAU,EAAE,IAAI,CAACA;IAAU,CAAC;IAEpF,IAAI,IAAI,CAACE,EAAE,KAAK,IAAI,EAAE;MACpB8B,MAAM,CAAC9B,EAAE,GAAG,IAAI,CAACA,EAAE;IACrB;IAEA,OAAO8B,MAAM;EACf;EAEAC,mBAAmB,CACjBC,OAA+F,EAClF;IACb,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;MACjC,OAAO,IAAI,CAAChB,oBAAoB,CAACgB,OAAO,CAAC;IAC3C;IACA,MAAM;MAAC9C,CAAC;MAAEC,CAAC;MAAE8C;IAAC,CAAC,GAAGD,OAAO;IACzB,MAAME,IAAI,GAAG,IAAI,CAACxC,MAAM,GAAGyC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,CAAC,CAAC;IACzC,MAAMI,EAAE,GAAG,IAAI,CAAC3C,MAAM,GAAGR,CAAC;IAC1B,MAAMoD,EAAE,GAAG,IAAI,CAAC5C,MAAM,GAAGP,CAAC;IAE1B,OAAO,IAAI,CAAC6B,oBAAoB,CAAEL,IAAc,IAAK/B,OAAO,CAAC+B,IAAI,EAAE0B,EAAE,EAAEC,EAAE,EAAEJ,IAAI,CAAC,CAAC;EACnF;AACF"}