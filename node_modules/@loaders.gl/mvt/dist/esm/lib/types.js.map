{"version":3,"file":"types.js","names":[],"sources":["../../../src/lib/types.ts"],"sourcesContent":["import type {LoaderOptions} from '@loaders.gl/loader-utils';\n\n/** For local coordinates, the tileIndex is not required */\ntype MVTLocalCoordinatesOptions = {\n  /**\n   * When set to `local`, the parser will return a flat array of GeoJSON objects with local coordinates decoded from tile origin.\n   */\n  coordinates: 'local';\n  tileIndex: null;\n};\n\n/** In WGS84 coordinates, the tileIndex is required */\ntype MVTWgs84CoordinatesOptions = {\n  /**\n   * When set to `wgs84`, the parser will return a flat array of GeoJSON objects with coordinates in longitude, latitude decoded from the provided tile index.\n   */\n  coordinates: 'wgs84';\n\n  /**\n   * Mandatory with `wgs84` coordinates option. An object containing tile index values (`x`, `y`,\n   * `z`) to reproject features' coordinates into WGS84.\n   */\n  tileIndex: {x: number; y: number; z: number};\n};\n\nexport type MVTOptions = (MVTLocalCoordinatesOptions | MVTWgs84CoordinatesOptions) & {\n  /**\n   * When non-`null`, the layer name of each feature is added to\n   * `feature.properties[layerProperty]`. (A `feature.properties` object is created if the feature\n   * has no existing properties). If set to `null`, a layer name property will not be added.\n   */\n  layerProperty?: string | number;\n\n  /**\n   * Optional list of layer names. If not `null`, only features belonging to the named layers will\n   * be included in the output. If `null`, features from all layers are returned.\n   */\n  layers?: string[];\n  shape?: 'geojson-row-table' | 'columnar-table' | 'geojson' | 'binary' | 'binary-geometry';\n};\n\nexport type MVTMapboxGeometry = {\n  type?: string;\n  id?: number;\n  length: number;\n  coordinates?: any[];\n};\n\nexport type MVTMapboxCoordinates = {\n  type: string;\n  geometry: {\n    type: string;\n    coordinates: MVTMapboxGeometry;\n  };\n  properties: {[x: string]: string | number | boolean | null};\n  id?: number;\n};\n\nexport type MVTLoaderOptions = LoaderOptions & {\n  mvt?: MVTOptions;\n  gis?: {\n    /**\n     * When set to `true`, the parser will output the data in binary format. This is equivalent to loading the data as GeoJSON and then applying [geojsonToBinary](https://loaders.gl/modules/gis/docs/api-reference/geojson-to-binary).\n     */\n    binary?: boolean;\n    /** @deprecated. Use options.mvt.shape */\n    format?: 'geojson-row-table' | 'columnar-table' | 'geojson' | 'binary' | 'binary-geometry';\n  };\n};\n"],"mappings":""}