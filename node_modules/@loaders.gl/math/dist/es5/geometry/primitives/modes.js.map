{"version":3,"file":"modes.js","names":["getPrimitiveModeType","mode","GL","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","isPrimitiveModeExpandable","getPrimitiveModeExpandedLength","length"],"sources":["../../../../src/geometry/primitives/modes.ts"],"sourcesContent":["import {GL} from '../constants';\n\n/**\n * Different methods of working with geometries depending on glType\n /**\n\n/**\n * @param mode\n * @returns draw points | lines | triangles\n */\nexport function getPrimitiveModeType(mode?: number): number {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return GL.POINTS;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return GL.LINES;\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return GL.TRIANGLES;\n    default:\n      throw new Error('Unknown primitive mode');\n  }\n}\n/**\n * @param mode\n * @returns true | false\n */\nexport function isPrimitiveModeExpandable(mode: number): boolean {\n  switch (mode) {\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return true;\n    default:\n      return false;\n  }\n}\n/**\n * Returns new length depends on glType\n * @param mode\n * @param length\n * @returns new length\n */\nexport function getPrimitiveModeExpandedLength(mode: number, length: number): number {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return length;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n      return length;\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n      return length;\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return length + 1;\n    case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n      return length;\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return (length - 2) * 3;\n    default:\n      throw new Error('Unknown length');\n  }\n}\n"],"mappings":";;;;;;;;AAAA;AAUO,SAASA,oBAAoB,CAACC,IAAa,EAAU;EAC1D,QAAQA,IAAI;IACV,KAAKC,aAAE,CAACC,MAAM;MACZ,OAAOD,aAAE,CAACC,MAAM;IAClB,KAAKD,aAAE,CAACE,KAAK;IACb,KAAKF,aAAE,CAACG,UAAU;IAClB,KAAKH,aAAE,CAACI,SAAS;MACf,OAAOJ,aAAE,CAACE,KAAK;IACjB,KAAKF,aAAE,CAACK,SAAS;IACjB,KAAKL,aAAE,CAACM,cAAc;IACtB,KAAKN,aAAE,CAACO,YAAY;MAClB,OAAOP,aAAE,CAACK,SAAS;IACrB;MACE,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;EAAC;AAEhD;AAKO,SAASC,yBAAyB,CAACV,IAAY,EAAW;EAC/D,QAAQA,IAAI;IACV,KAAKC,aAAE,CAACG,UAAU;IAClB,KAAKH,aAAE,CAACI,SAAS;IACjB,KAAKJ,aAAE,CAACM,cAAc;IACtB,KAAKN,aAAE,CAACO,YAAY;MAClB,OAAO,IAAI;IACb;MACE,OAAO,KAAK;EAAC;AAEnB;AAOO,SAASG,8BAA8B,CAACX,IAAY,EAAEY,MAAc,EAAU;EACnF,QAAQZ,IAAI;IACV,KAAKC,aAAE,CAACC,MAAM;MACZ,OAAOU,MAAM;IACf,KAAKX,aAAE,CAACE,KAAK;MACX,OAAOS,MAAM;IACf,KAAKX,aAAE,CAACG,UAAU;MAChB,OAAOQ,MAAM;IACf,KAAKX,aAAE,CAACI,SAAS;MACf,OAAOO,MAAM,GAAG,CAAC;IACnB,KAAKX,aAAE,CAACK,SAAS;MACf,OAAOM,MAAM;IACf,KAAKX,aAAE,CAACM,cAAc;IACtB,KAAKN,aAAE,CAACO,YAAY;MAClB,OAAO,CAACI,MAAM,GAAG,CAAC,IAAI,CAAC;IACzB;MACE,MAAM,IAAIH,KAAK,CAAC,gBAAgB,CAAC;EAAC;AAExC"}