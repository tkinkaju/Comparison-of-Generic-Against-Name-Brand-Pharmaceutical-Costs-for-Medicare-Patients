{"version":3,"file":"gl-type.js","names":["GL_TYPE_TO_ARRAY_TYPE","GL","DOUBLE","Float64Array","FLOAT","Float32Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array","NAME_TO_GL_TYPE","ERR_TYPE_CONVERSION","GLType","arrayOrType","ArrayBuffer","isView","constructor","glType","ArrayType","Error","name","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","getArrayType","BYTES_PER_ELEMENT","Boolean","buffer","byteOffset","length","undefined","byteLength","getByteSize"],"sources":["../../../../src/geometry/gl/gl-type.ts"],"sourcesContent":["import type {TypedArray} from '@math.gl/core';\nimport {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\ntype GlTypeMap = {\n  [index: string]: number;\n};\nconst NAME_TO_GL_TYPE: GlTypeMap = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  /**\n   * Returns the size, in bytes, of the corresponding datatype\n   * @param arrayOrType\n   * @returns glType a a string\n   */\n  static fromTypedArray(arrayOrType: TypedArray | Function): string {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n  /**\n   * Extracts name for glType from array NAME_TO_GL_TYPE\n   * @param name\n   * @returns glType as a number\n   */\n  static fromName(name: string): number {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType: number) {\n    switch (glType) {\n      /*eslint-disable*/\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_6_5:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        /* eslint-enable*/\n        return Uint16Array;\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n  /**\n   * Returns the size in bytes of one element of the provided WebGL type\n   * @param glType\n   * @returns size of glType\n   */\n  static getByteSize(glType: number): number {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n  /**\n   * Returns `true` if `glType` is a valid WebGL data type.\n   * @param glType\n   * @returns boolean\n   */\n  static validate(glType: number): boolean {\n    return Boolean(GLType.getArrayType(glType));\n  }\n  /**\n   * Creates a typed view of an array of bytes\n   * @param glType The type of typed array (ArrayBuffer view) to create\n   * @param buffer The buffer storage to use for the view.\n   * @param byteOffset The offset, in bytes, to the first element in the view\n   * @param length The number of elements in the view. Defaults to buffer length\n   * @returns A typed array view of the buffer\n   */\n  static createTypedArray(\n    glType: number,\n    buffer: TypedArray,\n    byteOffset: number = 0,\n    length?: number\n  ): TypedArray {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n    const ArrayType = GLType.getArrayType(glType);\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"],"mappings":"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"}