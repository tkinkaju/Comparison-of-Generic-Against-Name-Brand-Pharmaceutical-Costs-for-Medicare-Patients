{"version":3,"file":"primitive-iterator.js","names":["makePrimitiveIterator","indices","attributes","mode","start","end","values","value","undefined","length","info","type","getPrimitiveModeType","i1","i2","i3","i","GL","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","assert"],"sources":["../../../../src/geometry/iterators/primitive-iterator.ts"],"sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AAAgD,wCAsB/BA,qBAAqB;AAA/B,SAAUA,qBAAqB,CACpCC,OAAa;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;IAAA;MAAA;QAAA;UACbC,UAAkB,2DAAG,CAAC,CAAC;UACvBC,IAAa;UACbC,KAAK,2DAAG,CAAC;UACTC,GAAY;UAGZ,IAAIJ,OAAO,EAAE;YACXA,OAAO,GAAGA,OAAO,CAACK,MAAM,IAAIL,OAAO,CAACM,KAAK,IAAIN,OAAO;UACtD;;UAGA,IAAII,GAAG,KAAKG,SAAS,EAAE;YACrBH,GAAG,GAAGJ,OAAO,GAAGA,OAAO,CAACQ,MAAM,GAAGL,KAAK;UACxC;;UAGMM,IAAiB,GAAG;YACxBR,UAAU,EAAVA,UAAU;YACVS,IAAI,EAAE,IAAAC,2BAAoB,EAACT,IAAI,CAAC;YAChCU,EAAE,EAAE,CAAC;YACLC,EAAE,EAAE,CAAC;YACLC,EAAE,EAAE;UACN,CAAC;UAEGC,CAAC,GAAGZ,KAAK;QAAA;UAAA,MAENY,CAAC,GAAGX,GAAG;YAAA;YAAA;UAAA;UAAA,cACJF,IAAI;UAAA,gCACLc,aAAE,CAACC,MAAM,wBAITD,aAAE,CAACE,KAAK,wBAKRF,aAAE,CAACG,UAAU,wBAKbH,aAAE,CAACI,SAAS,wBAKZJ,aAAE,CAACK,SAAS,wBAMZL,aAAE,CAACM,cAAc,wBAKjBN,aAAE,CAACO,YAAY;UAAA;QAAA;UA7BlBd,IAAI,CAACG,EAAE,GAAGG,CAAC;UACXA,CAAC,IAAI,CAAC;UAAC;QAAA;UAGPN,IAAI,CAACG,EAAE,GAAGG,CAAC;UACXN,IAAI,CAACI,EAAE,GAAGE,CAAC,GAAG,CAAC;UACfA,CAAC,IAAI,CAAC;UAAC;QAAA;UAGPN,IAAI,CAACG,EAAE,GAAGG,CAAC;UACXN,IAAI,CAACI,EAAE,GAAGE,CAAC,GAAG,CAAC;UACfA,CAAC,IAAI,CAAC;UAAC;QAAA;UAGPN,IAAI,CAACG,EAAE,GAAGG,CAAC;UACXN,IAAI,CAACI,EAAE,GAAGE,CAAC,GAAG,CAAC;UACfA,CAAC,IAAI,CAAC;UAAC;QAAA;UAGPN,IAAI,CAACG,EAAE,GAAGG,CAAC;UACXN,IAAI,CAACI,EAAE,GAAGE,CAAC,GAAG,CAAC;UACfN,IAAI,CAACK,EAAE,GAAGC,CAAC,GAAG,CAAC;UACfA,CAAC,IAAI,CAAC;UAAC;QAAA;UAGPN,IAAI,CAACG,EAAE,GAAGG,CAAC;UACXN,IAAI,CAACI,EAAE,GAAGE,CAAC,GAAG,CAAC;UACfA,CAAC,IAAI,CAAC;UAAC;QAAA;UAGPN,IAAI,CAACG,EAAE,GAAG,CAAC;UACXH,IAAI,CAACI,EAAE,GAAGE,CAAC;UACXN,IAAI,CAACK,EAAE,GAAGC,CAAC,GAAG,CAAC;UACfA,CAAC,IAAI,CAAC;UAAC;QAAA;UAIP,IAAAS,mBAAM,EAAC,KAAK,CAAC;QAAC;UAIlB,IAAIxB,OAAO,EAAE;YACX,IAAI,IAAI,IAAIS,IAAI,EAAE;cAChBA,IAAI,CAACG,EAAE,GAAGZ,OAAO,CAACS,IAAI,CAACG,EAAE,CAAC;cAC1BH,IAAI,CAACI,EAAE,GAAGb,OAAO,CAACS,IAAI,CAACI,EAAE,CAAC;cAC1BJ,IAAI,CAACK,EAAE,GAAGd,OAAO,CAACS,IAAI,CAACK,EAAE,CAAC;YAC5B;UACF;UAAC;UAED,OAAML,IAAI;QAAA;UAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"}