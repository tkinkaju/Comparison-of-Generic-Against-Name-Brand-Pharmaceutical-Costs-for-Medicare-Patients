{"version":3,"file":"compute-bounding-sphere.js","names":[],"sources":["../../../../src/geometry/attributes/compute-bounding-sphere.ts"],"sourcesContent":["/* eslint-disable */\n/**\nimport {getPositions} from './get-attribute-from-geometry';\n\nexport function computeBoundingSphere(geometry: any, boundingBox: object, vector: Vector3 ) {\n  const positions = getPositions(geometry);\n\n  const center = getBoundingBox(center);\n  box.setFromBufferAttribute(position);\n  box.getCenter(center);\n\n  // hoping to find a boundingSphere with a radius smaller than the\n  // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n  var maxRadiusSq = 0;\n\n  for (const position of makeAttributeIterator(positions)) {\n    vector.x = position[0];\n    vector.y = position[1];\n    vector.z = position[2];\n    maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n  }\n\n  const radius = Math.sqrt(maxRadiusSq);\n  assert(Number.isFinite(radius));\n\n  return {center, radius};\n}\n*/\n"],"mappings":""}