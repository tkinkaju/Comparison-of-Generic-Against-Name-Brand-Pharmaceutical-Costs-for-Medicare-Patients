{"version":3,"file":"primitive-iterator.js","names":["GL","getPrimitiveModeType","assert","makePrimitiveIterator","indices","attributes","mode","start","end","values","value","undefined","length","info","type","i1","i2","i3","i","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"],"sources":["../../../../src/geometry/iterators/primitive-iterator.ts"],"sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"],"mappings":"AAAA,SAAQA,EAAE,QAAO,cAAc;AAC/B,SAAQC,oBAAoB,QAAO,qBAAqB;AACxD,SAAQC,MAAM,QAAO,0BAA0B;;AAsB/C,OAAO,UAAUC,qBAAqB,CACpCC,OAAa,EAKqE;EAAA,IAJlFC,UAAkB,uEAAG,CAAC,CAAC;EAAA,IACvBC,IAAa;EAAA,IACbC,KAAK,uEAAG,CAAC;EAAA,IACTC,GAAY;EAGZ,IAAIJ,OAAO,EAAE;IACXA,OAAO,GAAGA,OAAO,CAACK,MAAM,IAAIL,OAAO,CAACM,KAAK,IAAIN,OAAO;EACtD;;EAGA,IAAII,GAAG,KAAKG,SAAS,EAAE;IACrBH,GAAG,GAAGJ,OAAO,GAAGA,OAAO,CAACQ,MAAM,GAAGL,KAAK;EACxC;;EAGA,MAAMM,IAAiB,GAAG;IACxBR,UAAU;IACVS,IAAI,EAAEb,oBAAoB,CAACK,IAAI,CAAC;IAChCS,EAAE,EAAE,CAAC;IACLC,EAAE,EAAE,CAAC;IACLC,EAAE,EAAE;EACN,CAAC;EAED,IAAIC,CAAC,GAAGX,KAAK;EAEb,OAAOW,CAAC,GAAGV,GAAG,EAAE;IACd,QAAQF,IAAI;MACV,KAAKN,EAAE,CAACmB,MAAM;QACZN,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXA,CAAC,IAAI,CAAC;QACN;MACF,KAAKlB,EAAE,CAACoB,KAAK;QACXP,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXL,IAAI,CAACG,EAAE,GAAGE,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACF,KAAKlB,EAAE,CAACqB,UAAU;QAChBR,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXL,IAAI,CAACG,EAAE,GAAGE,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACF,KAAKlB,EAAE,CAACsB,SAAS;QACfT,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXL,IAAI,CAACG,EAAE,GAAGE,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACF,KAAKlB,EAAE,CAACuB,SAAS;QACfV,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXL,IAAI,CAACG,EAAE,GAAGE,CAAC,GAAG,CAAC;QACfL,IAAI,CAACI,EAAE,GAAGC,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACF,KAAKlB,EAAE,CAACwB,cAAc;QACpBX,IAAI,CAACE,EAAE,GAAGG,CAAC;QACXL,IAAI,CAACG,EAAE,GAAGE,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MACF,KAAKlB,EAAE,CAACyB,YAAY;QAClBZ,IAAI,CAACE,EAAE,GAAG,CAAC;QACXF,IAAI,CAACG,EAAE,GAAGE,CAAC;QACXL,IAAI,CAACI,EAAE,GAAGC,CAAC,GAAG,CAAC;QACfA,CAAC,IAAI,CAAC;QACN;MAEF;QACEhB,MAAM,CAAC,KAAK,CAAC;IAAC;;IAIlB,IAAIE,OAAO,EAAE;MACX,IAAI,IAAI,IAAIS,IAAI,EAAE;QAChBA,IAAI,CAACE,EAAE,GAAGX,OAAO,CAACS,IAAI,CAACE,EAAE,CAAC;QAC1BF,IAAI,CAACG,EAAE,GAAGZ,OAAO,CAACS,IAAI,CAACG,EAAE,CAAC;QAC1BH,IAAI,CAACI,EAAE,GAAGb,OAAO,CAACS,IAAI,CAACI,EAAE,CAAC;MAC5B;IACF;IAEA,MAAMJ,IAAI;EACZ;AACF"}