{"version":3,"file":"gl-type.js","names":["GL_TYPE","GL","GL_TYPE_TO_ARRAY_TYPE","DOUBLE","Float64Array","FLOAT","Float32Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array","NAME_TO_GL_TYPE","ERR_TYPE_CONVERSION","GLType","fromTypedArray","arrayOrType","ArrayBuffer","isView","constructor","glType","ArrayType","Error","fromName","name","getArrayType","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","getByteSize","BYTES_PER_ELEMENT","validate","Boolean","createTypedArray","buffer","byteOffset","length","undefined","byteLength"],"sources":["../../../../src/geometry/gl/gl-type.ts"],"sourcesContent":["import type {TypedArray} from '@math.gl/core';\nimport {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\ntype GlTypeMap = {\n  [index: string]: number;\n};\nconst NAME_TO_GL_TYPE: GlTypeMap = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  /**\n   * Returns the size, in bytes, of the corresponding datatype\n   * @param arrayOrType\n   * @returns glType a a string\n   */\n  static fromTypedArray(arrayOrType: TypedArray | Function): string {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n  /**\n   * Extracts name for glType from array NAME_TO_GL_TYPE\n   * @param name\n   * @returns glType as a number\n   */\n  static fromName(name: string): number {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType: number) {\n    switch (glType) {\n      /*eslint-disable*/\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_6_5:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        /* eslint-enable*/\n        return Uint16Array;\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n  /**\n   * Returns the size in bytes of one element of the provided WebGL type\n   * @param glType\n   * @returns size of glType\n   */\n  static getByteSize(glType: number): number {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n  /**\n   * Returns `true` if `glType` is a valid WebGL data type.\n   * @param glType\n   * @returns boolean\n   */\n  static validate(glType: number): boolean {\n    return Boolean(GLType.getArrayType(glType));\n  }\n  /**\n   * Creates a typed view of an array of bytes\n   * @param glType The type of typed array (ArrayBuffer view) to create\n   * @param buffer The buffer storage to use for the view.\n   * @param byteOffset The offset, in bytes, to the first element in the view\n   * @param length The number of elements in the view. Defaults to buffer length\n   * @returns A typed array view of the buffer\n   */\n  static createTypedArray(\n    glType: number,\n    buffer: TypedArray,\n    byteOffset: number = 0,\n    length?: number\n  ): TypedArray {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n    const ArrayType = GLType.getArrayType(glType);\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"],"mappings":"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"}