"use strict";
// loaders.gl, MIT license
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseWFSCapabilities = void 0;
const xml_1 = require("@loaders.gl/xml");
// GetCapabilities
/**
 * Parses a typed data structure from raw XML for `GetCapabilities` response
 * @note Error handlings is fairly weak
 */
function parseWFSCapabilities(text, options) {
    // Remove namespaces in XML
    options = { ...options, xml: { ...options?.xml, removeNSPrefix: true } };
    const parsedXML = xml_1.XMLLoader.parseTextSync(text, options);
    const xmlCapabilities = parsedXML.Capabilities || parsedXML;
    return uncapitalizeKeys(xmlCapabilities);
}
exports.parseWFSCapabilities = parseWFSCapabilities;
function uncapitalizeKeys(object) {
    if (object && typeof object === 'object') {
        const newObject = {};
        for (const [key, value] of Object.entries(object)) {
            newObject[uncapitalize(key)] = uncapitalizeKeys(value);
        }
        return newObject;
    }
    return object;
}
/**
 * Uncapitalize first letter of a string
 * @param {string} str
 * @returns {string}
 */
function uncapitalize(str) {
    return typeof str === 'string' ? str.charAt(0).toLowerCase() + str.slice(1) : str;
}
