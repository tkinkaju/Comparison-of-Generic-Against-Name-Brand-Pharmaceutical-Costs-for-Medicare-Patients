import type { ImageType } from '@loaders.gl/images';
import type { ImageSourceMetadata, GetImageParameters } from '../image-source';
import { ImageSource } from '../image-source';
import { ImageServiceProps } from './image-service';
import type { WMSCapabilities, WMSFeatureInfo, WMSLayerDescription } from '../../wms/wms-types';
type WMSCommonParameters = {
    /** In case the endpoint supports multiple services */
    service?: 'WMS';
    /** In case the endpoint supports multiple WMS versions */
    version?: '1.1.1' | '1.3.0';
};
export type WMSGetCapabilitiesParameters = WMSCommonParameters & {
    /** Request type */
    request?: 'GetCapabilities';
};
export type WMSGetMapParameters = WMSCommonParameters & {
    /** Request type */
    request?: 'GetMap';
    /** Layers to render */
    layers: string | string[];
    /** Styling */
    styles?: unknown;
    /** bounding box of the requested map image */
    bbox: [number, number, number, number];
    /** pixel width of returned image */
    width: number;
    /** pixels */
    height: number;
    /** srs for the image (not the bounding box) */
    srs?: string;
    /** requested format for the return image */
    format?: 'image/png';
};
export type WMSGetFeatureInfoParameters = WMSCommonParameters & {
    /** Request type */
    request?: 'GetFeatureInfo';
    /** x coordinate for the feature info request */
    x: number;
    /** y coordinate for the feature info request */
    y: number;
    /** list of layers to query (could be different from rendered layers) */
    query_layers: string[];
    /** MIME type of returned feature info */
    info_format?: 'text/plain' | 'application/vnd.ogc.gml';
    /** Layers to render */
    layers: string[];
    /** Styling */
    styles?: unknown;
    /** bounding box of the requested map image */
    bbox: [number, number, number, number];
    /** pixel width of returned image */
    width: number;
    /** pixels */
    height: number;
    /** srs for the image (not the bounding box) */
    srs?: string;
    /** requested format for the return image */
    format?: 'image/png';
};
export type WMSDescribeLayerParameters = WMSCommonParameters & {
    /** Request type */
    request?: 'DescribeLayer';
};
export type WMSGetLegendGraphicParameters = WMSCommonParameters & {
    /** Request type */
    request?: 'GetLegendGraphic';
};
/**
 * The WMSService class provides
 * - provides type safe methods to form URLs to a WMS service
 * - provides type safe methods to query and parse results (and errors) from a WMS service
 * - implements the ImageService interface
 * @note Only the URL parameter conversion is supported. XML posts are not supported.
 */
export declare class WMSService extends ImageSource {
    static type: 'wms';
    static testURL: (url: string) => boolean;
    props: Required<ImageServiceProps>;
    fetch: (url: string, options?: RequestInit) => Promise<Response>;
    capabilities: WMSCapabilities | null;
    /** A list of loaders used by the WMSService methods */
    readonly loaders: ({
        id: string;
        name: string;
        module: string;
        version: any;
        worker: boolean;
        extensions: string[];
        mimeTypes: string[];
        testText: (text: string) => boolean;
        options: {
            wms: {
                throwOnError: boolean;
            };
        };
        parse: (arrayBuffer: ArrayBuffer, options?: import("../../../wms-error-loader").WMSLoaderOptions | undefined) => Promise<string>;
        parseSync: (arrayBuffer: ArrayBuffer, options?: import("../../../wms-error-loader").WMSLoaderOptions | undefined) => string;
        parseTextSync: (text: string, options?: import("../../../wms-error-loader").WMSLoaderOptions | undefined) => string;
    } | {
        id: string;
        name: string;
        module: string;
        version: any;
        worker: boolean;
        extensions: string[];
        mimeTypes: string[];
        testText: (text: string) => boolean;
        options: {
            wms: {};
        };
        /** In case the endpoint supports multiple services */
        parse: (arrayBuffer: ArrayBuffer, options?: import("../../../wms-capabilities-loader").WMSLoaderOptions | undefined) => Promise<WMSCapabilities>;
        parseTextSync: (text: string, options?: import("../../../wms-capabilities-loader").WMSLoaderOptions | undefined) => WMSCapabilities;
    } | {
        id: string;
        module: string;
        name: string;
        version: any;
        mimeTypes: string[];
        extensions: string[];
        parse: typeof import("modules/images/src/lib/parsers/parse-image").default;
        tests: ((arrayBuffer: any) => boolean)[];
        options: import("@loaders.gl/images").ImageLoaderOptions;
    } | {
        id: string;
        name: string;
        parse: (arrayBuffer: ArrayBuffer, options?: import("../../../wms-capabilities-loader").WMSLoaderOptions | undefined) => Promise<WMSFeatureInfo>;
        parseTextSync: (text: string, options?: import("../../../wms-capabilities-loader").WMSLoaderOptions | undefined) => WMSFeatureInfo;
        module: string;
        version: any;
        worker: boolean;
        extensions: string[];
        mimeTypes: string[];
        testText: (text: string) => boolean;
        options: {
            wms: {};
        };
    } | {
        id: string;
        name: string;
        parse: (arrayBuffer: ArrayBuffer, options?: import("../../../wms-capabilities-loader").WMSLoaderOptions | undefined) => Promise<WMSLayerDescription>;
        parseTextSync: (text: string, options?: import("../../../wms-capabilities-loader").WMSLoaderOptions | undefined) => WMSLayerDescription;
        module: string;
        version: any;
        worker: boolean;
        extensions: string[];
        mimeTypes: string[];
        testText: (text: string) => boolean;
        options: {
            wms: {};
        };
    })[];
    /** Create a WMSService */
    constructor(props: ImageServiceProps);
    getMetadata(): Promise<ImageSourceMetadata>;
    getImage(parameters: GetImageParameters): Promise<ImageType>;
    /** Get Capabilities */
    getCapabilities(wmsParameters?: WMSGetCapabilitiesParameters, vendorParameters?: Record<string, unknown>): Promise<WMSCapabilities>;
    /** Get a map image */
    getMap(options: WMSGetMapParameters, vendorParameters?: Record<string, unknown>): Promise<ImageType>;
    /** Get Feature Info for a coordinate */
    getFeatureInfo(options: WMSGetFeatureInfoParameters, vendorParameters?: Record<string, unknown>): Promise<WMSFeatureInfo>;
    /** Get Feature Info for a coordinate */
    getFeatureInfoText(options: WMSGetFeatureInfoParameters, vendorParameters?: Record<string, unknown>): Promise<string>;
    /** Get more information about a layer */
    describeLayer(options: WMSDescribeLayerParameters, vendorParameters?: Record<string, unknown>): Promise<WMSLayerDescription>;
    /** Get an image with a semantic legend */
    getLegendGraphic(options: WMSGetLegendGraphicParameters, vendorParameters?: Record<string, unknown>): Promise<ImageType>;
    /** Generate a URL for the GetCapabilities request */
    getCapabilitiesURL(wmsParameters?: WMSGetCapabilitiesParameters, vendorParameters?: Record<string, unknown>): string;
    /** Generate a URL for the GetMap request */
    getMapURL(wmsParameters: WMSGetMapParameters, vendorParameters?: Record<string, unknown>): string;
    /** Generate a URL for the GetFeatureInfo request */
    getFeatureInfoURL(wmsParameters: WMSGetFeatureInfoParameters, vendorParameters?: Record<string, unknown>): string;
    /** Generate a URL for the GetFeatureInfo request */
    describeLayerURL(wmsParameters: WMSDescribeLayerParameters, vendorParameters?: Record<string, unknown>): string;
    getLegendGraphicURL(wmsParameters: WMSGetLegendGraphicParameters, vendorParameters?: Record<string, unknown>): string;
    /**
     * @note case _getWMSUrl may need to be overridden to handle certain backends?
     * */
    protected _getWMSUrl(options: Record<string, unknown>, vendorParameters?: Record<string, unknown>): string;
    /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */
    protected _checkResponse(response: Response, arrayBuffer: ArrayBuffer): void;
    /** Error situation detected */
    protected _parseError(arrayBuffer: ArrayBuffer): Error;
}
export {};
//# sourceMappingURL=wms-service.d.ts.map