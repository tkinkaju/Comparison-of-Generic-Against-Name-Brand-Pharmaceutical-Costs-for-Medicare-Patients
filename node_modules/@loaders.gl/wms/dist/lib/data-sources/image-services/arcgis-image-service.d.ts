import { ImageType } from '@loaders.gl/images';
import type { ImageSourceMetadata, GetImageParameters } from '../image-source';
import { ImageSource } from '../image-source';
import { ImageServiceProps } from './image-service';
export declare class ArcGISImageService extends ImageSource {
    static type: 'arcgis-image-server';
    static testURL: (url: string) => boolean;
    props: Required<ImageServiceProps>;
    fetch: (url: string, options?: RequestInit) => Promise<Response>;
    constructor(props: ImageServiceProps);
    getMetadata(): Promise<ImageSourceMetadata>;
    getImage(parameters: GetImageParameters): Promise<ImageType>;
    info(): Promise<unknown>;
    /**
     * Form a URL to an ESRI ImageServer
     // https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer/exportImage?bbox=${bounds[0]},${bounds[1]},${bounds[2]},${bounds[3]}&bboxSR=4326&size=${width},${height}&imageSR=102100&time=&format=jpgpng&pixelType=U8&noData=&noDataInterpretation=esriNoDataMatchAny&interpolation=+RSP_NearestNeighbor&compression=&compressionQuality=&bandIds=&mosaicRule=&renderingRule=&f=image`,
     */
    exportImage(options: {
        boundingBox: [number, number, number, number];
        boundingBoxSR?: string;
        width: number;
        height: number;
        imageSR?: string;
        time?: never;
        format?: 'jpgpng';
        pixelType?: 'U8';
        noData?: never;
        noDataInterpretation?: 'esriNoDataMatchAny';
        interpolation?: '+RSP_NearestNeighbor';
        compression?: never;
        compressionQuality?: never;
        bandIds?: never;
        mosaicRule?: never;
        renderingRule?: never;
        f?: 'image';
    }): Promise<ImageType>;
    infoURL(options: {
        parameters?: Record<string, unknown>;
    }): string;
    /**
     * Form a URL to an ESRI ImageServer
     // https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer/exportImage?bbox=${bounds[0]},${bounds[1]},${bounds[2]},${bounds[3]}&bboxSR=4326&size=${width},${height}&imageSR=102100&time=&format=jpgpng&pixelType=U8&noData=&noDataInterpretation=esriNoDataMatchAny&interpolation=+RSP_NearestNeighbor&compression=&compressionQuality=&bandIds=&mosaicRule=&renderingRule=&f=image`,
     */
    exportImageURL(options: {
        boundingBox: [number, number, number, number];
        boundingBoxSR?: string;
        width: number;
        height: number;
        imageSR?: string;
        time?: never;
        format?: 'jpgpng';
        pixelType?: 'U8';
        noData?: never;
        noDataInterpretation?: 'esriNoDataMatchAny';
        interpolation?: '+RSP_NearestNeighbor';
        compression?: never;
        compressionQuality?: never;
        bandIds?: never;
        mosaicRule?: never;
        renderingRule?: never;
        f?: 'image';
    }): string;
    /**
     * @note protected, since perhaps getWMSUrl may need to be overridden to handle certain backends?
     * @note if override is common, maybe add a callback prop?
     * */
    protected getUrl(options: Record<string, unknown>, extra?: Record<string, unknown>): string;
    /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */
    protected checkResponse(response: Response): Promise<void>;
}
//# sourceMappingURL=arcgis-image-service.d.ts.map