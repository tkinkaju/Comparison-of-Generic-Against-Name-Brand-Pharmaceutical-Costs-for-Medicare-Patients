"use strict";
// loaders.gl, MIT license
Object.defineProperty(exports, "__esModule", { value: true });
exports.WMSService = void 0;
const images_1 = require("@loaders.gl/images");
const image_source_1 = require("../image-source");
const image_service_1 = require("./image-service");
const wms_capabilities_loader_1 = require("../../../wms-capabilities-loader");
const wms_feature_info_loader_1 = require("../../../wip/wms-feature-info-loader");
const wms_layer_description_loader_1 = require("../../../wip/wms-layer-description-loader");
const wms_error_loader_1 = require("../../../wms-error-loader");
/**
 * The WMSService class provides
 * - provides type safe methods to form URLs to a WMS service
 * - provides type safe methods to query and parse results (and errors) from a WMS service
 * - implements the ImageService interface
 * @note Only the URL parameter conversion is supported. XML posts are not supported.
 */
class WMSService extends image_source_1.ImageSource {
    /** Create a WMSService */
    constructor(props) {
        super();
        this.capabilities = null;
        /** A list of loaders used by the WMSService methods */
        this.loaders = [
            images_1.ImageLoader,
            wms_error_loader_1.WMSErrorLoader,
            wms_capabilities_loader_1.WMSCapabilitiesLoader,
            wms_feature_info_loader_1.WMSFeatureInfoLoader,
            wms_layer_description_loader_1.WMSLayerDescriptionLoader
        ];
        this.props = (0, image_service_1.mergeImageServiceProps)(props);
        this.fetch = (0, image_service_1.getFetchFunction)(this.props);
        this.props.loadOptions = {
            ...this.props.loadOptions,
            // We want error responses to throw exceptions, the WMSErrorLoader can do this
            wms: { ...this.props.loadOptions?.wms, throwOnError: true }
        };
    }
    // ImageSource implementation
    getMetadata() {
        return this.getCapabilities();
    }
    getImage(parameters) {
        return this.getMap(parameters);
    }
    // WMS Service API Stubs
    /** Get Capabilities */
    async getCapabilities(wmsParameters, vendorParameters) {
        const url = this.getCapabilitiesURL(wmsParameters, vendorParameters);
        const response = await this.fetch(url);
        const arrayBuffer = await response.arrayBuffer();
        this._checkResponse(response, arrayBuffer);
        const capabilities = await wms_capabilities_loader_1.WMSCapabilitiesLoader.parse(arrayBuffer, this.props.loadOptions);
        this.capabilities = capabilities;
        return capabilities;
    }
    /** Get a map image */
    async getMap(options, vendorParameters) {
        const url = this.getMapURL(options, vendorParameters);
        const response = await this.fetch(url);
        const arrayBuffer = await response.arrayBuffer();
        this._checkResponse(response, arrayBuffer);
        try {
            return await images_1.ImageLoader.parse(arrayBuffer, this.props.loadOptions);
        }
        catch {
            throw this._parseError(arrayBuffer);
        }
    }
    /** Get Feature Info for a coordinate */
    async getFeatureInfo(options, vendorParameters) {
        const url = this.getFeatureInfoURL(options, vendorParameters);
        const response = await this.fetch(url);
        const arrayBuffer = await response.arrayBuffer();
        this._checkResponse(response, arrayBuffer);
        return await wms_feature_info_loader_1.WMSFeatureInfoLoader.parse(arrayBuffer, this.props.loadOptions);
    }
    /** Get Feature Info for a coordinate */
    async getFeatureInfoText(options, vendorParameters) {
        options = { ...options, info_format: 'text/plain' };
        const url = this.getFeatureInfoURL(options, vendorParameters);
        const response = await this.fetch(url);
        const arrayBuffer = await response.arrayBuffer();
        this._checkResponse(response, arrayBuffer);
        return new TextDecoder().decode(arrayBuffer);
    }
    /** Get more information about a layer */
    async describeLayer(options, vendorParameters) {
        const url = this.describeLayerURL(options, vendorParameters);
        const response = await this.fetch(url);
        const arrayBuffer = await response.arrayBuffer();
        this._checkResponse(response, arrayBuffer);
        return await wms_layer_description_loader_1.WMSLayerDescriptionLoader.parse(arrayBuffer, this.props.loadOptions);
    }
    /** Get an image with a semantic legend */
    async getLegendGraphic(options, vendorParameters) {
        const url = this.getLegendGraphicURL(options, vendorParameters);
        const response = await this.fetch(url);
        const arrayBuffer = await response.arrayBuffer();
        this._checkResponse(response, arrayBuffer);
        try {
            return await images_1.ImageLoader.parse(arrayBuffer, this.props.loadOptions);
        }
        catch {
            throw this._parseError(arrayBuffer);
        }
    }
    // Typed URL creators
    // For applications that want full control of fetching and parsing
    /** Generate a URL for the GetCapabilities request */
    getCapabilitiesURL(wmsParameters, vendorParameters) {
        const options = {
            service: 'WMS',
            version: '1.1.1',
            request: 'GetCapabilities',
            ...wmsParameters,
            ...vendorParameters
        };
        return this._getWMSUrl(options, vendorParameters);
    }
    /** Generate a URL for the GetMap request */
    getMapURL(wmsParameters, vendorParameters) {
        const options = {
            service: 'WMS',
            version: '1.1.1',
            request: 'GetMap',
            // layers: [],
            // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],
            // width: 1200,
            // height: 900,
            styles: undefined,
            srs: 'EPSG:4326',
            format: 'image/png',
            ...wmsParameters,
            ...vendorParameters
        };
        return this._getWMSUrl(options, vendorParameters);
    }
    /** Generate a URL for the GetFeatureInfo request */
    getFeatureInfoURL(wmsParameters, vendorParameters) {
        const options = {
            service: 'WMS',
            version: '1.1.1',
            request: 'GetFeatureInfo',
            // layers: [],
            // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],
            // width: 1200,
            // height: 900,
            // x: undefined!,
            // y: undefined!,
            // query_layers: [],
            srs: 'EPSG:4326',
            format: 'image/png',
            info_format: 'text/plain',
            styles: undefined,
            ...wmsParameters,
            ...vendorParameters
        };
        return this._getWMSUrl(options, vendorParameters);
    }
    /** Generate a URL for the GetFeatureInfo request */
    describeLayerURL(wmsParameters, vendorParameters) {
        const options = {
            service: 'WMS',
            version: '1.1.1',
            request: 'DescribeLayer',
            ...wmsParameters,
            ...vendorParameters
        };
        return this._getWMSUrl(options, vendorParameters);
    }
    getLegendGraphicURL(wmsParameters, vendorParameters) {
        const options = {
            service: 'WMS',
            version: '1.1.1',
            request: 'GetLegendGraphic',
            ...wmsParameters,
            ...vendorParameters
        };
        return this._getWMSUrl(options, vendorParameters);
    }
    // INTERNAL METHODS
    /**
     * @note case _getWMSUrl may need to be overridden to handle certain backends?
     * */
    _getWMSUrl(options, vendorParameters) {
        let url = this.props.url;
        let first = true;
        for (const [key, value] of Object.entries(options)) {
            url += first ? '?' : '&';
            first = false;
            if (Array.isArray(value)) {
                url += `${key.toUpperCase()}=${value.join(',')}`;
            }
            else {
                url += `${key.toUpperCase()}=${value ? String(value) : ''}`;
            }
        }
        return encodeURI(url);
    }
    /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */
    _checkResponse(response, arrayBuffer) {
        const contentType = response.headers['content-type'];
        if (!response.ok || wms_error_loader_1.WMSErrorLoader.mimeTypes.includes(contentType)) {
            const error = wms_error_loader_1.WMSErrorLoader.parseSync(arrayBuffer, this.props.loadOptions);
            throw new Error(error);
        }
    }
    /** Error situation detected */
    _parseError(arrayBuffer) {
        const error = wms_error_loader_1.WMSErrorLoader.parseSync(arrayBuffer, this.props.loadOptions);
        return new Error(error);
    }
}
exports.WMSService = WMSService;
WMSService.type = 'wms';
WMSService.testURL = (url) => url.toLowerCase().includes('wms');
