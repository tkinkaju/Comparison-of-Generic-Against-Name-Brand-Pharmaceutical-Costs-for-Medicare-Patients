{"version":3,"file":"image-service.js","names":["ImageLoader","ImageSource","ImageService","constructor","props","mergeImageServiceProps","fetch","getFetchFunction","getMetadata","Error","getImage","parameters","granularParameters","getGranularParameters","url","getURLFromTemplate","response","arrayBuffer","parse","east","north","west","south","bbox","key","value","Object","entries","replace","String","toLowerCase","includes","options","fetchFunction","fetchOptions","loadOptions"],"sources":["../../../../../src/lib/data-sources/image-services/image-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {ImageType} from '@loaders.gl/images';\nimport {ImageLoader} from '@loaders.gl/images';\n\nimport type {ImageSourceMetadata, GetImageParameters} from '../image-source';\nimport {ImageSource} from '../image-source';\n\n/** Template URL string should contain `${width}` etc which will be substituted. */\nexport type ImageServiceProps = {\n  /** Base URL to the service */\n  url: string;\n  /** Any load options to the loaders.gl Loaders used by the WMSService methods */\n  loadOptions?: LoaderOptions;\n};\n\n/**\n * Quickly connect to \"ad hoc\" image sources without subclassing ImageSource.\n * ImageSource allows template url strings to be used to ad hoc connect to arbitrary image data sources\n * Accepts a template url string and builds requests URLs\n */\nexport class ImageService extends ImageSource {\n  static type: 'template' = 'template';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('{');\n\n  props: Required<ImageServiceProps>;\n  fetch: (url: string, options?: RequestInit) => Promise<Response>;\n\n  constructor(props: ImageServiceProps) {\n    super();\n    this.props = mergeImageServiceProps(props);\n    this.fetch = getFetchFunction(props);\n  }\n\n  // IMAGE SOURCE API\n\n  async getMetadata(): Promise<ImageSourceMetadata> {\n    throw new Error('ImageSource.getMetadata not implemented');\n  }\n\n  async getImage(parameters: GetImageParameters): Promise<ImageType> {\n    const granularParameters = this.getGranularParameters(parameters);\n    const url = this.getURLFromTemplate(granularParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    return await ImageLoader.parse(arrayBuffer);\n  }\n\n  // HELPERS\n\n  /** Break up bounding box in east, north, south, west */\n  protected getGranularParameters(parameters: GetImageParameters): Record<string, unknown> {\n    const [east, north, west, south] = parameters.bbox;\n    return {...parameters, east, north, south, west};\n  }\n\n  /** Supports both ${} and {} notations */\n  protected getURLFromTemplate(parameters: Record<string, unknown>): string {\n    let url = this.props.url;\n    for (const [key, value] of Object.entries(parameters)) {\n      // TODO - parameter could be repeated\n      // const regex = new RegExp(`\\${${key}}`, 'g');\n      url = url.replace(`\\${${key}}`, String(value));\n      url = url.replace(`{${key}}`, String(value));\n    }\n    return url;\n  }\n}\n\n/**\n * Gets the current fetch function from options\n * @todo - move to loader-utils module\n * @todo - use in core module counterpart\n * @param options\n * @param context\n */\nexport function getFetchFunction(options?: LoaderOptions) {\n  const fetchFunction = options?.fetch;\n\n  // options.fetch can be a function\n  if (fetchFunction && typeof fetchFunction === 'function') {\n    return (url: string, fetchOptions?: RequestInit) => fetchFunction(url, fetchOptions);\n  }\n\n  // options.fetch can be an options object, use global fetch with those options\n  const fetchOptions = options?.fetch;\n  if (fetchOptions && typeof fetchOptions !== 'function') {\n    return (url) => fetch(url, fetchOptions);\n  }\n\n  // else return the global fetch function\n  return (url) => fetch(url);\n}\n\nexport function mergeImageServiceProps(props: ImageServiceProps): Required<ImageServiceProps> {\n  return {\n    // Default fetch\n    ...props,\n    loadOptions: {\n      ...props.loadOptions,\n      fetch: getFetchFunction(props.loadOptions)\n    }\n  };\n}\n"],"mappings":";;AAIA,SAAQA,WAAW,QAAO,oBAAoB;AAG9C,SAAQC,WAAW,QAAO,iBAAiB;;AAe3C,OAAO,MAAMC,YAAY,SAASD,WAAW,CAAC;EAO5CE,WAAW,CAACC,KAAwB,EAAE;IACpC,KAAK,EAAE;IAAC;IAAA;IACR,IAAI,CAACA,KAAK,GAAGC,sBAAsB,CAACD,KAAK,CAAC;IAC1C,IAAI,CAACE,KAAK,GAAGC,gBAAgB,CAACH,KAAK,CAAC;EACtC;;EAIA,MAAMI,WAAW,GAAiC;IAChD,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;EAC5D;EAEA,MAAMC,QAAQ,CAACC,UAA8B,EAAsB;IACjE,MAAMC,kBAAkB,GAAG,IAAI,CAACC,qBAAqB,CAACF,UAAU,CAAC;IACjE,MAAMG,GAAG,GAAG,IAAI,CAACC,kBAAkB,CAACH,kBAAkB,CAAC;IACvD,MAAMI,QAAQ,GAAG,MAAM,IAAI,CAACV,KAAK,CAACQ,GAAG,CAAC;IACtC,MAAMG,WAAW,GAAG,MAAMD,QAAQ,CAACC,WAAW,EAAE;IAChD,OAAO,MAAMjB,WAAW,CAACkB,KAAK,CAACD,WAAW,CAAC;EAC7C;;EAKUJ,qBAAqB,CAACF,UAA8B,EAA2B;IACvF,MAAM,CAACQ,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC,GAAGX,UAAU,CAACY,IAAI;IAClD,OAAO;MAAC,GAAGZ,UAAU;MAAEQ,IAAI;MAAEC,KAAK;MAAEE,KAAK;MAAED;IAAI,CAAC;EAClD;;EAGUN,kBAAkB,CAACJ,UAAmC,EAAU;IACxE,IAAIG,GAAG,GAAG,IAAI,CAACV,KAAK,CAACU,GAAG;IACxB,KAAK,MAAM,CAACU,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAAChB,UAAU,CAAC,EAAE;MAGrDG,GAAG,GAAGA,GAAG,CAACc,OAAO,aAAOJ,GAAG,QAAKK,MAAM,CAACJ,KAAK,CAAC,CAAC;MAC9CX,GAAG,GAAGA,GAAG,CAACc,OAAO,YAAKJ,GAAG,QAAKK,MAAM,CAACJ,KAAK,CAAC,CAAC;IAC9C;IACA,OAAOX,GAAG;EACZ;AACF;;AAAC,gBA9CYZ,YAAY,UACG,UAAU;AAAA,gBADzBA,YAAY,aAELY,GAAW,IAAcA,GAAG,CAACgB,WAAW,EAAE,CAACC,QAAQ,CAAC,GAAG,CAAC;AAqD5E,OAAO,SAASxB,gBAAgB,CAACyB,OAAuB,EAAE;EACxD,MAAMC,aAAa,GAAGD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE1B,KAAK;;EAGpC,IAAI2B,aAAa,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;IACxD,OAAO,CAACnB,GAAW,EAAEoB,YAA0B,KAAKD,aAAa,CAACnB,GAAG,EAAEoB,YAAY,CAAC;EACtF;;EAGA,MAAMA,YAAY,GAAGF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE1B,KAAK;EACnC,IAAI4B,YAAY,IAAI,OAAOA,YAAY,KAAK,UAAU,EAAE;IACtD,OAAQpB,GAAG,IAAKR,KAAK,CAACQ,GAAG,EAAEoB,YAAY,CAAC;EAC1C;;EAGA,OAAQpB,GAAG,IAAKR,KAAK,CAACQ,GAAG,CAAC;AAC5B;AAEA,OAAO,SAAST,sBAAsB,CAACD,KAAwB,EAA+B;EAC5F,OAAO;IAEL,GAAGA,KAAK;IACR+B,WAAW,EAAE;MACX,GAAG/B,KAAK,CAAC+B,WAAW;MACpB7B,KAAK,EAAEC,gBAAgB,CAACH,KAAK,CAAC+B,WAAW;IAC3C;EACF,CAAC;AACH"}