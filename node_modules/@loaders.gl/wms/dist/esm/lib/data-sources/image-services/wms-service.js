import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

import { ImageLoader } from '@loaders.gl/images';
import { ImageSource } from '../image-source';
import { getFetchFunction, mergeImageServiceProps } from './image-service';
import { WMSCapabilitiesLoader } from '../../../wms-capabilities-loader';
import { WMSFeatureInfoLoader } from '../../../wip/wms-feature-info-loader';
import { WMSLayerDescriptionLoader } from '../../../wip/wms-layer-description-loader';
import { WMSErrorLoader } from '../../../wms-error-loader';
export class WMSService extends ImageSource {

  constructor(props) {
    var _this$props$loadOptio;
    super();
    _defineProperty(this, "props", void 0);
    _defineProperty(this, "fetch", void 0);
    _defineProperty(this, "capabilities", null);
    _defineProperty(this, "loaders", [ImageLoader, WMSErrorLoader, WMSCapabilitiesLoader, WMSFeatureInfoLoader, WMSLayerDescriptionLoader]);
    this.props = mergeImageServiceProps(props);
    this.fetch = getFetchFunction(this.props);
    this.props.loadOptions = {
      ...this.props.loadOptions,
      wms: {
        ...((_this$props$loadOptio = this.props.loadOptions) === null || _this$props$loadOptio === void 0 ? void 0 : _this$props$loadOptio.wms),
        throwOnError: true
      }
    };
  }

  getMetadata() {
    return this.getCapabilities();
  }
  getImage(parameters) {
    return this.getMap(parameters);
  }

  async getCapabilities(wmsParameters, vendorParameters) {
    const url = this.getCapabilitiesURL(wmsParameters, vendorParameters);
    const response = await this.fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    this._checkResponse(response, arrayBuffer);
    const capabilities = await WMSCapabilitiesLoader.parse(arrayBuffer, this.props.loadOptions);
    this.capabilities = capabilities;
    return capabilities;
  }

  async getMap(options, vendorParameters) {
    const url = this.getMapURL(options, vendorParameters);
    const response = await this.fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    this._checkResponse(response, arrayBuffer);
    try {
      return await ImageLoader.parse(arrayBuffer, this.props.loadOptions);
    } catch {
      throw this._parseError(arrayBuffer);
    }
  }

  async getFeatureInfo(options, vendorParameters) {
    const url = this.getFeatureInfoURL(options, vendorParameters);
    const response = await this.fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    this._checkResponse(response, arrayBuffer);
    return await WMSFeatureInfoLoader.parse(arrayBuffer, this.props.loadOptions);
  }

  async getFeatureInfoText(options, vendorParameters) {
    options = {
      ...options,
      info_format: 'text/plain'
    };
    const url = this.getFeatureInfoURL(options, vendorParameters);
    const response = await this.fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    this._checkResponse(response, arrayBuffer);
    return new TextDecoder().decode(arrayBuffer);
  }

  async describeLayer(options, vendorParameters) {
    const url = this.describeLayerURL(options, vendorParameters);
    const response = await this.fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    this._checkResponse(response, arrayBuffer);
    return await WMSLayerDescriptionLoader.parse(arrayBuffer, this.props.loadOptions);
  }

  async getLegendGraphic(options, vendorParameters) {
    const url = this.getLegendGraphicURL(options, vendorParameters);
    const response = await this.fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    this._checkResponse(response, arrayBuffer);
    try {
      return await ImageLoader.parse(arrayBuffer, this.props.loadOptions);
    } catch {
      throw this._parseError(arrayBuffer);
    }
  }

  getCapabilitiesURL(wmsParameters, vendorParameters) {
    const options = {
      service: 'WMS',
      version: '1.1.1',
      request: 'GetCapabilities',
      ...wmsParameters,
      ...vendorParameters
    };
    return this._getWMSUrl(options, vendorParameters);
  }

  getMapURL(wmsParameters, vendorParameters) {
    const options = {
      service: 'WMS',
      version: '1.1.1',
      request: 'GetMap',
      styles: undefined,
      srs: 'EPSG:4326',
      format: 'image/png',
      ...wmsParameters,
      ...vendorParameters
    };
    return this._getWMSUrl(options, vendorParameters);
  }

  getFeatureInfoURL(wmsParameters, vendorParameters) {
    const options = {
      service: 'WMS',
      version: '1.1.1',
      request: 'GetFeatureInfo',
      srs: 'EPSG:4326',
      format: 'image/png',
      info_format: 'text/plain',
      styles: undefined,
      ...wmsParameters,
      ...vendorParameters
    };
    return this._getWMSUrl(options, vendorParameters);
  }

  describeLayerURL(wmsParameters, vendorParameters) {
    const options = {
      service: 'WMS',
      version: '1.1.1',
      request: 'DescribeLayer',
      ...wmsParameters,
      ...vendorParameters
    };
    return this._getWMSUrl(options, vendorParameters);
  }
  getLegendGraphicURL(wmsParameters, vendorParameters) {
    const options = {
      service: 'WMS',
      version: '1.1.1',
      request: 'GetLegendGraphic',
      ...wmsParameters,
      ...vendorParameters
    };
    return this._getWMSUrl(options, vendorParameters);
  }

  _getWMSUrl(options, vendorParameters) {
    let url = this.props.url;
    let first = true;
    for (const [key, value] of Object.entries(options)) {
      url += first ? '?' : '&';
      first = false;
      if (Array.isArray(value)) {
        url += "".concat(key.toUpperCase(), "=").concat(value.join(','));
      } else {
        url += "".concat(key.toUpperCase(), "=").concat(value ? String(value) : '');
      }
    }
    return encodeURI(url);
  }

  _checkResponse(response, arrayBuffer) {
    const contentType = response.headers['content-type'];
    if (!response.ok || WMSErrorLoader.mimeTypes.includes(contentType)) {
      const error = WMSErrorLoader.parseSync(arrayBuffer, this.props.loadOptions);
      throw new Error(error);
    }
  }

  _parseError(arrayBuffer) {
    const error = WMSErrorLoader.parseSync(arrayBuffer, this.props.loadOptions);
    return new Error(error);
  }
}
_defineProperty(WMSService, "type", 'wms');
_defineProperty(WMSService, "testURL", url => url.toLowerCase().includes('wms'));
//# sourceMappingURL=wms-service.js.map