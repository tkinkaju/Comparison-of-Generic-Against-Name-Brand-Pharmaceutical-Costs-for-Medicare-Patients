{"version":3,"file":"image-source.js","names":["ImageSource"],"sources":["../../../../src/lib/data-sources/image-source.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {ImageType} from '@loaders.gl/images';\n\n/**\n * Normalized capabilities of an Image service\n * @example\n *  The WMSService will normalize the response to the WMS `GetCapabilities` data structure extracted from WMS XML response\n *  into an ImageSourceMetadata.\n */\nexport type ImageSourceMetadata = {\n  name: string;\n  title?: string;\n  abstract?: string;\n  keywords: string[];\n  layer: {\n    name: string;\n    title?: string;\n    srs?: string[];\n    boundingBox?: [number, number, number, number];\n    layers: ImageSourceLayer[];\n  };\n};\n\nexport type ImageSourceLayer = {\n  name: string;\n  title?: string;\n  srs?: string[];\n  boundingBox?: [number, number, number, number];\n  layers: ImageSourceLayer[];\n};\n\nexport type GetImageParameters = {\n  /** Layers to render */\n  layers: string | string[];\n  /** Styling */\n  styles?: unknown;\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** srs for the image (not the bounding box) */\n  srs?: string;\n  /** requested format for the return image */\n  format?: 'image/png';\n};\n\n// Attempt to break down GetImageParameters\nexport type ImageFilters = {\n  /** Layers to render */\n  layers: string | string[];\n  /** Styling */\n  styles?: unknown;\n};\n\nexport type ImageRegion = {\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n};\n\nexport type ImageFormat = {\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** srs for the image (not the bounding box) */\n  srs?: string;\n  /** requested format for the return image */\n  format?: 'image/png';\n};\n\n/**\n * MapImageSource - data sources that allow data to be queried by (geospatial) extents\n * @note\n * - If geospatial, bounding box is expected to be in web mercator coordinates\n */\nexport abstract class ImageSource {\n  abstract getMetadata(): Promise<ImageSourceMetadata>;\n  abstract getImage(parameters: GetImageParameters): Promise<ImageType>;\n}\n"],"mappings":";;AA8EA,OAAO,MAAeA,WAAW,CAAC"}