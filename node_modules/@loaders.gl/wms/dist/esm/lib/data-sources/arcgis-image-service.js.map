{"version":3,"file":"arcgis-image-service.js","names":["ImageSource","ArcGISImageService","constructor","props","url","loadOptions","fetch","getMetadata","info","getImage","parameters","Error","exportImage","options","infoURL","exportImageURL","getUrl","extra","first","key","value","Object","entries","Array","isArray","toUpperCase","join","String","checkResponse","response","ok","toLowerCase","includes"],"sources":["../../../../src/lib/data-sources/arcgis-image-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {LoaderOptions} from '@loaders.gl/loader-utils';\nimport {/* ImageLoader, */ ImageType} from '@loaders.gl/images';\nimport type {ImageSourceMetadata, GetImageParameters} from './image-source';\nimport {ImageSource} from './image-source';\n\ntype FetchLike = (url: string, options?: RequestInit) => Promise<Response>;\n\nexport type ArcGISImageServiceProps = {\n  url: string;\n  loadOptions?: LoaderOptions;\n  fetch?: typeof fetch | FetchLike;\n};\n\nexport class ArcGISImageService extends ImageSource {\n  static type: 'arcgis-image-server' = 'arcgis-image-server';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('ImageServer');\n\n  url: string;\n  loadOptions: LoaderOptions;\n  fetch: typeof fetch | FetchLike;\n\n  constructor(props: ArcGISImageServiceProps) {\n    super();\n    this.url = props.url;\n    this.loadOptions = props.loadOptions || {};\n    this.fetch = props.fetch || fetch;\n  }\n\n  // ImageSource (normalized endpoints)\n\n  async getMetadata(): Promise<ImageSourceMetadata> {\n    return (await this.info()) as ImageSourceMetadata;\n    // TODO - normalize metadata\n  }\n\n  async getImage(parameters: GetImageParameters): Promise<ImageType> {\n    throw new Error('not implemented');\n    // TODO - Map generic parameters to ArcGIS specific parameters\n    // return await this.exportImage(parameters);\n  }\n\n  // ImageServer endpoints\n\n  async info(): Promise<unknown> {\n    // We just need a JSON parsing...\n    // return this.getUrl({path: '', ...options});\n    throw new Error('not implemented');\n  }\n\n  /** \n   * Form a URL to an ESRI ImageServer\n   // https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer/exportImage?bbox=${bounds[0]},${bounds[1]},${bounds[2]},${bounds[3]}&bboxSR=4326&size=${width},${height}&imageSR=102100&time=&format=jpgpng&pixelType=U8&noData=&noDataInterpretation=esriNoDataMatchAny&interpolation=+RSP_NearestNeighbor&compression=&compressionQuality=&bandIds=&mosaicRule=&renderingRule=&f=image`,\n   */\n  exportImage(options: {\n    boundingBox: [number, number, number, number];\n    boundingBoxSR?: string;\n    width: number;\n    height: number;\n    imageSR?: string;\n    time?: never;\n    format?: 'jpgpng';\n    pixelType?: 'U8';\n    noData?: never;\n    noDataInterpretation?: 'esriNoDataMatchAny';\n    interpolation?: '+RSP_NearestNeighbor';\n    compression?: never;\n    compressionQuality?: never;\n    bandIds?: never;\n    mosaicRule?: never;\n    renderingRule?: never;\n    f?: 'image';\n  }): Promise<ImageType> {\n    // See WMSService.getMap()\n    throw new Error('not implemented');\n  }\n\n  // URL creators\n\n  infoURL(options: {parameters?: Record<string, unknown>}): string {\n    return this.url;\n    // return this.getUrl({path: '', ...options});\n  }\n\n  /** \n   * Form a URL to an ESRI ImageServer\n   // https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer/exportImage?bbox=${bounds[0]},${bounds[1]},${bounds[2]},${bounds[3]}&bboxSR=4326&size=${width},${height}&imageSR=102100&time=&format=jpgpng&pixelType=U8&noData=&noDataInterpretation=esriNoDataMatchAny&interpolation=+RSP_NearestNeighbor&compression=&compressionQuality=&bandIds=&mosaicRule=&renderingRule=&f=image`,\n   */\n  exportImageURL(options: {\n    boundingBox: [number, number, number, number];\n    boundingBoxSR?: string;\n    width: number;\n    height: number;\n    imageSR?: string;\n    time?: never;\n    format?: 'jpgpng';\n    pixelType?: 'U8';\n    noData?: never;\n    noDataInterpretation?: 'esriNoDataMatchAny';\n    interpolation?: '+RSP_NearestNeighbor';\n    compression?: never;\n    compressionQuality?: never;\n    bandIds?: never;\n    mosaicRule?: never;\n    renderingRule?: never;\n    f?: 'image';\n  }): string {\n    // const {boundingBox} = options;\n    // const bbox = `bbox=${boundingBox[0]},${boundingBox[1]},${boundingBox[2]},${boundingBox[3]}`;\n    // const size = `size=${width},${height}`;\n    // return this.getUrl({path: 'exportImage'});\n    return this.url;\n  }\n\n  // INTERNAL METHODS\n\n  /**\n   * @note protected, since perhaps getWMSUrl may need to be overridden to handle certain backends?\n   * @note if override is common, maybe add a callback prop?\n   * */\n  protected getUrl(options: Record<string, unknown>, extra?: Record<string, unknown>): string {\n    let url = `${this.url}`;\n    let first = true;\n    for (const [key, value] of Object.entries(options)) {\n      url += first ? '?' : '&';\n      first = false;\n      if (Array.isArray(value)) {\n        url += `${key.toUpperCase()}=${value.join(',')}`;\n      } else {\n        url += `${key.toUpperCase()}=${value ? String(value) : ''}`;\n      }\n    }\n    return url;\n  }\n\n  /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */\n  protected async checkResponse(response: Response) {\n    if (!response.ok) {\n      // } || response.headers['content-type'] === WMSErrorLoader.mimeTypes[0]) {\n      // const arrayBuffer = await response.arrayBuffer();\n      // const error = await WMSErrorLoader.parse(arrayBuffer, this.loadOptions);\n      throw new Error('error');\n    }\n  }\n}\n"],"mappings":";;AAKA,SAAQA,WAAW,QAAO,gBAAgB;AAU1C,OAAO,MAAMC,kBAAkB,SAASD,WAAW,CAAC;EAQlDE,WAAW,CAACC,KAA8B,EAAE;IAC1C,KAAK,EAAE;IAAC;IAAA;IAAA;IACR,IAAI,CAACC,GAAG,GAAGD,KAAK,CAACC,GAAG;IACpB,IAAI,CAACC,WAAW,GAAGF,KAAK,CAACE,WAAW,IAAI,CAAC,CAAC;IAC1C,IAAI,CAACC,KAAK,GAAGH,KAAK,CAACG,KAAK,IAAIA,KAAK;EACnC;;EAIA,MAAMC,WAAW,GAAiC;IAChD,OAAQ,MAAM,IAAI,CAACC,IAAI,EAAE;EAE3B;;EAEA,MAAMC,QAAQ,CAACC,UAA8B,EAAsB;IACjE,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EAGpC;;EAIA,MAAMH,IAAI,GAAqB;IAG7B,MAAM,IAAIG,KAAK,CAAC,iBAAiB,CAAC;EACpC;;EAMAC,WAAW,CAACC,OAkBX,EAAsB;IAErB,MAAM,IAAIF,KAAK,CAAC,iBAAiB,CAAC;EACpC;;EAIAG,OAAO,CAACD,OAA+C,EAAU;IAC/D,OAAO,IAAI,CAACT,GAAG;EAEjB;;EAMAW,cAAc,CAACF,OAkBd,EAAU;IAKT,OAAO,IAAI,CAACT,GAAG;EACjB;;EAQUY,MAAM,CAACH,OAAgC,EAAEI,KAA+B,EAAU;IAC1F,IAAIb,GAAG,aAAM,IAAI,CAACA,GAAG,CAAE;IACvB,IAAIc,KAAK,GAAG,IAAI;IAChB,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACT,OAAO,CAAC,EAAE;MAClDT,GAAG,IAAIc,KAAK,GAAG,GAAG,GAAG,GAAG;MACxBA,KAAK,GAAG,KAAK;MACb,IAAIK,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;QACxBhB,GAAG,cAAOe,GAAG,CAACM,WAAW,EAAE,cAAIL,KAAK,CAACM,IAAI,CAAC,GAAG,CAAC,CAAE;MAClD,CAAC,MAAM;QACLtB,GAAG,cAAOe,GAAG,CAACM,WAAW,EAAE,cAAIL,KAAK,GAAGO,MAAM,CAACP,KAAK,CAAC,GAAG,EAAE,CAAE;MAC7D;IACF;IACA,OAAOhB,GAAG;EACZ;;EAGA,MAAgBwB,aAAa,CAACC,QAAkB,EAAE;IAChD,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAIhB,MAAM,IAAInB,KAAK,CAAC,OAAO,CAAC;IAC1B;EACF;AACF;AAAC,gBAlIYV,kBAAkB,UACQ,qBAAqB;AAAA,gBAD/CA,kBAAkB,aAEXG,GAAW,IAAcA,GAAG,CAAC2B,WAAW,EAAE,CAACC,QAAQ,CAAC,aAAa,CAAC"}