import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

import { ImageSource } from './image-source';
export class ArcGISImageService extends ImageSource {
  constructor(props) {
    super();
    _defineProperty(this, "url", void 0);
    _defineProperty(this, "loadOptions", void 0);
    _defineProperty(this, "fetch", void 0);
    this.url = props.url;
    this.loadOptions = props.loadOptions || {};
    this.fetch = props.fetch || fetch;
  }

  async getMetadata() {
    return await this.info();
  }

  async getImage(parameters) {
    throw new Error('not implemented');
  }

  async info() {
    throw new Error('not implemented');
  }

  exportImage(options) {
    throw new Error('not implemented');
  }

  infoURL(options) {
    return this.url;
  }

  exportImageURL(options) {
    return this.url;
  }

  getUrl(options, extra) {
    let url = "".concat(this.url);
    let first = true;
    for (const [key, value] of Object.entries(options)) {
      url += first ? '?' : '&';
      first = false;
      if (Array.isArray(value)) {
        url += "".concat(key.toUpperCase(), "=").concat(value.join(','));
      } else {
        url += "".concat(key.toUpperCase(), "=").concat(value ? String(value) : '');
      }
    }
    return url;
  }

  async checkResponse(response) {
    if (!response.ok) {
      throw new Error('error');
    }
  }
}
_defineProperty(ArcGISImageService, "type", 'arcgis-image-server');
_defineProperty(ArcGISImageService, "testURL", url => url.toLowerCase().includes('ImageServer'));
//# sourceMappingURL=arcgis-image-service.js.map