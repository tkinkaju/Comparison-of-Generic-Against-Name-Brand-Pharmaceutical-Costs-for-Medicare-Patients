

import { XMLLoader } from '@loaders.gl/xml';

export function parseWMSCapabilities(text, options) {
  const parsedXML = XMLLoader.parseTextSync(text, options);
  const xmlCapabilities = parsedXML.WMT_MS_Capabilities || parsedXML.WMS_Capabilities || parsedXML;
  return extractCapabilities(xmlCapabilities);
}

function extractCapabilities(xml) {
  var _xml$Service, _xml$Service2, _xml$Capability;
  const capabilities = {
    name: ((_xml$Service = xml.Service) === null || _xml$Service === void 0 ? void 0 : _xml$Service.Name) || 'unnamed',
    title: (_xml$Service2 = xml.Service) === null || _xml$Service2 === void 0 ? void 0 : _xml$Service2.Title,
    keywords: [],
    requests: {},
    layer: extractLayer((_xml$Capability = xml.Capability) === null || _xml$Capability === void 0 ? void 0 : _xml$Capability.Layer),
    raw: xml
  };
  for (const keyword of ((_xml$Service3 = xml.Service) === null || _xml$Service3 === void 0 ? void 0 : (_xml$Service3$Keyword = _xml$Service3.KeywordList) === null || _xml$Service3$Keyword === void 0 ? void 0 : _xml$Service3$Keyword.Keyword) || []) {
    var _xml$Service3, _xml$Service3$Keyword;
    capabilities.keywords.push(keyword);
  }
  for (const [name, xmlRequest] of Object.entries(((_xml$Capability2 = xml.Capability) === null || _xml$Capability2 === void 0 ? void 0 : _xml$Capability2.Request) || {})) {
    var _xml$Capability2;
    capabilities.requests[name] = extractRequest(name, xmlRequest);
  }
  return capabilities;
}

function extractRequest(name, xmlRequest) {
  const format = xmlRequest === null || xmlRequest === void 0 ? void 0 : xmlRequest.Format;
  const mimeTypes = Array.isArray(format) ? format : [format];
  return {
    name,
    mimeTypes
  };
}

function extractLayer(xmlLayer) {
  const layer = {
    name: xmlLayer === null || xmlLayer === void 0 ? void 0 : xmlLayer.Name,
    title: xmlLayer === null || xmlLayer === void 0 ? void 0 : xmlLayer.Title,
    srs: (xmlLayer === null || xmlLayer === void 0 ? void 0 : xmlLayer.SRS) || [],
    layers: []
  };

  const xmlLayers = getXMLArray(xmlLayer === null || xmlLayer === void 0 ? void 0 : xmlLayer.Layer);
  for (const xmlSubLayer of xmlLayers) {
    var _layer$layers;
    (_layer$layers = layer.layers) === null || _layer$layers === void 0 ? void 0 : _layer$layers.push(extractLayer(xmlSubLayer));
  }
  return layer;
}
function getXMLArray(xmlValue) {
  if (Array.isArray(xmlValue)) {
    return xmlValue;
  }
  if (xmlValue) {
    return [xmlValue];
  }
  return [];
}

export function parseWMSFeatureInfo(text, options) {
  var _parsedXML$FeatureInf;
  const parsedXML = XMLLoader.parseTextSync(text, options);
  const xmlFeatureInfo = ((_parsedXML$FeatureInf = parsedXML.FeatureInfoResponse) === null || _parsedXML$FeatureInf === void 0 ? void 0 : _parsedXML$FeatureInf.FIELDS) || [];
  const xmlFeatures = Array.isArray(xmlFeatureInfo) ? xmlFeatureInfo : [xmlFeatureInfo];
  return {
    features: xmlFeatures.map(xmlFeature => extractFeature(xmlFeature))
  };
}
function extractFeature(xmlFeature) {
  const xmlFields = xmlFeature || {};
  return {
    attributes: xmlFields,
    type: '',
    bounds: {
      bottom: 0,
      top: 0,
      left: 0,
      right: 0
    }
  };
}

export function parseWMSLayerDescription(text, options) {
  const parsedXML = XMLLoader.parseTextSync(text, options);
  return parsedXML;
}

export function parseWMSError(text, options) {
  var _XMLLoader$parseTextS, _parsedXML$ServiceExc, _parsedXML$ogcServic;
  const parsedXML = (_XMLLoader$parseTextS = XMLLoader.parseTextSync) === null || _XMLLoader$parseTextS === void 0 ? void 0 : _XMLLoader$parseTextS.call(XMLLoader, text, options);
  const serviceExceptionXML = (parsedXML === null || parsedXML === void 0 ? void 0 : (_parsedXML$ServiceExc = parsedXML.ServiceExceptionReport) === null || _parsedXML$ServiceExc === void 0 ? void 0 : _parsedXML$ServiceExc.ServiceException) || (parsedXML === null || parsedXML === void 0 ? void 0 : (_parsedXML$ogcServic = parsedXML['ogc:ServiceExceptionReport']) === null || _parsedXML$ogcServic === void 0 ? void 0 : _parsedXML$ogcServic['ogc:ServiceException']);
  const message = typeof serviceExceptionXML === 'string' ? serviceExceptionXML : serviceExceptionXML['#text'] || serviceExceptionXML.code || 'Unknown error';
  return message;
}
//# sourceMappingURL=parse-wms.js.map