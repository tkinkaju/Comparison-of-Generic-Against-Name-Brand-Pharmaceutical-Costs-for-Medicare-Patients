{"version":3,"file":"lerc-types.js","names":[],"sources":["../../../../src/lib/lerc/lerc-types.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n/** Data returned by LERC loader */\nexport type LERCData = {\n  /**\tWidth of decoded image */\n  width: number;\n  /**\tHeight of decoded image */\n  height: number;\n  /**\tThe type of pixels represented in the output */\n  pixelType: LercPixelType;\n  /**\t[statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values  */\n  statistics: BandStats[];\n  /**\t[band1, band2, …] Each band is a typed array of width * height * depthCount */\n  pixels: TypedArray[];\n  /**\tTyped array with a size of width*height, or null if all pixels are valid */\n  mask: Uint8Array;\n  /**\tDepth count  */\n  depthCount: number;\n  /**\tarray\t[band1_mask, band2_mask, …] Each band is a Uint8Array of width * height * depthCount */\n  bandMasks?: Uint8Array[];\n};\n\nexport type LercPixelType = 'S8' | 'U8' | 'S16' | 'U16' | 'S32' | 'U32' | 'F32' | 'F64';\n\nexport interface BandStats {\n  minValue: number;\n  maxValue: number;\n  depthStats?: {\n    minValues: Float64Array;\n    maxValues: Float64Array;\n  };\n}\n\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n"],"mappings":""}