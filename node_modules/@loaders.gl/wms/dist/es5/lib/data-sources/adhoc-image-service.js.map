{"version":3,"file":"adhoc-image-service.js","names":["AdHocImageService","props","templateUrl","Error","parameters","granularParameters","getGranularParameters","url","getURLFromTemplate","fetch","response","arrayBuffer","ImageLoader","parse","bbox","east","north","west","south","Object","entries","key","value","replace","String","ImageSource","toLowerCase","includes"],"sources":["../../../../src/lib/data-sources/adhoc-image-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {ImageType} from '@loaders.gl/images';\nimport {ImageLoader} from '@loaders.gl/images';\n\nimport type {ImageSourceMetadata, GetImageParameters} from './image-source';\nimport {ImageSource} from './image-source';\n\nexport type AdHocImageServiceProps = {\n  /** Template URL string should contain `${width}` etc which will be substituted. */\n  templateUrl: string;\n};\n\n/**\n * Quickly connect to \"ad hoc\" image sources without subclassing ImageSource.\n * ImageSource allows template url strings to be used to ad hoc connect to arbitrary image data sources\n * Accepts a template url string and builds requests URLs\n */\nexport class AdHocImageService extends ImageSource {\n  static type: 'template' = 'template';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('{');\n\n  templateUrl: string;\n\n  constructor(props: AdHocImageServiceProps) {\n    super();\n    this.templateUrl = props.templateUrl;\n  }\n\n  // IMAGE SOURCE API\n\n  async getMetadata(): Promise<ImageSourceMetadata> {\n    throw new Error('ImageSource.getMetadata not implemented');\n  }\n\n  async getImage(parameters: GetImageParameters): Promise<ImageType> {\n    const granularParameters = this.getGranularParameters(parameters);\n    const url = this.getURLFromTemplate(granularParameters);\n    const response = await fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    return await ImageLoader.parse(arrayBuffer);\n  }\n\n  // HELPERS\n\n  /** Break up bounding box in east, north, south, west */\n  protected getGranularParameters(parameters: GetImageParameters): Record<string, unknown> {\n    const [east, north, west, south] = parameters.bbox;\n    return {...parameters, east, north, south, west};\n  }\n\n  protected getURLFromTemplate(parameters: Record<string, unknown>): string {\n    let url = this.templateUrl;\n    for (const [key, value] of Object.entries(parameters)) {\n      // TODO - parameter could be repeated\n      // const regex = new RegExp(`\\${${key}}`, 'g');\n      url = url.replace(`\\${${key}}`, String(value));\n    }\n    return url;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAGA;AAGA;AAA2C;AAAA;AAAA;AAAA;AAAA,IAY9BA,iBAAiB;EAAA;EAAA;EAM5B,2BAAYC,KAA6B,EAAE;IAAA;IAAA;IACzC;IAAQ;IACR,MAAKC,WAAW,GAAGD,KAAK,CAACC,WAAW;IAAC;EACvC;;EAAC;IAAA;IAAA;MAAA,6EAID;QAAA;UAAA;YAAA;cAAA;gBAAA,MACQ,IAAIC,KAAK,CAAC,yCAAyC,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC3D;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,0EAED,kBAAeC,UAA8B;QAAA;QAAA;UAAA;YAAA;cAAA;gBACrCC,kBAAkB,GAAG,IAAI,CAACC,qBAAqB,CAACF,UAAU,CAAC;gBAC3DG,GAAG,GAAG,IAAI,CAACC,kBAAkB,CAACH,kBAAkB,CAAC;gBAAA;gBAAA,OAChCI,KAAK,CAACF,GAAG,CAAC;cAAA;gBAA3BG,QAAQ;gBAAA;gBAAA,OACYA,QAAQ,CAACC,WAAW,EAAE;cAAA;gBAA1CA,WAAW;gBAAA;gBAAA,OACJC,mBAAW,CAACC,KAAK,CAACF,WAAW,CAAC;cAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC5C;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;;IAKD,+BAAgCP,UAA8B,EAA2B;MACvF,oDAAmCA,UAAU,CAACU,IAAI;QAA3CC,IAAI;QAAEC,KAAK;QAAEC,IAAI;QAAEC,KAAK;MAC/B,uCAAWd,UAAU;QAAEW,IAAI,EAAJA,IAAI;QAAEC,KAAK,EAALA,KAAK;QAAEE,KAAK,EAALA,KAAK;QAAED,IAAI,EAAJA;MAAI;IACjD;EAAC;IAAA;IAAA,OAED,4BAA6Bb,UAAmC,EAAU;MACxE,IAAIG,GAAG,GAAG,IAAI,CAACL,WAAW;MAC1B,mCAA2BiB,MAAM,CAACC,OAAO,CAAChB,UAAU,CAAC,qCAAE;QAAlD;UAAOiB,GAAG;UAAEC,KAAK;QAGpBf,GAAG,GAAGA,GAAG,CAACgB,OAAO,aAAOF,GAAG,QAAKG,MAAM,CAACF,KAAK,CAAC,CAAC;MAChD;MACA,OAAOf,GAAG;IACZ;EAAC;EAAA;AAAA,EAzCoCkB,wBAAW;AAAA;AAAA,8BAArCzB,iBAAiB,UACF,UAAU;AAAA,8BADzBA,iBAAiB,aAEX,UAACO,GAAW;EAAA,OAAcA,GAAG,CAACmB,WAAW,EAAE,CAACC,QAAQ,CAAC,GAAG,CAAC;AAAA"}