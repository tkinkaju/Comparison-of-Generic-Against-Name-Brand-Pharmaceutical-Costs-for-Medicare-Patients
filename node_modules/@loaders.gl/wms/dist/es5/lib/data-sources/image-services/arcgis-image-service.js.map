{"version":3,"file":"arcgis-image-service.js","names":["ArcGISImageService","props","mergeImageServiceProps","fetch","getFetchFunction","info","parameters","Error","options","url","extra","first","Object","entries","key","value","Array","isArray","toUpperCase","join","String","response","ok","ImageSource","toLowerCase","includes"],"sources":["../../../../../src/lib/data-sources/image-services/arcgis-image-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {ImageType} from '@loaders.gl/images';\nimport type {ImageSourceMetadata, GetImageParameters} from '../image-source';\nimport {ImageSource} from '../image-source';\nimport {ImageServiceProps, mergeImageServiceProps, getFetchFunction} from './image-service';\n\nexport class ArcGISImageService extends ImageSource {\n  static type: 'arcgis-image-server' = 'arcgis-image-server';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('ImageServer');\n\n  props: Required<ImageServiceProps>;\n  fetch: (url: string, options?: RequestInit) => Promise<Response>;\n\n  constructor(props: ImageServiceProps) {\n    super();\n    this.props = mergeImageServiceProps(props);\n    this.fetch = getFetchFunction(this.props);\n  }\n\n  // ImageSource (normalized endpoints)\n\n  async getMetadata(): Promise<ImageSourceMetadata> {\n    return (await this.info()) as ImageSourceMetadata;\n    // TODO - normalize metadata\n  }\n\n  async getImage(parameters: GetImageParameters): Promise<ImageType> {\n    throw new Error('not implemented');\n    // TODO - Map generic parameters to ArcGIS specific parameters\n    // return await this.exportImage(parameters);\n  }\n\n  // ImageServer endpoints\n\n  async info(): Promise<unknown> {\n    // We just need a JSON parsing...\n    // return this.getUrl({path: '', ...options});\n    throw new Error('not implemented');\n  }\n\n  /** \n   * Form a URL to an ESRI ImageServer\n   // https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer/exportImage?bbox=${bounds[0]},${bounds[1]},${bounds[2]},${bounds[3]}&bboxSR=4326&size=${width},${height}&imageSR=102100&time=&format=jpgpng&pixelType=U8&noData=&noDataInterpretation=esriNoDataMatchAny&interpolation=+RSP_NearestNeighbor&compression=&compressionQuality=&bandIds=&mosaicRule=&renderingRule=&f=image`,\n   */\n  exportImage(options: {\n    boundingBox: [number, number, number, number];\n    boundingBoxSR?: string;\n    width: number;\n    height: number;\n    imageSR?: string;\n    time?: never;\n    format?: 'jpgpng';\n    pixelType?: 'U8';\n    noData?: never;\n    noDataInterpretation?: 'esriNoDataMatchAny';\n    interpolation?: '+RSP_NearestNeighbor';\n    compression?: never;\n    compressionQuality?: never;\n    bandIds?: never;\n    mosaicRule?: never;\n    renderingRule?: never;\n    f?: 'image';\n  }): Promise<ImageType> {\n    // See WMSService.getMap()\n    throw new Error('not implemented');\n  }\n\n  // URL creators\n\n  infoURL(options: {parameters?: Record<string, unknown>}): string {\n    return this.props.url;\n    // return this.getUrl({path: '', ...options});\n  }\n\n  /** \n   * Form a URL to an ESRI ImageServer\n   // https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer/exportImage?bbox=${bounds[0]},${bounds[1]},${bounds[2]},${bounds[3]}&bboxSR=4326&size=${width},${height}&imageSR=102100&time=&format=jpgpng&pixelType=U8&noData=&noDataInterpretation=esriNoDataMatchAny&interpolation=+RSP_NearestNeighbor&compression=&compressionQuality=&bandIds=&mosaicRule=&renderingRule=&f=image`,\n   */\n  exportImageURL(options: {\n    boundingBox: [number, number, number, number];\n    boundingBoxSR?: string;\n    width: number;\n    height: number;\n    imageSR?: string;\n    time?: never;\n    format?: 'jpgpng';\n    pixelType?: 'U8';\n    noData?: never;\n    noDataInterpretation?: 'esriNoDataMatchAny';\n    interpolation?: '+RSP_NearestNeighbor';\n    compression?: never;\n    compressionQuality?: never;\n    bandIds?: never;\n    mosaicRule?: never;\n    renderingRule?: never;\n    f?: 'image';\n  }): string {\n    // const {boundingBox} = options;\n    // const bbox = `bbox=${boundingBox[0]},${boundingBox[1]},${boundingBox[2]},${boundingBox[3]}`;\n    // const size = `size=${width},${height}`;\n    // return this.getUrl({path: 'exportImage'});\n    return this.props.url;\n  }\n\n  // INTERNAL METHODS\n\n  /**\n   * @note protected, since perhaps getWMSUrl may need to be overridden to handle certain backends?\n   * @note if override is common, maybe add a callback prop?\n   * */\n  protected getUrl(options: Record<string, unknown>, extra?: Record<string, unknown>): string {\n    let url = `${this.props.url}`;\n    let first = true;\n    for (const [key, value] of Object.entries(options)) {\n      url += first ? '?' : '&';\n      first = false;\n      if (Array.isArray(value)) {\n        url += `${key.toUpperCase()}=${value.join(',')}`;\n      } else {\n        url += `${key.toUpperCase()}=${value ? String(value) : ''}`;\n      }\n    }\n    return url;\n  }\n\n  /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */\n  protected async checkResponse(response: Response) {\n    if (!response.ok) {\n      // } || response.headers['content-type'] === WMSErrorLoader.mimeTypes[0]) {\n      // const arrayBuffer = await response.arrayBuffer();\n      // const error = await WMSErrorLoader.parse(arrayBuffer, this.loadOptions);\n      throw new Error('error');\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAIA;AACA;AAA4F;AAAA;AAAA,IAE/EA,kBAAkB;EAAA;EAAA;EAO7B,4BAAYC,KAAwB,EAAE;IAAA;IAAA;IACpC;IAAQ;IAAA;IACR,MAAKA,KAAK,GAAG,IAAAC,oCAAsB,EAACD,KAAK,CAAC;IAC1C,MAAKE,KAAK,GAAG,IAAAC,8BAAgB,EAAC,MAAKH,KAAK,CAAC;IAAC;EAC5C;;EAAC;IAAA;IAAA;MAAA,6EAID;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACgB,IAAI,CAACI,IAAI,EAAE;cAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAE1B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,0EAED,kBAAeC,UAA8B;QAAA;UAAA;YAAA;cAAA;gBAAA,MACrC,IAAIC,KAAK,CAAC,iBAAiB,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAGnC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,sEAID;QAAA;UAAA;YAAA;cAAA;gBAAA,MAGQ,IAAIA,KAAK,CAAC,iBAAiB,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACnC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;IAMD,qBAAYC,OAkBX,EAAsB;MAErB,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;IACpC;;EAAC;IAAA;IAAA;;IAID,iBAAQC,OAA+C,EAAU;MAC/D,OAAO,IAAI,CAACP,KAAK,CAACQ,GAAG;IAEvB;;EAAC;IAAA;IAAA;IAMD,wBAAeD,OAkBd,EAAU;MAKT,OAAO,IAAI,CAACP,KAAK,CAACQ,GAAG;IACvB;;EAAC;IAAA;IAAA;;IAQD,gBAAiBD,OAAgC,EAAEE,KAA+B,EAAU;MAC1F,IAAID,GAAG,aAAM,IAAI,CAACR,KAAK,CAACQ,GAAG,CAAE;MAC7B,IAAIE,KAAK,GAAG,IAAI;MAChB,mCAA2BC,MAAM,CAACC,OAAO,CAACL,OAAO,CAAC,qCAAE;QAA/C;UAAOM,GAAG;UAAEC,KAAK;QACpBN,GAAG,IAAIE,KAAK,GAAG,GAAG,GAAG,GAAG;QACxBA,KAAK,GAAG,KAAK;QACb,IAAIK,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;UACxBN,GAAG,cAAOK,GAAG,CAACI,WAAW,EAAE,cAAIH,KAAK,CAACI,IAAI,CAAC,GAAG,CAAC,CAAE;QAClD,CAAC,MAAM;UACLV,GAAG,cAAOK,GAAG,CAACI,WAAW,EAAE,cAAIH,KAAK,GAAGK,MAAM,CAACL,KAAK,CAAC,GAAG,EAAE,CAAE;QAC7D;MACF;MACA,OAAON,GAAG;IACZ;;EAAC;IAAA;IAAA;MAAA,+EAGD,kBAA8BY,QAAkB;QAAA;UAAA;YAAA;cAAA;gBAAA,IACzCA,QAAQ,CAACC,EAAE;kBAAA;kBAAA;gBAAA;gBAAA,MAIR,IAAIf,KAAK,CAAC,OAAO,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAE3B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EA/HqCgB,wBAAW;AAAA;AAAA,8BAAtCvB,kBAAkB,UACQ,qBAAqB;AAAA,8BAD/CA,kBAAkB,aAEZ,UAACS,GAAW;EAAA,OAAcA,GAAG,CAACe,WAAW,EAAE,CAACC,QAAQ,CAAC,aAAa,CAAC;AAAA"}