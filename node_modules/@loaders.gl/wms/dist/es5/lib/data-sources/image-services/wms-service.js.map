{"version":3,"file":"wms-service.js","names":["WMSService","props","ImageLoader","WMSErrorLoader","WMSCapabilitiesLoader","WMSFeatureInfoLoader","WMSLayerDescriptionLoader","mergeImageServiceProps","fetch","getFetchFunction","loadOptions","wms","throwOnError","getCapabilities","parameters","getMap","wmsParameters","vendorParameters","url","getCapabilitiesURL","response","arrayBuffer","_checkResponse","parse","capabilities","options","getMapURL","_parseError","getFeatureInfoURL","info_format","TextDecoder","decode","describeLayerURL","getLegendGraphicURL","service","version","request","_getWMSUrl","styles","undefined","srs","format","first","Object","entries","key","value","Array","isArray","toUpperCase","join","String","encodeURI","contentType","headers","ok","mimeTypes","includes","error","parseSync","Error","ImageSource","toLowerCase"],"sources":["../../../../../src/lib/data-sources/image-services/wms-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n/* eslint-disable camelcase */\n\nimport type {ImageType} from '@loaders.gl/images';\nimport {ImageLoader} from '@loaders.gl/images';\n\nimport type {ImageSourceMetadata, GetImageParameters} from '../image-source';\nimport {ImageSource} from '../image-source';\nimport {ImageServiceProps, getFetchFunction, mergeImageServiceProps} from './image-service';\n\nimport type {WMSCapabilities, WMSFeatureInfo, WMSLayerDescription} from '../../wms/wms-types';\nimport {WMSCapabilitiesLoader} from '../../../wms-capabilities-loader';\nimport {WMSFeatureInfoLoader} from '../../../wip/wms-feature-info-loader';\nimport {WMSLayerDescriptionLoader} from '../../../wip/wms-layer-description-loader';\nimport {WMSErrorLoader} from '../../../wms-error-loader';\n\ntype WMSCommonParameters = {\n  /** In case the endpoint supports multiple services */\n  service?: 'WMS';\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.1.1' | '1.3.0';\n};\n\nexport type WMSGetCapabilitiesParameters = WMSCommonParameters & {\n  /** Request type */\n  request?: 'GetCapabilities';\n};\n\nexport type WMSGetMapParameters = WMSCommonParameters & {\n  /** Request type */\n  request?: 'GetMap';\n  /** Layers to render */\n  layers: string | string[];\n  /** Styling */\n  styles?: unknown;\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** srs for the image (not the bounding box) */\n  srs?: string;\n  /** requested format for the return image */\n  format?: 'image/png';\n};\n\n// https://imagery.pasda.psu.edu/arcgis/services/pasda/UrbanTreeCanopy_Landcover/MapServer/WmsServer?SERVICE=WMS&\nexport type WMSGetFeatureInfoParameters = WMSCommonParameters & {\n  /** Request type */\n  request?: 'GetFeatureInfo';\n\n  /** x coordinate for the feature info request */\n  x: number;\n  /** y coordinate for the feature info request */\n  y: number;\n  /** list of layers to query (could be different from rendered layers) */\n  query_layers: string[];\n  /** MIME type of returned feature info */\n  info_format?: 'text/plain' | 'application/vnd.ogc.gml';\n\n  /** Layers to render */\n  layers: string[];\n  /** Styling */\n  styles?: unknown;\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** srs for the image (not the bounding box) */\n  srs?: string;\n  /** requested format for the return image */\n  format?: 'image/png';\n};\n\nexport type WMSDescribeLayerParameters = WMSCommonParameters & {\n  /** Request type */\n  request?: 'DescribeLayer';\n};\n\nexport type WMSGetLegendGraphicParameters = WMSCommonParameters & {\n  /** Request type */\n  request?: 'GetLegendGraphic';\n};\n\n/**\n * The WMSService class provides\n * - provides type safe methods to form URLs to a WMS service\n * - provides type safe methods to query and parse results (and errors) from a WMS service\n * - implements the ImageService interface\n * @note Only the URL parameter conversion is supported. XML posts are not supported.\n */\nexport class WMSService extends ImageSource {\n  static type: 'wms' = 'wms';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('wms');\n\n  props: Required<ImageServiceProps>;\n  fetch: (url: string, options?: RequestInit) => Promise<Response>;\n  capabilities: WMSCapabilities | null = null;\n\n  /** A list of loaders used by the WMSService methods */\n  readonly loaders = [\n    ImageLoader,\n    WMSErrorLoader,\n    WMSCapabilitiesLoader,\n    WMSFeatureInfoLoader,\n    WMSLayerDescriptionLoader\n  ];\n\n  /** Create a WMSService */\n  constructor(props: ImageServiceProps) {\n    super();\n    this.props = mergeImageServiceProps(props);\n    this.fetch = getFetchFunction(this.props);\n    this.props.loadOptions = {\n      ...this.props.loadOptions,\n      // We want error responses to throw exceptions, the WMSErrorLoader can do this\n      wms: {...this.props.loadOptions?.wms, throwOnError: true}\n    };\n  }\n\n  // ImageSource implementation\n  getMetadata(): Promise<ImageSourceMetadata> {\n    return this.getCapabilities();\n  }\n\n  getImage(parameters: GetImageParameters): Promise<ImageType> {\n    return this.getMap(parameters);\n  }\n\n  // WMS Service API Stubs\n\n  /** Get Capabilities */\n  async getCapabilities(\n    wmsParameters?: WMSGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSCapabilities> {\n    const url = this.getCapabilitiesURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    const capabilities = await WMSCapabilitiesLoader.parse(arrayBuffer, this.props.loadOptions);\n    this.capabilities = capabilities;\n    return capabilities;\n  }\n\n  /** Get a map image */\n  async getMap(\n    options: WMSGetMapParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<ImageType> {\n    const url = this.getMapURL(options, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    try {\n      return await ImageLoader.parse(arrayBuffer, this.props.loadOptions);\n    } catch {\n      throw this._parseError(arrayBuffer);\n    }\n  }\n\n  /** Get Feature Info for a coordinate */\n  async getFeatureInfo(\n    options: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSFeatureInfo> {\n    const url = this.getFeatureInfoURL(options, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await WMSFeatureInfoLoader.parse(arrayBuffer, this.props.loadOptions);\n  }\n\n  /** Get Feature Info for a coordinate */\n  async getFeatureInfoText(\n    options: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<string> {\n    options = {...options, info_format: 'text/plain'};\n    const url = this.getFeatureInfoURL(options, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  /** Get more information about a layer */\n  async describeLayer(\n    options: WMSDescribeLayerParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSLayerDescription> {\n    const url = this.describeLayerURL(options, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await WMSLayerDescriptionLoader.parse(arrayBuffer, this.props.loadOptions);\n  }\n\n  /** Get an image with a semantic legend */\n  async getLegendGraphic(\n    options: WMSGetLegendGraphicParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<ImageType> {\n    const url = this.getLegendGraphicURL(options, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    try {\n      return await ImageLoader.parse(arrayBuffer, this.props.loadOptions);\n    } catch {\n      throw this._parseError(arrayBuffer);\n    }\n  }\n\n  // Typed URL creators\n  // For applications that want full control of fetching and parsing\n\n  /** Generate a URL for the GetCapabilities request */\n  getCapabilitiesURL(\n    wmsParameters?: WMSGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSGetCapabilitiesParameters> = {\n      service: 'WMS',\n      version: '1.1.1',\n      request: 'GetCapabilities',\n      ...wmsParameters,\n      ...vendorParameters\n    };\n    return this._getWMSUrl(options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetMap request */\n  getMapURL(\n    wmsParameters: WMSGetMapParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSGetMapParameters> = {\n      service: 'WMS',\n      version: '1.1.1',\n      request: 'GetMap',\n      // layers: [],\n      // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],\n      // width: 1200,\n      // height: 900,\n      styles: undefined,\n      srs: 'EPSG:4326',\n      format: 'image/png',\n      ...wmsParameters,\n      ...vendorParameters\n    };\n    return this._getWMSUrl(options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetFeatureInfo request */\n  getFeatureInfoURL(\n    wmsParameters: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSGetFeatureInfoParameters> = {\n      service: 'WMS',\n      version: '1.1.1',\n      request: 'GetFeatureInfo',\n      // layers: [],\n      // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],\n      // width: 1200,\n      // height: 900,\n      // x: undefined!,\n      // y: undefined!,\n      // query_layers: [],\n      srs: 'EPSG:4326',\n      format: 'image/png',\n      info_format: 'text/plain',\n      styles: undefined,\n      ...wmsParameters,\n      ...vendorParameters\n    };\n    return this._getWMSUrl(options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetFeatureInfo request */\n  describeLayerURL(\n    wmsParameters: WMSDescribeLayerParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSDescribeLayerParameters> = {\n      service: 'WMS',\n      version: '1.1.1',\n      request: 'DescribeLayer',\n      ...wmsParameters,\n      ...vendorParameters\n    };\n    return this._getWMSUrl(options, vendorParameters);\n  }\n\n  getLegendGraphicURL(\n    wmsParameters: WMSGetLegendGraphicParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSGetLegendGraphicParameters> = {\n      service: 'WMS',\n      version: '1.1.1',\n      request: 'GetLegendGraphic',\n      ...wmsParameters,\n      ...vendorParameters\n    };\n    return this._getWMSUrl(options, vendorParameters);\n  }\n\n  // INTERNAL METHODS\n\n  /**\n   * @note case _getWMSUrl may need to be overridden to handle certain backends?\n   * */\n  protected _getWMSUrl(\n    options: Record<string, unknown>,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    let url = this.props.url;\n    let first = true;\n    for (const [key, value] of Object.entries(options)) {\n      url += first ? '?' : '&';\n      first = false;\n      if (Array.isArray(value)) {\n        url += `${key.toUpperCase()}=${value.join(',')}`;\n      } else {\n        url += `${key.toUpperCase()}=${value ? String(value) : ''}`;\n      }\n    }\n    return encodeURI(url);\n  }\n\n  /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */\n  protected _checkResponse(response: Response, arrayBuffer: ArrayBuffer): void {\n    const contentType = response.headers['content-type'];\n    if (!response.ok || WMSErrorLoader.mimeTypes.includes(contentType)) {\n      const error = WMSErrorLoader.parseSync(arrayBuffer, this.props.loadOptions);\n      throw new Error(error);\n    }\n  }\n\n  /** Error situation detected */\n  protected _parseError(arrayBuffer: ArrayBuffer): Error {\n    const error = WMSErrorLoader.parseSync(arrayBuffer, this.props.loadOptions);\n    return new Error(error);\n  }\n}\n"],"mappings":"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"}