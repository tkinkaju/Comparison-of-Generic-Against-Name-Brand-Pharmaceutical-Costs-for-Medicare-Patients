"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseWMSCapabilities = parseWMSCapabilities;
exports.parseWMSError = parseWMSError;
exports.parseWMSFeatureInfo = parseWMSFeatureInfo;
exports.parseWMSLayerDescription = parseWMSLayerDescription;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _xml = require("@loaders.gl/xml");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function parseWMSCapabilities(text, options) {
  var parsedXML = _xml.XMLLoader.parseTextSync(text, options);
  var xmlCapabilities = parsedXML.WMT_MS_Capabilities || parsedXML.WMS_Capabilities || parsedXML;
  return extractCapabilities(xmlCapabilities);
}

function extractCapabilities(xml) {
  var _xml$Service, _xml$Service2, _xml$Capability, _xml$Service3, _xml$Service3$Keyword;
  var capabilities = {
    name: ((_xml$Service = xml.Service) === null || _xml$Service === void 0 ? void 0 : _xml$Service.Name) || 'unnamed',
    title: (_xml$Service2 = xml.Service) === null || _xml$Service2 === void 0 ? void 0 : _xml$Service2.Title,
    keywords: [],
    requests: {},
    layer: extractLayer((_xml$Capability = xml.Capability) === null || _xml$Capability === void 0 ? void 0 : _xml$Capability.Layer),
    raw: xml
  };
  var _iterator = _createForOfIteratorHelper(((_xml$Service3 = xml.Service) === null || _xml$Service3 === void 0 ? void 0 : (_xml$Service3$Keyword = _xml$Service3.KeywordList) === null || _xml$Service3$Keyword === void 0 ? void 0 : _xml$Service3$Keyword.Keyword) || []),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var keyword = _step.value;
      capabilities.keywords.push(keyword);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  for (var _i = 0, _Object$entries = Object.entries(((_xml$Capability2 = xml.Capability) === null || _xml$Capability2 === void 0 ? void 0 : _xml$Capability2.Request) || {}); _i < _Object$entries.length; _i++) {
    var _xml$Capability2;
    var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
      name = _Object$entries$_i[0],
      xmlRequest = _Object$entries$_i[1];
    capabilities.requests[name] = extractRequest(name, xmlRequest);
  }
  return capabilities;
}

function extractRequest(name, xmlRequest) {
  var format = xmlRequest === null || xmlRequest === void 0 ? void 0 : xmlRequest.Format;
  var mimeTypes = Array.isArray(format) ? format : [format];
  return {
    name: name,
    mimeTypes: mimeTypes
  };
}

function extractLayer(xmlLayer) {
  var layer = {
    name: xmlLayer === null || xmlLayer === void 0 ? void 0 : xmlLayer.Name,
    title: xmlLayer === null || xmlLayer === void 0 ? void 0 : xmlLayer.Title,
    srs: (xmlLayer === null || xmlLayer === void 0 ? void 0 : xmlLayer.SRS) || [],
    layers: []
  };

  var xmlLayers = getXMLArray(xmlLayer === null || xmlLayer === void 0 ? void 0 : xmlLayer.Layer);
  var _iterator2 = _createForOfIteratorHelper(xmlLayers),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _layer$layers;
      var xmlSubLayer = _step2.value;
      (_layer$layers = layer.layers) === null || _layer$layers === void 0 ? void 0 : _layer$layers.push(extractLayer(xmlSubLayer));
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return layer;
}
function getXMLArray(xmlValue) {
  if (Array.isArray(xmlValue)) {
    return xmlValue;
  }
  if (xmlValue) {
    return [xmlValue];
  }
  return [];
}

function parseWMSFeatureInfo(text, options) {
  var _parsedXML$FeatureInf;
  var parsedXML = _xml.XMLLoader.parseTextSync(text, options);
  var xmlFeatureInfo = ((_parsedXML$FeatureInf = parsedXML.FeatureInfoResponse) === null || _parsedXML$FeatureInf === void 0 ? void 0 : _parsedXML$FeatureInf.FIELDS) || [];
  var xmlFeatures = Array.isArray(xmlFeatureInfo) ? xmlFeatureInfo : [xmlFeatureInfo];
  return {
    features: xmlFeatures.map(function (xmlFeature) {
      return extractFeature(xmlFeature);
    })
  };
}
function extractFeature(xmlFeature) {
  var xmlFields = xmlFeature || {};
  return {
    attributes: xmlFields,
    type: '',
    bounds: {
      bottom: 0,
      top: 0,
      left: 0,
      right: 0
    }
  };
}

function parseWMSLayerDescription(text, options) {
  var parsedXML = _xml.XMLLoader.parseTextSync(text, options);
  return parsedXML;
}

function parseWMSError(text, options) {
  var _XMLLoader$parseTextS, _parsedXML$ServiceExc, _parsedXML$ogcServic;
  var parsedXML = (_XMLLoader$parseTextS = _xml.XMLLoader.parseTextSync) === null || _XMLLoader$parseTextS === void 0 ? void 0 : _XMLLoader$parseTextS.call(_xml.XMLLoader, text, options);
  var serviceExceptionXML = (parsedXML === null || parsedXML === void 0 ? void 0 : (_parsedXML$ServiceExc = parsedXML.ServiceExceptionReport) === null || _parsedXML$ServiceExc === void 0 ? void 0 : _parsedXML$ServiceExc.ServiceException) || (parsedXML === null || parsedXML === void 0 ? void 0 : (_parsedXML$ogcServic = parsedXML['ogc:ServiceExceptionReport']) === null || _parsedXML$ogcServic === void 0 ? void 0 : _parsedXML$ogcServic['ogc:ServiceException']);
  var message = typeof serviceExceptionXML === 'string' ? serviceExceptionXML : serviceExceptionXML['#text'] || serviceExceptionXML.code || 'Unknown error';
  return message;
}
//# sourceMappingURL=parse-wms.js.map