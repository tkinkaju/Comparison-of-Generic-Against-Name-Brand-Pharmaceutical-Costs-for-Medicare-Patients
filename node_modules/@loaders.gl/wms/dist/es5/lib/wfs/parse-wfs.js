"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseWFSCapabilities = parseWFSCapabilities;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _xml = require("@loaders.gl/xml");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function parseWFSCapabilities(text, options) {
  var _options;
  options = _objectSpread(_objectSpread({}, options), {}, {
    xml: _objectSpread(_objectSpread({}, (_options = options) === null || _options === void 0 ? void 0 : _options.xml), {}, {
      removeNSPrefix: true
    })
  });
  var parsedXML = _xml.XMLLoader.parseTextSync(text, options);
  var xmlCapabilities = parsedXML.Capabilities || parsedXML;
  return uncapitalizeKeys(xmlCapabilities);
}
function uncapitalizeKeys(object) {
  if (object && (0, _typeof2.default)(object) === 'object') {
    var newObject = {};
    for (var _i = 0, _Object$entries = Object.entries(object); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];
      newObject[uncapitalize(key)] = uncapitalizeKeys(value);
    }
    return newObject;
  }
  return object;
}

function uncapitalize(str) {
  return typeof str === 'string' ? str.charAt(0).toLowerCase() + str.slice(1) : str;
}
//# sourceMappingURL=parse-wfs.js.map