{"version":3,"file":"data-source.js","names":[],"sources":["../../../src/wip/data-source.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n/** General data source class */\n// export abstract class DataSource {};\n// export type DataSourceMetadata = {};\n\n// ImageSource\n\n// Tile Source\n\n/** Data source that serves data by tile index *\nexport abstract class TileDataSource extends DataSource {};\n\n// Image Tile Data Source\n\nexport type ImageTileDataSourceCapabilities = {\n}\n\nexport type ImageTile = Record<string, any>;\n\nexport type FeatureInfo = {};\n\nexport abstract class ImageTileDataSource extends TileDataSource {\n  source: ImageDataSource;\n  \n  constructor(source: ImageDataSource) {\n    super();\n    this.source = source;\n  }\n\n  getCapabilities(): Promise<ImageTileDataSourceCapabilities> {\n    return this.source.getCapabilities();\n  }\n\n  getTile({x, y, z, width, height, layers, parameters}): Promise<ImageType> {\n    const boundingBox = this.getBoundingBoxFromTileIndex(x, y, z);\n    return this.source.getImage({boundingBox, width, height, layers, parameters});\n  }\n\n  getFeatureInfo(): FeatureInfo | null {\n    return null;\n  }\n\n  getBoundingBoxFromTileIndex(x: number, y: number, z: number): [number, number, number, number] {\n    return [0, 0, 1, 1];\n  }\n}\n\n// Vector Tile Source\n\nexport type VectorTileDataSourceCapabilities = {\n  // check tile.json\n}\n\nexport type VectorTile = Record<string, any>;\n\nexport abstract class VectorTileDataSource extends TileDataSource {\n  abstract getCapabilities(): Promise<VectorTileDataSourceCapabilities>;\n  abstract getTile({x, y, z, width, height, layers, parameters}): Promise<VectorTile>;\n}\n\n*/\n"],"mappings":""}