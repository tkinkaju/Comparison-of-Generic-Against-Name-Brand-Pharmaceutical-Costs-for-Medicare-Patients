
/**
 * @salte-auth/popup JavaScript Library v1.0.0-rc.1
 *
 * @license MIT (https://github.com/salte-auth/popup/blob/master/LICENSE)
 *
 * Made with â™¥ by Nick Woodward <nick@salte.io>, Dave Woodward <dave@salte.io>
 */

import { Handler, Utils, SalteAuthError } from '@salte-auth/salte-auth';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var asyncToGenerator = _asyncToGenerator;

class Popup extends Handler {
  constructor(config) {
    super(config);
    this.config = Utils.Common.defaults(this.config, {
      window: {
        name: '@salte-auth/tab',
        height: 600,
        width: 600
      }
    });
  }

  get name() {
    return 'popup';
  }

  get auto() {
    return false;
  }

  open(options) {
    var _this = this;

    return asyncToGenerator(function* () {
      const top = window.innerHeight / 2 - _this.config.window.height / 2 + window.screenTop;
      const left = window.innerWidth / 2 - _this.config.window.width / 2 + window.screenLeft;
      const popupWindow = window.open(options.url, _this.config.window.name, "height=".concat(_this.config.window.height, ", width=").concat(_this.config.window.width, ", status=yes, toolbar=no, menubar=no, location=no, top=").concat(top, ", left=").concat(left));

      if (!popupWindow) {
        throw new SalteAuthError({
          message: 'We were unable to open the popup window, its likely that the request was blocked.',
          code: 'popup_blocked'
        });
      }

      popupWindow.focus(); // TODO: Find a better way of tracking when a Window closes.

      return new Promise(resolve => {
        const checker = setInterval(() => {
          try {
            if (!popupWindow.closed) {
              // This could throw cross-domain errors, so we need to silence them.
              if (popupWindow.location.href.indexOf(options.redirectUrl) !== 0) return;
              const parsed = Utils.URL.parse(popupWindow.location);
              popupWindow.close();
              setTimeout(() => resolve(parsed));
            }

            clearInterval(checker);
          } catch (e) {} // eslint-disable-line

        }, 100);
      });
    })();
  }

}

export { Popup };
//# sourceMappingURL=popup.mjs.map
