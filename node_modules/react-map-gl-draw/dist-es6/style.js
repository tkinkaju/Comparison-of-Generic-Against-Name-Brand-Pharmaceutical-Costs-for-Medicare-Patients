"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFeatureStyle = getFeatureStyle;
exports.getEditHandleStyle = getEditHandleStyle;
exports.HIDDEN_CLICKABLE_STYLE = void 0;

var _constants = require("./constants");

var RECT_STYLE = {
  x: -6,
  y: -6,
  height: 12,
  width: 12
};
var CLOSING_RECT_STYLE = {
  x: -10,
  y: -10,
  height: 20,
  width: 20
};
var DEFAULT_STROKE_WIDTH = 2;
var HIGHLIGHTED_STROKE_WIDTH = 4;
var DEFAULT_RADIUS = 8;
var HIDDEN_CLICKABLE_STYLE = {
  fill: '#000',
  opacity: 0
};
exports.HIDDEN_CLICKABLE_STYLE = HIDDEN_CLICKABLE_STYLE;

function getFeatureStyle(_ref) {
  var feature = _ref.feature,
      state = _ref.state;
  var style = {
    stroke: state === _constants.RENDER_STATE.SELECTED || state === _constants.RENDER_STATE.HOVERED ? '#7ac943' : state === _constants.RENDER_STATE.UNCOMMITTED || state === _constants.RENDER_STATE.CLOSING ? '#a9a9a9' : '#000',
    strokeWidth: DEFAULT_STROKE_WIDTH,
    fill: state === _constants.RENDER_STATE.INACTIVE ? '#333333' : state === _constants.RENDER_STATE.HOVERED ? '#7ac943' : state === _constants.RENDER_STATE.SELECTED ? '#ffff00' : state === _constants.RENDER_STATE.UNCOMMITTED || state === _constants.RENDER_STATE.CLOSING ? '#a9a9a9' : '#000000',
    fillOpacity: state === _constants.RENDER_STATE.INACTIVE ? 0.1 : state === _constants.RENDER_STATE.SELECTED ? 0.7 : state === _constants.RENDER_STATE.HOVERED ? 0.5 : state === _constants.RENDER_STATE.UNCOMMITTED || state === _constants.RENDER_STATE.CLOSING ? 0.3 : 1
  };
  var renderType = feature.properties ? feature.properties.renderType : feature.renderType;

  switch (renderType) {
    case _constants.RENDER_TYPE.POINT:
      style.r = DEFAULT_RADIUS;
      break;

    case _constants.RENDER_TYPE.LINE_STRING:
      style.fill = 'none';
      break;

    case _constants.RENDER_TYPE.POLYGON:
      if (state === _constants.RENDER_STATE.CLOSING) {
        style.strokeDasharray = '4,2';
      }

      break;

    case _constants.RENDER_TYPE.RECTANGLE:
      if (state === _constants.RENDER_STATE.UNCOMMITTED) {
        style.strokeDasharray = '4,2';
      }

      break;

    default:
  }

  return style;
}

function getEditHandleStyle(_ref2) {
  var feature = _ref2.feature,
      index = _ref2.index,
      state = _ref2.state;
  var style = {
    fill: state === _constants.RENDER_STATE.INACTIVE ? '#ffffff' : state === _constants.RENDER_STATE.SELECTED || state === _constants.RENDER_STATE.CLOSING ? '#ffff00' : state === _constants.RENDER_STATE.HOVERED ? '#7ac943' : state === _constants.RENDER_STATE.UNCOMMITTED ? '#a9a9a9' : '#000000',
    fillOpacity: state === _constants.RENDER_STATE.INACTIVE ? 1 : state === _constants.RENDER_STATE.HOVERED ? 1 : state === _constants.RENDER_STATE.SELECTED || state === _constants.RENDER_STATE.CLOSING ? 0.8 : state === _constants.RENDER_STATE.UNCOMMITTED ? 0.3 : 1,
    stroke: state === _constants.RENDER_STATE.SELECTED || state === _constants.RENDER_STATE.HOVERED || state === _constants.RENDER_STATE.CLOSING ? '#7ac943' : '#000',
    strokeWidth: state === _constants.RENDER_STATE.SELECTED || state === _constants.RENDER_STATE.CLOSING ? HIGHLIGHTED_STROKE_WIDTH : DEFAULT_STROKE_WIDTH,
    r: DEFAULT_RADIUS
  };
  var renderType = feature.properties ? feature.properties.renderType : feature.renderType;

  switch (renderType) {
    case _constants.RENDER_TYPE.POINT:
      style.fill = state === _constants.RENDER_STATE.INACTIVE ? '#333333' : state === _constants.RENDER_STATE.SELECTED ? '#ffff00' : state === _constants.RENDER_STATE.HOVERED ? '#7ac943' : state === _constants.RENDER_STATE.UNCOMMITTED ? 'none' : '#000000';
      style.stroke = state === _constants.RENDER_STATE.SELECTED ? '#7ac943' : state === _constants.RENDER_STATE.UNCOMMITTED ? 'none' : '#000';
      break;

    case _constants.RENDER_TYPE.LINE_STRING:
    case _constants.RENDER_TYPE.POLYGON:
    case _constants.RENDER_TYPE.RECTANGLE:
      if (state === _constants.RENDER_STATE.CLOSING) {
        Object.assign(style, CLOSING_RECT_STYLE);
      } else {
        Object.assign(style, RECT_STYLE);
      }

      break;

    default:
  }

  return style;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,