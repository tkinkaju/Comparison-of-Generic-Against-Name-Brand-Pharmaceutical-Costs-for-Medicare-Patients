"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findClosestPointOnLineSegment = findClosestPointOnLineSegment;
exports.isNumeric = isNumeric;
exports.parseElemDataAttributes = parseElemDataAttributes;

function inBounds(p1, p2, p) {
  var bounds = [Math.min(p1[0], p2[0]), Math.max(p1[0], p2[0]), Math.min(p1[1], p2[1]), Math.max(p1[1], p2[1])];
  return p[0] >= bounds[0] && p[0] <= bounds[1] && p[1] >= bounds[2] && p[1] <= bounds[3];
}

function findClosestPointOnLineSegment(p1, p2, p) {
  // line
  var k = (p2[1] - p1[1]) / (p2[0] - p1[0]);
  var b = p1[1] - k * p1[0]; // vertical line

  if (!isFinite(k)) {
    var q = [p1[0], p[1]];
    return inBounds(p1, p2, q) ? q : null;
  } // p is on line [p1, p2]


  if (p[0] * k + b - p[1] === 0) {
    return inBounds(p1, p2, p) ? p : null;
  }

  var qx = (k * p[1] + p[0] - k * b) / (k * k + 1);
  var qy = k * qx + b;
  return inBounds(p1, p2, [qx, qy]) ? [qx, qy] : null;
}

function isNumeric(n) {
  return !Array.isArray(n) && !isNaN(parseFloat(n)) && isFinite(n);
}

function parseElemDataAttributes(elem) {
  var data = elem && elem.dataset;

  if (!data) {
    return null;
  }

  var featureIndex = data.featureIndex;
  var vertexIndex = data.vertexIndex;
  return {
    type: data.type,
    operation: data.operation,
    featureIndex: isNumeric(featureIndex) ? Number(featureIndex) : undefined,
    vertexIndex: isNumeric(vertexIndex) ? Number(vertexIndex) : undefined
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJpbkJvdW5kcyIsInAxIiwicDIiLCJwIiwiYm91bmRzIiwiTWF0aCIsIm1pbiIsIm1heCIsImZpbmRDbG9zZXN0UG9pbnRPbkxpbmVTZWdtZW50IiwiayIsImIiLCJpc0Zpbml0ZSIsInEiLCJxeCIsInF5IiwiaXNOdW1lcmljIiwibiIsIkFycmF5IiwiaXNBcnJheSIsImlzTmFOIiwicGFyc2VGbG9hdCIsInBhcnNlRWxlbURhdGFBdHRyaWJ1dGVzIiwiZWxlbSIsImRhdGEiLCJkYXRhc2V0IiwiZmVhdHVyZUluZGV4IiwidmVydGV4SW5kZXgiLCJ0eXBlIiwib3BlcmF0aW9uIiwiTnVtYmVyIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQSxTQUFTQSxRQUFULENBQWtCQyxFQUFsQixFQUFnQ0MsRUFBaEMsRUFBOENDLENBQTlDLEVBQTJEO0FBQ3pELE1BQU1DLE1BQU0sR0FBRyxDQUNiQyxJQUFJLENBQUNDLEdBQUwsQ0FBU0wsRUFBRSxDQUFDLENBQUQsQ0FBWCxFQUFnQkMsRUFBRSxDQUFDLENBQUQsQ0FBbEIsQ0FEYSxFQUViRyxJQUFJLENBQUNFLEdBQUwsQ0FBU04sRUFBRSxDQUFDLENBQUQsQ0FBWCxFQUFnQkMsRUFBRSxDQUFDLENBQUQsQ0FBbEIsQ0FGYSxFQUdiRyxJQUFJLENBQUNDLEdBQUwsQ0FBU0wsRUFBRSxDQUFDLENBQUQsQ0FBWCxFQUFnQkMsRUFBRSxDQUFDLENBQUQsQ0FBbEIsQ0FIYSxFQUliRyxJQUFJLENBQUNFLEdBQUwsQ0FBU04sRUFBRSxDQUFDLENBQUQsQ0FBWCxFQUFnQkMsRUFBRSxDQUFDLENBQUQsQ0FBbEIsQ0FKYSxDQUFmO0FBT0EsU0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRQyxNQUFNLENBQUMsQ0FBRCxDQUFkLElBQXFCRCxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVFDLE1BQU0sQ0FBQyxDQUFELENBQW5DLElBQTBDRCxDQUFD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Zmxvd1xuXG5mdW5jdGlvbiBpbkJvdW5kcyhwMTogbnVtYmVyW10sIHAyOiBudW1iZXJbXSwgcDogbnVtYmVyW10pIHtcbiAgY29uc3QgYm91bmRzID0gW1xuICAgIE1hdGgubWluKHAxWzBdLCBwMlswXSksXG4gICAgTWF0aC5tYXgocDFbMF0sIHAyWzBdKSxcbiAgICBNYXRoLm1pbihwMVsxXSwgcDJbMV0pLFxuICAgIE1hdGgubWF4KHAxWzFdLCBwMlsxXSlcbiAgXTtcblxuICByZXR1cm4gcFswXSA+PSBib3VuZHNbMF0gJiYgcFswXSA8PSBib3VuZHNbMV0gJiYgcFsxXSA+PSBib3VuZHNbMl0gJiYgcFsxXSA8PSBib3VuZHNbM107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2xvc2VzdFBvaW50T25MaW5lU2VnbWVudChwMTogbnVtYmVyW10sIHAyOiBudW1iZXJbXSwgcDogbnVtYmVyW10pIHtcbiAgLy8gbGluZVxuICBjb25zdCBrID0gKHAyWzFdIC0gcDFbMV0pIC8gKHAyWzBdIC0gcDFbMF0pO1xuICBjb25zdCBiID0gcDFbMV0gLSBrICogcDFbMF07XG5cbiAgLy8gdmVydGljYWwgbGluZVxuICBpZiAoIWlzRmluaXRlKGspKSB7XG4gICAgY29uc3QgcSA9IFtwMVswXSwgcFsxXV07XG4gICAgcmV0dXJuIGluQm91bmRzKHAxLCBwMiwgcSkgPyBxIDogbnVsbDtcbiAgfVxuXG4gIC8vIHAgaXMgb24gbGluZSBbcDEsIHAyXVxuICBpZiAocFswXSAqIGsgKyBiIC0gcFsxXSA9PT0gMCkge1xuICAgIHJldHVybiBpbkJvdW5kcyhwMSwgcDIsIHApID8gcCA6IG51bGw7XG4gIH1cblxuICBjb25zdCBxeCA9IChrICogcFsxXSArIHBbMF0gLSBrICogYikgLyAoayAqIGsgKyAxKTtcbiAgY29uc3QgcXkgPSBrICogcXggKyBiO1xuXG4gIHJldHVybiBpbkJvdW5kcyhwMSwgcDIsIFtxeCwgcXldKSA/IFtxeCwgcXldIDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtZXJpYyhuOiBhbnkpIHtcbiAgcmV0dXJuICFBcnJheS5pc0FycmF5KG4pICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRWxlbURhdGFBdHRyaWJ1dGVzKGVsZW06IEhUTUxFbGVtZW50KSB7XG4gIGNvbnN0IGRhdGEgPSBlbGVtICYmIGVsZW0uZGF0YXNldDtcbiAgaWYgKCFkYXRhKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBmZWF0dXJlSW5kZXggPSBkYXRhLmZlYXR1cmVJbmRleDtcbiAgY29uc3QgdmVydGV4SW5kZXggPSBkYXRhLnZlcnRleEluZGV4O1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogZGF0YS50eXBlLFxuICAgIG9wZXJhdGlvbjogZGF0YS5vcGVyYXRpb24sXG4gICAgZmVhdHVyZUluZGV4OiBpc051bWVyaWMoZmVhdHVyZUluZGV4KSA/IE51bWJlcihmZWF0dXJlSW5kZXgpIDogdW5kZWZpbmVkLFxuICAgIHZlcnRleEluZGV4OiBpc051bWVyaWModmVydGV4SW5kZXgpID8gTnVtYmVyKHZlcnRleEluZGV4KSA6IHVuZGVmaW5lZFxuICB9O1xufVxuIl19